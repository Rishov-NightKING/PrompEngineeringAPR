private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . filter ( q - > ! DEPRECATED_QUALIFIERS . contains ( q ) ) . filter ( q - > ! LIBRARY_QUALIFIERS . contains ( q ) ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
public RuntimeFilterManager ( QueryWorkUnit workUnit , DrillbitContext drillbitContext ) { this . rootWrapper = workUnit . getRootWrapper ( ) ; this . drillbitContext = drillbitContext ; lineSeparator = System . lineSeparator ( ) ; }
private void activateMarkers ( ) { if ( ! fGerritClient . getRepository ( ) . getServerInfo ( ) . isAnonymous ( ) ) { String value = Messages . ChangeDetailEditor_EGerriTipValue UIUtils . showDialogTip ( MARKERS_KEY , headerSection . getShell ( ) , Messages . EGerriTip , value ) ; } }
public void testCreate ( ) throws StripeException { Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( "currency" , "usd" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , " / v1 / orders" , params ) ; }
private FirewallRule findById ( List < FirewallRule > collection , String id ) { FirewallRule result = null ; for ( FirewallRule rule : collection ) { if ( rule . id ( ) . equals ( id ) ) { return rule ; } } return result ; }
public void addDownload ( String download ) { if ( ! downloads . contains ( download ) ) { downloads . add ( download ) ; } }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal ( CuObjectCodeActivationGlobal oldGlobal ) { for ( CuObjectCodeGlobalDetail oldDetail : oldGlobal . getObjectCodeGlobalDetails ( ) ) { CuObjectCodeGlobalDetail newDetail = ( CuObjectCodeGlobalDetail ) ObjectUtils . deepCopy ( oldDetail ) ; newDetail . setObjectId ( null ) ; newDetail . setDocumentNumber ( getDocumentNumber ( ) ) ; newDetail . setVersionNumber ( null ) ; getObjectCodeGlobalDetails ( ) . add ( newDetail ) ; } }
private void loadVncData ( HasConsoleModel model , KeyMaker keyMaker ) { if ( ! ( model . getDefaultConsoleModel ( ) instanceof VncConsoleModel ) ) { return ; } model . setSelectedProtocol ( ConsoleProtocol . VNC ) ; asVncConsoleModel ( model ) . setVncImplementation ( VncConsoleModel . ClientConsoleMode . valueOf ( clientStorage . getLocalItem ( keyMaker . make ( VNC_CLIENT_MODE ) ) ) ) ; }
private RuleApplication applyRule ( ) { SymbolAllocator symbolAllocator = new SymbolAllocator ( symbols ) ; Memo memo = new Memo ( idAllocator , plan ) ; Lookup lookup = Lookup . from ( memo : : resolve ) ; Optional < PlanNode > result = inTransaction ( session - > rule . apply ( memo . getNode ( memo . getRootGroup ( ) ) , lookup , idAllocator , symbolAllocator , session ) ) ; return new RuleApplication ( memo , lookup , symbolAllocator . getTypes ( ) , result ) ; }
public void testPushDownArray ( ) throws Exception { testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] = 1" , 3 , 2 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] = 100" , 0 , 1 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] < > 1" , 8 , 7 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 2 ] > 20" , 5 , 4 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] between 10 and 20" , 5 , 5 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 4 ] = 15" , 1 , 3 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 2 ] is not null" , 11 , 6 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 3 ] is null" , 11 , 7 ) ; }
default Direction getBubbleElevatorDirection ( ) { Block block = this . getBlockState ( ) . getBlock ( ) ; if ( block == Blocks . BUBBLE_COLUMN ) { return this . getBlockState ( ) . get ( BubbleColumnBlock . DRAG ) ? Direction . DOWN : Direction . UP ; } else { return block . getBubbleElevatorDirection ( this . getBlockState ( ) ) ; } }
public void testSystemPropertiesOverrideConfigurationValues ( ) { final String keyName = CoreConfig . MAX_CASSANDRA_CONNECTIONS . toString ( ) ; Configuration config = Configuration . getInstance ( ) ; try { Assert . assertEquals ( "75" , config . getStringProperty ( CoreConfig . MAX_CASSANDRA_CONNECTIONS ) ) ; System . setProperty ( keyName , "something else" ) ; Assert . assertEquals ( "something else" , config . getStringProperty ( CoreConfig . MAX_CASSANDRA_CONNECTIONS ) ) ; } finally { System . clearProperty ( keyName ) ; config . clearProperty ( keyName ) ; } }
public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
public boolean accept ( Issue issue ) { return ! issueShouldNotBeReported ( issue , excludedLinesByRule ( ) ) ; }
private HashMap < String , ArrayList < Order > > getBuyOrders ( ) { return buyOrders ; }
static Color getSystemForegroundColor ( Display display ) { ColorRegistry colorRegistry = JFaceResources . getColorRegistry ( ) ; Color foreground = colorRegistry . get ( JFacePreferences . INFORMATION_FOREGROUND_COLOR ) ; if ( foreground == null ) { return JFaceColors . getInformationViewerForegroundColor ( display ) ; } return foreground ; }
public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; if ( hasNoDefault ( switchStatementTree ) ) { if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , "Add a default case to this switch . " ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , "Complete cases by adding the missing enum constants or add a default case to this switch . " ) ; } } }
public synchronized String getAttribute ( ) { if ( fAttribute . equals ( NOT_SET ) ) { setAttribute ( ) ; } return fAttribute ; }
public DotRunnableThread ( final List < DotRunnable > allListeners ) { this . listeners = getListeners ( allListeners ) ; this . flushers = getFlushers ( allListeners ) ; start ( ) ; }
private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) { if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; } }
public Collection < Map . Entry < K , V > > scanAndFilterByEntry ( Predicate < ? super Map . Entry < K , V > > entryPredicate ) { return mainMap . entryStream ( ) . parallel ( ) . filter ( entryPredicate ) . collect ( Collectors . toCollection ( ArrayList : : new ) ) ; }
private boolean isValidChar ( final char c ) { return isValidChar ( regExp , c ) ; }
public boolean verifyEventIdentifier ( AbstractPlaceEvent event ) { boolean equals = Objects . equals ( getEditorIdentifier ( ) , event . getPlace ( ) . getIdentifier ( ) ) ; boolean equals1 = Objects . equals ( editorPlaceRequest , event . getPlace ( ) ) ; return ( equals && equals1 ) ; }
public void star ( ) throws IOException { this . entry . uri ( ) . path ( RtGist . PATH_ELEMENT_STAR ) . back ( ) . method ( "PUT" ) . fetch ( ) . as ( RestResponse . class ) . assertStatus ( HttpURLConnection . HTTP_NO_CONTENT ) ; }
public IssueOutputView ( Issue issue ) { this ( issue , null , null ) ; }
public ProcessEngineConfiguration setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; return this ; }
public void testSequenceFlowSupplier ( ) { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand ( parent , candidate , index , originalParent , originalIndex ) ; final Supplier < ViewConnector < SequenceFlow > > supplier = command . sequenceFlowSupplier ( ) ; final ViewConnector < SequenceFlow > viewConnector = supplier . get ( ) ; assertNotNull ( viewConnector ) ; assertNotNull ( viewConnector . getSourceConnection ( ) ) ; assertNotNull ( viewConnector . getTargetConnection ( ) ) ; assertNotNull ( viewConnector . getBounds ( ) ) ; assertNotNull ( viewConnector . getDefinition ( ) ) ; }
public long getSessionSeqId ( ) { if ( sessionSeqId == null ) { String sessionId = getContext ( ) . getEngineContext ( ) . getSessionId ( ) ; // The session may not exists for quartz jobs if ( getSessionDataContainer ( ) . isSessionExists ( sessionId ) ) { sessionSeqId = getSessionDataContainer ( ) . getEngineSessionSeqId ( sessionId ) ; } else { sessionSeqId = - 1L ; } } return sessionSeqId ; }
private boolean isTxnRelatedEvent ( final NotificationEvent event ) { return ( ( event . getEventType ( ) . equals ( MessageFactory . OPEN_TXN_EVENT ) ) || ( event . getEventType ( ) . equals ( MessageFactory . COMMIT_TXN_EVENT ) ) || ( event . getEventType ( ) . equals ( MessageFactory . ABORT_TXN_EVENT ) ) || ( event . getEventType ( ) . equals ( MessageFactory . ALLOC_WRITE_ID_EVENT ) && event . getDbName ( ) . equals ( dbName ) && event . getTableName ( ) . equals ( tableName ) ) ) ; }
public static void setBackground ( boolean async ) { background = async ; }
public V put ( @NonNull K key , @NonNull V value ) { map . put ( key , new Entry < > ( key , value , ++ time ) ) ; if ( map . size ( ) > maximumSize ) { purge ( ) ; } return value ; }
private static void setIfNotNullOrEmpty ( MongoProperties . Builder builder , MongoProp prop , String value ) { if ( value != null && value . trim ( ) . length ( ) > 0 ) { boolean isPassword = MongoProp . PASSWORD . equals ( prop ) ; if ( isPassword ) { value = Encr . decryptPasswordOptionallyEncrypted ( value ) ; } builder . set ( prop , value ) ; } }
public Mutation toMutation ( K key ) { V valueFromStorage = ( V ) valueDataConversion . fromStorage ( value ) ; return new Mutations . ReadWriteWithValue < > ( valueFromStorage , f ) ; }
Entry ( Map . Entry < String , String > e ) { this ( e . getKey ( ) , e . getValue ( ) ) ; }
private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( "\\ ? " ) [ 0 ] . split ( " : " , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) throw new URISyntaxException ( uri , "invalid path" ) ; else return parts [ 1 ] ; }
public void setItems ( Collection value ) { genVersionToBaseTemplate ( value ) ; final List < VmTemplate > sortedValues = sortTemplates ( value ) ; super . setItems ( sortedValues ) ; }
public void edit ( VolumeBrickModel object ) { table . edit ( object . getBricks ( ) ) ; Driver . driver . edit ( object ) ; }
public List < QuickFilter > getQuickFilters ( ) { return quickFilters ; }
public void testBounds ( ) { assertEquals ( LOW , fCondition . min ( ) ) ; int high = fCondition . max ( ) ; assertEquals ( HIGH , high ) ; }
public String weather ( ) { String result = restTemplate . getForObject ( "http :/ / " + WEATHER_SERVICE + " / weather" , String . class ) ; return "Weather Service Response : " + result ; }
public boolean isExtensionEnabled ( ) { if ( enablement != null ) { try { return new EnablementTester ( ) . evaluate ( enablement ) . equals ( EvaluationResult . TRUE ) ; } catch ( CoreException e ) { // TODO : handle exception } } return true ; }
public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { if ( null != manager ) { return manager ; } manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; return manager ; }
private void startSyncFolderOperation ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; // perform folder synchronization RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager ( EmbeddedCacheManager cacheManager ) { if ( cacheManager == null ) { throw new IllegalArgumentException ( "cacheManager cannot be null" ) ; } ProtobufMetadataManagerImpl metadataManager = ( ProtobufMetadataManagerImpl ) cacheManager . getGlobalComponentRegistry ( ) . getComponent ( ProtobufMetadataManager . class ) ; if ( metadataManager == null ) { throw new IllegalStateException ( "ProtobufMetadataManager not initialised yet ! " ) ; } return metadataManager ; }
public void onSessionKeyUpdate ( SessionKey sessionKey ) { synchronized ( DistributedHerder . this ) { log . info ( "Session key updated" ) ; DistributedHerder . this . sessionKey = sessionKey . key ( ) ; if ( isLeader ( ) && keyRotationIntervalMs > 0 ) { DistributedHerder . this . keyExpiration = sessionKey . creationTimestamp ( ) + keyRotationIntervalMs ; } } }
public String getAuthorizationUrl ( OAuthConfig config ) { // User must provide these 5 elements to the service builder String url = String . format ( AUTHORIZE_URL , OAuthEncoder . encode ( config . getApiKey ( ) ) , OAuthEncoder . encode ( config . getCallback ( ) ) , OAuthEncoder . encode ( config . getScope ( ) ) , OAuthEncoder . encode ( config . getState ( ) ) ) ; return url ; }
public Object getParameter ( String name ) { final HostThread currentHostThread = fCurrentHostThread ; if ( currentHostThread == null ) { return null ; } if ( name . equals ( CriticalPathModule . PARAM_WORKER ) ) { /* Try to find the worker for the critical path */ IAnalysisModule mod = getModule ( ) ; if ( ( mod != null ) && ( mod instanceof CriticalPathModule ) ) { LttngWorker worker = new LttngWorker ( currentHostThread , "" , 0 ) ; // $NON - NLS - 1$ return worker ; } } return null ; }
public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectException ( runnable . toString ( ) , runnable ) ; }
protected CONNECTCXFClient ( ServicePortDescriptor < T > portDescriptor , String url , AssertionType assertion , ServicePortBuilder < T > portBuilder ) { serviceEndpoint = super . configureBasePort ( portBuilder . createPort ( ) , url , assertion != null ? assertion . getTransactionTimeout ( ) : null ) ; configCNCheck ( ) ; }
public < V > Setting < V > get ( SimpleUri id , Class < V > valueType ) { Setting setting = settings . get ( id ) ; Class settingValueClass = setting . getValueClass ( ) ; if ( ! settingValueClass . equals ( valueType ) ) { throw new ClassCastException ( "Expected a Setting of type " + valueType . getName ( ) + " , found a Setting of type " + settingValueClass . getName ( ) + " for setting " + id . toString ( ) ) ; } return ( Setting < V > ) setting ; }
public String getCustomField ( String fieldName ) { if ( customFields == null ) return null ; for ( CustomField f : customFields ) { if ( f . getName ( ) . equals ( fieldName ) ) { return f . getValue ( ) ; } } return null ; }
private CommandCall duplicateCommandForDifferentElement ( CommandCall commandCall , Element element ) { String expression = commandCall . getExpression ( ) ; if ( expression . equals ( "" ) ) { expression = element . getText ( ) ; } return new CommandCall ( null , commandCall . getCommand ( ) , element , expression , commandCall . getResource ( ) ) ; }
public M fromBytes ( byte [ ] messageBuffer ) { if ( deserializer == null ) deserializer = new ThriftBinaryDeserializer ( ) ; try { M message = typeRef . safeNewInstance ( ) ; deserializer . deserialize ( message , messageBuffer ) ; return message ; } catch ( TException e ) { logWarning ( "failed to deserialize" , e ) ; return null ; } catch ( Throwable e ) { // Arbitrary bytes can cause a runtime exception in Thrift logWarning ( "failed to deserialize" , e ) ; return null ; } }
public void showPage ( Control page ) { if ( page . isDisposed ( ) || page . getParent ( ) != this ) { return ; } currentPage = page ; // show new page page . setVisible ( true ) ; layout ( true ) ; // hide old ( and all others ) * after * new page has been made visible in // order to avoid flashing Control [ ] children = getChildren ( ) ; for ( Control element : children ) { if ( element != page && ! element . isDisposed ( ) ) { element . setVisible ( false ) ; } } }
public void info ( String message , Object . . . objects ) { LOG . info ( message , objects ) ; }
public String getLinkAt ( int offset ) { // Check if there is a link at the offset for ( int i = 0 ; i < linkRanges . size ( ) ; i ++ ) { if ( linkRanges . get ( i ) . isOffsetInRange ( offset ) ) { return hrefs . get ( i ) ; } } return "" ; }
public String toString ( ) { return "FileListCacheValue { fileNames = " + getFileNames ( ) + " } " ; }
protected Control createControl ( Composite parent ) { // Configure table CTConfiguration config = new CTConfiguration ( parent , CTConfiguration . STYLE_GRID ) ; config . setHorizontalAlignment ( SWT . CENTER ) ; config . setCellSelectionEnabled ( false ) ; config . setColumnSelectionEnabled ( false ) ; config . setRowSelectionEnabled ( false ) ; config . setColumnHeaderLayout ( CTConfiguration . COLUMN_HEADER_LAYOUT_FILL_EQUAL ) ; config . setRowHeaderLayout ( CTConfiguration . ROW_HEADER_LAYOUT_DEFAULT ) ; this . table = new ComponentTable ( parent , SWT . FULL_SELECTION , config ) ; return this . table . getControl ( ) ; } // Review : Please not here . This is not a standard SWT table .
public boolean isEnabled ( ) { return true ; }
void verifyMetadata ( MessageMetadata metadata ) throws Exception { if ( metadata . getMessageMetadataType ( ) != MessageType . LOG_ENTRY_MESSAGE || metadata . getSnapshotTimestamp ( ) != srcGlobalSnapshot ) { log . error ( "Wrong message metadata { } , expecting type { } snapshot { } " , metadata , MessageType . LOG_ENTRY_MESSAGE , srcGlobalSnapshot ) ; throw new IllegalArgumentException ( "wrong type of message" ) ; } }
public void setVmBackup ( VmBackup value ) { this . vmBackup = value ; }
public void setPrice1 ( int price3 ) { if ( price3 < 0 || price3 > 10000 ) { throw new IllegalArgumentException ( "Invalid price : " + price3 ) ; // Compliant } if ( true ) { assert price3 > 1000 ; // Noncompliant } }
public String evaluate ( TransactionContext txnCtx , Input < Object > [ ] args ) { assert args . length == 2 : "repeat takes exactly two arguments" ; var text = ( String ) args [ 0 ] . value ( ) ; if ( text == null ) { return null ; } var repetitions = ( int ) args [ 1 ] . value ( ) ; if ( repetitions <= 0 ) { return "" ; } else { return text . repeat ( repetitions ) ; } }
void setActionBarNotificationBarColor ( MaterialColor color ) { getSupportActionBar ( ) . setBackgroundDrawable ( new ColorDrawable ( color . toActionBarColor ( this ) ) ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { getWindow ( ) . setStatusBarColor ( color . toStatusBarColor ( this ) ) ; } }
public static ProjectBuildType getProjectType ( IProject project ) { // -- -- -- -- -- -- AUTOTOOLS // Autotools has an 'Autotools' nature by which we can identify it . if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; if ( projIsManaged ) return ProjectBuildType . MANAGED_MAKEFILE ; else return ProjectBuildType . OTHER ; // E . g a manual makefile . }
protected long download ( T object , File outFile ) throws IOException { try { openObjectFunction . open ( object , outFile ) ; } catch ( IOException e ) { throw e ; } return outFile . length ( ) ; }
private Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) { Collection < VCastResult > results = null ; try { results = dataStore . getAllResults ( ) ; } catch ( OseeCoreException ex ) { throw ex ; } return results ; }
public PinotQueryGeneratorContext visitFilter ( FilterNode node , PinotQueryGeneratorContext context ) { context = node . getSource ( ) . accept ( this , context ) ; requireNonNull ( context , "context is null" ) ; LinkedHashMap < VariableReferenceExpression , Selection > selections = context . getSelections ( ) ; String filter = node . getPredicate ( ) . accept ( pinotFilterExpressionConverter , ( var ) - > selections . get ( var ) ) . getDefinition ( ) ; return context . withFilter ( filter ) . withOutputColumns ( node . getOutputVariables ( ) ) ; }
private Space ( String enumeratedValue ) { this . enumeratedValue = enumeratedValue ; }
public Guid getStorageDomainIdForPoolByType ( Guid pool , StorageDomainType type ) { Guid returnValue = Guid . Empty ; List < storage_domains > domains = getAllForStoragePool ( pool ) ; for ( storage_domains domain : domains ) { if ( domain . getstorage_domain_type ( ) == type ) { returnValue = domain . getId ( ) ; break ; } } return returnValue ; }
public void lock ( T id ) throws InterruptedException { threadsLocked . inc ( ) ; try { idsLocked . update ( 1 ) ; lockInternal ( id ) ; } finally { threadsLocked . dec ( ) ; } }
public RunLengthEncodedBlock ( Block value , int positionCount ) { requireNonNull ( value , "value is null" ) ; if ( value . getPositionCount ( ) != 1 ) { throw new IllegalArgumentException ( format ( "Expected value to contain a single position but has % s positions" , value . getPositionCount ( ) ) ) ; } // value can not be a RunLengthEncodedBlock because this could cause stack overflow in some of the methods if ( value instanceof RunLengthEncodedBlock ) { throw new IllegalArgumentException ( format ( "Value can not be an instance of a % s" , getClass ( ) . getName ( ) ) ) ; } if ( positionCount < 0 ) { throw new IllegalArgumentException ( "positionCount is negative" ) ; } this . value = value ; this . positionCount = positionCount ; }
public Message . Request request ( ) { Message . Request request = callback . request ( ) ; if ( retryConsistencyLevel != null && retryConsistencyLevel != request . consistency ( ) ) return request . copy ( retryConsistencyLevel ) ; else return request ; }
public void init ( FilterConfig filterConfig ) throws ServletException { directoryAllowed = Context . getConfig ( ) . getBoolean ( "media . directoryAllowed" ) ; }
public void testGet ( ) { assertEquals ( 1 , cache . get ( 1 , new Callable < Integer > ( ) { @Override public Integer call ( ) { return 2 ; } } ) ) ; }
public boolean isValid ( Object [ ] value , ConstraintValidatorContext context ) { if ( value . length != 3 ) { throw new IllegalArgumentException ( "Unexpected method signature" ) ; } // one or both limits are unbounded = > always consistent if ( value [ 1 ] == null || value [ 2 ] == null ) { return true ; } return ( ( Date ) value [ 1 ] ) . before ( ( Date ) value [ 2 ] ) ; }
private static boolean monoNativeFailure ( Either < Utils . CommandResult > result ) { if ( result == null || ! result . isSuccess ( ) ) { return true ; } else { Utils . CommandResult commandResult = result . get ( ) ; return monoNativeFailure ( commandResult . output ) || monoNativeFailure ( commandResult . error ) ; } }
private void removeAppBar ( ) { DWORD dwABM = new DWORD ( ) ; APPBARDATA ABData = new APPBARDATA . ByReference ( ) ; ABData . cbSize . setValue ( ABData . size ( ) ) ; dwABM . setValue ( ShellAPI . ABM_REMOVE ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( dwABM , ABData ) ; assertNotNull ( result ) ; }
public boolean couldMatch ( ScriptPath path ) { String event = path . eventLower ; return event . startsWith ( "mythicmob" ) && path . eventArgLowerAt ( 2 ) . equals ( "spawns" ) ; }
void init ( ) { homeDir = resolveHomeDir ( ) ; this . initAccessOfDirectories ( ) ; this . initAccessOfHosts ( ) ; }
protected Sequence getServicesSequence ( DsfSession session , ILaunch launch , IProgressMonitor rm ) { return new ServicesLaunchSequence ( session , ( GdbLaunch ) launch , rm ) ; }
public AdvanceResult advanceNursery ( final AdvancingNursery advanceInfo , final Workbook workbook ) throws RuleException , FieldbookException { return this . namingConventionService . advanceNursery ( advanceInfo , workbook ) ; }
public org . ovirt . engine . api . model . Cluster update ( org . ovirt . engine . api . model . Cluster incoming ) { // TODO MM : Dear code reviewer ! I'm not sure if this is really cool . I'd assume mapping should happen in mappers , but their powers are limited . Please advise . MacPool macPool = incoming . getMacPool ( ) ; macPool . setId ( MacPoolIdByIdOrName . get ( macPool . getId ( ) , macPool . getName ( ) , this ) ) ; return performUpdate ( incoming , new QueryIdResolver < > ( VdcQueryType . GetClusterById , IdQueryParameters . class ) , VdcActionType . UpdateCluster , new UpdateParametersProvider ( ) ) ; }
protected @NonNull TmfViewer createLeftChildViewer ( @Nullable Composite parent ) { String analysisId = NonNullUtils . nullToEmptyString ( getViewSite ( ) . getSecondaryId ( ) ) ; return new AbstractSegmentStoreScatterChartTreeViewer ( Objects . requireNonNull ( parent ) ) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider ( ITmfTrace trace ) { IAnalysisModule module = TmfTraceUtils . getAnalysisModuleOfClass ( trace , IAnalysisModule . class , analysisId ) ; if ( module instanceof ISegmentStoreProvider ) { return ( ISegmentStoreProvider ) module ; } else { Activator . getDefault ( ) . logError ( "Analysis module " + analysisId + " is not a segment store provider" ) ; // $NON - NLS - 1$ // $NON - NLS - 2$ return null ; } } } ; }
public void testReservedSkippableBeforeStreamIdentifier ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { - 0x7f , 0x06 , 0x00 , 0x00 , 's' , 'n' , 'e' , 't' , 't' , 'y' } ) ; assertFalse ( channel . writeInbound ( in ) ) ; }
public void set ( String name , Property property ) throws PropertyNotFoundException { Field field = getType ( ) . getField ( name ) ; if ( field == null ) { Property removedProperty = computeRemovedProperty ( name ) ; if ( removedProperty != null ) { removedProperty . set ( name , property ) ; } return ; } children . put ( property . getName ( ) , property ) ; setIsModified ( ) ; }
public int andCardinality ( Container x ) { if ( this . getCardinality ( ) == 0 ) return 0 ; else if ( x . getCardinality ( ) == 0 ) return 0 ; else { if ( x instanceof ArrayContainer ) return andCardinality ( ( ArrayContainer ) x ) ; else if ( x instanceof BitmapContainer ) return andCardinality ( ( BitmapContainer ) x ) ; return andCardinality ( ( RunContainer ) x ) ; } }
public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { // worker net address is unmodifiable after initialization , no locking is needed workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
public void setUp ( ) { params . put ( "CallSid" , "CA1234567890ABCDE" ) ; params . put ( "Caller" , " + 14158675309" ) ; params . put ( "Digits" , "1234" ) ; params . put ( "From" , " + 14158675309" ) ; params . put ( "To" , " + 18005551212" ) ; }
public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { for ( Object cookie : cookiesToClear ) { Cookie realCookie = null ; if ( cookie instanceof String ) { realCookie = new Cookie ( ( String ) cookie , null ) ; String cookiePath = request . getContextPath ( ) + " / " ; realCookie . setPath ( cookiePath ) ; realCookie . setMaxAge ( 0 ) ; } else if ( cookie instanceof Cookie ) { realCookie = ( Cookie ) cookie ; } response . addCookie ( realCookie ) ; } }
private MethodHandles . Lookup getMethodHandleLookup ( Class < ? > endpointClass ) { return MethodHandles . publicLookup ( ) . in ( endpointClass ) ; }
public void channelOpen ( ChannelHandlerContext ctx , ChannelStateEvent e ) throws Exception { if ( maxConnections > 0 ) { if ( numConnections . incrementAndGet ( ) > maxConnections ) { ctx . getChannel ( ) . close ( ) ; numConnections . decrementAndGet ( ) ; log . info ( "Accepted connection above limit ( { } ) . Dropping . " , maxConnections ) ; } } super . channelOpen ( ctx , e ) ; }
public Builder from ( int . . . nums ) { this . matchers . add ( ( from , to , msg ) - > Arrays . binarySearch ( nums , from ) >= 0 ) ; return this ; }
public B channel ( Class < ? extends C > channelClass ) { return channelFactory ( new ReflectiveChannelFactory < C > ( ObjectUtil . checkNotNull ( channelClass , "channelClass" ) ) ) ; }
public void getActiveConditions_shouldGetActiveConditions ( ) { List < Condition > activeConditions = conditionService . getActiveConditions ( patientService . getPatient ( 2 ) ) ; Condition firstActiveCondition = activeConditions . get ( 0 ) ; Condition secondActiveCondition = activeConditions . get ( 1 ) ; String firstUUID = "2cc6880e - 2c46 - 11e4 - 9138 - a6c5e4d20fb7" ; String secondUUID = "2cc6880e - 2c46 - 15e4 - 9038 - a6c5e4d22fb7" ; Assert . assertTrue ( activeConditions . size ( ) == 2 ) ; Assert . assertEquals ( "2cc6880e - 2c46 - 11e4 - 9138 - a6c5e4d20fb7" , firstActiveCondition . getUuid ( ) ) ; Assert . assertEquals ( "2cc6880e - 2c46 - 15e4 - 9038 - a6c5e4d22fb7" , secondActiveCondition . getUuid ( ) ) ; }
public synchronized Inode < ? > getInodeOrNull ( ) { if ( ! fullPathExists ( ) ) { return null ; } List < Inode < ? > > inodeList = mLockList . getInodes ( ) ; return inodeList . get ( inodeList . size ( ) - 1 ) ; }
private static < T > Set < T > findDuplicates ( Collection < T > list ) { Set < T > duplicates = new HashSet < > ( ) ; Set < T > uniques = new HashSet < > ( ) ; list . stream ( ) . forEach ( t - > { if ( ! uniques . add ( t ) ) { duplicates . add ( t ) ; } } ) ; return duplicates ; }
public boolean next ( ) throws IOException { for ( ; ; ) { LogQueueEntry t = queue . poll ( ) ; if ( t == null ) { return false ; } refName = t . lc . getRefName ( ) ; updateIndex = t . lc . getUpdateIndex ( ) ; entry = t . lc . getReflogEntry ( ) ; boolean include = includeDeletes || entry != null ; skipShadowed ( refName , updateIndex ) ; add ( t ) ; if ( include ) { return true ; } } }
void remove ( MessageGroup group ) { Object correlationKey = group . getGroupId ( ) ; this . messageStore . removeMessageGroup ( correlationKey ) ; this . groupIds . remove ( correlationKey ) ; }
public void sendOffsetsToTransaction ( Map < TopicPartition , OffsetAndMetadata > offsets , String consumerGroupId ) throws ProducerFencedException { if ( ! cachedGroupMetadata . groupId ( ) . equals ( consumerGroupId ) ) { // Generally this logic should only be triggered once during first call . log . warn ( "Cached consumer groupId changed from { } to { } . If the old group id is not empty , this indicates an abuse of this API" , cachedGroupMetadata . groupId ( ) , consumerGroupId ) ; cachedGroupMetadata = new ConsumerGroupMetadata ( consumerGroupId , JoinGroupRequest . UNKNOWN_GENERATION_ID , JoinGroupRequest . UNKNOWN_MEMBER_ID , Optional . empty ( ) ) ; } sendOffsetsToTransactionInternal ( offsets , cachedGroupMetadata , false ) ; }
public boolean cancel ( final Exception rootReason ) { if ( transitionCancel ( rootReason ) ) { final Exception reason = new CancellationException ( rootReason ) ; try { traceFailure ( reason ) ; } catch ( Throwable ex ) { LOGGER . warn ( "Exception thrown in logging trace for failure ! " , new Exception ( ex ) ) ; } getSettableDelegate ( ) . fail ( reason ) ; return true ; } return false ; }
private int allVersionsCombined ( ) { return formatIdentifier > > > SHIFT_FORMAT_IDENTIFIER | formatVersion > > > SHIFT_FORMAT_VERSION ; }
protected void writeJDBCStoreConnection ( XMLExtendedStreamWriter writer , SimpleConnectionFactoryConfiguration configuration ) throws XMLStreamException { writer . writeStartElement ( Element . SIMPLE_CONNECTION ) ; writeOptional ( writer , Attribute . CONNECTION_URL , configuration . connectionUrl ( ) ) ; writeOptional ( writer , Attribute . DRIVER_CLASS , configuration . driverClass ( ) ) ; writeOptional ( writer , Attribute . USERNAME , configuration . username ( ) ) ; writeOptional ( writer , Attribute . PASSWORD , configuration . password ( ) ) ; writer . writeEndElement ( ) ; }
private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
private String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
@Override public float getPressure ( ) { return 0 ; }
private boolean checkForJournalFlush ( ) { // System . err . printf ( "checkForJournalFlush : queue size = % d ; journal size = % d\n" , queue . size ( ) , journal . size ( ) ) ; // System . err . printf ( "checkForJournalFlush : QueueBatchSize = % d ; MaxQueueThreshold = % d ; JournalThresholdSize = % d\n" , // QueueBatchSize , MaxQueueThreshold , JournalThresholdSize ) ; if ( QueueBatchSize == 0 ) return true ; if ( queue . size ( ) >= QueueBatchSize ) // Based on number of queued commits // The MaxQueueThreshold is handled in processDelayedReplayQueue . return true ; boolean journalSizeFlush = ( JournalThresholdSize > 0 && journal . size ( ) > JournalThresholdSize ) ; if ( journalSizeFlush ) // JENA - 1222 // Based on Journal file growing large in terms of bytes return true ; // No test for excessive queue length ( MaxQueueThreshold ) . // That happens in notifyCommit ( writer exit ) . return false ; }
private ProjectState newProjectState ( ProjectConfig local ) { PrologEnvironment . Factory envFactory = null ; GitRepositoryManager gitMgr = null ; ProjectControl . AssistedFactory projectControlFactory = null ; RulesCache rulesCache = null ; SitePaths sitePaths = null ; List < CommentLinkInfo > commentLinks = null ; all . put ( local . getProject ( ) . getNameKey ( ) , new ProjectState ( sitePaths , projectCache , allProjectsName , projectControlFactory , envFactory , gitMgr , rulesCache , commentLinks , local ) ) ; return all . get ( local . getProject ( ) . getNameKey ( ) ) ; }
public static Collection < PersonaAccount > getPersonaAccountsForAccount ( long accountId ) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts . account_id = " + accountId + "AND p . status_id != " + Persona . PersonaStatus . DELETED . getStatusId ( ) ; CentralRepository cr = CentralRepository . getInstance ( ) ; if ( cr != null ) { PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback ( ) ; cr . executeSelectSQL ( queryClause , queryCallback ) ; return queryCallback . getPersonaAccountsList ( ) ; } return new ArrayList < > ( ) ; }
public boolean hasMultipleValues ( final String dimension ) { if ( isVirtualColumn ( dimension ) ) { return virtualColumns . getVirtualColumn ( dimension ) . capabilities ( dimension ) . hasMultipleValues ( ) ; } final Column column = index . getColumn ( dimension ) ; if ( column == null || ! columnSupportsFiltering ( column ) ) { return false ; } else { return column . getCapabilities ( ) . hasMultipleValues ( ) ; } }
public void resumeNode ( String id ) { waitServerUntilAvailable . apply ( getNode ( id ) ) ; api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
public IStyledLabelProvider [ ] getLabelProviders ( ) { if ( fLabelProviders == null ) { fLabelProviders = CHEProviderSettings . getCCallHierarchyLabelProviders ( ) ; } return fLabelProviders ; }
public void registerOperations ( ManagementResourceRegistration resourceRegistration ) { if ( showResources ) { resourceRegistration . registerOperationHandler ( ShowJaxrsResourcesHandler . DEFINITION , new ShowJaxrsResourcesHandler ( ) ) ; } else { resourceRegistration . registerOperationHandler ( ADD_DEFINITION , JaxrsSubsystemAdd . INSTANCE ) ; resourceRegistration . registerOperationHandler ( REMOVE_DEFINITION , ReloadRequiredRemoveStepHandler . INSTANCE ) ; } }
public int hashCode ( ) { int result = processId . hashCode ( ) ; result = 31 * result + taskId . hashCode ( ) ; result = 31 * result + taskName . hashCode ( ) ; result = 31 * result + formName . hashCode ( ) ; return result ; }
public void stop ( final String reason ) { new Thread ( "Shutdown Thread" ) { @Override public void run ( ) { independentThreadStop ( reason , true ) ; } } . start ( ) ; }
public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
protected PostgreSqlEngine ( final PdbProperties properties , final String driver ) throws DatabaseEngineException { super ( driver , properties , Dialect . POSTGRESQL ) ; }
public synchronized void dispose ( ) { clearCachedSwingEditor ( ) ; }
public void run ( ) { if ( thread == null || ! Thread . currentThread ( ) . equals ( thread ) ) { thread = new Thread ( this ) ; thread . start ( ) ; } else { try { if ( logger . isInfoEnabled ( ) ) logger . info ( "Start reconnecting " + provider ) ; provider . register ( getUIService ( ) . getDefaultSecurityAuthority ( provider ) ) ; } catch ( OperationFailedException ex ) { logger . error ( "cannot re - register provider will keep going" , ex ) ; } } }
public void checkProperties ( Properties properties ) { properties . setProperty ( "log4j . shutdownCallbackRegistry" , "io . druid . common . config . Log4jShutdown" ) ; properties . setProperty ( "log4j . shutdownHookEnabled" , "true" ) ; }
public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_ _EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; // Know issue . Should be uncommented after https :/ / issues . jboss . org / browse / JBPM - 7038 will be fixed // assertDataIOSet ( emptySubprocess . getDataIOSet ( ) , EMPTY_VALUE ) ; }
private EmbeddedExpirableMetadata ( long lifespan , TimeUnit lifespanUnit , long maxIdle , TimeUnit maxIdleUnit , EntryVersion version ) { super ( version ) ; this . lifespan = lifespan < 0 ? lifespan : lifespanUnit . toMillis ( lifespan ) ; this . maxIdle = maxIdle < 0 ? maxIdle : maxIdleUnit . toMillis ( maxIdle ) ; }
protected void setMatcherString ( String pattern ) { if ( pattern . length ( ) == 0 ) { searchPattern = null ; } else { SearchPattern patternMatcher = new SearchPattern ( ) ; if ( pattern . indexOf ( ' * ' ) != 0 && pattern . indexOf ( ' ? ' ) != 0 && pattern . indexOf ( ' . ' ) != 0 ) { pattern = " * " + pattern ; // $NON - NLS - 1$ } patternMatcher . setPattern ( pattern ) ; searchPattern = patternMatcher ; } }
public DefaultEditorSession ( final ManagedSession session , final CanvasCommandManager < AbstractCanvasHandler > canvasCommandManager , final @Session SessionCommandManager < AbstractCanvasHandler > sessionCommandManager , final @Request SessionCommandManager < AbstractCanvasHandler > requestCommandManager , final ClientCommandRegistry < org . kie . workbench . common . stunner . core . command . Command < AbstractCanvasHandler , CanvasViolation > > clientCommandRegistry ) { this . session = session ; this . commandRegistry = clientCommandRegistry . setSession ( session ) ; this . sessionCommandManager = sessionCommandManager ; this . requestCommandManager = requestCommandManager ; this . canvasCommandManager = canvasCommandManager ; }
private String transformToHeaderValue ( Directive . . . directives ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < directives . length - 1 ; i ++ ) { sb . append ( directives [ i ] . headerValue ) . append ( " , " ) ; } sb . append ( directives [ directives . length - 1 ] . headerValue ) ; return sb . toString ( ) ; }
private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , "Unexpected uncaught exception encountered while " + "processing onFailure ( ) listener call in " + cl + " for agent " + plannedNode . displayName , e ) ; if ( e instanceof Error ) { throw e ; } } } }
public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . d ( TAG , " { } - Last MQ notif was yesterday" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , " { } - Last MQ notif was recent , do not notify" , getCurrentModeName ( ) ) ; return false ; } }
public CrewMember apply ( org . atlasapi . media . entity . CrewMember input ) { if ( input instanceof org . atlasapi . media . entity . Actor ) { return translateLegacyActor ( ( org . atlasapi . media . entity . Actor ) input ) ; } else if ( input != null ) { return translateLegacyCrewMember ( input ) ; } else { return null ; } }
public void testSocket ( ) throws Exception { Socket s = new Socket ( ) ; s . connect ( server . getLocalAddress ( ) ) ; assertEquals ( Collections . EMPTY_MAP , tagger . getLiveDescriptors ( ) ) ; s . close ( ) ; }
public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = requireNonNull ( expectedOutputSymbolCount , "expectedOutputSymbolCount is null" ) ; this . expectedRows = requireNonNull ( expectedRows , "expectedRows is null" ) ; }
protected Button getButton ( int id ) { return buttons . get ( id ) ; }
public void setInitializationData ( IConfigurationElement config , String propertyName , Object data ) { if ( data instanceof Map ) { Map < ? , ? > table = ( Map < ? , ? > ) data ; color = ( String ) table . get ( "color" ) ; // $NON - NLS - 1$ } }
public void addRequestCleanupHandler ( HttpServletRequest request ) { RequestContext . getActiveContext ( request ) . addRequestCleanupHandler ( new RequestCleanupHandler ( ) { @Override public void cleanup ( HttpServletRequest req ) { try { close ( ) ; } catch ( OperationException e ) { throw new NuxeoException ( e ) ; } } } ) ; }
public void visitStatementList ( PyStatementListTree pyStatementListTree ) { if ( isStmtListIncrementsNestingLevel ( pyStatementListTree ) ) { nestingLevelStack . peek ( ) . increment ( ) ; super . visitStatementList ( pyStatementListTree ) ; nestingLevelStack . peek ( ) . decrement ( ) ; } else { super . visitStatementList ( pyStatementListTree ) ; } }
private static void checkLxmlParseCall ( SubscriptionContext ctx ) { CallExpression callExpression = ( CallExpression ) ctx . syntaxNode ( ) ; if ( checkCallExpressionFqn ( callExpression , LXML_PARSE ) ) { CallExpression parserCall = getParserCall ( getArgValueAsCallExpression ( TreeUtils . nthArgumentOrKeyword ( 1 , "parser" , callExpression . arguments ( ) ) ) ) ; if ( parserCall != null && isUnsafeParserUsage ( parserCall ) ) { ctx . addIssue ( parserCall , MESSAGE ) . secondary ( callExpression , null ) ; } } }
public int getVisibility ( IBinding member ) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock ( getLinkage ( ) , record + MEMBERLIST ) ; return members . getAccessibility ( member ) ; } catch ( CoreException e ) { CCorePlugin . log ( e ) ; throw new IllegalArgumentException ( member . getName ( ) + " is not a member of " + getName ( ) ) ; // $NON - NLS - 1$ } }
public Map < String , Object > getDynamicTemplateData ( ) { if ( dynamicTemplateData == null ) { return Collections . < String , Object > emptyMap ( ) ; } return dynamicTemplateData ; }
public String getVersion ( ) { return version ; }
public List < User > getUsers ( PerunSession sess ) throws InternalErrorException , PrivilegeException { Utils . checkPerunSession ( sess ) ; // Authorization if ( ! AuthzResolver . isAuthorized ( sess , Role . PERUNOBSERVER ) ) { throw new PrivilegeException ( sess , "getUsers" ) ; } return getUsersManagerBl ( ) . getUsers ( sess ) ; }
protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
public List < BlockLocationInfo > getBlockLocations ( AlluxioURI alluxioURI ) { throw new UnsupportedOperationException ( "GetBlockLocations is not supported . " ) ; }
public CustomTxtParserWizard ( ) { super ( ) ; setWindowTitle ( Messages . CustomTxtParserInputWizardPage_windowTitle ) ; }
protected Provider < AdditionalProperties > createProvider ( String name ) { Provider < AdditionalProperties > p = mock ( Provider . class ) ; when ( p . getName ( ) ) . thenReturn ( name ) ; return p ; }
public static int mapApiToArtVersion ( int api ) { if ( api < 19 ) { return NO_VERSION ; } switch ( api ) { case 19 : case 20 : return 7 ; case 21 : return 39 ; case 22 : return 45 ; case 23 : return 64 ; case 24 : case 25 : return 79 ; case 26 : return 124 ; case 27 : return 131 ; default : // 144 is the current version in the master branch of AOSP as of 2018 - 05 - 22 return 144 ; } return 143 ; }
public void onAppendColumnEvent ( ) { AppendColumnEvent event = new AppendColumnEvent ( COLUMN_GROUP ) ; scenarioSimulationEventHandler . onEvent ( event ) ; verify ( scenarioSimulationEventHandler , times ( 1 ) ) . commonExecution ( eq ( scenarioSimulationContextLocal ) , isA ( AppendColumnCommand . class ) ) ; }
public static < T extends Widget > T serializeAndDeserialize ( T instance ) throws Exception { byte [ ] bytes = serialize ( instance ) ; T result = ( T ) deserialize ( bytes ) ; IDisplayAdapter displayAdapter = result . getDisplay ( ) . getAdapter ( IDisplayAdapter . class ) ; displayAdapter . attachThread ( ) ; return result ; }
public void onPreReceive ( ReceivePack rp , Collection < ReceiveCommand > commands ) { for ( PreReceiveHook hook : hooks ) { hook . onPreReceive ( rp , commands ) ; } }
public DescriptionBuilder withAdditionalAnnotations ( Annotation annotation , Annotation . . . additionalAnnotations ) { if ( annotation == null ) { throw new NullPointerException ( "Cannot add a null annotation" ) ; } annotations . add ( annotation ) ; withAdditionalAnnotations ( Arrays . asList ( additionalAnnotations ) ) ; return this ; }
public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( Listener ) activity ; } catch ( final ClassCastException e ) { Lg . e ( activity . getClass ( ) . getName ( ) , " should implement " , Listener . class . getName ( ) ) ; } }
private void preloadDataSet ( ) { preloadedDataSet = load ( iter . next ( ) ) ; totalOutcomes = preloadedDataSet . getLabels ( ) . size ( 1 ) ; inputColumns = preloadedDataSet . getFeatureMatrix ( ) . size ( 1 ) ; batch = preloadedDataSet . numExamples ( ) ; }
public void startup ( Application application , ComponentStartupStatus ss ) { FileOps . ensureDir ( deltaClientZone ) ; FileOps . clearAll ( deltaClientZone ) ; zone = Zone . connect ( deltaClientZone ) ; deltaLink = DeltaLinkHTTP . connect ( deltaServerURL ) ; deltaClient = DeltaClient . create ( zone , deltaLink ) ; jmsMessagingClient = application . getJMSMessagingClient ( ) ; ss . info ( String . format ( "DeltaClient connected to DeltaServer at % s with zone % s" , deltaServerURL , deltaClientZone ) ) ; }
protected void onInit ( ) { super . onInit ( ) ; if ( this . connectionFactory == null ) { this . connectionFactory = new TcpNioServerConnectionFactory ( super . getPort ( ) ) ; this . connectionFactory . setDeserializer ( new ByteArrayLfSerializer ( ) ) ; this . connectionFactory . setBeanFactory ( getBeanFactory ( ) ) ; if ( this . applicationEventPublisher != null ) { this . connectionFactory . setApplicationEventPublisher ( this . applicationEventPublisher ) ; } this . connectionFactory . afterPropertiesSet ( ) ; } this . connectionFactory . registerListener ( this ) ; }
public static Pair < Integer , Integer > getPrecisionAndScale ( String type ) { String param = type . substring ( 8 , type . length ( ) - 1 ) ; String [ ] params = param . split ( " , " ) ; return new Pair < > ( Integer . parseInt ( params [ 0 ] . trim ( ) ) , Integer . parseInt ( params [ 1 ] . trim ( ) ) ) ; }
static String constructSegmentPath ( String baseKey , String storageDir ) { return JOINER . join ( baseKey . isEmpty ( ) ? null : baseKey , storageDir ) + " / index . zip" ; }
public MappingIterator ( Collection < S > source , Function < S , D > transformation ) { this . sourceIt = source . iterator ( ) ; this . transformation = transformation ; }
public boolean removeAll ( Collection < ? > c ) { boolean changed = false ; for ( XWikiAttachment x : ( Collection < ? extends XWikiAttachment > ) c ) { if ( map . remove ( x . getFilename ( ) ) != x ) { changed = true ; } } if ( changed ) { updatedMap ( ) ; } return changed ; }
public void run ( String . . . strings ) throws Exception { log . info ( " > > > Starting Audit App . . . " ) ; }
public CollectEnvCommand ( FileSystemContext fsContext ) { super ( fsContext ) ; mCommandsAlt = new HashMap < > ( ) ; registerCommands ( ) ; }
protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( "BlobStorageService cannot be null" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( "BlobStorage service set to { } " , blobStorageService . getClass ( ) ) ; }
public void dispose ( ) { app . getChildren ( ) . remove ( windowModel ) ; coolBarManager . dispose ( ) ; menuManager . dispose ( ) ; statusLineManager . dispose ( ) ; windowModel . getContext ( ) . deactivate ( ) ; windowModel . getContext ( ) . dispose ( ) ; ( ( Shell ) windowModel . getWidget ( ) ) . dispose ( ) ; }
public void setUp ( ) { n = new CacheManagerNotifierImpl ( ) ; cl = new CacheManagerListener ( ) ; TestingUtil . inject ( n , TestingUtil . named ( KnownComponentNames . ASYNC_NOTIFICATION_EXECUTOR , new WithinThreadExecutor ( ) ) ) ; n . start ( ) ; n . addListener ( cl ) ; }
public char getLabel ( ) { final char rv ; switch ( getType ( ) ) { case INPUT_VAL : rv = buttonData . inputVal ; break ; case AUTO_CHAR : rv = buttonData . autoChar ; break ; case CUSTOM : rv = buttonData . customChar ; break ; default : rv = ' * ' ; // Should never happen . } return rv ; }
public ReleasableBytesReference retainedSlice ( int from , int length ) { BytesReference slice = delegate . slice ( from , length ) ; return new ReleasableBytesReference ( slice , refCounted ) ; }
public static < T > Iterable < T > latest ( final Observable < ? extends T > source ) { return new Iterable < T > ( ) { @Override public Iterator < T > iterator ( ) { LatestObserverIterator < T > lio = new LatestObserverIterator < T > ( ) ; source . materialize ( ) . subscribe ( lio ) ; return lio ; } } ; }
public static MessageType fromId ( String id ) { for ( MessageType current : values ( ) ) { if ( current . getId ( ) . equals ( id ) ) { return current ; } } return null ; }
private boolean isHostNetworkUnreacable ( VDS vds ) { VdsDynamic vdsDynamic = vds . getDynamicData ( ) ; return ( vdsDynamic . getStatus ( ) == VDSStatus . Down || vdsDynamic . getStatus ( ) == VDSStatus . Reboot || ( vdsDynamic . getStatus ( ) == VDSStatus . NonOperational && vdsDynamic . getNonOperationalReason ( ) == NonOperationalReason . NETWORK_UNREACHABLE ) ) ; }
public ScriptExecutingMessageSource ( AbstractScriptExecutingMessageProcessor < ? > scriptMessageProcessor ) { this . scriptMessageProcessor = scriptMessageProcessor ; }
public void typeInSearchField ( String content , int length ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content ) ; PageObjectLogging . log ( "typeInSearchField" , "String > > " + content . substring ( 0 , length ) + " < < was typed in string field" , true ) ; }
public Iterable < E > read ( Configuration configuration ) throws IOException { // TODO : what to do with Configuration ? create new view ? return view . newReader ( ) ; // TODO : who calls close ? }
public void setRefreshInterval ( final long refreshInterval ) { refreshIntervalInSeconds = refreshInterval ; }
public void onNewImageFromCamera ( ) { if ( navigator . isSdkAboveOrEqualM ( ) && ! navigator . doIHavePermission ( Manifest . permission . WRITE_EXTERNAL_STORAGE ) ) { navigator . askForPermission ( new String [ ] { Manifest . permission . WRITE_EXTERNAL_STORAGE } , PERMISSION_EXTERNAL_STORAGE_NEW_IMAGE_CAMERA ) ; } else { interactor . createFile ( this , CREATE_FILE_TAKE_PHOTO , null ) ; } }
public void testEquals ( ) throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , true , false , true ) ; FixedWidthConfiguration conf2 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , true , false , true ) ; assertEquals ( conf1 , conf2 ) ; FixedWidthConfiguration conf3 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , false , false , true ) ; assertFalse ( conf1 . equals ( conf3 ) ) ; }
public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = "link_preview_dialog" ; if ( getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) == null ) { LinkPreviewDialog . newInstance ( title , entrySource ) . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } }
public void clear ( ) { if ( loader instanceof CacheStore ) { try { ( ( CacheStore ) loader ) . clear ( ) ; } catch ( CacheLoaderException e ) { throw newCacheLoaderException ( e ) ; } } }
public ApplicabilityIds getApplicabilityIds ( ) { // TBD - Replace with call to IApplicabilityService calls once implemented ApplicabilityIds ids = new ApplicabilityIds ( ) ; // ids . getApplicabilityIds ( ) . add ( new ApplicabilityId ( 345L , "ARC - 210" ) ) ; // ids . getApplicabilityIds ( ) . add ( new ApplicabilityId ( 366L , "COMM" ) ) ; // ids . getApplicabilityIds ( ) . add ( new ApplicabilityId ( 376L , "ASM" ) ) ; // ids . getApplicabilityIds ( ) . add ( new ApplicabilityId ( 368L , "UTF" ) ) ; // ids . getApplicabilityIds ( ) . add ( new ApplicabilityId ( 466L , "MDR" ) ) ; return ids ; } // Review : This file needs some work to ensure it works with client .
private MediaType tryNarrowMediaType ( MediaType negotiated , AdvancedCache < ? , ? > cache ) { if ( ! negotiated . matchesAll ( ) ) return negotiated ; MediaType storageMediaType = cache . getValueDataConversion ( ) . getStorageMediaType ( ) ; if ( storageMediaType == null ) return negotiated ; if ( storageMediaType . equals ( MediaType . APPLICATION_OBJECT ) ) return TEXT_PLAIN ; if ( storageMediaType . match ( MediaType . APPLICATION_PROTOSTREAM ) ) return APPLICATION_JSON ; return negotiated ; }
protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; fJarButton . addSelectionListener ( widgetSelectedAdapter ( e - > { } ) ) ; }
public String getTurnDescription ( Translation tr ) { if ( rawName || ! name . isEmpty ( ) ) return getName ( ) ; return tr . tr ( "finish" ) ; }
private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; try { createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; } catch ( Exception e ) { throw e ; } }
public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( "Error while constructing new ObjectMapper" , e ) ; } return writer . toString ( ) ; }
public TopicStatus ( String topic , ConnectorTaskId task , long discoverTimestamp ) { this ( topic , Objects . requireNotNull ( task ) . connector ( ) , task . task ( ) , discoverTimestamp ) ; }
private static OGCGeometry readGeometry ( BasicSliceInput input , Slice inputSlice , GeometryType type , int length ) { switch ( type ) { case POINT : return readPoint ( input ) ; case MULTI_POINT : case LINE_STRING : case MULTI_LINE_STRING : case POLYGON : case MULTI_POLYGON : return readSimpleGeometry ( input , inputSlice , type , length ) ; case GEOMETRY_COLLECTION : return readGeometryCollection ( input , inputSlice ) ; case ENVELOPE : return OGCGeometry . createFromEsriGeometry ( readEnvelope ( input ) , null ) ; default : throw new IllegalArgumentException ( "Unexpected type : " + type ) ; } }
public void close ( ) { sketch = null ; values = null ; }
public boolean shouldSpill ( ) { // Expected new batch size like the current , plus the Hash Values vector ( 4 bytes per HV ) long batchSize = ( batchMemoryManager . getRecordBatchSizer ( RIGHT_INDEX ) . getRowAllocWidth ( ) + 4 ) * recordsPerBatch ; long reserveForOutgoing = batchMemoryManager . getOutputBatchSize ( ) ; long memoryAvailableNow = allocator . getLimit ( ) - allocator . getAllocatedMemory ( ) - reserveForOutgoing - batchMemoryManager . getRecordBatchSizer ( LEFT_INDEX ) . getRowAllocWidth ( ) * recordsPerBatch ; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow ; if ( needsSpill ) { logger . debug ( "should spill now - batch size { } , mem avail { } , reserved for outgoing { } " , batchSize , memoryAvailableNow , reserveForOutgoing ) ; } return needsSpill ; // go spill if too little memory is available }
public void close ( ) { try { Await . result ( beam . close ( ) ) ; } catch ( Exception e ) { final String errorMsg = "Error while closing Druid beam client" ; LOG . error ( errorMsg , e ) ; throw new RuntimeException ( errorMsg ) ; } }
private boolean isPlatformKeybindingBug517068Fixed ( ) { Bundle bundle = Platform . getBundle ( "org . eclipse . e4 . ui . bindings" ) ; // $NON - NLS - 1$ Version currentVersion = bundle . getVersion ( ) ; Version fixVersion = new Version ( 0 , 12 , 1 ) ; return currentVersion . compareTo ( fixVersion ) >= 0 ; }
public static boolean isPluginPrefixAndArtifactIdEquals ( Plugin p1 , Plugin p2 ) { return StringUtils . equals ( p1 . getArtifactId ( ) , p2 . getArtifactId ( ) ) && StringUtils . equals ( p1 . getPrefix ( ) , p2 . getPrefix ( ) ) ; }
public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
public static String getFileNamePath ( final String filename , final FieldbookProperties fieldbookProperties ) { StringBuilder filenameBuilder = new StringBuilder ( ) ; filenameBuilder . append ( fieldbookProperties . getUploadDirectory ( ) ) ; filenameBuilder . append ( File . separator ) ; filenameBuilder . append ( SettingsUtil . cleanSheetAndFileName ( filename ) ) ; final String filenamePath = filenameBuilder . toString ( ) ; return filenamePath ; }
protected void changeStorageDomainStatusInTransaction ( final StoragePoolIsoMap map , final StorageDomainStatus status ) { executeInNewTransaction ( new TransactionMethod < StoragePoolIsoMap > ( ) { @SuppressWarnings ( "synthetic - access" ) @Override public StoragePoolIsoMap runInTransaction ( ) { CompensationContext context = getCompensationContext ( ) ; context . snapshotEntityStatus ( map , map . getstatus ( ) ) ; map . setstatus ( status ) ; getStoragePoolIsoMapDao ( ) . updateStatus ( map . getId ( ) , map . getstatus ( ) ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; } } ) ; }
public void visitMemberSelectExpression ( MemberSelectExpressionTree tree ) { if ( tree . expression ( ) . is ( Tree . Kind . IDENTIFIER ) ) { IdentifierTree identifier = ( IdentifierTree ) tree . expression ( ) ; Symbol owner = identifier . symbol ( ) . owner ( ) ; if ( owner != null && owner . isMethodSymbol ( ) ) { // No need to investigate selection on local symbols return ; } } if ( tree . expression ( ) . symbolType ( ) . isSubtypeOf ( "java . lang . Class" ) ) { // No need to investigate selection on a Class object return ; } super . visitMemberSelectExpression ( tree ) ; }
public V computeIfPresent ( K key , BiFunction < ? super K , ? super V , ? extends V > remappingFunction ) { checkNotNull ( key , NULL_KEY_IS_NOT_ALLOWED ) ; checkNotNull ( key , NULL_BIFUNCTION_IS_NOT_ALLOWED ) ; return computeIfPresentLocally ( key , remappingFunction ) ; }
public void sendUnanchored ( Task task , String stream , List < Object > values , ExecutorTransfer transfer ) { Tuple tuple = task . getTuple ( stream , values ) ; List < Integer > tasks = task . getOutgoingTasks ( stream , values ) ; for ( Integer t : tasks ) { transfer . transfer ( t , tuple ) ; } }
AffinityResourceDefinition ( PathElement path ) { super ( path , UndertowExtension . getResolver ( Constants . HANDLER , Constants . AFFINITY , path . getValue ( ) ) , new RestartParentResourceAddHandler ( Constants . HANDLER ) , new RestartParentResourceRemoveHandler ( Constants . HANDLER ) ) ; }
@Override public E poll ( ) { lock . lock ( ) ; try { if ( queue . isEmpty ( ) ) { return null ; } E peek = queue . peek ( ) ; queue . remove ( ) ; return peek ; } catch ( IOException e ) { QueueFile . < Error > getSneakyThrowable ( e ) ; throw new RuntimeException ( e ) ; } finally { lock . unlock ( ) ; } }
public void testTimeout ( ) throws SystemException , RemoteException { log . tracef ( "Method stateful #testTimeout called" ) ; Transaction txn ; txn = tm . getTransaction ( ) ; TxTestUtil . enlistTestXAResource ( txn ) ; TxTestUtil . enlistTestXAResource ( txn ) ; try { TxTestUtil . waitForTimeout ( tm ) ; } catch ( InterruptedException ie ) { Thread . currentThread ( ) . interrupt ( ) ; throw new RemoteException ( "Interupted during waiting for transaction timeout" , ie ) ; } }
UnstagedComparator ( boolean sortAlphabetically ) { this . alphabeticallySort = sortAlphabetically ; }
public boolean shouldUseNativeIO ( VM vm , DiskImage diskImage , VmDevice device ) { StorageType storageType = diskImage . getStorageTypes ( ) . get ( 0 ) ; String diskType = getDiskType ( vm , diskImage , device ) ; boolean isNativeIO = ! "file" . equals ( diskType ) || ( storageType == StorageType . GLUSTERFS && FeatureSupported . useNativeIOForGluster ( vm . getCompatibilityVersion ( ) ) ) ; // marked as transient disk ( file type ) and uses cache when snapshotId is not null if ( device . getSnapshotId ( ) != null ) { isNativeIO = false ; } return isNativeIO ; }
public < T > T execute ( Request < T > request , IProgressMonitor monitor ) throws IOException , GerritException { if ( ! isAnonymous ( ) ) { return execute ( request , true , monitor ) ; } return execute ( request , ! isAnonymous ( ) , monitor ) ; }
public HighlightingInlineHyperlink ( final String text , final String token , final String toHighlight ) { super ( text , token ) ; highlight ( text , toHighlight ) ; }
protected String serializeInstallCmd ( Collection < String > packages ) { if ( packages . isEmpty ( ) ) { return "" ; } else { return CommandInfo . CMD_INSTALL + " " + String . join ( " " , packages ) ; } }
private List roundtrip ( List vals , Map conf ) throws IOException { List ret = null ; try { ret = deserialize ( serialize ( vals , conf ) , conf ) ; } catch ( IOException e ) { LOG . error ( "Exception when serialize / deserialize " , e ) ; } return ret ; }
public GlobalDirectoryResourceDefinition ( ) { super ( new SimpleResourceDefinition . Parameters ( PathElement . pathElement ( EESubsystemModel . GLOBAL_DIRECTORY ) , EeExtension . getResourceDescriptionResolver ( EESubsystemModel . GLOBAL_DIRECTORY ) ) . setAddRestartLevel ( OperationEntry . Flag . RESTART_JVM ) . setRemoveRestartLevel ( OperationEntry . Flag . RESTART_JVM ) . setAddHandler ( GlobalDirectoryResourceDefinition . ADD ) . setRemoveHandler ( GlobalDirectoryResourceDefinition . REMOVE ) . setCapabilities ( EE_GLOBAL_DIRECTORY_CAPABILITY ) ) ; }
public LockRangeDialog ( Shell parentShell , TmfXYChartViewer chartViewer ) { super ( parentShell ) ; fChartViewer = chartViewer ; }
public String toStringShort ( ) { return MoreObjects . toStringHelper ( this ) . add ( "ClientType" , getStringFromOptional ( mClientType ) ) . add ( "ClientHostname" , mLocalHostName ) . add ( "ServerAddress" , mServerAddress ) . add ( "ChannelId" , mChannelId ) . omitNullValues ( ) . toString ( ) ; }
public CompilationUnit ( ) { this ( null , false , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; }
public void startBucket ( String bucketKey ) { BulkCommand command = getCurrentCommand ( ) ; description = command . getParam ( PARAM_DESC ) ; }
protected void executeQueryCommand ( ) { Provider provider = getDbFacade ( ) . getProviderDao ( ) . get ( getParameters ( ) . getId ( ) ) ; if ( provider == null ) { throw new VdcBLLException ( VdcBllErrors . PROVIDER_NOT_FOUND ) ; } NetworkProviderProxy client = getProviderProxyFactory ( ) . create ( provider ) ; getQueryReturnValue ( ) . setReturnValue ( client . getAll ( ) ) ; }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled ( ) { Context context = InstrumentationRegistry . getTargetContext ( ) ; SharedPreferences . Editor editor = PreferenceManager . getDefaultSharedPreferences ( context ) . edit ( ) ; editor . putBoolean ( SettingsActivity . SETTINGS_CRASH_REPORTS , false ) ; editor . commit ( ) ; CrashReporter crashReporter = new CrashReporter ( context ) ; assertFalse ( crashReporter . initialize ( ) ) ; }
protected boolean uniqueInterfaceName ( List < VmNetworkInterface > interfaces ) { return VmHandler . IsNotDuplicateInterfaceName ( interfaces , getInterfaceName ( ) , getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
private CompletableFuture < CorfuInterClusterReplicationServerNode > startDiscoveryService ( ServerContext serverContext ) throws InterruptedException { log . info ( "Start Discovery Service . " ) ; CompletableFuture < CorfuInterClusterReplicationServerNode > discoveryServiceCallback = new CompletableFuture < > ( ) ; this . clusterManagerAdapter = buildClusterManagerAdapter ( serverContext . getPluginConfigFilePath ( ) ) ; // Start LogReplicationDiscovery Service , responsible for // acquiring lock , retrieving Site Manager Info and processing this info // so this node is initialized as Source ( sender ) or Sink ( receiver ) replicationDiscoveryService = new CorfuReplicationDiscoveryService ( serverContext , clusterManagerAdapter , discoveryServiceCallback ) ; return discoveryServiceCallback ; }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; // This should be taken from the end of "middleChunk" , since that's closer to the smaller neighbor long smallChunk1 = mallocChunks ( 1 ) ; // This should also be taken from the end of the remaining portion of "middleChunk" long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( "The small chunks should have been allocated from the end of the free block" , smallChunk1 > smallChunk2 ) ; assertTrue ( "The small chunks should have been allocated from space before 'nextChunk'" , smallChunk1 < nextChunk ) ; assertTrue ( "The small chunks should have been allocated from space after 'prevChunk'" , smallChunk2 > prevChunk ) ; }
public void shouldSetTempImagesPathAsCompleteDirectory ( ) { URI path = URI . create ( " / pages / newImagesTemp / " ) ; ConfigCore . setImagesPath ( URI . create ( " / pages / newImagesTemp / " ) ) ; ConfigCore . getTempImagesPathAsCompleteDirectory ( ) ; assertEquals ( "Temp images path was set incorrectly ! " , path , URI . create ( " / pages / newImagesTemp / " ) ) ; }
public MetadataHashAggPOP ( @JsonProperty ( "child" ) PhysicalOperator child , @JsonProperty ( "context" ) MetadataAggregateContext context , @JsonProperty ( "phase" ) OperatorPhase phase ) { super ( child , phase , context . groupByExpressions ( ) , Collections . emptyList ( ) , 1 . 0F ) ; Preconditions . checkArgument ( context . createNewAggregations ( ) , "Hash aggregate for metadata collecting should be used only for creating new aggregations . " ) ; this . context = context ; this . phase = phase ; }
private void saveProcess ( Process process ) { try { serviceManager . getProcessService ( ) . save ( process ) ; } catch ( DataException e ) { logger . error ( KITODO_SCRIPT_FIELD + "Error while saving process : " + process . getTitle ( ) , e ) ; Helper . setFehlerMeldung ( KITODO_SCRIPT_FIELD , "Error while saving process : " + process . getTitle ( ) , e ) ; } }
private static String toHexString ( QuantileDigest qdigest ) { return new SqlVarbinary ( qdigest . serialize ( ) . getBytes ( ) ) . toString ( ) . replaceAll ( "\\s + " , " " ) ; }
private String getHeader ( ) { return selectedPageHeader . getText ( ) ; }
public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
public boolean delete ( ProjectName projectName ) { return callWithContext ( ( ) - > { final boolean result = doDelete ( projectName ) ; LOG . info ( "Project deleted : " + projectName ) ; return result ; } ) ; }
public static void startServerInstance ( File dataDir , ServerCnxnFactory factory , String hostPort ) throws IOException , InterruptedException , KeeperException . NoNodeException { final int port = getPort ( hostPort ) ; LOG . info ( " ING server instance 127 . 0 . 0 . 1 : { } " , port ) ; ZooKeeperServer zks = new ZooKeeperServer ( dataDir , dataDir , 3000 ) ; factory . startup ( zks ) ; Assert . assertTrue ( "waiting for server up" , ClientBase . waitForServerUp ( "127 . 0 . 0 . 1 : " + port , CONNECTION_TIMEOUT , factory . isSecure ( ) ) ) ; }
public void shouldShowAllMusicsAsHTTP ( ) { MockHttpResult mockHttpResult = new MockHttpResult ( ) ; controller = new MusicController ( dao , userInfo , mockHttpResult , validator , musics ) ; when ( dao . listAll ( ) ) . thenReturn ( Arrays . asList ( music ) ) ; controller . showAllMusicsAsHTTP ( ) ; assertThat ( mockHttpResult . getBody ( ) , is ( " < p class = \"content\" > " + Arrays . asList ( music ) . toString ( ) + " </ p > " ) ) ; }
public AttributeValueSearch ( IAttributeType attributeType , String attributeValue ) { Conditions . checkNotNull ( attributeType , "attributeType" ) ; Conditions . checkNotNullOrEmpty ( attributeValue , "attributeValue" ) ; this . attributeType = attributeType ; this . attributeValue = attributeValue ; }
public ListenerContainerIdleEvent ( Object source , long idleTime , @Nullable String id , String . . . queueNames ) { super ( source ) ; this . idleTime = Duration . ofMillis ( idleTime ) ; this . listenerId = id ; this . queueNames = Arrays . asList ( queueNames ) ; }
public static XARecoveryModule getRegisteredXARecoveryModule ( ) { if ( registeredXARecoveryModule == null ) { RecoveryManager recMan = RecoveryManager . manager ( ) ; Vector recoveryModules = recMan . getModules ( ) ; if ( recoveryModules != null ) { Enumeration modules = recoveryModules . elements ( ) ; while ( modules . hasMoreElements ( ) ) { RecoveryModule m = ( RecoveryModule ) modules . nextElement ( ) ; if ( m instanceof XARecoveryModule ) { registeredXARecoveryModule = ( XARecoveryModule ) m ; break ; } } } } return registeredXARecoveryModule ; }
public String getUrl ( ) { return PluginImpl . getInstance ( ) . getServer ( serverName ) . getConfig ( ) . getGerritFrontEndUrlFor ( tEvent ) ; }
public void testBoundarySignalProcessInstance ( ) throws Exception { Long processInstanceId = processClient . startProcess ( CONTAINER_ID , PROCESS_ID_BOUNDARY_SIGNAL_PROCESS ) ; assertNotNull ( processInstanceId ) ; assertTrue ( processInstanceId . longValue ( ) > 0 ) ; try { checkAvailableBoundarySignals ( CONTAINER_ID , processInstanceId ) ; } finally { processClient . abortProcessInstance ( CONTAINER_ID , processInstanceId ) ; } }
private void validateAppConfig ( String fileName ) throws Exception { String appsDir = getAppsDirectory ( ) ; if ( appsDir . equalsIgnoreCase ( "apps" ) && ! isAppConfiguredInSourceServerXml ( fileName ) ) { // add application configuration applicationXml . createWebApplicationElement ( fileName ) ; } else if ( appsDir . equalsIgnoreCase ( "dropins" ) && isAppConfiguredInSourceServerXml ( fileName ) ) throw new MojoExecutionException ( messages . getString ( "error . install . app . dropins . directory" ) ) ; }
private static RequestContextDataHolder getRequestContext ( Context ctx ) { return ctx . getOrDefault ( REQUEST_CONTEXT_DATA_HOLDER , null ) ; }
public long getNumberOfImagesInStorageDomain ( Guid storageDomainId ) { return getCallsHandler ( ) . executeRead ( "GetNumberOfImagesInStorageDomain" , getLongMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "storage_domain_id" , storageDomainId ) ) ; }
public TestObjectAsync ( ) { try { Thread . sleep ( 1 ) ; Thread . sleep ( 100 ) ; counter = 1 ; } catch ( InterruptedException ie ) { throw new RuntimeException ( ie ) ; } }
private static boolean isOptionalProperty ( Class beanClass , PropertyDescriptor beanProp ) { Field field = getField ( beanClass , beanProp . getName ( ) ) ; return field != null ? field . getAnnotationsByType ( Optional . class ) . length > 0 || beanProp . getReadMethod ( ) . getAnnotationsByType ( Optional . class ) . length > 0 : beanProp . getReadMethod ( ) . getAnnotationsByType ( Optional . class ) . length > 0 ; }
public int getImageselector ( ) { return imageSelectorIndex ; }
public InputStream getInputStream ( FileHeader entry ) throws IOException { if ( entry == null ) { return null ; } InputStream inputStream = getEntryData ( entry ) . getInputStream ( ) ; if ( entry . getMethod ( ) == ZipEntry . DEFLATED ) { inputStream = new ZipInflaterInputStream ( inputStream , ( int ) entry . getSize ( ) ) ; } return inputStream ; }
private org . eclipse . swt . graphics . Image createImage ( ) { org . eclipse . swt . graphics . Image newImage ; RenderedImage image = renderManager . getImage ( ) ; this . backBufferTrsf = renderManager . getMapInternal ( ) . getViewportModel ( ) . worldToScreenTransform ( ) ; if ( image != null ) newImage = AWTSWTImageUtils . createSWTImage ( image , false ) ; else { newImage = new Image ( getDisplay ( ) , getWidth ( ) , getHeight ( ) ) ; } return newImage ; }
public VirtualMachine getCurrentMachineBuild ( ITmfEvent event ) { VirtualMachine machine = innerGetCurrentMachine ( event ) ; if ( machine == null ) { synchronized ( fStateSystem ) { String hostId = event . getTrace ( ) . getHostId ( ) ; machine = createMachine ( fStateSystem , event . getTimestamp ( ) . toNanos ( ) , hostId , event . getTrace ( ) . getName ( ) ) ; fKnownMachines . put ( hostId , machine ) ; } } return machine ; }
public static Predicate < Expression > isInferenceCandidate ( ) { return expression - > { expression = normalizeInPredicateToEquality ( expression ) ; if ( expression instanceof ComparisonExpression && isDeterministic ( expression ) && ! mayReturnNullOnNonNullInput ( expression ) && ! isDynamicFilter ( expression ) ) { ComparisonExpression comparison = ( ComparisonExpression ) expression ; if ( comparison . getType ( ) == ComparisonExpressionType . EQUAL ) { // We should only consider equalities that have distinct left and right components return ! comparison . getLeft ( ) . equals ( comparison . getRight ( ) ) ; } } return false ; } ; }
private void updateGroup ( final TupleBatch tb , final int row , final Object [ ] curAggStates ) throws DbException { for ( int agg = 0 ; agg < aggregators . length ; ++ agg ) { if ( ! ( aggregators [ agg ] instanceof StatefulUserDefinedAggregator ) ) { aggregators [ agg ] . addRow ( tb , row , curAggStates [ agg ] ) ; } } }
protected void update ( float delta ) { int lengthInterpretation ; try { lengthInterpretation = length == null ? 0 : length . interpretInteger ( sprite ) ; } catch ( InterpretationException interpretationException ) { lengthInterpretation = 0 ; Log . d ( getClass ( ) . getSimpleName ( ) , "Formula interpretation for this specific Brick failed . " , interpretationException ) ; } this . sprite . runningStitch . activateStitching ( sprite , new SimpleRunningStitch ( sprite , lengthInterpretation ) ) ; }
protected void processSpanImpl ( Span span , Map < String , String [ ] > servletRequestParameters ) { long sum = 0 ; for ( String weaselParameterToSum : weaselParametersToSum ) { final Long timing = parsedLongOrNull ( getParameterValueOrNull ( weaselParameterToSum , servletRequestParameters ) ) ; if ( timing == null ) { discardSpan ( span ) ; return ; } else { sum += timing ; } } span . setTag ( TIMING_RESOURCE , sum ) ; }
private void close ( Path path ) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path . getParent ( ) ; try ( Stream < Path > s = Files . list ( directoryWhereGeneratedArtifactsWasPlaced ) ) { s . filter ( p - > ! Files . isDirectory ( p ) ) . forEach ( ThrowingConsumer . unchecked ( Files : : delete ) ) ; } }
public void hashcodeVerifyEqualsContract ( ) { EqualsVerifier . forClass ( MessageReference . class ) . verify ( ) ; }
public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , "uri" ) ; return this ; }
@Inject ServiceKeyAuthentication ( @Provider Supplier < Credentials > creds ) { this . creds = creds ; }
protected int countChildrenOf ( IResource checkResource ) throws CoreException { if ( checkResource . getType ( ) == IResource . FILE ) { return 1 ; } int count = 0 ; if ( checkResource . isAccessible ( ) ) { for ( IResource child : ( ( IContainer ) checkResource ) . members ( ) ) { count += countChildrenOf ( child ) ; } } return count ; }
public String getAppFolderToMonitor ( ) { if ( folder == null ) { File f = new File ( "Applications" ) ; folder = f . getAbsolutePath ( ) ; } return folder ; }
private static void count ( Object inputBase , long inputAddress , int inputSize , int [ ] counts ) { long input = inputAddress ; Arrays . fill ( counts , 0 ) ; if ( inputSize != 0 ) { for ( int i = 0 ; i < inputSize ; i ++ ) { int symbol = UNSAFE . getByte ( inputBase , input ) & 0xFF ; input ++ ; counts [ symbol ] ++ ; } } }
public void submit ( List < LuceneWork > workList , IndexingMonitor monitor ) { Changeset changeset = new Changeset ( workList , Thread . currentThread ( ) , monitor ) ; transferQueue . add ( changeset ) ; wakeUpConsumer ( ) ; boolean interrupted = false ; while ( ! changeset . isProcessed ( ) ) { LockSupport . park ( ) ; if ( Thread . interrupted ( ) ) { interrupted = true ; return ; } } if ( interrupted ) { Thread . currentThread ( ) . interrupt ( ) ; } }
public void setHttpService ( HttpService httpService ) { logger . debug ( "setHttpService called" ) ; this . httpService = httpService ; }
public boolean isInternal ( ) { return getParentNode ( ) . filter ( parent - > parent instanceof Name ) . map ( parent - > ( Name ) parent ) . flatMap ( Name : : getQualifier ) . map ( parentNameQualifier - > parentNameQualifier == this ) . orElse ( false ) ; }
private void logStart ( ) { log ( 3 , "Running test " + m_testName + " on " + m_classMap . size ( ) + " " + " classes , " + " included groups : [ " + Strings . mapToString ( m_xmlMethodSelector . getIncludedGroups ( ) ) + " ] excluded groups : [ " + Strings . mapToString ( m_xmlMethodSelector . getExcludedGroups ( ) ) + " ] " ) ; if ( getVerbose ( ) >= 3 ) { for ( ITestClass tc : m_classMap . values ( ) ) { ( ( TestClass ) tc ) . dump ( ) ; } } }
public NutchJob ( Configuration conf ) throws IOException { super ( conf , "NutchJob" ) ; }
private void loadMachineUUID ( ) { if ( System . getProperty ( PROP_UUID ) != null ) return ; String uuid = loadExistingUUID ( ) ; if ( uuid == null ) { uuid = UUID . randomUUID ( ) . toString ( ) ; saveUUID ( uuid ) ; } EnvironmentInfo environment = environmentTracker . getService ( ) ; if ( environment != null ) { environment . setProperty ( PROP_UUID , uuid ) ; } else { System . setProperty ( PROP_UUID , uuid ) ; } }
public boolean retry ( ITestResult result ) { if ( currentTry < maxreruntimes ) { ++ currentTry ; return true ; } return false ; }
public Statistics < T > visitIntConstant ( ValueExpressions . IntExpression expr , Void value ) throws RuntimeException { return getStatistics ( expr . getInt ( ) ) ; }
public ServiceDate getEnd ( ) { return end == UNBOUNDED_ ? UNBOUNDED : end ; }
boolean isLoggedIn ( ) { return token != null && hub != null ; }
public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
public void preInit ( FMLPreInitializationEvent evt ) { RegistryHelper . useOtherModConfigFor ( MODID , BCCore . MODID ) ; BCSiliconConfig . preInit ( ) ; BCSiliconItems . preInit ( ) ; BCSiliconBlocks . preInit ( ) ; // Reload after all of the definitions have been created . BCSiliconConfig . reloadConfig ( EnumRestartRequirement . GAME ) ; NetworkRegistry . INSTANCE . registerGuiHandler ( INSTANCE , BCSiliconProxy . getProxy ( ) ) ; BCSiliconProxy . getProxy ( ) . fmlPreInit ( ) ; }
public Hash ( HashType type ) { this . type = type ; try { digest = type . get ( ) ; } finally { type . recycle ( digest ) ; } }
private boolean validateExternalVnicProfileMapping ( ) { final ValidationResult validationResult = externalVnicProfileMappingValidator . validateExternalVnicProfileMapping ( getParameters ( ) . getExternalVnicProfileMappings ( ) , getParameters ( ) . getClusterId ( ) ) ; drMappingHelper . mapVnicProfiles ( vmTemplateFromConfiguration . getInterfaces ( ) , getParameters ( ) . getExternalVnicProfileMappings ( ) ) ; return validate ( validationResult ) ; }
public void serDeTest ( ) { doSerDeTest ( Collections . emptyList ( ) ) ; doSerDeTest ( Arrays . asList ( "a" , "b" , " / signedId / abcdef" ) ) ; doSerDeTest ( null ) ; }
protected void buildVmVideoCards ( ) { createInfo . add ( VdsProperties . display , vm . getdisplay_type ( ) . toString ( ) ) ; // vnc , qxl createInfo . add ( VdsProperties . num_of_monitors , String . valueOf ( vm . getnum_of_monitors ( ) ) ) ; }
static String encode ( String segment ) { return URL . encodeQueryString ( type . replacePathSeparator ( segment ) ) ; }
public List < String > getStrongDependencies ( ) { return Arrays . asList ( A_U_D_preferredMail , A_U_D_ISMail , A_U_D_publicAliasMails , A_U_D_privateAliasMails , A_U_D_o365EmailAddressesMU ) ; }
boolean isCacheable ( ) { return false ; }
static KeyManagerFactory buildKeyManagerFactory ( File certChainFile , String keyAlgorithm , File keyFile , String keyPassword , KeyManagerFactory kmf , String keyStore ) throws KeyStoreException , NoSuchAlgorithmException , NoSuchPaddingException , InvalidKeySpecException , InvalidAlgorithmParameterException , IOException , CertificateException , KeyException , UnrecoverableKeyException { return buildKeyManagerFactory ( toX509Certificates ( certChainFile ) , keyAlgorithm , toPrivateKey ( keyFile , keyPassword ) , keyPassword , kmf , keyStore ) ; }
public void testWrongPortConnection ( ) throws Exception { BlockingChannel channel = new SSLBlockingChannel ( hostName , sslPort + 1 , new MetricRegistry ( ) , 10000 , 10000 , 10000 , 2000 , sslSocketFactory , clientSSLConfig ) ; try { // send request channel . connect ( ) ; fail ( "should have thrown ! " ) ; } catch ( IOException e ) { assertTrue ( e . getMessage ( ) . contains ( "Connection refused" ) ) ; } }
public void notifyParameterChanged ( String name ) { if ( ! fParameterNames . contains ( name ) ) { throw new RuntimeException ( String . format ( Messages . TmfAbstractAnalysisModule_InvalidParameter , name , getName ( ) ) ) ; } synchronized ( fParameters ) { if ( ! fParameterNames . contains ( name ) ) { throw new RuntimeException ( String . format ( Messages . TmfAbstractAnalysisModule_InvalidParameter , name , getName ( ) ) ) ; } Object oldValue = fParameters . get ( name ) ; Object value = getParameter ( name ) ; if ( ( value != null ) && ! ( value . equals ( oldValue ) ) ) { parameterChanged ( name ) ; } } }
public void testUnrecognizedSpec ( ) { when ( authentication . getAttributes ( ) . get ( any ( String . class ) ) ) . thenReturn ( "strong_two_factor" ) ; spec . setAuthenticationMethod ( "weak_two_factor" ) ; assertFalse ( this . spec . isSatisfiedBy ( this . assertion ) ) ; }
public static void updateBundleConfig ( Connection connection , Bundle bundle ) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config = ? WHERE bundle_id = ? AND view_id = ? " ; try ( final PreparedStatement statement = connection . prepareStatement ( sql ) ) { statement . setString ( 1 , bundle . config ) ; statement . setLong ( 2 , bundle . bundle ) ; statement . setLong ( 3 , bundle . view ) ; statement . execute ( ) ; } }
protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
protected void onDestroy ( ) { webView . setDownloadListener ( null ) ; super . onDestroy ( ) ; }
public void closeTest ( ) { // request is keep - alive by default . HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; // drain the channel of content . while ( channel . readOutbound ( ) != null ) { ; } assertFalse ( "Channel should be closed" , channel . isOpen ( ) ) ; }
public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( "get_rule_logs_for_vms" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
public synchronized void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
public synchronized void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { if ( oldInput != newInput && newInput != null ) { ImportTraceContentProvider input = ( ImportTraceContentProvider ) newInput ; clearCandidates ( ) ; fTraceTypes . putAll ( input . fTraceTypes ) ; fTraceFiles . putAll ( fTraceFiles ) ; } }
protected boolean isPowerManagementLegal ( ) { return IsPowerManagementLegal ( getParameters ( ) . getVdsStaticData ( ) , getVdsGroup ( ) . getcompatibility_version ( ) . toString ( ) ) ; }
public void info ( String message ) { log . info ( message ) ; info . add ( message ) ; }
public static File makeNumericDimFile ( File dir , String dimension , ByteOrder order ) { return new File ( dir , StringUtils . format ( "numeric_dim_ % s_ % s . drd" , dimension , order ) ) ; }
private AuditLogableBase createAuditLog ( final VmNic iface ) { AuditLogableBase logable = new AuditLogableBase ( ) ; logable . setVmId ( iface . getVmId ( ) ) ; logable . addCustomValue ( "MACAddr" , iface . getMacAddress ( ) ) ; logable . addCustomValue ( "IfaceName" , iface . getName ( ) ) ; return logable ; }
public boolean equals ( VirtualValue other ) { if ( other == null || ! ( other instanceof MapValue ) ) { return false ; } MapValue that = ( MapValue ) other ; return size ( ) == that . size ( ) && Arrays . equals ( keys , that . keys ) && Arrays . equals ( values , that . values ) ; }
private void processSingleClusterChanges ( ManageNetworkClustersParameters param ) { final List < ActionParametersBase > setupNetworksParams = new ArrayList < > ( createNetworkClustersToSetupNetworksParametersTransformer ( ) . transform ( param . getAttachments ( ) , param . getDetachments ( ) , param . getUpdates ( ) ) ) ; HostSetupNetworksParametersBuilder . updateParametersSequencing ( setupNetworksParams ) ; setupNetworksParams . forEach ( this : : withRootCommandInfo ) ; runInternalMultipleActions ( ActionType . PersistentHostSetupNetworks , setupNetworksParams , getContext ( ) . getExecutionContext ( ) ) ; }
private static void setFixedLengthStreamingMode ( HttpURLConnection connection , long length ) { try { // Not caching method as invocation is literally sending > 2GB , which means reflection isn't a limiter ! HttpURLConnection . class . getMethod ( "setFixedLengthStreamingMode" , long . class ) . invoke ( connection , length ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Cannot transfer 2 GB or larger chunks due to JDK 1 . 6 limitations . " + " Use chunked encoding or multi - part upload , if possible , or use a different http driver . " + " For more information : http :/ / bugs . sun . com / bugdatabase / view_bug . do ? bug_id = 6755625" ) ; } }
protected String getErrorMessage ( ClientResponse clientResponse ) { String response = clientResponse . getEntity ( String . class ) ; try { // Try to see if the server responded with an error message from the API ApiError error = getJsonParser ( ) . readValue ( response , ApiError . class ) ; return error . getMessage ( ) ; } catch ( IOException e ) { // If not , inform the user of the underlying response ( e . g . if server threw NPE or whatever ) int statusCode = clientResponse . getStatus ( ) ; ClientResponse . Status status = clientResponse . getClientResponseStatus ( ) ; String responseText = clientResponse . getEntity ( String . class ) ; return "Server returned " + status + " ( " + statusCode + " ) ; " + responseText ; } }
public int hashCode ( ) { int bits = 1 ; bits = 31 * bits + this . type . ordinal ( ) ; bits = 31 * bits + getToX ( ) ; bits = 31 * bits + getToY ( ) ; bits = 31 * bits + getToZ ( ) ; bits = 31 * bits + getFromX ( ) ; bits = 31 * bits + getFromY ( ) ; bits = 31 * bits + getFromZ ( ) ; return bits ^ ( bits > > 31 ) ; }
public static AccountCollection all ( Map < String , Object > params ) throws AuthenticationException , InvalidRequestException , APIConnectionException , CardException , APIException { return all ( params , ( RequestOptions ) null ) ; }
public void onSaveClick ( ) { editView . setSaveState ( true ) ; WikidataDescriptionEditDataClient client = new WikidataDescriptionEditDataClient ( ) ; Call < Void > call = client . submitDescription ( pageTitle , editView . getDescription ( ) , new WikidataDescriptionEditDataClient . Callback ( ) { @Override public void success ( ) { editView . setSaveState ( false ) ; L . i ( "WD description edit successful" ) ; // TODO : go to success fragment } @Override public void failure ( @NonNull Throwable caught ) { editView . setSaveState ( false ) ; L . e ( "WD description edit failed : " , caught ) ; // TODO : go to failure fragment } } ) ; }
protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
FileReftableStack . CompactionStats getCompactionStats ( ) { return reftableStack . getStats ( ) ; }
public OnlineBackup incremental ( String targetDirectory ) { outcome = new BackupService ( ) . doIncrementalBackup ( hostNameOrIp , port , new File ( targetDirectory ) , getConsistencyCheck ( true ) , timeoutMillis , defaultConfig ( ) ) ; return this ; }
private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; } }
public boolean setTrace ( @NonNull ITmfTrace trace ) throws TmfAnalysisException { boolean ret = super . setTrace ( trace ) ; if ( ! ret ) { return ret ; } ret = fCriticalPathModule . setTrace ( trace ) ; if ( ret ) { fCriticalPathModule . setParameter ( CriticalPathModule . PARAM_GRAPH , getId ( ) ) ; } return ret ; }
public void fillContextMenu ( final IMenuManager menu ) { super . fillContextMenu ( menu ) ; final ISelection selection = getContext ( ) . getSelection ( ) ; if ( selection . isEmpty ( ) ) { return ; } // Wait the end of the loading of the representations file try { Job . getJobManager ( ) . join ( AbstractRepresentationsFileJob . FAMILY , new NullProgressMonitor ( ) ) ; } catch ( InterruptedException e ) { // Do nothing } // Differents behavior between win and linux : windows will not // display contextual menu if busy cursor while dialog is shown . // Fill the context menu contextMenuFiller . fillContextMenu ( menu , selection ) ; }
public void dispose ( ) { // run super . super . dispose ( ) ; // remove ourselves as a selection and registry listener getSite ( ) . getPage ( ) . removePostSelectionListener ( this ) ; RegistryFactory . getRegistry ( ) . removeListener ( this ) ; SaveablesList saveables = ( SaveablesList ) getSite ( ) . getService ( ISaveablesLifecycleListener . class ) ; if ( saveables != null ) { saveables . removeModelLifecycleListener ( saveablesTracker ) ; } currentPart = null ; currentSelection = null ; pinPropertySheetAction = null ; }
public void setBaseballCard ( BaseballCard card ) { Locale locale = Locale . getDefault ( ) ; brand . setText ( card . brand ) ; year . setText ( String . format ( locale , " % d" , card . year ) ) ; number . setText ( card . number ) ; player . setText ( card . playerName ) ; }
private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
private static boolean isStringParameter ( @NonNull Expression expression , @NonNull JavaContext context ) { if ( expression instanceof StringLiteral ) { return true ; } else { JavaParser . ResolvedNode resolvedNode = context . resolve ( expression ) ; if ( resolvedNode instanceof JavaParser . ResolvedField ) { if ( ( ( JavaParser . ResolvedField ) resolvedNode ) . getValue ( ) instanceof String ) { return true ; } } } return false ; }
protected double getScore ( double availableCpu , double availableMemory , Map < String , Double > availableGenericResources ) { TopologyDetails td = getNextHighest ( ) ; return getScore ( availableCpu , availableMemory , availableGenericResources , td ) ; }
public < T extends Action > List < T > getActions ( Class < T > type ) { List < T > _actions = Util . filter ( getPersistedActions ( ) , type ) ; for ( TransientActionFactory < ? > taf : TransientActionFactory . factoriesFor ( getClass ( ) , type ) ) { _actions . addAll ( Util . filter ( createFor ( taf ) , type ) ) ; } return Collections . unmodifiableList ( _actions ) ; }
public void addRepresentation ( ImageData srcImageData , int zoom ) { if ( srcImageData == null ) SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; int imageSelectorIndex = DPIUtil . mapZoomToImageSelectorIndex ( zoom ) ; if ( imageSelectorIndex == device . getImageSelector ( ) ) { init ( srcImageData ) ; data [ imageSelectorIndex ] = srcImageData ; } else { data [ imageSelectorIndex ] = srcImageData ; } }
private DefaultEnvironment buildEnvironment ( EnvironmentType environmentType ) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment ( environmentType ) ; return defaultEnvironment ; }
public int hashCode ( ) { if ( getRepositoryName ( ) != null ) return getRepositoryName ( ) . hashCode ( ) ; return System . identityHashCode ( this ) ; }
public List < String > getExtensions ( ) { return extensions ; }
public List < RadiologyOrder > getRadiologyOrdersByPatient ( Patient patient ) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria ( ) ; addRestrictionOnPatient ( radiologyOrderCriteria , patient ) ; final List < RadiologyOrder > result = ( List < RadiologyOrder > ) radiologyOrderCriteria . list ( ) ; return result == null ? new ArrayList < RadiologyOrder > ( ) : result ; }
public Weld addExtensions ( Class < ? extends Extension > . . . extensionClasses ) { for ( Class < ? extends Extension > extensionClass : extensionClasses ) { try { Extension extension = SecurityActions . newInstance ( extensionClass ) ; addExtension ( extension ) ; } catch ( Exception ex ) { CommonLogger . LOG . unableToInstantiate ( extensionClass , new Object [ ] { } , ex ) ; } } return this ; }
public RTTestsParser ( ) { super ( Messages . _Warnings_RTTests_ParserName ( ) , Messages . _Warnings_RTTests_LinkName ( ) , Messages . _Warnings_RTTests_TrendName ( ) , CYCLICTEST_WARNING_PATTERN , true ) ; }
private ValidationResult hostExists ( ) { return getVds ( ) == null ? new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_HOST_NOT_EXIST ) : ValidationResult . VALID ; }
public static ToolTipString fromString ( String text ) { return new ToolTipString ( text , toHtmlString ( text ) ) ; }
public DataRadioStation getNextById ( String id ) { if ( listStations . isEmpty ( ) ) return null ; for ( int i = 0 ; i < listStations . size ( ) - 1 ; i ++ ) { if ( listStations . get ( i ) . ID . equals ( id ) ) { return listStations . get ( i + 1 ) ; } } return listStations . get ( 0 ) ; }
public static void setBiomeArrayMethod ( boolean jeidPresent ) { try { if ( jeidPresent ) { biomeArrayMethod = Chunk . class . getMethod ( "getIntBiomeArray" ) ; } else { biomeArrayMethod = Chunk . class . getMethod ( "getBiomeArray" ) ; } } catch ( NoSuchMethodException e ) { throw new RuntimeException ( e ) ; } }
public String getDescription ( ) { return "Transform files representing a structured table under an Alluxio directory . " + "\n\n" + "Files are coalesced and converted to parquet format . " + "\n\n" + "Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , " + "currently , the only modification you can do to the example definition is " + "the number of files in the option . " }
public static void validateNonNegative ( int [ ] data , String paramName ) { boolean nonnegative = true ; for ( int value : data ) { if ( value < 0 ) { nonnegative = false ; } } Preconditions . checkArgument ( nonnegative , "Values for % s must be >= 0 , got : % s" , paramName , data ) ; }
public SetContentTypeFilter ( ) throws IOException { mimetypeToExtensionMap = new Properties ( ) ; mimetypeToExtensionMap . load ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( "mimetypeToExtension . txt" ) ) ) ; contentTypeProperties = new Properties ( ) ; contentTypeProperties . load ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( "toContentType . properties" ) ) ) ; }
private SwiftApi api ( String authUrl , Properties overrides ) throws IOException { if ( overrides == null ) { overrides = new Properties ( ) ; } overrides . setProperty ( CREDENTIAL_TYPE , "tempAuthCredentials" ) ; return ContextBuilder . newBuilder ( new SwiftApiMetadata ( ) ) . credentials ( "user" , "password" ) . endpoint ( authUrl ) . overrides ( overrides ) . modules ( ImmutableSet . of ( new ExecutorServiceModule ( sameThreadExecutor ( ) ) ) ) . buildApi ( SwiftApi . class ) ; }
public void setAcceptableValues ( Collection < K > values ) { buttons . clear ( ) ; panels . clear ( ) ; wrapperPanel . clear ( ) ; if ( values != null ) { for ( final K value : values ) { addValue ( value ) ; } } updateButtons ( ) ; }
public Bucket getOrCreateBucket ( String bucketName ) { Bucket bucket = storage . get ( bucketName ) ; if ( bucket == null ) { log . debug ( String . format ( "Creating a new bucket % s" , bucketName ) ) ; return storage . create ( BucketInfo . of ( bucketName ) ) ; } return bucket ; }
private void onFragmentLoaded ( ) { if ( searchAdapter == null ) { searchAdapter = new SearchlistAdapter ( getActivity ( ) , itemAccess ) ; setListAdapter ( searchAdapter ) ; } searchAdapter . notifyDataSetChanged ( ) ; setListShown ( true ) ; String query = getArguments ( ) . getString ( ARG_QUERY ) ; setEmptyText ( getString ( R . string . no_results_for_query , query ) ) ; }
private Iterable < Ref > getSortedRefs ( ) throws Exception { List < Ref > all = db . getRefDatabase ( ) . getRefsByPrefix ( ALL ) ; if ( all instanceof RefMap || ( all instanceof SortedMap && ( ( SortedMap ) all ) . comparator ( ) == null ) ) { return all ; } return RefComparator . sort ( all ) ; }
private static void convertAAAProfilesResult ( AsyncQuery aQuery ) { aQuery . converterCallback = new IAsyncConverter ( ) { @Override public Object Convert ( Object source , AsyncQuery _asyncQuery ) { List < String > results = new ArrayList < String > ( ) ; for ( ProfileEntry profileEntry : source != null ? ( Collection < ProfileEntry > ) source : new ArrayList < ProfileEntry > ( ) ) { results . add ( profileEntry . getProfile ( ) ) ; } return results ; } } ; }
FunctionKindRowColumnHeaderMetaData ( final Supplier < FunctionDefinition > functionSupplier , final CellEditorControlsView . Presenter cellEditorControls , final KindPopoverView . Presenter editor , final Optional < String > editorTitle , final FunctionGrid gridWidget ) { super ( cellEditorControls , editor , editorTitle ) ; this . functionSupplier = functionSupplier ; this . gridWidget = gridWidget ; }
public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < ProxiedPlayer > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( partialName . equalsIgnoreCase ( iterPlayerName ) ) { matched . add ( iPlayer ) ; break ; } if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
private int zigzagDecode ( int input ) { return ( input > > > 1 ) ^ ( - ( input & 1 ) ) ; }
public void testEqualsCondition ( ) { doTest ( ) ; }
public void testRedrawAfterDispose ( ) { LineNumberRulerColumn lineNumberRulerColumn = new LineNumberRulerColumn ( ) ; CompositeRuler ruler = new CompositeRuler ( ) ; ruler . addDecorator ( 0 , lineNumberRulerColumn ) ; SourceViewer sourceViewer = new SourceViewer ( fParent , ruler , SWT . NONE ) ; lineNumberRulerColumn . getControl ( ) . setSize ( 10 , 10 ) ; sourceViewer . getTextWidget ( ) . dispose ( ) ; lineNumberRulerColumn . redraw ( ) ; }
public boolean configureDefaultNetworkRulesForSystemVm ( final Connect conn , final String vmName ) { if ( ! _canBridgeFirewall ) { return false ; } final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( "default_network_rules_systemvm" ) ; cmd . add ( " -- vmname" , vmName ) ; cmd . add ( " -- localbrname" , _linkLocalBridgeName ) ; final String result = cmd . execute ( ) ; if ( result != null ) { return false ; } return true ; }
public void testQueryCumulativeTable ( ) { computeActual ( "SELECT * FROM \" * :* \"" ) ; computeActual ( "SELECT * FROM \"java . util . logging :* \"" ) ; assertTrue ( computeActual ( "SELECT * FROM \"java . lang :* \"" ) . getRowCount ( ) > 1 ) ; assertTrue ( computeActual ( "SELECT * FROM \"jAVA . LANg :* \"" ) . getRowCount ( ) > 1 ) ; }
public RequestLogger get ( ) { LoggingRequestLogger logger = new LoggingRequestLogger ( mapper , setMDC , setContextMDC ) ; log . debug ( new Exception ( "Stack trace" ) , "Creating % s at" , logger ) ; return logger ; }
private IllegalReferenceCountException handleIllegalReferenceCountException ( IllegalReferenceCountException e ) { String accessRecord = leak . toString ( ) ; if ( StringUtil . isNullOrEmpty ( accessRecord ) ) { // means leak has been closed and there is no accessRecord . return e ; } return new TrackedIllegalReferenceCountException ( e , accessRecord ) ; }
public List < Payment > getAccountPayments ( final UUID accountId , final boolean withPluginInfo , final boolean withAttempts , final Iterable < PluginProperty > properties , final TenantContext tenantContext ) throws PaymentApiException { return paymentProcessor . getAccountPayments ( accountId , withPluginInfo , withAttempts , tenantContext , internalCallContextFactory . createInternalTenantContext ( accountId , tenantContext ) ) ; }
public void startBucket ( String bucketKey ) { BulkCommand command = getCurrentCommand ( ) ; Serializable auditParam = command . getParam ( NXAuditEventsService . DISABLE_AUDIT_LOGGER ) ; disableAudit = auditParam != null && Boolean . parseBoolean ( auditParam . toString ( ) ) ; retentionManager = Framework . getService ( RetentionManager . class ) ; ruleId = command . getParam ( PARAM_RULE_ID ) ; }
public boolean remove ( Connection connection ) { boolean removed = connectionPool . remove ( connection ) ; if ( getHttpExchanges ( ) . isEmpty ( ) ) { tryRemoveIdleDestination ( ) ; } else { // We need to execute queued requests // even if this connection was removed . // We may create a connection that is not // needed , but it will eventually idle timeout . if ( removed ) process ( true ) ; } return removed ; }
public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
public static ScheduledExecutorService newScheduler ( int numThreads , String threadNamePrefix , boolean isDaemon ) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor ( numThreads , new SchedulerThreadFactory ( threadNamePrefix , isDaemon ) ) ; scheduler . setContinueExistingPeriodicTasksAfterShutdownPolicy ( false ) ; scheduler . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; scheduler . setRemoveOnCancelPolicy ( true ) ; return scheduler ; }
public boolean setValue ( T newValue ) { if ( ! validator . validate ( newValue ) ) { LOGGER . warn ( "The passed value { } is invalid . " , newValue ) ; return false ; } PropertyChangeEvent event = new PropertyChangeEvent ( this , id . toString ( ) , this . value , newValue ) ; this . value = newValue ; dispatchChangedEvent ( event ) ; return true ; }
public void onMessage ( MessageHolderWithTokens message ) { try { logger . trace ( "receiving tokens from queue , triggering Notification Dispatcher class to pick the right sender" ) ; dequeueEvent . fire ( message ) ; } catch ( DispatchInitiationException e ) { throw e ; } catch ( Exception e ) { logger . error ( "NotificationDispatcher or PushNotificationSender unexpectedly failed , the message won't be redelivered" , e ) ; } }
private Collection < Key > getRegisteredKeys ( ) { List < Key > result = new ArrayList < Key > ( ) ; return result . addAll ( cacheMap . keySet ( ) ) ; }
protected AbstractMetric ( String metricName , String metricType , T initialValue , MetricReportManager manager ) { name = metricName ; type = metricType ; value = initialValue ; metricManager = manager ; }
public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; AssertTrue ( allergy . hasSameValues ( allergy ( ) ) ) ; }
private static String readMapping ( ) throws IOException , ParseException { JSONParser parser = new JSONParser ( ) ; ClassLoader classloader = Thread . currentThread ( ) . getContextClassLoader ( ) ; InputStream inputStream = classloader . getResourceAsStream ( "mapping . json" ) ; String mapping = IOUtils . toString ( inputStream , "UTF - 8" ) ; Object object = parser . parse ( mapping ) ; JSONObject jsonObject = ( JSONObject ) object ; return jsonObject . toJSONString ( ) ; }
public synchronized void commit ( ) throws CommitException { SyncCommitObserver sco = null ; try { sco = new SyncCommitObserver ( ) ; commitAsync ( sco ) ; sco . waitForCommit ( ) ; } finally { updates . clear ( ) ; weakNotification = null ; columnsRead . clear ( ) ; } }
public static boolean hasPictureId ( byte [ ] buf , int off , int len ) { if ( ! isValid ( buf , off ) ) return false ; if ( ( buf [ off ] & X_BIT ) == 0 || ( buf [ off + 1 ] & I_BIT ) == 0 ) return false ; return true ; }
public void setEnabled ( boolean enabled ) { this . active = enabled ; updateButtonState ( ) ; }
default void beforeDataProviderExecution ( IDataProviderMethod dataProviderMethod , ITestNGMethod method , ITestContext iTestContext ) { }
private void handleEndActionJobAndStep ( ) { if ( ! hasTaskHandlers ( ) || getExecutionIndex ( ) == getTaskHandlers ( ) . size ( ) - 1 && ( ! parentHasCallback ( ) || getExecutionContext ( ) . getExecutionMethod ( ) == ExecutionMethod . AsStep ) ) { startFinalizingStep ( ) ; } }
private boolean waitForScanState ( ScanStates state ) { try { do { scanState . wait ( ) ; } while ( ! getScanState ( ) . equals ( state ) ) ; return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( "problem waiting for scanLock whilst in state " + state . name ( ) , e ) ; return false ; } }
private void maybeScheduleCheckpoint ( ) { switch ( state ( ) ) { case RESTORING : case SUSPENDED : this . checkpoint = checkpointableOffsets ( ) ; break ; case RUNNING : if ( ! eosEnabled ) { this . checkpoint = checkpointableOffsets ( ) ; } break ; case CREATED : case CLOSED : throw new IllegalStateException ( "Illegal state " + state ( ) + " while scheduling checkpoint for active task " + id ) ; default : throw new IllegalStateException ( "Unknown state " + state ( ) + " while scheduling checkpoint for active task " + id ) ; } }
protected void executeQueryCommand ( ) { Provider hostProvider = getProvider ( ) ; ProviderProxy proxy = ProviderProxyFactory . getInstance ( ) . create ( hostProvider ) ; getQueryReturnValue ( ) . setReturnValue ( chainToString ( proxy . getCertificateChain ( ) ) ) ; }
public void t1 ( ) { testCaseExecutionOrder . add ( new Object ( ) { } . getClass ( ) . getEnclosingMethod ( ) . getName ( ) ) ; }
public void testValidateDataStreamsNoConflicts ( ) { Metadata metadata = createIndices ( 5 , 10 , "foo - datastream" ) . metadata ; try { validateDataStreams ( metadata . getIndicesLookup ( ) , ( DataStreamMetadata ) metadata . customs ( ) . get ( DataStreamMetadata . TYPE ) ) ; } catch ( Exception e ) { fail ( "did not expect exception when validating a system without indices that would conflict with future backing indices" , e ) ; } }
public ShaderProvider getPassShaderProvider ( int n ) { return passShaderProviders [ n ] ; }
public void onSessionClosed ( QBRTCSession session ) { stopTimer ( ) ; }
public void install ( ITextViewer textViewer ) { for ( IReconciler iReconciler : fReconcilers ) { if ( iReconciler != null ) { iReconciler . install ( textViewer ) ; } } }
public JettyServer run ( WebApplicationContext baseContext , boolean directlyUseAsWebAppRoot , Function < Function < Integer , JettyServer > , JettyServer > serverStarter , boolean exitOnError ) { try { configureLogger ( ) ; configureSentry ( baseContext ) ; JettyServer jettyServer = createJettyServer ( baseContext , directlyUseAsWebAppRoot , serverStarter , v - > v . addLifeCycleListener ( new JettyLifeCycleListener ( baseContext ) ) ) ; jettyServer . start ( ) ; logStartupInfo ( baseContext ) ; return jettyServer ; } catch ( Exception e ) { return logErrorAndExit ( e , exitOnError ) ; } }
public PlanItem ( String id , String definitionRef ) { super ( ) ; this . id = id ; this . definitionRef = definitionRef ; }
public int hashCode ( ) { return ~~name . hashCode ( ) ; }
protected boolean copyObject ( String src , String dst ) { try { LOG . debug ( "Copying { } to { } " , src , dst ) ; mClient . copyObject ( mBucketNameInternal , src , mBucketNameInternal , dst ) ; return true ; } catch ( CosClientException e ) { LOG . error ( "Failed to rename file { } to { } " , src , dst , e ) ; return false ; } }
public RepositorySearchDialog ( Collection < String > existingDirs ) { this ( existingDirs , false , true ) ; }
public DelegatingResourceDescription getCreatableProperties ( ) { DelegatingResourceDescription description = super . getCreatableProperties ( ) ; description . addProperty ( "location" ) ; return description ; }
private JsonParser getParser ( String data ) throws IOException { // If the first character is { or [ , assume this is // JSON data and use a JsonParser . Otherwise assume // YAML and use a YAMLParser . char firstChar = data . charAt ( 0 ) ; if ( firstChar == ' { ' || firstChar == ' [ ' ) { return this . jsonFactory . createParser ( data ) ; } else { return this . yamlFactory . createParser ( data ) ; } }
public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
private RawText getRawText ( ObjectId id , Repository repo ) throws IOException { if ( id . equals ( ObjectId . zeroId ( ) ) ) { return new RawText ( new byte [ ] { } ) ; } return new RawText ( repo . openBlob ( id ) . getCachedBytes ( ) ) ; }
private static String getUserAgentSuffix ( ) { return " ; " + USER_AGENT_SUFFIX ; }
public Builder setDataSize ( Estimate dataSize ) { this . dataSize = dataSize ; return this ; }
public boolean isExpired ( Date invocationDate ) { if ( getExpires ( ) != null ) { return getExpires ( ) . before ( invocationDate == null ? new Date ( ) : invocationDate ) ; } return false ; }
public void stop ( ) { if ( isRunning ( ) ) { process . destroy ( ) ; try { if ( stdout != null ) { stdout . close ( ) ; } if ( stdin != null ) { stdin . close ( ) ; } } catch ( IOException e ) { throw new RuntimeException ( e . getMessage ( ) , e ) ; } finally { running . set ( false ) ; } } }
public boolean equals ( Object object ) { if ( object == this ) { return true ; } if ( object == null || object . getClass ( ) != getClass ( ) ) { return false ; } MacroId rhs = ( MacroId ) object ; return new EqualsBuilder ( ) . append ( getId ( ) , rhs . getId ( ) ) . append ( getSyntax ( ) , rhs . getSyntax ( ) ) . isEquals ( ) ; }
public Map < String , Object > getExtraInformation ( ) { return extraInformation ; }
public int hashCode ( ) { return Objects . hash ( pointer , ownerName , owner , readers , writers ) ; }
private String getFriendsPath ( SourcePathResolver sourcePathResolver , ImmutableList < SourcePath > friendPathsSourcePaths ) { // https :/ / youtrack . jetbrains . com / issue / KT - 29933 ImmutableSortedSet < String > absoluteFriendPaths = ImmutableSortedSet . copyOf ( friendPathsSourcePaths . stream ( ) . map ( path - > sourcePathResolver . getAbsolutePath ( path ) . toString ( ) ) . collect ( Collectors . toSet ( ) ) ) ; return absoluteFriendPaths . isEmpty ( ) ? "" : " - Xfriend - paths = " + absoluteFriendPaths . stream ( ) . reduce ( "" , ( path1 , path2 ) - > path1 + " , " + path2 ) ; }
public Target ( String targetUriAsString ) { Assert . hasText ( targetUriAsString , "The provided targetUriAsString must neither be null nor empty . " ) ; this . targetUri = URI . create ( targetUriAsString ) ; }
public PropertyInvertedRegexTester ( IPersonAttributesGroupTestDefinition definition ) { super ( definition ) ; final String propertyName = definition . getTestValue ( ) ; String regexExpression = PropertiesManager . getProperty ( propertyName , "" ) ; if ( StringUtils . isBlank ( regexExpression ) ) { logger . error ( "Unable to find property name { } in portal . properties or has empty value . " + " PAGS PropertyInvertedRegexTester will always return true for attribute { } " , propertyName , definition . getAttributeName ( ) ) ; } setPattern ( regexExpression ) ; }
public final boolean doesProvideNewPage ( ) { if ( provision == null ) { throw new IllegalStateException ( "Page instance not yet resolved" ) ; } return getProvision ( ) . doesProvideNewPage ( ) ; }
private Handler getHandler ( ) { if ( mHandler == null ) { // Use current main looper mHandler = new Handler ( mContext . getMainLooper ( ) ) ; } return mHandler ; }
@SuppressWarnings ( "UnusedDeclaration" ) @Deprecated public void setDebugging ( boolean debugging ) { setIndicatorsEnabled ( debugging ) ; }
public List < ServerTemplate > load ( ) { synchronized ( store ) { return store . values ( ) . stream ( ) . map ( e - > cloneServerTemplate ( e ) ) . collect ( Collectors . toList ( ) ) ; } }
public String getLearnerMaster ( ) { QuorumPeer . QuorumServer learnerMaster = observer . getCurrentLearnerMaster ( ) ; InetSocketAddress address = learnerMaster . addr . getReachableOrOne ( ) ; if ( address == null ) { return "Unknown" ; } return address . getAddress ( ) . getHostAddress ( ) + " : " + address . getPort ( ) ; }
default < R > Task < R > flatMap ( final String desc , final Function1 < ? super T , Task < R > > func ) { ArgumentUtil . requireNotNull ( func , "function" ) ; final Task < Task < R > > nested = map ( "map : " + desc , func ) ; nested . getShallowTraceBuilder ( ) . setSystemHidden ( true ) ; nested . getShallowTraceBuilder ( ) . setTaskType ( "nested" ) ; return flatten ( desc , nested ) ; }
protected List < String > findStringsInFileCommon ( String regexp , boolean stopOnFirst , int searchLimit , File fileToSearch ) { return findStringsInFileCommon ( regexp , stopOnFirst , searchLimit , fileToSearch , Project . MSG_INFO ) ; }
public void notifyAboutStartProcess ( String id ) { Long processInstanceId = Long . parseLong ( id ) ; newProcessInstanceEvent . fire ( new NewProcessInstanceEvent ( serverTemplateId , deploymentId , processInstanceId , processDefId , processName , null ) ) ; final String message = Constants . INSTANCE . ProcessStarted ( processInstanceId . longValue ( ) ) ; notificationEvent . fire ( new NotificationEvent ( message , NotificationEvent . NotificationType . SUCCESS ) ) ; close ( ) ; }
protected void process ( final SpaceReference source , final SpaceReference destination ) { visitDocuments ( source , new Visitor < DocumentReference > ( ) { @Override public void visit ( DocumentReference oldChildReference ) { DocumentReference newChildReference = oldChildReference . replaceParent ( source , destination ) ; maybeMove ( oldChildReference , newChildReference ) ; } } ) ; }
public void processEvent ( DiscoveryServiceEvent event ) throws LogReplicationDiscoveryServiceException { log . info ( "Process event { } " , event . getType ( ) ) ; switch ( event . type ) { case DISCOVER_INIT_TOPOLOGY : startDiscovery ( ) ; break ; case ACQUIRE_LOCK : processLockAcquire ( ) ; break ; case RELEASE_LOCK : processLockRelease ( ) ; break ; case DISCOVERED_TOPOLOGY : processTopologyChangeNotification ( event ) ; break ; case UPGRADE : processUpgrade ( event ) ; break ; default : log . error ( "Invalid event type { } " , event . type ) ; } }
public void deleteError ( final ProgramError error ) { synchronized ( errors ) { errors . remove ( error ) ; } eventBus . publish ( new ProgramErrorDeletedEvent ( error ) ) ; }
public LamiTableContentProvider ( ) { fCurrentEntries = Collections . emptyList ( ) ; }
public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent ( ) { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory ( ) ; factory . setAdviceChain ( new CacheInterceptor ( ) ) ; assertThat ( rabbitTracing . decorateSimpleRabbitListenerContainerFactory ( factory ) . getAdviceChain ( ) ) . hasSize ( 2 ) . matches ( adviceArray - > adviceArray [ 0 ] instanceof TracingRabbitListenerAdvice ) ; }
private static List < IResource > getReadonlyFiles ( IResource [ ] resources ) { List < IResource > readOnlyFiles = new ArrayList < > ( ) ; for ( int i = 0 ; i < resources . length ; i ++ ) { IResource resource = resources [ i ] ; ResourceAttributes resourceAttributes = resource . getResourceAttributes ( ) ; if ( resource . getType ( ) == IResource . FILE && resourceAttributes != null && resourceAttributes . isReadOnly ( ) ) readOnlyFiles . add ( resource ) ; } return readOnlyFiles ; }
void clean ( K key ) { List < V > data = getDataMap ( ) . get ( key ) ; if ( data != null ) { data . clear ( ) ; } }
public static boolean isMemoryDeviceHotUnpluggable ( VmDevice memoryDevice ) { if ( ! isMemory ( memoryDevice ) ) { throw new IllegalArgumentException ( "Memory device expected but device " + memoryDevice + " obtained . " ) ; } return getSpecParamsIntValue ( memoryDevice , SPEC_PARAM_SIZE ) . isPresent ( ) && getSpecParamsIntValue ( memoryDevice , SPEC_PARAM_NODE ) . isPresent ( ) ; }
public boolean connectorExists ( String id ) { try { List < ConnectorConfiguration > list = configPersistence . load ( ImmutableMap . of ( Constants . CONNECTOR_PERSISTENT_ID , id ) ) ; if ( list . isEmpty ( ) ) { return false ; } return true ; } catch ( PersistenceException e ) { throw new RuntimeException ( "unable to load the list of connector configurations" , e ) ; } }
public void testUpdateStmtBuilder ( ) { printStatement ( "update foo set \"column [ 'looks_like_nested' ] \" = 1" ) ; printStatement ( "update foo set foo . a = 'b'" ) ; printStatement ( "update bar . foo set bar . foo . t = 3" ) ; printStatement ( "update foo set col [ 'x' ] = 3" ) ; printStatement ( "update foo set col [ 'x' ] = 3 where foo [ 'x' ] = 2" ) ; printStatement ( "update schemah . foo set foo . a = 'b' , foo . b = foo . a" ) ; printStatement ( "update schemah . foo set foo . a = abs ( - 6 . 3334 ) , x = true where x = false" ) ; printStatement ( "update foo set foo = 'a' returning id" ) ; printStatement ( "update foo set foo = 'a' where x = false returning id" ) ; printStatement ( "update foo set foo = 'a' returning id AS foo" ) ; printStatement ( "update foo set foo = 'a' returning id + 1 AS foo , id - 1 as bar" ) ; }
public void setSetPath ( String path ) { requireNonNull ( path , "path is null" ) ; setPath . set ( path ) ; }
public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; // all non - null values should be equivalent so in a race it doesn't matter who wins this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
public int getMaxCapacity ( ) { readLock . lock ( ) ; try { return maxCapacity ; } finally { readLock . unlock ( ) ; } }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
private static DataSource createC3P0DataSource ( String name , Map < Object , Object > properties ) { ComboPooledDataSource ds = new ComboPooledDataSource ( false ) ; ds . setDataSourceName ( name ) ; ds . setIdentityToken ( name ) ; new BeanMap ( ds ) . putAll ( properties ) ; C3P0Registry . reregister ( ds ) ; try { checkDataSource ( ds , name ) ; } catch ( SQLException e ) { throw new RuntimeException ( "Failed to check data source " + e . toString ( ) , e ) ; } return ds ; }
protected Control createPageControls ( Composite parent ) { setTitle ( Messages . RemoveReviewerDialog_Remove_Reviewer ) ; Label label = new Label ( parent , SWT . NONE ) ; label . setText ( NLS . bind ( Messages . RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove , userToRemove . getDisplayName ( ) ) ) ; return parent ; }
public List < PermissionSubject > getPermissionCheckSubjects ( ) { List < PermissionSubject > list = super . getPermissionCheckSubjects ( ) ; Guid storagePoolId = getVdsGroup ( ) == null || getVdsGroup ( ) . getstorage_pool_id ( ) == null ? null : getVdsGroup ( ) . getstorage_pool_id ( ) . getValue ( ) ; list . add ( new PermissionSubject ( storagePoolId , VdcObjectType . StoragePool , getActionType ( ) . getActionGroup ( ) ) ) ; QuotaHelper . addQuotaPermissionSubject ( list , getStoragePool ( ) , getQuotaId ( ) ) ; return list ; }
public void onInit ( String clientName , Map < String , Object > credentials ) throws IOException { packer . packStructHeader ( 2 , INIT . signature ( ) ) ; packer . pack ( clientName ) ; packer . pack ( ValueUtils . asMapValue ( credentials ) ) ; onMessageComplete . onMessageComplete ( ) ; }
SecurityGroupExtensionProvider ( NeutronSecurityGroupExtension neutronSecurityGroupExtension , NovaSecurityGroupExtension novaSecurityGroupExtension ) { this . neutronSecurityGroupExtension = neutronSecurityGroupExtension ; this . novaSecurityGroupExtension = novaSecurityGroupExtension ; }
private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; return comparedExpression ; } } return comparedExpression ; }
private void scheduleRefresh ( Duration delay ) { // already stopped ? avoids rejection exception if ( executor . isShutdown ( ) ) { return ; } executor . schedule ( this : : refresh , delay . toMillis ( ) , TimeUnit . MILLISECONDS ) ; }
public static void main ( String [ ] args ) { LocalQueryRunner queryRunner = createLocalQueryRunner ( ImmutableMap . of ( "reorder_joins" , "false" ) ) ; new SqlConsecutiveJoinBenchmark ( queryRunner ) . runBenchmark ( new SimpleLineBenchmarkResultWriter ( System . out ) ) ; queryRunner . close ( ) ; }
protected void beforeStartingVertx ( VertxOptions options ) { }
public Builder body ( String json ) { checkNotNull ( json , "body required" ) ; checkArgument ( json . getBytes ( ) . length <= getInteger ( MESSAGE_BODY_MAX_IN_BYTES ) , "json size must be <= % s bytes" , getInteger ( MESSAGE_BODY_MAX_IN_BYTES ) ) ; this . body = new JsonBall ( json ) . toString ( ) ; return self ( ) ; }
private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
private static CDIProvider getCDIProvider ( ) { if ( configuredProvider != null ) { return configuredProvider ; } else { // Discover providers and cache if ( discoveredProviders == null ) { synchronized ( lock ) { if ( discoveredProviders == null ) { findAllProviders ( ) ; } } } configuredProvider = discoveredProviders . stream ( ) . filter ( c - > c . getCDI ( ) != null ) . findAny ( ) . orElseThrow ( ( ) - > new IllegalStateException ( "Unable to access CDI" ) ) ; return configuredProvider ; } }
public void testIsDrawable_Stage ( ) { testIsDrawable ( CaseManagementDiagram . class , AdHocSubprocess . class , true ) ; }
public static boolean customImageExists ( String storage , String key ) { final AzureBlobClient azureBlob = ContextBuilder . newBuilder ( "azureblob" ) . credentials ( storage , key ) . buildApi ( AzureBlobClient . class ) ; try { return azureBlob . containerExists ( "system" ) ; } finally { Closeables2 . closeQuietly ( azureBlob ) ; } }
public void enter ( ) { mUseEap = ( IkeSessionOptions . IKE_AUTH_METHOD_EAP == mIkeSessionOptions . getLocalAuthConfig ( ) . mAuthMethod ) ; super . enter ( ) ; }
public static Predicate < Expression > isInferenceCandidate ( ) { return expression - > { expression = normalizeInPredicateToEquality ( expression ) ; if ( expression instanceof ComparisonExpression && DeterminismEvaluator . isDeterministic ( expression ) && ! NullabilityAnalyzer . mayReturnNullOnNonNullInput ( expression ) && ! isDynamicFilter ( expression ) ) { ComparisonExpression comparison = ( ComparisonExpression ) expression ; if ( comparison . getType ( ) == ComparisonExpressionType . EQUAL ) { // We should only consider equalities that have distinct left and right components return ! comparison . getLeft ( ) . equals ( comparison . getRight ( ) ) ; } } return false ; } ; }
public void startMasters ( ) throws Exception { mMaster = LocalAlluxioMaster . create ( mWorkDirectory , true ) ; mMaster . start ( ) ; CommonUtils . PROCESS_TYPE . set ( CommonUtils . ProcessType . CLIENT ) ; } CommonUtils . PROCESS_TYPE . set ( CommonUtils . ProcessType . CLIENT ) ;
public Proxy getProxy ( ) { if ( mProxyHost == null ) return null ; Proxy . Type type = null ; switch ( mProxyType ) { case TYPE_HTTP : type = Proxy . Type . HTTP ; break ; case TYPE_SOCKS : type = Proxy . Type . SOCKS ; break ; } return new Proxy ( type , new InetSocketAddress ( mProxyHost , mProxyPort ) ) ; }
public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , "method" ) ; return this ; }
public Set < VmDeviceGeneralType > getDeviceTypesWithProperties ( Version version ) { if ( ! FeatureSupported . deviceCustomProperties ( version ) ) { return Collections . emptySet ( ) ; } Set < VmDeviceGeneralType > types ; EnumMap < VmDeviceGeneralType , Map < String , Pattern > > map = deviceProperties . get ( version ) ; if ( map . isEmpty ( ) ) { // no device type has any properities return Collections . emptySet ( ) ; } else { // prevent client to modify return Collections . unmodifiableSet ( map . keySet ( ) ) ; } }
public SWTBotSiriusDiagramEditor ( final IEditorReference reference , final SWTWorkbenchBot bot ) throws WidgetNotFoundException { super ( reference , bot ) ; GraphicalViewer graphicalViewer = UIThreadRunnable . syncExec ( new Result < GraphicalViewer > ( ) { @Override public GraphicalViewer run ( ) { final IEditorPart editor = partReference . getEditor ( true ) ; return editor . getAdapter ( GraphicalViewer . class ) ; } } ) ; ReflectionHelper . setFieldValueWithoutException ( this , "viewer" , new SWTBotSiriusGefViewer ( graphicalViewer ) , this . getClass ( ) . getSuperclass ( ) ) ; }
public CreateAllSnapshotsFromVmParameters ( ) { needsLocking = true ; snapshotType = SnapshotType . REGULAR ; saveMemory = true ; diskIdsToIgnoreInChecks = Collections . emptySet ( ) ; }
public SchedulerTask < ? > createTaskInstance ( String taskType ) throws IllegalArgumentException { try { return lookupTask ( taskType ) ; } catch ( ComponentLookupException e ) { this . logger . debug ( "Failed to load Schedule Task : " + taskType , e ) ; throw new IllegalArgumentException ( "Could not create task of type" + taskType , e ) ; } }
public PapyrusStereotypedElementItemProviderDecorator ( ComposeableAdapterFactory adapterFactory ) { super ( adapterFactory ) ; labelProviderService = new LabelProviderServiceImpl ( ) ; try { labelProviderService . startService ( ) ; } catch ( ServiceException ex ) { Activator . getDefault ( ) . getLog ( ) . log ( new Status ( IStatus . WARNING , Activator . PLUGIN_ID , "Unable to start Papyrus Label Provider Service" , ex ) ) ; // $NON - NLS - 1$ } }
default Optional < SourceMap > sourceMap ( ) { return Optional . empty ( ) ; }
public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( "ALTER SESSION SET `exec . errors . verbose` = true" ) ; }
private static String parseAnnotationFieldTypeName ( final Supplier < Class < ? > > theTypeSupplier , final String errorMessage ) { try { theTypeSupplier . get ( ) ; } catch ( MirroredTypeException mte ) { return mte . getTypeMirror ( ) . toString ( ) ; } throw new RuntimeException ( errorMessage ) ; }
default StreamPriority getStreamPriority ( ) { return null ; }
protected void configure ( ) { bind ( EventDao . class ) . to ( EventDaoInMemory . class ) . asEagerSingleton ( ) ; bind ( Bootstrap . class ) ; }
public static void onAdvancementEvent ( AdvancementEvent event ) { if ( ENABLED && event . getAdvancement ( ) . getDisplay ( ) != null && event . getAdvancement ( ) . getDisplay ( ) . shouldAnnounceToChat ( ) ) { logger . info ( " { } got the { } advancement" , event . getEntityPlayer ( ) . getDisplayNameString ( ) , event . getAdvancement ( ) . getDisplayText ( ) . getUnformattedText ( ) ) ; } }
public ExampleEndpointsProvider ( ) { // Put custom code here to get endpoints // In our case they will be hardcoded JHttpEndpoint httpEndpoint = new JHttpEndpoint ( URI . create ( "https :/ / jagger . griddynamics . net : 443" ) ) ; endpoints . add ( httpEndpoint ) ; }
public SlackUserProperty ( ) { this . userId = null ; this . disableNotifications = false ; }
public void onStreamCreate ( IMediaStream stream ) { if ( ! stream . isTranscodeResult ( ) ) { PacketListener listener = new PacketListener ( ) ; WMSProperties props = stream . getProperties ( ) ; synchronized ( props ) { props . setProperty ( STREAM_ACTION_LISTENER_PROPERTY , listener ) ; } stream . addLivePacketListener ( listener ) ; return ; } }
public long getEstimatedSizeInBytes ( ) { int size = INSTANCE_SIZE ; size += sizeOf ( levelOffsets ) ; size += tree . sizeOf ( ) ; for ( T item : items ) { size += item . getEstimatedSizeInBytes ( ) ; } return size ; }
public boolean respondsTo ( RunEvent event ) { Run r = event . getEventObject ( ) ; if ( event . getEventType ( ) == MisoEventType . RUN_FAILED && r . getHealth ( ) == HealthType . Failed ) { log . info ( "Run " + r . getAlias ( ) + " : " + event . getEventMessage ( ) ) ; return true ; } return false ; }
public boolean isEnabled ( ) { return super . isEnabled ( ) || isDirty ( ) ; }
private void updateSslVerifyUser ( boolean value ) { StoredConfig userConfig = GlobalConfigCache . getInstance ( ) . getUserConfig ( ) ; try { userConfig . load ( ) ; updateSslVerify ( userConfig , value ) ; } catch ( IOException | ConfigInvalidException e ) { // Log it , but otherwise ignore here . LOG . error ( MessageFormat . format ( JGitText . get ( ) . userConfigFileInvalid , userConfig , e ) ) ; } }
private static boolean isUserBrickAdapter ( BaseAdapter baseAdapter ) { return baseAdapter instanceof UserBrickAdapter ; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor ( CategoryListItem categoryListItem ) { FormulaEditorFragment formulaEditorFragment = ( ( FormulaEditorFragment ) getFragmentManager ( ) . findFragmentByTag ( FormulaEditorFragment . FORMULA_EDITOR_FRAGMENT_TAG ) ) ; if ( formulaEditorFragment != null ) { formulaEditorFragment . addResourceToActiveFormula ( categoryListItem . nameResId ) ; } return formulaEditorFragment ; }
public final ReviewCategoryStrategy reviewCategoryStrategy ( ) { String s = reviewCategeoryStrategyRaw ( ) ; return s != null ? ReviewCategoryStrategy . valueOf ( s ) : ReviewCategoryStrategy . NONE ; }
public Iterable < ConnectorFactory > getConnectorFactories ( ) { return ImmutableList . of ( new HiveConnectorFactory ( name , getClassLoader ( ) , Optional . fromNullable ( metastore ) ) ) ; }
public void testDBConnectionTimeMetrics ( ) { metrics . setDBConnectionTime ( 14 ) ; assertEquals ( 14 , testUtil . getGaugeValue ( "dbConnectionTime" ) ) ; }
protected void createCacheManagers ( ) throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig ( getCacheMode ( ) , true ) ; builder . clustering ( ) . stateTransfer ( ) . chunkSize ( 20 ) . sync ( ) . replTimeout ( 45 , TimeUnit . SECONDS ) ; createClusteredCaches ( 4 , cacheName ( ) , builder ) ; }
private String getByAccountName ( CodeReviewCommit codeReviewCommit ) { Account account = getAccount ( codeReviewCommit ) ; if ( account != null && account . getFullName ( ) != null ) { return " by " + account . getFullName ( ) ; } return "" ; }
public void findByUndefinedSchema ( ) throws Exception { getClient ( ) . perform ( get ( " / api / core / metadatafields / search / bySchema" ) . param ( "schema" , "undefined" ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( contentType ) ) . andExpect ( jsonPath ( "$ . page . size" , is ( 20 ) ) ) . andExpect ( jsonPath ( "$ . page . totalElements" , is ( 0 ) ) ) ; }
private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , "values is null" ) ; for ( long value : values ) { digest . add ( value ) ; } }
protected Object encodeCommand ( Command command ) { initDevicePassword ( command , LaipacProtocolDecoder . DEFAULT_DEVICE_PASSWORD ) ; switch ( command . getType ( ) ) { case Command . TYPE_CUSTOM : return formatCommand ( command , " { % s } " , Command . KEY_DATA ) ; case Command . TYPE_POSITION_SINGLE : return formatCommand ( command , "AVREQ , { % s } , 1" , Command . KEY_DEVICE_PASSWORD ) ; case Command . TYPE_REBOOT_DEVICE : return formatCommand ( command , "AVRESET , { % s } , { % s } " , Command . KEY_UNIQUE_ID , Command . KEY_DEVICE_PASSWORD ) ; default : break ; } return null ; }
public void close ( ) throws IOException { if ( selectObjectContentResult != null ) { selectObjectContentResult . close ( ) ; } }
@Override public boolean isDisposed ( ) { return get ( ) == null ; }
public void close ( ) throws IOException { if ( s3Object != null ) { super . close ( ) ; } }
public void loadChunk ( int x , int z ) { w . loadChunk ( x , z ) ; }
GeneratorUtil ( TypeOracle typeOracle , Logger logger , GeneratorContext generatorContext ) { this . typeOracle = typeOracle ; this . logger = logger ; this . generatorContext = generatorContext ; }
protected boolean failPassthroughVnicHotPlug ( ) { if ( VmInterfaceType . pciPassthrough == VmInterfaceType . forValue ( getParameters ( ) . getNic ( ) . getType ( ) ) ) { addCanDoActionMessage ( EngineMessage . HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED ) ; return true ; } return false ; }
public List < Map < String , Integer > > getStageReachedCounts ( Context context ) throws SQLException { return workspaceItemDAO . getStageReachedCounts ( context ) ; }
Evaluator ( final ObjectMapper mapper , final AsyncTaskExecutor asyncTaskExecutor , final long timeoutLength ) { this . mapper = mapper ; this . asyncTaskExecutor = asyncTaskExecutor ; this . timeoutLength = timeoutLength ; }
public MetaMasterSync ( Address masterAddress , MetaMasterMasterClient masterClient ) throws IOException { // TODO ( lu ) should avoid throw exception in Java constructor to avoid half - baked class instances mMasterAddress = masterAddress ; mMasterClient = masterClient ; mHeartbeatTimeoutMs = ( int ) Configuration . getMs ( PropertyKey . MASTER_HEARTBEAT_TIMEOUT_MS ) ; mLastSuccessfulHeartbeatMs = System . currentTimeMillis ( ) - mHeartbeatTimeoutMs ; } // Review : do we still need to throw exception here ? if not , you can remove the next TODO
public void sendLayerDeleted ( String layerName ) { listeners . forEach ( listener - > layerDeleted ( layerName ) ) ; }
public List < SqlIdentifier > getProjectionFields ( MetadataType metadataLevel , OptionManager options ) { List < SqlIdentifier > columnList = new ArrayList < > ( ) ; columnList . add ( new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_FQN_COLUMN_LABEL ) , SqlParserPos . ZERO ) ) ; columnList . add ( new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL ) , SqlParserPos . ZERO ) ) ; return Collections . unmodifiableList ( columnList ) ; }
protected TypedTransaction ( Transaction tx , Encoder encoder , TypeLayer tl ) { super ( tx , encoder , tl ) ; this . tx = tx ; this . encoder = encoder ; this . tl = tl ; }
public int hashCode ( ) { int result = name != null ? name . hashCode ( ) : 0 ; result = 31 * result + permissions . hashCode ( ) ; result = 31 * result + mask ; return result ; }
public EEFTabbedPropertySheetPage ( Object contributor , String contributorId ) { if ( contributor instanceof IEEFTabbedPropertySheetPageContributor ) { this . contributor = ( IEEFTabbedPropertySheetPageContributor ) contributor ; } else { this . contributor = new ContributorWrapper ( contributor , contributorId ) ; } this . registry = EEFTabbedPropertyRegistry . getDefault ( this . contributor . getContributorId ( ) ) ; }
public List < String > getSuggestions ( String input ) { return getWorlds ( ) . stream ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; }
protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; setSucceeded ( true ) ; } } }
public void testNotEliminateSorts ( ) { @Language ( "SQL" ) String sql = "SELECT quantity , row_number ( ) OVER ( ORDER BY quantity ) FROM lineitem ORDER BY tax" ; PlanMatchPattern pattern = anyTree ( sort ( window ( windowMatcherBuilder - > windowMatcherBuilder . specification ( windowSpec ) . addFunction ( functionCall ( "row_number" , Optional . empty ( ) , ImmutableList . of ( ) ) ) , LINEITEM_TABLESCAN_Q ) ) ) ; assertUnitPlan ( sql , pattern ) ; }
public Program getAssociatedProgram ( Artifact artifact ) { String extension = getAssociatedExtension ( artifact ) ; Program program = ProgramFinder . findProgram ( extension ) ; if ( program == null ) { throw new OseeArgumentException ( "No program associated with the extension [ % s ] found on your local machine . " , extension ) ; } return program ; }
public final Iterable < N > toDepthFirstIterable ( ) { return ( ) - > depthFirstIterator ( ) ; }
void put ( final K key , final V value ) { clusterRegistry . put ( scope , key , value ) ; System . out . println ( "putting key " + key + " from thread " + Thread . currentThread ( ) . getName ( ) ) ; localCacheInsert ( key , value ) ; }
public static String getWarningMessages ( String filename ) { String warningMessage = "" ; if ( getErrorMessage ( filename ) . length ( ) == 0 && filename . length ( ) > 0 ) { if ( ! filename . matches ( " [ A - Za - z ] [ A - Za - z0 - 9_ ] * " ) ) { // check to make sure if filename has no spaces String errorMessage = MESSAGES . whitespaceProjectNameError ( ) ; filename = filename . replaceAll ( " ( ) + " , " " ) . replace ( " " , "_" ) ; warningMessage = errorMessage + " . \n '" + filename + "' will be used if continued . " ; } } return warningMessage ; }
public @NonNull TraceSessionComponent [ ] getSessions ( ) { List < ITraceControlComponent > compenents = getChildren ( TraceSessionGroup . class ) ; if ( compenents . size ( ) > 0 ) { TraceSessionGroup group = ( TraceSessionGroup ) compenents . get ( 0 ) ; List < ITraceControlComponent > sessions = group . getChildren ( TraceSessionComponent . class ) ; return sessions . toArray ( new @NonNull TraceSessionComponent [ sessions . size ( ) ] ) ; } return new @NonNull TraceSessionComponent [ 0 ] ; }
private static void cacheColors ( Display display ) { BG_COLOR_RGB = JFaceColors . getInformationViewerBackgroundColor ( display ) . getRGB ( ) ; FG_COLOR_RGB = JFaceColors . getInformationViewerForegroundColor ( display ) . getRGB ( ) ; Color hyperlinkText = JFaceColors . getHyperlinkText ( display ) ; Color activeHyperlinkText = JFaceColors . getActiveHyperlinkText ( display ) ; if ( activeHyperlinkText != null ) { ACTIVE_LINK_COLOR_RGB = activeHyperlinkText . getRGB ( ) ; } if ( hyperlinkText != null ) { LINK_COLOR_RGB = hyperlinkText . getRGB ( ) ; } }
private IRadioButton < T > findFirstButtonInFieldTree ( IFormField f ) { if ( f instanceof IRadioButton ) { return ( IRadioButton < T > ) f ; // TODO : mnick } else if ( f instanceof ICompositeField ) { for ( IFormField sub : ( ( ICompositeField ) f ) . getFields ( ) ) { IRadioButton < T > b = findFirstButtonInFieldTree ( sub ) ; if ( b != null ) { return b ; } } } return null ; }
public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = " < ? xml version = \"1 . 0\" encoding = \"UTF - 8\" ? > \n" + " < ! DOCTYPE suppressions PUBLIC\n" + " \" -/ / Puppy Crawl // DTD Suppressions Xpath Experimental 1 . 2 // EN\"\n" + " \"http :/ / checkstyle . sourceforge . net / dtds / " + "suppressions_1_2_xpath_experimental . dtd\" > \n" + " < suppressions > \n" + " </ suppressions > \n" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( "Unexpected output log" , expected , systemOut . getLog ( ) ) ; assertEquals ( "Unexpected system error log" , "" , systemErr . getLog ( ) ) ; } ) ; Main . main ( " - c" , getPath ( "InputMainConfig - empty . xml" ) , " -- generate - xpath - suppression" , getPath ( "InputMainComplexityOverflow . java" ) ) ; }
public String getPackageName ( ) { if ( clazz . getPackage ( ) != null ) { return clazz . getPackage ( ) . getName ( ) ; } return "" ; }
public void testIsStringLiteral ( ) { Set < ASTLiteral > literals = getNodes ( ASTLiteral . class , TEST1 ) ; ASTLiteral literal = literals . iterator ( ) . next ( ) ; assertTrue ( literal . isStringLiteral ( ) ) ; assertEquals ( "java . lang . String" , literal . getTypeImage ( ) ) ; }
public ImmutableMap < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
protected void configure ( ServerHttpSecurity http ) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager ( ) ; X509PrincipalExtractor principalExtractor = getPrincipalExtractor ( ) ; AuthenticationWebFilter filter = new AuthenticationWebFilter ( authenticationManager ) ; filter . setServerAuthenticationConverter ( new ServerX509AuthenticationConverter ( principalExtractor ) ) ; http . addFilterAt ( filter , SecurityWebFiltersOrder . AUTHENTICATION ) ; }
public void action ( AuthenticationFlowContext context ) { if ( DisplayUtils . isConsole ( context ) ) { ConsoleOTPFormAuthenticator . SINGLETON . action ( context ) ; return ; } validateOTP ( context ) ; }
private void handleResourceChange ( GitResourceVariantTreeSubscriber subscriber , Repository which , Collection < IFile > resources ) { for ( GitSynchronizeData gsd : gsds ) { if ( which . equals ( gsd . getRepository ( ) ) ) { if ( resources != null && ! resources . isEmpty ( ) ) refreshResources ( subscriber , resources ) ; else refreshRepository ( subscriber ) ; } } }
public static Set < Path > getIncludedFieldsOfRootEntityForSort ( CompositeMetadata root , Sort rootSort ) { Set < Path > ret = new HashSet < > ( ) ; if ( rootSort != null ) { SortFieldInfo [ ] sfi = SortFieldInfo . buildSortFields ( rootSort , root . getFieldTreeRoot ( ) ) ; for ( SortFieldInfo fi : sfi ) ret . add ( fi . getName ( ) ) ; } return ret ; }
public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { // NOTE : isRejoinTest is unused this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ; } // NOTE : isRejoinTest is unused this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ;
public void execute ( String userName ) { FollowModeManager currentFollowModeManager = followModeManager ; User userToFollow = findUser ( userName ) ; if ( currentFollowModeManager == null ) { return ; } currentFollowModeManager . follow ( userToFollow ) ; actionPerformed ( ) ; }
@Override public Appendable write ( Appendable appendable , Context context ) throws IOException { String separator = "" ; for ( TypeName className : typeNames ) { appendable . append ( separator ) ; className . write ( appendable , context ) ; separator = " & " ; } return appendable ; }
public void flush ( ) throws IOException { entryLogManager . flushRotatedLogs ( ) ; entryLogManager . flushCurrentLogs ( ) ; }
public void disableWireframe ( ) { boolean refreshTaskList = false ; EnableFaceCulling faceCullingStateChange = new EnableFaceCulling ( ) ; if ( ! getDesiredStateChanges ( ) . contains ( faceCullingStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; refreshTaskList = true ; } if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { removeDesiredStateChange ( wireframeStateChange ) ; refreshTaskList = true ; } if ( refreshTaskList ) { worldRenderer . requestTaskListRefresh ( ) ; } }
public boolean prepareConnectHostToStoragePoolServers ( ConnectHostToStoragePoolServersParameters parameters , List < StorageServerConnections > connections ) { List < StorageServerConnections > res = updateIfaces ( connections , parameters . getVds ( ) . getId ( ) ) ; connections . clear ( ) ; connections . addAll ( res ) ; return true ; }
public HibernateErrorReportingServiceDao ( ) { this . errorOccurrenceConverter = new ErrorOccurrenceConverter ( ) ; }
public JettyConfig getJettyConfig ( ) { return Optional . ofNullable ( jettyConfig ) . orElse ( ( ) - > new DefaultJettyConfig ( ) ) ; }
public void setNumThreads ( final Integer numThreads ) { m_threads = numThreads ; }
private String getModeName ( ) { String header = getHeader ( ) ; return header . substring ( 0 , header . indexOf ( '"' ) - 1 ) ; }
private List < RequestInfo > pollForRequests ( ) { // these are ids that were successfully put for an operation that eventually failed idsToDelete . clear ( ) ; idsToDelete = putManager . getIdsToDelete ( ) ; // this is a best effort to delete ids for cleanup purposes ( these may fail and we will // not do anything about it at this time ) . for ( String blobId : idsToDelete ) { // possibly add a batch api going forward . deleteManager . submitDeleteBlobOperation ( operationIdGenerator . incrementAndGet ( ) , blobId , new FutureResult < Void > ( ) , null ) ; } List < RequestInfo > requests = new ArrayList < RequestInfo > ( ) ; putManager . poll ( requests ) ; getManager . poll ( requests ) ; deleteManager . poll ( requests ) ; return requests ; }
public InternalAggregationFunction specialize ( BoundVariables boundVariables , int arity , TypeManager typeManager , FunctionManager functionManager ) { Type type = boundVariables . getTypeVariable ( "E" ) ; MethodHandle compareMethodHandle = functionManager . getScalarFunctionImplementation ( functionManager . resolveOperator ( operatorType , fromTypes ( ImmutableList . of ( type , type ) ) ) ) . getMethodHandle ( ) ; return generateAggregation ( type , compareMethodHandle ) ; }
public AccountInfo getAccountInfo ( ) throws IOException { try { CoingiBalances coingiBalances = getCoingiBalance ( ) ; return CoingiAdapters . adaptAccountInfo ( coingiBalances , exchange . getExchangeSpecification ( ) . getUserName ( ) ) ; } catch ( CoingiException e ) { throw CoingiErrorAdapter . adapt ( e ) ; } }
public IdentityHashMap < TableScanNode , Void > visitPlan ( PlanNode node , Void context ) { Map < TableScanNode , Void > result = new IdentityHashMap < > ( ) ; node . getSources ( ) . forEach ( source - > result . putAll ( source . accept ( this , context ) ) ) ; return result ; }
protected RevCommit findHead ( Repository repo ) { try ( RevWalk walk = new RevWalk ( repo ) ) { try { ObjectId head = repo . resolve ( HEAD ) ; return walk . parseCommit ( head ) ; } catch ( RevisionSyntaxException | AmbiguousObjectException | IncorrectObjectTypeException | IOException e ) { throw new RuntimeException ( e ) ; } } }
public void process ( EquivalentContentUpdatedMessage message ) throws RecoverableException { Id contentId = message . getContentRef ( ) . getId ( ) ; log . debug ( "Processing message on id { } , took PT { } S , message : { } " , contentId , getTimeToProcessInSeconds ( message ) , message ) ; Timer . Context time = timer . time ( ) ; try { Content content = getContent ( contentId ) ; neo4JContentStore . writeContent ( content ) ; time . stop ( ) ; } catch ( Exception e ) { failureMeter . mark ( ) ; throw Throwables . propagate ( e ) ; } }
public String apply ( String dimValue ) { if ( dimValue == null ) return "" ; Matcher matcher = pattern . matcher ( dimValue ) ; return matcher . find ( ) ? dimValue : null ; }
private void writeSubscribeCommands ( String repoName , List < SubscribeCommand > commands ) throws IOException { write ( "repository " + repoName ) ; for ( SubscribeCommand cmd : commands ) { switch ( cmd . getCommand ( ) ) { case SUBSCRIBE : write ( "want " + cmd . getSpec ( ) ) ; break ; case UNSUBSCRIBE : write ( "stop " + cmd . getSpec ( ) ) ; break ; default : throw new IllegalArgumentException ( "Unknown command : " + cmd . getCommand ( ) ) ; } } }
private Set < GlusterServerInfo > fetchServers ( VDS upServer , List < VDS > existingServers ) { Set < GlusterServerInfo > fetchedServers = null ; while ( fetchedServers == null && ! existingServers . isEmpty ( ) ) { fetchedServers = fetchServers ( upServer ) ; if ( fetchedServers == null ) { logServerMessage ( upServer , AuditLogType . GLUSTER_SERVERS_LIST_FAILED ) ; // Couldn't fetch servers from the up server . Mark it as non - operational setNonOperational ( upServer ) ; existingServers . remove ( upServer ) ; upServer = getNewUpServer ( existingServers , upServer ) ; } } return fetchedServers ; }
public static String sanitizeSecondCachedKey ( final Contentlet vanityUrl ) throws DotDataException , DotSecurityException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeSecondCacheKey ( host . getIdentifier ( ) , vanityUrl . getLanguageId ( ) ) ; }
void remove ( I key ) { Integer prev = this . identityMap . remove ( key ) ; if ( prev != null ) { this . objectList . set ( prev , null ) ; } }
public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TaskPropertyType ) ) { return false ; } TaskPropertyType that = ( TaskPropertyType ) o ; if ( ! name . equals ( that . name ) ) { return false ; } return true ; }
private long obtainEntityId ( ) { return nextEntityId ++ ; }
public void markInCatalog ( ) { m_isInCatalog = true ; }
private static boolean canConvert ( ParameterDefinition def , ParameterValue v ) { return def instanceof SimpleParameterDefinition && ! ( def instanceof StringParameterDefinition ) && v instanceof StringParameterValue ; }
public void setUp ( ) { deviceHandler = new EventHandler ( ) ; passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
public void download ( String url , String downloadPath ) { InputStream in = null ; try { in = new URL ( url ) . openStream ( ) ; FileUtils . writeByteArrayToFile ( new File ( downloadPath ) , IOUtils . toByteArray ( in ) ) ; System . out . println ( IOUtils . toString ( in ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { IOUtils . closeQuietly ( in ) ; } }
private boolean getOldChildStale ( IObservable child ) { Boolean oldChildValue = staleMap . get ( child ) ; boolean oldChildStale = oldChildValue != null && oldChildValue . booleanValue ( ) ; return oldChildStale ; }
public void invoke ( @NotNull final Project project , final Editor editor , PsiFile file , DataContext dataContext ) { if ( ! CommonRefactoringUtil . checkReadOnlyStatus ( file ) ) return ; if ( editor . getSettings ( ) . isVariableInplaceRenameEnabled ( ) ) { final TemplateState templateState = TemplateManagerImpl . getTemplateState ( editor ) ; if ( templateState != null && ! templateState . isFinished ( ) ) return ; } performAction ( new GoIntroduceOperation ( project , editor , file ) ) ; }
private static List < String > getListOfIsoFiles ( File directory , OVirtNodeInfo info ) { List < String > isoFileList = new ArrayList < String > ( ) ; File [ ] filterOvirtFiles = filterOvirtFiles ( directory , getIsoPattern ( info ) ) ; for ( File file : filterOvirtFiles ) { isoFileList . add ( file . getName ( ) ) ; } return isoFileList ; }
EWAHCompressedBitmap getBitmap ( ) { // Fast path to immediately return the expanded result . Object r = bitmapContainer ; if ( r instanceof EWAHCompressedBitmap ) return ( EWAHCompressedBitmap ) r ; // Expand the bitmap and cache the result . XorCompressedBitmap xb = ( XorCompressedBitmap ) r ; EWAHCompressedBitmap out = xb . bitmap ; for ( ; ; ) { r = xb . xorBitmap . bitmapContainer ; if ( r instanceof EWAHCompressedBitmap ) { bitmapContainer = out = out . xor ( ( EWAHCompressedBitmap ) r ) ; return out ; } xb = ( XorCompressedBitmap ) r ; out = out . xor ( xb . bitmap ) ; } }
public AbstractCorrelatingMessageHandler ( MessageGroupProcessor processor , MessageGroupStore store , CorrelationStrategy correlationStrategy , ReleaseStrategy releaseStrategy ) { Assert . notNull ( processor ) ; Assert . notNull ( store ) ; setMessageStore ( store ) ; this . outputProcessor = processor ; this . correlationStrategy = correlationStrategy == null ? new HeaderAttributeCorrelationStrategy ( IntegrationMessageHeaderAccessor . CORRELATION_ID ) : correlationStrategy ; this . releaseStrategy = releaseStrategy == null ? new SequenceSizeReleaseStrategy ( ) : releaseStrategy ; this . messagingTemplate . setSendTimeout ( DEFAULT_S _TIMEOUT ) ; sequenceAware = this . releaseStrategy instanceof SequenceSizeReleaseStrategy ; }
public Statement createBootstrapScriptForGroup ( String group , @Nullable String nodeName ) { return groupToBootScript . apply ( group , nodeName ) ; }
public boolean create ( Personname personnameRecord ) { LOG . trace ( "PersonnameDAO . create ( ) - Begin" ) ; boolean result = true ; if ( personnameRecord != null ) { super . create ( personnameRecord ) ; } LOG . trace ( "PersonnameDAO . create ( ) - End" ) ; return result ; }
public void handleInvocation ( EJBClientInvocationContext context ) throws Exception { log . debug ( "In the client interceptor handleInvocation : " + this . getClass ( ) . getName ( ) + " " + context . getViewClass ( ) + " " + context . getLocator ( ) ) ; context . getContextData ( ) . put ( "ClientInterceptorInvoked" , this . getClass ( ) . getName ( ) + " " + context . getViewClass ( ) + " " + context . getLocator ( ) ) ; // Must make this call context . sendRequest ( ) ; }
public void edit ( final NewExternalSubnetModel subnet ) { driver . edit ( subnet ) ; networkEditor . asValueBox ( ) . setValue ( subnet . getNetwork ( ) . getEntity ( ) . getName ( ) ) ; }
protected AddVmFromTemplateCommand < AddVmParameters > createCommand ( ) { initVM ( ) ; AddVmParameters param = new AddVmParameters ( vm ) ; return new AddVmFromTemplateCommand < > ( param , null ) ; }
public void testGetNameFromPath ( ) { String path1 = " / group1" ; String path2 = " / group1 / group2 / group3" ; String emptyPath = "" ; String nullPath = null ; String rootPath = " / " ; assertEquals ( HDF5Utils . getNameFromPath ( path1 ) , "group1" ) ; assertEquals ( HDF5Utils . getNameFromPath ( path2 ) , "group3" ) ; assertEquals ( HDF5Utils . getNameFromPath ( emptyPath ) , "" ) ; assertNull ( HDF5Utils . getNameFromPath ( nullPath ) ) ; assertEquals ( HDF5Utils . getNameFromPath ( rootPath ) , "" ) ; }
@Override public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList ( ) { JsonRpcRequest request = new RequestBuilder ( "GlusterHost . logicalVolumeList" ) . build ( ) ; Map < String , Object > response = new FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new GlusterLocalLogicalVolumeListReturn ( response ) ; }
@Override public String toString ( ) { return "TypedByteArray [ length = " + length ( ) + " ] " ; }
public void onEntityDestroyed ( EntityRef entity ) { if ( entity . isPersistent ( ) ) { entityDeltas . remove ( entity . getId ( ) ) ; destroyedEntities . add ( entity . getId ( ) ) ; } }
private OrganizationalUnit getOU ( String ouIdentifier , Collection < OrganizationalUnit > organizationalUnits ) { Optional < OrganizationalUnit > targetOU = organizationalUnits . stream ( ) . filter ( p - > p . getIdentifier ( ) . equalsIgnoreCase ( ouIdentifier ) ) . findFirst ( ) ; if ( targetOU . isPresent ( ) ) { return targetOU . get ( ) ; } return null ; }
public void testPutAsync ( ) throws Exception { // put Future < String > f = c . putAsync ( "k" , "v" ) ; testFuture ( f , null ) ; testK ( "v" ) ; f = c . putAsync ( "k" , "v2" ) ; testFuture ( f , "v" ) ; testK ( "v2" ) ; }
public boolean isReady ( TaskActionClient taskActionClient ) throws Exception { return true ; }
public static Map < String , EntryValue > convertBeanToEntryMap ( Object bean ) { Map < String , Object > buildAttributeValueMap = BeanUtilsExtended . buildObjectAttributeMap ( bean ) ; return Maps . transformEntries ( buildAttributeValueMap , new ObjectToEntryValueTransformer ( ) ) ; }
public RequestHeader ( Struct struct , short headerVersion ) { this ( new RequestHeaderData ( struct , headerVersion ) , headerVersion ) ; }
public void accountSession ( String username , String password ) throws TmdbInvalidParametersException { if ( username == null || password == null ) { throw new TmdbInvalidParametersException ( 401 , "Username and Password may not be null" ) ; } this . username = username ; this . password = password ; hasAccountSession = true ; }
public void setProjectName ( String projectName ) { fProjectName = projectName ; // If remote directory field is empty if ( fLocationText . getText ( ) . equals ( EMPTY_STRING ) ) { fRemoteDirSelected = false ; } // If remote directory was not selected yet if ( ! fRemoteDirSelected ) { fLocationText . setText ( getDefaultPathDisplayString ( ) ) ; } }
public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; assertEquals ( Collections . singletonList ( fHiFixture ) , f42Fixture . getChildren ( ) ) ; }
private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
public void start ( ) { logger . debug ( "start ( ) " ) ; for ( final Class < ? > stepDefinitionType : cachedStepsInstances . keySet ( ) ) { cachedStepsInstances . put ( stepDefinitionType , createStepsInstance ( stepDefinitionType ) ) ; } }
private WorkingSetDescriptor getSelectedWorkingSet ( ) { IStructuredSelection selection = typesListViewer . getStructuredSelection ( ) ; WorkingSetDescriptor descriptor = null ; if ( ! selection . isEmpty ( ) ) { descriptor = ( WorkingSetDescriptor ) selection . getFirstElement ( ) ; } return descriptor ; }
public void evaluate ( ) throws Throwable { if ( null != previous ) { previous . evaluate ( ) ; } for ( FrameworkMethod before : befores ) { before . invokeExplosively ( target ) ; } next . evaluate ( ) ; }
public Response add ( OpenStackVolumeProvider provider ) { validateParameters ( provider , "name" ) ; StoragePool storagePool = provider . isSetDataCenter ( ) ? getStoragePool ( provider . getDataCenter ( ) ) : null ; provider . setDataCenter ( DataCenterMapper . map ( storagePool , null ) ) ; return performCreate ( VdcActionType . AddProvider , new ProviderParameters ( map ( provider ) ) , new QueryIdResolver < Guid > ( VdcQueryType . GetProviderById , IdQueryParameters . class ) ) ; }
private void doStoreUsers ( ) { try { usersFileManager . store ( new UsersDto ( new HashSet < > ( userMap . values ( ) ) ) ) ; } catch ( IOException e ) { throw new UndeclaredThrowableException ( e ) ; } }
public void tearDown ( ) throws IOException , SQLException { try { globalScheduler . shutdown ( ) ; } catch ( Exception e ) { } cleanup ( ) ; tearDownOnce ( ) ; }
private CloudMachineNamer getCloudMachineNamer ( ConfigBag config ) { String namerClass = config . get ( LocationConfigKeys . CLOUD_MACHINE_NAMER_CLASS ) ; if ( namerClass != null ) { try { return ( CloudMachineNamer ) getManagementContext ( ) . getCatalog ( ) . getRootClassLoader ( ) . loadClass ( namerClass ) . getDeclaredConstructor ( ConfigBag . class ) . newInstance ( config ) ; } catch ( Exception e ) { throw Exceptions . propagate ( e ) ; } } else { return new JcloudsMachineNamer ( config ) ; } }
public IllustratedSelectItem ( Object value , String label , String image ) { super ( value , label ) ; this . image = image ; }
private boolean layerGroupContainmentCheckRequired ( ) { // first , is it WMS ? Request request = Dispatcher . REQUEST . get ( ) ; if ( request == null ) { return false ; } // layer groups are used only in WMS final String service = request . getService ( ) ; return "WMS" . equalsIgnoreCase ( service ) || "gwc" . equalsIgnoreCase ( service ) ; }
public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , ( initData != null && InitData . canBeCached ( absoluteUri ) ) ? initData : null ) ; }
private void buildUnaryExpression ( UnaryExpressionTree tree ) { if ( tree . is ( Tree . Kind . PREFIX_DECREMENT , Tree . Kind . PREFIX_INCREMENT ) ) { build ( tree . expression ( ) ) ; currentBlock . elements . add ( tree ) ; } else { currentBlock . elements . add ( tree ) ; } }
public Class < ? > getRealClass ( ) { return testNGMethod . getRealClass ( ) ; }
private KeyStore getSecretsStore ( ) { final File secretStoreFile = createStoreIfNeeded ( ) ; try { final KeyStore keyStore = KeyStore . getInstance ( SECRETS_STORE_KEYSTORE_TYPE ) ; try ( InputStream inputStream = Files . newInputStream ( secretStoreFile . toPath ( ) ) ) { keyStore . load ( inputStream , loadStorePassword ( ) ) ; } return keyStore ; } catch ( Exception e ) { Logger . warn ( this . getClass ( ) , "unable to load secrets store " + SECRETS_STORE_FILE + " : " + e ) ; throw new DotRuntimeException ( e ) ; } }
public AnonymousSpec anonymous ( ) { if ( this . anonymous == null ) { this . anonymous = new AnonymousSpec ( ) ; } return this . anonymous ; }
public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
private void store ( ) throws IOException { byte [ ] serialized = state . toCbor ( ) . serialize ( ) ; System . out . println ( "Writing " + serialized . length + " bytes to " + statePath ) ; Files . write ( statePath , serialized , StandardOpenOption . CREATE , StandardOpenOption . TRUNCATE_EXISTING ) ; }
private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) return ; for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
public Map < FactoryContainer , Attributes > getEnabledContainers ( ) { Map < FactoryContainer , Attributes > map = new LinkedHashMap < > ( ) ; synchronized ( _path ) { for ( Map . Entry < FactoryContainer , Attributes > entry : getReversed ( _path . entrySet ( ) ) ) { Attributes attr = entry . getValue ( ) ; if ( attr . isEnabled ( ) ) { Attributes attrClone = new Attributes ( attr ) ; map . put ( entry . getKey ( ) , attrClone ) ; } } } return map ; }
private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) log . trace ( "Refreshed file listing view" ) ; return fileList ; }
public long size ( ) { build ( ) ; return body . length ( ) + partBoundary . length + partHeader . length ; }
public boolean canStreamToNextPipe ( ) { return ! isCollectResults ( ) && super . canStreamToNextPipe ( ) ; // when collectResults is false , streaming is not necessary or useful }
public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { String idRefString = idRef . name ( ) ; FoundViewHolder foundViewHolder = ( FoundViewHolder ) foundHolders . get ( idRefString ) ; if ( foundViewHolder == null ) { foundViewHolder = createFoundViewAndIfNotNullBlock ( idRef , viewClass ) ; foundHolders . put ( idRefString , foundViewHolder ) ; } return foundViewHolder ; }
public void tearDown ( ) { try { queryRunner . close ( ) ; } finally { queryRunner = null ; } }
private CommitConfig ( Config rc ) { commitTemplatePath = rc . getString ( ConfigConstants . CONFIG_COMMIT_SECTION , null , ConfigConstants . CONFIG_KEY_COMMIT_TEMPLATE ) ; String i18nCommitEncoding = rc . getString ( ConfigConstants . CONFIG_SECTION_I18N , null , ConfigConstants . CONFIG_KEY_COMMIT_ENCODING ) ; if ( i18nCommitEncoding != null ) { commitMessageEncoding = Charset . forName ( i18nCommitEncoding ) ; } }
public int decompress ( byte [ ] input , int inputOffset , int inputLength , byte [ ] output , int outputOffset , int maxOutputLength ) throws MalformedInputException { try { Inflater inflater = new Inflater ( true ) ; inflater . setInput ( input , inputOffset , inputLength ) ; int resultLength = inflater . inflate ( output , outputOffset , maxOutputLength ) ; inflater . end ( ) ; return resultLength ; } catch ( DataFormatException e ) { throw Throwables . propagate ( e ) ; } }
public ImmutableList < OutputLine > getLog ( ) { return this . log ; }
protected void doInit ( ) { super . doInit ( ) ; if ( ! this . evaluationContextSet ) { this . evaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } Assert . state ( ! this . closeStreamAfterSend || this . isSingleUse , "Single use connection needed with closeStreamAfterSend" ) ; }
public ExtensionElementsConverter ( XStream xStream , List < DMNExtensionRegister > extensionRegisters ) { super ( xStream ) ; if ( extensionRegisters != null && extensionRegisters . size ( ) > 0 ) this . extensionRegisters . addAll ( extensionRegisters ) ; }
public void executeBatch ( OperationsQueue operationsQueue ) { try { if ( GridDialects . hasFacet ( getGridDialect ( ) , BatchableGridDialect . class ) || GridDialects . hasFacet ( getGridDialect ( ) , GroupingByEntityDialect . class ) ) { log . tracef ( "Executing batch" ) ; super . executeBatch ( operationsQueue ) ; } } catch ( TupleAlreadyExistsException taee ) { // TODO : Ideally , we should log the entity name + id here ; For now we trust the datastore to provide this // information via the original exception ; It'd require a fair bit of changes to obtain the entity name here // ( we'd have to obtain the persister matching the given entity key metadata which in turn would require // access to the session factory which is not easily available here ) throw log . mustNotInsertSameEntityTwice ( taee . getMessage ( ) , taee ) ; } }
public int hashCode ( ) { return ( ( ( startCommit . hashCode ( ) ^ numbers . length ) * 31 ) + getNumber ( ) ; }
private void prepareAuthForBrokerCall ( ) throws NoSuchAlgorithmException { AuthenticationSettings . INSTANCE . setUseBroker ( true ) ; }
public boolean isWrapperFor ( Class < ? > iface ) { if ( gridCoverage instanceof Wrapper ) return ( ( Wrapper ) gridCoverage ) . isWrapperFor ( iface ) ; if ( iface . isInstance ( gridCoverage ) ) return true ; else return false ; }
DataSegment uploadDataSegment ( DataSegment segment , final int binaryVersion , final long size , final File compressedSegmentData , final String azurePath ) throws StorageException , IOException , URISyntaxException { azureStorage . uploadBlob ( compressedSegmentData , config . getContainer ( ) , azurePath ) ; final DataSegment outSegment = segment . withSize ( size ) . withLoadSpec ( this . makeLoadSpec ( new URI ( azurePath ) ) ) . withBinaryVersion ( binaryVersion ) ; log . debug ( "Deleting file [ % s ] " , compressedSegmentData ) ; compressedSegmentData . delete ( ) ; return outSegment ; }
public EEFButtonLifecycleManager ( EEFButtonDescription description , IVariableManager variableManager , IInterpreter interpreter , TransactionalEditingDomain editingDomain ) { super ( description , variableManager , interpreter , editingDomain ) ; this . description = description ; }
private static boolean isProbablyLog4jFormatterLogger ( MethodInvocationTree mit , String formatString ) { return mit . symbol ( ) . owner ( ) . type ( ) . is ( ORG_APACHE_LOGGING_LOG4J_LOGGER ) && ! formatString . contains ( " { } " ) && formatString . contains ( " % " ) ; }
void setMarker ( TextMarker marker , int length ) { this . marker = marker ; numSkipLines = length ; if ( checkAndUpdateArrows ( ) ) { upArrow . setHTML ( PatchUtil . M . expandBefore ( NUM_ROWS_TO_EXPAND ) ) ; downArrow . setHTML ( PatchUtil . M . expandAfter ( NUM_ROWS_TO_EXPAND ) ) ; } skipNum . setText ( PatchUtil . M . patchSkipRegion ( Integer . toString ( length ) ) ) ; }
public ExtendedEmailPublisherContext ( ExtendedEmailPublisher publisher , AbstractBuild < ? , ? > build , Launcher launcher , BuildListener listener ) { this . publisher = publisher ; this . run = build ; this . workspace = build . getWorkspace ( ) ; this . launcher = launcher ; this . listener = listener ; }
public void testWrongFormatNumber ( ) throws Exception { NumberCellEditor editor ; editor = new NumberCellEditor ( shell , Integer . class ) ; // empty string editor . setValue ( " " ) ; editor . getValue ( ) ; assertNull ( editor . getValue ( ) ) ; // not parsable number editor . setValue ( "aa" ) ; editor . getValue ( ) ; assertNull ( editor . getValue ( ) ) ; }
public void onReloadPlugin ( Plugin oldPlugin , Plugin newPlugin ) { if ( hasAvatarProvider ( newPlugin ) ) { avatarSupport = true ; } else if ( avatarSupport && hasAvatarProvider ( oldPlugin ) ) { avatarSupport = false ; } } }
public Class < ? > getRealClass ( ) { return clazz ; }
private String read ( String resourcePath ) throws IOException { InputStream is = getClass ( ) . getResourceAsStream ( resourcePath ) ; try { return Util . read ( is ) ; } finally { if ( is != null ) { is . close ( ) ; } } }
public static String getModelFileWithGAV ( ReleaseId releaseId ) { return Paths . get ( MODEL_FILE_DIRECTORY , releaseId . getGroupId ( ) , releaseId . getArtifactId ( ) , MODEL_FILE_NAME ) . toString ( ) ; }
void removeConnection ( String connectionId ) { if ( availableConnections . remove ( connectionId ) ) { availableCount -- ; } poolCount -- ; }
private Map < Long , ISegmentAspect > getAspectsFromColumnsId ( List < Long > desiredColumns ) { if ( ! desiredColumns . isEmpty ( ) ) { Map < Long , ISegmentAspect > aspects = new LinkedHashMap < > ( ) ; for ( Long columnsId : desiredColumns ) { ISegmentAspect segmentAspect = fAspectMap . get ( columnsId ) ; if ( segmentAspect != null ) { aspects . put ( columnsId , segmentAspect ) ; } } return aspects ; } return fAspectMap ; }
static boolean isValidMining ( ICodeMining mining ) { return mining != null && mining . getLabel ( ) != null && ! mining . getLabel ( ) . isEmpty ( ) ; }
public void addInput ( Page page ) { verify ( probe == null ) ; probe = page ; probePosition = 0 ; joinAddresses = null ; joinAddressIndex = - 1 ; }
public DescriptorImpl ( ) { super ( ThrottleJobProperty . class ) ; synchronized ( propertiesByCategoryLock ) { load ( ) ; // Explictly drop queue items loaded from 1 . 8 . 1 version if ( ! propertiesByCategory . isEmpty ( ) ) { propertiesByCategory = new HashMap < String , Map < ThrottleJobProperty , Void > > ( ) ; save ( ) ; // Save the configuration to remove obsolete data } } }
public String toString ( ) { // Since the static data arrives from external source it's not guarenteed not to be null so a null check is // mandatory in order to avoid NPE when invoking toString by the logger String domainName = staticData . getName ( ) == null ? "null" : staticData . getName ( ) ; String domainId = staticData . getId ( ) == null ? "null" : staticData . getId ( ) . toString ( ) ; return "StorageDomain [ " + domainName + " , " + domainId + " ] " ; }
Predicate < Entry < Key , Value > > getScanPredicate ( ) { final Range range = getRange ( ) ; return input - > range == null || range . contains ( input . getKey ( ) ) ; }
public AlluxioHiveMetastore ( TableMasterClient client ) { this . client = requireNonNull ( client , "client is null" ) ; }
private void addWorkPackageCriteria ( ) { if ( isWorkPackageSpecified ( ) ) { ArtifactId workPackArt = atsApi . getQueryService ( ) . getArtifactOrSentinel ( workPackageId ) ; if ( isColorTeamMatch ( workPackArt ) ) { if ( workPackArt . isValid ( ) ) { queryAnd ( AtsAttributeTypes . WorkPackageReference , workPackArt . getIdString ( ) ) ; } } } }
private void sendToSocket ( Socket socket , String cmdString ) throws IOException { // remove spaces at beginning and end and replace double spaces in // string with single space byte [ ] sendBytes = ( "A" + cmdString . trim ( ) . replaceAll ( "\\s + " , " " ) + "\n" ) . getBytes ( ) ; socket . getInputStream ( ) . skip ( socket . getInputStream ( ) . available ( ) ) ; socket . getOutputStream ( ) . write ( sendBytes ) ; socket . getOutputStream ( ) . flush ( ) ; AstericsErrorHandling . instance . reportInfo ( this , "IRTrans sent data : " + cmdString ) ; }
public int hashCode ( ) { return getClass ( ) . hashCode ( ) ; }
private void reset ( ) { setId ( NO_ID ) ; }
public String getActualDowntime ( ) { return ( actualDowntime == null ) ? " ( N / A ) " : actualDowntime + "ms" ; }
String resolveTemplatePath ( final Context context , final Writer writer , final RenderParams params , final String argument ) { if ( argument . contains ( " / " ) ) { return argument ; } else { return ( params . live ) ? " / live / " + argument + " . " + EXTENSION : " / working / " + argument + " . " + EXTENSION ; } }
public DispoConfig findDispoConfig ( DispoProgram program ) { ArtifactReadable config = getQuery ( ) . fromBranch ( program . getUuid ( ) ) . getResults ( ) . getOneOrNull ( ) ; if ( config == null ) { DispoUtil . getDefaultConfig ( ) ; } return DispoUtil . configArtToConfigData ( new DispoConfigArtifact ( config ) ) ; }
public boolean hasMatchingOpSig ( String name , JavaOperationSigMask mask ) { // Indexing on signatures optimises this type of request for ( Entry < JavaOperationSignature , Set < String > > entry : operations . entrySet ( ) ) { if ( mask . covers ( entry . getKey ( ) ) ) { if ( entry . getValue ( ) . contains ( name ) ) { return true ; } } } return false ; }
public IonSqlQueryBuilder ( TypeManager typeManager ) { this . typeManager = requireNonNull ( typeManager , "typeManager is null" ) ; }
protected OperationController getOperationController ( ) { return ocList . get ( ThreadLocalRandom . current ( ) . nextInt ( ocList . size ( ) ) ) ; }
public List < JDK > getJDKs ( ) { if ( jdks == null ) jdks = new ArrayList < JDK > ( ) ; return jdks ; }
public boolean addAll ( int index , Collection < ? extends T > c ) { Collection < T > uniqueValuesToAdd = getUniqueValues ( c ) ; if ( uniqueValuesToAdd . isEmpty ( ) ) { return false ; } try { return super . addAll ( index , uniqueValuesToAdd ) ; } catch ( IndexOutOfBoundsException ioobException ) { comparingSet . removeAll ( uniqueValuesToAdd ) ; throw ioobException ; } }
public Context getContext ( ) { if ( sdkName == null ) { sdkName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } return new Context ( "Sdk - Name" , sdkName ) . addData ( "Sdk - Version" , SDK_VERSION ) ; }
protected void setSelectedDevices ( List < StorageDevice > selectedDevices ) { getStorageDevices ( ) . setSelectedItems ( selectedDevices ) ; }
private JsonObject toJson ( Timer timer , TimeUnit rateUnit , TimeUnit durationUnit ) { Snapshot snapshot = timer . getSnapshot ( ) ; JsonObject json = new JsonObject ( ) ; // Meter populateMetered ( json , timer , rateUnit ) ; // Snapshot double factor = 1 . 0 / durationUnit . toNanos ( 1 ) ; populateSnapshot ( json , snapshot , factor ) ; // Duration rate String duration = durationUnit . toString ( ) . toLowerCase ( Locale . ENGLISH ) ; json . putString ( "durationRate" , duration ) ; return json ; }
protected void delete ( LogEntry delegate , String reason , RequestContext context ) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException ( "delete not supported" ) ; }
void setConsumerBatchEnabled ( boolean consumerBatchEnabled ) { this . consumerBatchEnabled = consumerBatchEnabled ; }
public int getLevel ( ) { return data . optInt ( "level" ) ; }
private void setPagesRecycler ( OnThisDayCard card ) { if ( card . pages ( ) != null ) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter ( card . pages ( ) , card . wiki ( ) , true , ( Activity ) getContext ( ) ) ; recyclerAdapter . setCallback ( new ItemCallback ( ) ) ; pagesRecycler . setAdapter ( recyclerAdapter ) ; } else { pagesRecycler . setVisibility ( GONE ) ; } }
public String getExtendedLabelForVSM ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return getExtendedLabelsForVSM ( configurationElement ) ; } } return "Unknown URI" ; // $NON - NLS - 1$ }
public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . setCleanIdleConnections ( true ) ; } server . stop ( ) ; }
protected Supplier < Operation > createOperationSupplier ( ) { return this ; }
public < C extends CtTypedElement > C setType ( CtTypeReference < T > type ) { if ( type != null ) { type . setParent ( this ) ; } // even if the setter delegates to getExecutable , it makes sense to create an event getFactory ( ) . getEnvironment ( ) . getModelChangeListener ( ) . onObjectUpdate ( this , TYPE , type , getExecutable ( ) . getType ( ) ) ; if ( getExecutable ( ) != null ) { getExecutable ( ) . setType ( type ) ; } return ( C ) this ; }
public static AuthenticationProfileRepository getInstance ( ) { return instance ; }
public HttpRequest filterKey ( HttpRequest request ) throws HttpException { request = replaceDateHeader ( request ) ; String signature = calculateSignature ( createStringToSign ( request ) ) ; request = replaceAuthorizationHeader ( request , signature ) ; return request ; }
public ScreenshotSize get ( ) { if ( config . getScreenshotSize ( ) == ScreenshotSize . DOUBLE_SIZE ) { return ScreenshotSize . DOUBLE_SIZE ; } else if ( config . getScreenshotSize ( ) == ScreenshotSize . NORMAL_SIZE ) { return ScreenshotSize . NORMAL_SIZE ; } else if ( config . getScreenshotSize ( ) == ScreenshotSize . HALF_SIZE ) { return ScreenshotSize . HALF_SIZE ; } else if ( config . getScreenshotSize ( ) == ScreenshotSize . QUARTER_SIZE ) { return ScreenshotSize . QUARTER_SIZE ; } else { return ScreenshotSize . NORMAL_SIZE ; } }
public final String canonicalID ( ) { return canonical ; }
protected void close ( ) { try { m_sout . close ( ) ; } catch ( IOException ex ) { } }
protected boolean isProcessed ( ChronicleLogOffsetTracker tracker , long offset ) { long last = tracker . readLastCommittedOffset ( ) ; return last > 0 && last >= offset ; }
public EList < Diff > getDifferences ( ) { return this . diffs ; }
public IOWorkers . Selector getWorkerSelector ( ) { return workerSelector ; }
public Iterable < Tree > children ( ) { List < Tree > result = new ArrayList < > ( ) ; if ( openParenToken != null ) { result . add ( openParenToken ) ; } super . children ( ) . forEach ( res : : add ) ; if ( closeParenToken != null ) { result . add ( closeParenToken ) ; } return result ; }
public void setName ( String name ) { this . name = Objects . requireNonNull ( name ) ; }
public Query existsQuery ( QueryShardContext context ) { if ( hasDocValues ( ) ) { return new DocValuesFieldExistsQuery ( name ( ) ) ; } else if ( omitNorms ( ) || indexOptions ( ) != IndexOptions . NONE ) { return new TermQuery ( new Term ( FieldNamesFieldMapper . NAME , name ( ) ) ) ; } else { return new NormsFieldExistsQuery ( name ( ) ) ; } }
private static void handleYieldExpression ( SubscriptionContext ctx , PyYieldExpressionTree yieldExpr ) { if ( yieldExpr . fromKeyword ( ) == null && yieldExpr . expressions ( ) . size ( ) == 1 ) { yieldExpr . expressions ( ) . forEach ( e - > checkExpr ( e , ctx , "yield" ) ) ; } }
private void importLdif ( InMemoryDirectoryServer directoryServer ) { if ( StringUtils . hasText ( this . ldif ) ) { try { Resource resource = locateResource ( ) ; try ( InputStream inputStream = resource . getInputStream ( ) ) { directoryServer . importFromLDIF ( false , new LDIFReader ( inputStream ) ) ; } } catch ( Exception ex ) { throw new IllegalStateException ( "Unable to load LDIF " + this . ldif , ex ) ; } } }
public XSSFTableColumn ( XSSFTable table , CTTableColumn ctTableColumn ) { this . table = table ; this . ctTableColumn = ctTableColumn ; }
private boolean isDateSelectable ( Date date ) { if ( isCheckDayInSelectableCals && ! containsDate ( selectableCals , date ) ) { return false ; } return dateConfiguredListener == null || dateConfiguredListener . isDateSelectable ( date ) ; }
public static void updatePathGroup ( List < Variable > variables , IPath node , IPath selection ) { final int segmentsSelection = selection . segmentCount ( ) ; for ( final Variable variable : variables ) if ( variable . getPath ( ) . uptoSegment ( segmentsSelection ) . equals ( selection . makeAbsolute ( ) ) ) { final IPath oldPath = variable . getPath ( ) ; final int count = selection . segmentCount ( ) ; variable . setPath ( buildPath ( oldPath , node , count ) ) ; } }
private FactorComparator ( String factorName , int weight , Comparator < T > comparator ) { this . factorName = factorName ; this . weight = weight ; this . comparator = comparator ; logger . info ( "comparator created for " + this . factorName ) ; } logger . info ( "comparator created for " + this . factorName ) ;
public PatternMatcher ( TermContext context ) { this . termContext = context ; multiSubstitutions = new ArrayList < java . util . Collection < Map < Variable , Term > > > ( ) ;
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( getArtUuid ( ) == null ) ? 0 : getArtUuid ( ) . hashCode ( ) ) ; result = prime * result + getBranchId ( ) . hashCode ( ) ; return result ; }
private void setUpGetUnregisteredVmTemplateExpectations ( boolean notFound ) { setUpEntityQueryExpectations ( QueryType . GetUnregisteredVmTemplate , GetUnregisteredEntityQueryParameters . class , new String [ ] { "StorageDomainId" , "EntityId" } , new Object [ ] { STORAGE_DOMAIN_ID , TEMPLATE_ID } , notFound ? null : getEntity ( 1 ) ) ; }
public boolean isDomainXmlEnabledForVds ( Guid vdsId ) { return FeatureSupported . isDomainXMLSupported ( getVdsManager ( vdsId ) . getCompatibilityVersion ( ) ) ; }
public void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { doPop ( e ) ; } }
public boolean isSuggestionListDisplayed ( ) { try { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . getSize ( ) . getHeight ( ) > 0 ; } catch ( NoSuchElementException|IndexOutOfBoundsException e ) { } return false ; }
public ConnectionId ( final String host , final int port , final String connectionId ) { Objects . requireNonNull ( host ) ; if ( port <= 0 ) { throw new IllegalArgumentException ( "Port must be greater than 0" ) ; } this . host = host ; this . port = port ; this . connectionId = connectionId ; }
public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
public Map < String , MetricPlotDTOs > createTaskPlots ( ) { sessionId = getSessionIdProvider ( ) . getSessionId ( ) ; // check new model List < MetricPointEntity > metricDetails = getHibernateTemplate ( ) . find ( "select m from MetricPointEntity m where m . metricDescription . taskData . sessionId = ? " , sessionId ) ; if ( metricDetails == null || metricDetails . isEmpty ( ) ) { return oldWay ( ) ; } else { return newWay ( metricDetails ) ; } }
public void testDeadlock ( ) throws Exception { doTest ( 1000 * 30 ) ; // 30 secs almost always locks boolean interrupted = Thread . interrupted ( ) ; if ( Thread . interrupted ( ) ) { fail ( "Thread was interrupted at end of test" ) ; } }
public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( "ALL" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( "NONE" ) ) { return QueryGranularity . NONE ; } else if ( CAL RIC_GRANULARITIES . containsKey ( name ) ) { return CAL RIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
public Object [ ] getElements ( Object element ) { if ( element instanceof Object [ ] ) return ( Object [ ] ) element ; if ( element instanceof Collection ) return ( ( Collection ) element ) . toArray ( ) ; return new Object [ 0 ] ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; if ( SystemUtils . IS_OS_LINUX ) { try { eventLoopGroup = new EpollEventLoopGroup ( ) ; } catch ( Throwable t ) { LOG . warn ( "Could not use Netty Epoll event loop { } " , t . getMessage ( ) ) ; eventLoopGroup = new NioEventLoopGroup ( ) ; } } else { eventLoopGroup = new NioEventLoopGroup ( ) ; } executor = OrderedSafeExecutor . newBuilder ( ) . name ( "BKClientOrderedSafeExecutor" ) . numThreads ( 2 ) . build ( ) ; }
private void readInternal ( long position , byte [ ] buffer , int bufferOffset , int bufferLength ) { try { long readStart = System . nanoTime ( ) ; inputStream . readFully ( position , buffer , bufferOffset , bufferLength ) ; stats . readDataBytesPerSecond ( bufferLength , System . nanoTime ( ) - readStart ) ; } catch ( PrestoException e ) { // just in case there is a Presto wrapper or hook throw e ; } catch ( Exception e ) { throw new PrestoException ( HIVE_FILESYSTEM_ERROR , format ( "Error reading from % s at position % s" , id , position ) , e ) ; } }
public void invalidPropertiesFormat ( ) { VmDevice device = new VmDevice ( ) ; device . setType ( VmDeviceGeneralType . DISK ) ; device . setCustomProperties ( "bootable" ) ; DevicePropertiesUtils utils = mockDevicePropertiesUtils ( ) ; List < ValidationError > errors = utils . validateDeviceProperties ( Version . v3_3 , device ) ; assertFalse ( errors . isEmpty ( ) ) ; assertEquals ( errors . get ( 0 ) . getReason ( ) , ValidationFailureReason . SYNTAX_ERROR ) ; }
private boolean isMandatory ( MethodExpression expression ) { return expression . getMethod ( ) . equals ( MANDATORY ) ; }
private DeltaVisit next ( ) { // If our parent has no more children , discard it . if ( parent != null && parent . nextChild == null ) { parent . data = null ; parent = parent . parent ; } if ( nextChild != null ) return new DeltaVisit ( this ) ; // If we have no child ourselves , our parent must ( if it exists ) , // due to the discard rule above . With no parent , we are done . if ( parent != null ) return new DeltaVisit ( parent ) ; return null ; }
boolean delayNextTimeToRun ( Date timeToRunTheVm ) { this . timeToRunTheVm = timeToRunTheVm ; return ++ numOfSkips < MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM ; }
protected boolean isTransientException ( Throwable e ) { if ( e instanceof SQLException ) { final String sqlState = ( ( SQLException ) e ) . getSQLState ( ) ; // retry on connection errors and insufficient resources // ( see http :/ / www . postgresql . org / docs / current / static / errcodes - appendix . html ) return sqlState . startsWith ( "08" ) || sqlState . startsWith ( "53300" ) ; } return false ; }
public JupiterActivity generateJupiterActivity ( Operation op , User source , SPath editor ) { // send ( op , myMsgs , otherMsgs ) ; JupiterActivity jupiterActivity = new JupiterActivity ( this . vectorTime , op , source , editor ) ; // add ( op , myMsgs ) to outgoing ; if ( ! ( op instanceof TimestampOperation ) ) { this . ackJupiterActivityList . add ( new OperationWrapper ( op , this . vectorTime . getLocalOperationCount ( ) ) ) ; } // myMsgs = myMsgs + 1 ; this . vectorTime = this . vectorTime . incrementLocalOperationCount ( ) ; this . discardAcknowledgedOperations ( ) ; return jupiterActivity ; }
public void testAssignExecutorInvalidExecutor ( ) throws Exception { final ExecutableFlow flow = TestUtils . createExecutableFlow ( "exectest1" , "exec1" ) ; this . executionFlowDao . uploadExecutableFlow ( flow ) ; assertThatThrownBy ( ( ) - > this . assignExecutor . assignExecutor ( 1 , flow . getExecutionId ( ) ) ) . isInstanceOf ( ExecutorManagerException . class ) . hasMessageContaining ( "non - existent executor" ) ; }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions ( ) { ConnectorSession connectorSession = new TestingConnectorSession ( new HiveSessionProperties ( new HiveClientConfig ( ) . setMaxSplitSize ( new DataSize ( 1 . 0 , GIGABYTE ) ) ) . getSessionProperties ( ) ) ; return new BackgroundHiveSplitLoader ( SIMPLE_TABLE , createPartitionMetadataWithOfflinePartitions ( ) , TupleDomain . all ( ) , createBucketSplitInfo ( Optional . empty ( ) , ImmutableList . of ( ) ) , connectorSession , new TestingHdfsEnvironment ( ) , new NamenodeStats ( ) , new TestingDirectoryLister ( TEST_FILES ) , directExecutor ( ) , 2 , false ) ; }
public String toString ( ) { return methodPrefix ; }
private void setPlatformTextClassifier ( @Nullable TextClassifier textClassifier ) { android . view . textclassifier . TextClassificationManager textClassificationManager = ( android . view . textclassifier . TextClassificationManager ) mContext . getSystemService ( Context . TEXT_CLASSIFICATION_SERVICE ) ; if ( textClassificationManager != null ) { android . view . textclassifier . TextClassifier platformTextClassifier = textClassifier == null ? null : new PlatformTextClassifier ( mContext , textClassifier ) ; textClassificationManager . setTextClassifier ( platformTextClassifier ) ; } }
Object loadServiceCapabilities ( String serviceUrl ) throws IOException { HttpGet request = new HttpGet ( serviceUrl ) ; request . setHeader ( new BasicHeader ( HttpHeaders . ACCEPT , ACCEPT_SERVICE_CAPABILITIES ) ) ; CloseableHttpResponse httpResponse = execute ( request , serviceUrl , "retrieve help" ) ; validateResponse ( httpResponse , serviceUrl ) ; HttpEntity httpEntity = httpResponse . getEntity ( ) ; ContentType contentType = ContentType . getOrDefault ( httpEntity ) ; if ( "text / plain" . equals ( contentType . getMimeType ( ) ) ) { return getContent ( httpEntity ) ; } return parseJsonMetadata ( httpEntity ) ; }
protected void doStop ( ) { log . info ( "Stopping Netty server" ) ; if ( ! datagram ) { boss . shutdownGracefully ( ) ; } wrkr . shutdownGracefully ( ) ; try { sock . channel ( ) . closeFuture ( ) . sync ( ) ; } catch ( InterruptedException e ) { log . warn ( "Netty server stop interrupted" ) ; Thread . currentThread ( ) . interrupt ( ) ; } log . info ( "Netty server stopped" ) ; notifyStopped ( ) ; }
public ChannelViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ChannelViewHolder ( ( ChannelView ) inflater . inflate ( R . layout . channel_item_layout , parent , false ) ) ; }
public void onSelectionChanged ( int selectedItemCnt ) { int numberMergeSelections = adapter . numberMergeSelections ; if ( adapter . isMergeSelection && selectedItemCnt >= numberMergeSelections ) { ToastUtil . showError ( getContext ( ) , "We can only merge " + numberMergeSelections + " projects" ) ; } updateSelectionToggle ( actionMode . getMenu ( ) . findItem ( R . id . toggle_selection ) ) ; actionMode . setTitle ( getResources ( ) . getQuantityString ( getActionModeTitleId ( actionModeType ) , selectedItemCnt , selectedItemCnt ) ) ; }
private boolean shouldBeDistributed ( PlanNode planNode ) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || ( planNode instanceof TopNNode && ( ( TopNNode ) planNode ) . getStep ( ) != TopNNode . Step . FINAL ) ; }
public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( "application / xml" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( "application / xml" , serverTemplate ) ; assertNotNull ( response ) ; }
protected Void visitIntegerLiteral ( IntegerLiteral node , Integer indent ) { builder . append ( Integer . toString ( node . getValue ( ) ) ) ; return null ; }
private List < GerritQueryResult > executeQueryRest ( String query ) throws GerritException { return client . executeQueryRest ( new NullProgressMonitor ( ) , query ) ; }
public QueryWrapper ( @JsonProperty ( "query" ) String query , @JsonProperty ( "queryType" ) String queryType ) { this ( query , queryType , null ) ; }
private List < CoordinatorDuty > makeCompactSegmentsDuty ( ) { return ImmutableList . of ( compactSegments ) ; }
public CreateServerOptions networks ( String . . . networks ) { return networks ( ImmutableSet . copyOf ( networks ) ) ; }
private static AbbreviatedObjectId id ( DiffEntry de ) { return de . changeType == ChangeType . DELETE ? de . oldId : de . newId ; }
private VariableReferenceExpression getVariableReference ( RowExpression expression ) { if ( expression instanceof VariableReferenceExpression ) { return ( ( VariableReferenceExpression ) expression ) ; } else { throw new PinotException ( PINOT_UNSUPPORTED_EXPRESSION , Optional . empty ( ) , "Expected a variable reference but got " + expression ) ; } }
public boolean isLocalOnly ( ) { return this == LOCAL ; }
protected void findUsers ( String searchString , AsyncQuery query ) { Frontend . getInstance ( ) . runQuery ( VdcQueryType . Search , new DirectorySearchParameters ( "ADUSER@" + ( ( ProfileEntry ) getProfile ( ) . getSelectedItem ( ) ) . getAuthz ( ) + " : " + searchString , SearchType . DirectoryUser , ( String ) getNamespace ( ) . getSelectedItem ( ) ) , query ) ; // $NON - NLS - 1$ // $NON - NLS - 2$ }
public String getImageUrl ( String id ) { return getProvider ( ) . getUrl ( ) + API_VERSION + " / images / " + id + " / file" ; }
public User ( @NonNull String username , @NonNull String password ) { this ( username , password , Collections . emptyMap ( ) , null ) ; }
public final String consoleClientResourcesUrl ( ) { String url = getString ( DynamicMessageKey . CONSOLE_CLIENT_RESOURCES_URL ) ; boolean isAbsolute = url . contains ( " :/ / " ) ; return isAbsolute ? url : Window . Location . getProtocol ( ) + " // " + Window . Location . getHost ( ) + // $NON - NLS - 1$ " / " + BaseContextPathData . getInstance ( ) . getRelativePath ( ) + url ; // $NON - NLS - 1$ }
private boolean isFileEntryPackageable ( ZipEntry entry ) { return ApkBuilder . checkFileForPackaging ( entry . getName ( ) ) && isValidMetaInfEntry ( entry . getName ( ) ) ; }
public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; for ( VirtualMachine machine : list ) { assertTrue ( ! machine . name ( ) . isEmpty ( ) ) ; } }
void addLayer ( String id , StyleLayer layer ) { layersById . put ( id , layer ) ; }
public void setSelection ( ITimeGraphEntry trace ) { /* if there is a pending selection , ignore this one */ synchronized ( fListenerNotifierLock ) { if ( fListenerNotifier != null && fListenerNotifier . hasSelectionChanged ( ) ) { return ; } } fSelectedEntry = trace ; fTimeGraphCtrl . selectItem ( trace , false ) ; adjustVerticalScrollBar ( ) ; }
private ClassFile newClassFile ( String name , int accessFlags , String superclass , String . . . interfaces ) { try { return new ClassFile ( name , accessFlags , superclass , classLoader , interfaces ) ; } catch ( Exception e ) { throw BeanLogger . LOG . unableToCreateClassFile ( name , e . getCause ( ) ) ; } }
public boolean addListener ( String type , long id , ClassLoaderListener classLoaderListener ) { final VirtualClassLoader localClassLoader = getLocalClassLoader ( type , id ) ; return localClassLoader . addListener ( classLoaderListener ) ; }
public static final void setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null ) { fgPreferenceNodeId = id ; } }
private void init ( ) { // get the localhost . try { hostname = InetAddress . getLocalHost ( ) . getHostName ( ) ; hostname = "localhost" ; } catch ( UnknownHostException e ) { logger . warn ( "Error getting the value of localhost . " + "Proceeding with 'localhost' . " , e ) ; } }
OSImageToImage ( JustProvider provider ) { this . provider = provider ; }
private Optional < Cookie > findCookieWithName ( String cookieName , HttpClient httpClient ) { return Arrays . stream ( httpClient . getState ( ) . getCookies ( ) ) . filter ( c - > cookieName . equals ( c . getName ( ) ) ) . findFirst ( ) ; }
public void destroy ( ) { // clients must be destroyed before the pools or // you will create a several second busy wait loop for ( JettyHttpClient client : clients ) { client . close ( ) ; } if ( pool != null ) { pool . close ( ) ; pool = null ; } destroyed . set ( true ) ; }
private Set < String > expandRegionalChannelUris ( String channelUri ) { Set < String > expandedUris = null ; if ( BBC1_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { expandedUris = BBC1_TXLOG_CHANNEL_URIS ; } if ( BBC2_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { expandedUris = BBC2_TXLOG_CHANNEL_URIS ; } return expandedUris == null ? null : Sets . difference ( expandedUris , ImmutableSet . of ( channelUri ) ) ; }
public void testMultipleBatchesLateral_WithStreamingAgg ( ) throws Exception { String sql = "SELECT t2 . maxprice FROM ( SELECT customer . c_orders AS c_orders FROM " + "dfs . `lateraljoin / multipleFiles / ` customer ) t1 , LATERAL ( SELECT CAST ( MAX ( t . ord . o_totalprice ) " + " AS int ) AS maxprice FROM UNNEST ( t1 . c_orders ) t ( ord ) GROUP BY t . ord . o_orderstatus ) t2" ; testBuilder ( ) . optionSettingQueriesForTestQuery ( "alter session set ` % s` = true" , PlannerSettings . STREAMAGG . getOptionName ( ) ) . sqlQuery ( sql ) . unOrdered ( ) . baselineColumns ( "maxprice" ) . baselineValues ( 367190 ) . baselineValues ( 316347 ) . baselineValues ( 146610 ) . baselineValues ( 306996 ) . baselineValues ( 235695 ) . baselineValues ( 177819 ) . build ( ) . run ( ) ; }
public boolean isType ( String value ) { for ( GlusterStatus status : values ) { if ( status . name ( ) . equals ( value ) ) { return true ; } } return false ; }
public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { cause . printStackTrace ( ) ; ctx . close ( ) ; }
CloseNoOpServerProtocolHandler ( String websocketPath ) { super ( websocketPath , null , false ) ; }
public MessageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; super . setOrientation ( VERTICAL ) ; }
public Canvas addShapeIntoView ( final Shape shape ) { if ( shape . getUUID ( ) == null ) { shape . setUUID ( UUID . uuid ( ) ) ; } getView ( ) . add ( shape . getShapeView ( ) ) ; return this ; }
public boolean getRequiredParamBoolean ( final String key ) throws ActionParamsException { final String errMsg = "Required parameter '" + key + "' missing ! " ; final String val = getRequiredParam ( key ) ; try { return Boolean . parseBoolean ( val ) ; } catch ( Exception e ) { throw new ActionParamsException ( errMsg ) ; } }
public void onPingFromClient ( PingFromClientEvent event , EntityRef entity ) { Instant end = Instant . now ( ) ; endMap . put ( entity , end ) ; updatePing ( entity ) ; }
public boolean areEqual ( MapObject o1 , MapObject o2 ) { if ( o1 == null ^ o2 == null ) { return false ; } else if ( o1 == o2 ) { return true ; } else { return o1 . id . equals ( o2 . id ) ; } }
public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { Assert . notNull ( connectionFactory , "'connectionFactory' must not be null . " ) ; this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; this . redisTemplate . afterPropertiesSet ( ) ; }
public CompleteTransactionMessage ( long initiatorHSId , long coordinatorHSId , long txnId , boolean isReadOnly , int hash , boolean isRollback , boolean requiresAck , boolean isRestart , boolean isForReplay ) { super ( initiatorHSId , coordinatorHSId , txnId , 0 , isReadOnly , isForReplay ) ; m_hash = hash ; setBit ( ISROLLBACK , isRollback ) ; setBit ( REQUIRESACK , requiresAck ) ; setBit ( ISRE , isRestart ) ; m_isLeaderToReplica = false ; m_ackRequestedFromSender = true ; }
private CuEinvoiceDao getCuEinvoiceDao ( ) { if ( ObjectUtils . isNull ( cuEinvoiceDao ) ) { cuEinvoiceDao = SpringContext . getBean ( CuEinvoiceDaoOjb . class ) ; } return cuEinvoiceDao ; }
private static EchoTagStatementTree newEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
private static TextSummarizer getLocalSummarizer ( ) throws IOException { Collection < ? extends TextSummarizer > summarizers = Lookup . getDefault ( ) . lookupAll ( TextSummarizer . class ) ; if ( ! summarizers . isEmpty ( ) ) { summarizerToUse = summarizers . iterator ( ) . next ( ) ; return summarizerToUse ; } return null ; }
public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( "Media Node is still on the page" ) ; } else PageObjectLogging . log ( "verifyNoVideo" , "Verified no video is on page" , true , driver ) ; }
private void startOrStopGeoDataListener ( ) { if ( requireGeodata ) { geoDataSubscription = locationUpdater . start ( GeoDirHandler . UPDATE_GEODATA ) ; } else { if ( geoDataSubscription != null ) { geoDataSubscription . unsubscribe ( ) ; } } }
ZipFormatter ( Formatters formatters , FormatterUtil formatterUtil , HtmlBuilder html ) { this . formatters = formatters ; this . util = formatterUtil ; this . html = html ; }
private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ArchitectureType . ppc . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppc64 . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppcle . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppc64le . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) ; }
private void createIndex ( Connection conn , String indexExt , String columnName ) throws PersistenceException { if ( metaData . isIndexingDisabled ( ) ) return ; boolean indexExists = indexExists ( getIndexName ( false , indexExt ) , conn ) ; if ( ! indexExists ) { String ddl = String . format ( "CREATE INDEX % s ON % s ( % s ) " , getIndexName ( true , indexExt ) , getTableName ( ) , columnName ) ; if ( log . isTraceEnabled ( ) ) { log . tracef ( "Adding index with following DDL : ' % s' . " , ddl ) ; } executeUpdateSql ( conn , ddl ) ; } }
public Object getValue ( ) { return value ; }
private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } // If there is a complexGroupby at his point , it means that // display columns contain all the order by columns and // does not require another projection node on top of sort node . // If there is a complex aggregation case , the projection plan node is already added // right above the group by plan node . In future , we may inline that projection node . if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { // Top aggregate has been removed , its schema is exactly the same to // its local aggregate node . return false ; } return true ; }
public void isExecutable_HeaderCellSelected ( ) { when ( scenarioGridModelMock . getSelectedCells ( ) ) . thenReturn ( Collections . emptyList ( ) ) ; when ( scenarioGridModelMock . getSelectedHeaderCells ( ) ) . thenReturn ( Lists . create ( selectedCell ) ) ; assertTrue ( handler . isExecutable ( scenarioGridMock ) ) ; }
public boolean equals ( Object object ) { if ( object == this ) { return true ; } if ( ! ( object instanceof XarSecurityRule ) ) { return false ; } XarSecurityRule rhs = ( XarSecurityRule ) object ; return new EqualsBuilder ( ) . append ( this . right , rhs . right ) . append ( this . simple , rhs . simple ) . isEquals ( ) ; }
public static boolean containsSearchAnnotations ( XClass mappedClass ) { List < XClass > hierarchy = createXClassHierarchy ( mappedClass ) ; for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation ( clazz ) ) { return true ; } } return false ; }
private static int computeNewVectorCapacity ( int usedCapacity , int newPayload , int currentCapacity ) { int newUsedCapacity = BaseAllocator . nextPowerOfTwo ( usedCapacity + newPayload ) ; assert newUsedCapacity >= 0 ; return Math . max ( newUsedCapacity , currentCapacity ) ; }
private static void cleanShutdown ( ) { log . info ( "CleanShutdown : Starting Cleanup . " ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { activeServer . close ( ) ; } } catch ( Throwable th ) { log . error ( "cleanShutdown : failed during shutdown" , th ) ; } }
public void preInit ( FMLPreInitializationEvent event ) { Log . setModLog ( LogManager . getLogger ( ID ) ) ; configDir = new File ( event . getModConfigurationDirectory ( ) , "antiqueatlas" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , "tileids . json" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( "Finalize on readRaw ( ) returned false for " + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; this . client . disconnect ( ) ; } } catch ( Exception e ) { LOGGER . warn ( "failed to disconnect FTPClient" , e ) ; } }
protected FileType doGetType ( ) throws Exception { return ( this . stat == null ) ? FileType . IMAGINARY : FileType . FILE_OR_FOLDER ; }
public EquivalentHashMap ( int initialCapacity , float loadFactor , Equivalence < K > keyEq , Equivalence < V > valueEq ) { int capacity = 1 ; while ( capacity < initialCapacity ) capacity < <= 1 ; this . loadFactor = loadFactor ; threshold = ( int ) ( capacity * loadFactor ) ; table = new Node [ capacity ] ; this . keyEq = keyEq ; this . valueEq = valueEq ; }
private void mockSSHClient ( ) throws Exception { doNothing ( ) . when ( sshclient ) . connect ( ) ; doNothing ( ) . when ( sshclient ) . authenticate ( ) ; }
public static String sanitizeKey ( final Contentlet vanityUrl ) throws DotDataException , DotRuntimeException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator , false ) ; } }
public void execute ( ) throws ServerApiException { ListResponse < KubernetesSupportedVersionResponse > response = kubernetesVersionService . listKubernetesSupportedVersions ( this ) ; response . setResponseName ( getCommandName ( ) ) ; setResponseObject ( response ) ; }
public void loggedInUserPropertyFalseTest ( ) throws Exception { configurationService . setProperty ( "webui . user . assumelogin" , false ) ; context . restoreAuthSystemState ( ) ; String token = getAuthToken ( admin . getEmail ( ) , password ) ; getClient ( token ) . perform ( get ( " / api / authn / status" ) . header ( "X - On - Behalf - Of" , eperson . getID ( ) ) ) . andExpect ( status ( ) . isBadRequest ( ) ) ; context . turnOffAuthorisationSystem ( ) ; configurationService . setProperty ( "webui . user . assumelogin" , true ) ; context . restoreAuthSystemState ( ) ; }
protected void addExtraHeaders ( Builder webResource ) { if ( additionalHeaders != null ) { for ( Map . Entry < String , String > entry : additionalHeaders . entrySet ( ) ) { webResource . header ( entry . getKey ( ) , entry . getValue ( ) ) ; } } }
private boolean hasNewFragment ( EList < InteractionFragment > currentList , List < InteractionFragment > newList ) { return ( newList . size ( ) > currentList . size ( ) ) ; }
void closeResultSets ( ) throws SQLException { closeResultSets ( activeResultSets ) ; generatedKeysResultSet = null ; }
public boolean isTemplateAvailable ( String view , Environment environment , ClassLoader classLoader , ResourceLoader resourceLoader ) { if ( ClassUtils . isPresent ( "org . apache . jasper . compiler . JspConfig" , classLoader ) ) { try { String resourceName = getResourceName ( view , environment ) ; if ( resourceLoader . getResource ( resourceName ) . exists ( ) ) { return true ; } return new File ( "src / main / webapp" , resourceName ) . exists ( ) ; } catch ( AccessControlException ex ) { return false ; } } return false ; }
public T visit ( final AntlrBaseNode node ) { return node . accept ( this ) ; }
public static void addDiskToVm ( BaseDisk disk , Guid vmId ) { DbFacade . getInstance ( ) . getBaseDiskDao ( ) . save ( disk ) ; VmDeviceUtils . addManagedDevice ( new VmDeviceId ( disk . getId ( ) , vmId ) , VmDeviceType . DISK , VmDeviceType . DISK , null , true , false , "" ) ; }
private static Throwable getConfigFailureException ( ITestContext context ) { Throwable t = null ; for ( IInvokedMethod method : context . getSuite ( ) . getAllInvokedMethods ( ) ) { ITestNGMethod m = method . getTestMethod ( ) ; if ( m . isBeforeSuiteConfiguration ( ) && ( ! method . getTestResult ( ) . isSuccess ( ) ) ) { return method . getTestResult ( ) . getThrowable ( ) ; } } return t ; }
protected String toString ( Operator operator ) { if ( Operator . SWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
static UberDocument toUberDocument ( final Object object ) { if ( object == null ) { return null ; } if ( object instanceof UberDocument ) { return ( UberDocument ) object ; } if ( object instanceof Iterable ) { } else if ( object instanceof Map ) { } throw new IllegalArgumentException ( "Don't know how to handle type : " + object . getClass ( ) ) ; } < TEST > UberDocument . toUberDocument ( null ) ; </ TEST >
private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
public LgoProducts getProducts ( ) { LgoProducts products = null ; try { products = this . proxy . getProducts ( exchange . getNonceFactory ( ) . createValue ( ) , exchange . getSignatureService ( ) ) ; } catch ( HttpStatusIOException e ) { LgoErrorAdapter . adapt ( e ) ; } return products ; }
protected void addAttachmentToNote ( T document , AccountingXmlDocumentBackupLink backupLink , Note note ) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService . createAttachmentFromBackupLink ( document , backupLink ) ; note . setAttachment ( attachment ) ; } catch ( IOException e ) { LOG . error ( "addAttachmentToNote , unable to create attachment : " + e . getMessage ( ) ) ; String message = MessageFormat . format ( configurationService . getPropertyValueAsString ( CuFPKeyConstants . ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD ) , backupLink . getLinkUrl ( ) ) ; throw new ValidationException ( message ) ; } }
public Void getResult ( ) { throw new UnsupportedOperationException ( ) ; }
public PlanWithProperties visitUnnest ( UnnestNode node , PreferredProperties preferredProperties ) { PreferredProperties translatedPreferred = preferredProperties . translate ( variable - > { checkArgument ( variable instanceof VariableReferenceExpression , "Expect VariableReferenceExpression" ) ; return node . getReplicateVariables ( ) . contains ( variable ) ? Optional . of ( variable ) : Optional . empty ( ) ; } ) ; return rebaseAndDeriveProperties ( node , planChild ( node , translatedPreferred ) ) ; }
public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( "$status % 1$s" , domainIsoMap . getStatus ( ) ) ) ; } } return ValidationResult . VALID ; }
private static boolean isFunctionNameMatch ( RowExpression rowExpression , String expectedName ) { if ( castToExpression ( rowExpression ) instanceof FunctionCall ) { return ( ( FunctionCall ) castToExpression ( rowExpression ) ) . getName ( ) . toString ( ) . equalsIgnoreCase ( expectedName ) ; } return false ; }
public boolean hasError ( ) { return result != null && Objects . equals ( CommandResult . Type . ERROR , result . getType ( ) ) ; }
private void setupVdsNetworkInterfaceDao ( ) { when ( getDbFacadeMockInstance ( ) . getInterfaceDao ( ) ) . thenReturn ( vdsNetworkInterfaceDaoMock ) ; List < VdsNetworkInterface > expectedVdsNetworkInterface = Collections . singletonList ( vdsNetworkInterface ) ; when ( vdsNetworkInterfaceDaoMock . getVdsInterfacesByNetworkId ( networkId ) ) . thenReturn ( expectedVdsNetworkInterface ) ; }
void setProject ( IProject project ) { this . project = project ; }
public List < String > values ( String name ) { return headers == null ? null : headers . get ( name ) ; }
@Override protected Pair < Recipients , Boolean > doInBackground ( Recipients . . . recipients ) { Capability textCapability = DirectoryHelper . getUserCapabilities ( context , recipients [ 0 ] ) . getTextCapability ( ) ; return new Pair < > ( recipients [ 0 ] , textCapability == Capability . SUPPORTED ) ; }
public void cleanup ( ) { myIdeFrame = null ; myNavigationHelper . cleanup ( ) ; myNavigationHelper = null ; }
public static DateTime setBeginValidTime ( DateTime beginValidTimeArg , DateTime issueInstant ) { DateTime beginValidTime = beginValidTimeArg ; final DateTime now = new DateTime ( ) ; if ( beginValidTime == null || beginValidTime . isAfter ( now ) ) { beginValidTime = now ; } // If provided time is after the given issue instant , // modify it to include the issue instant if ( beginValidTime . isAfter ( issueInstant ) ) { if ( issueInstant . isAfter ( now ) ) { beginValidTime = now ; } } else { beginValidTime = issueInstant ; } return beginValidTime ; }
private void setupRestrictedNotification ( ) { final Resources res = getResources ( mContext , mActiveDataSubId ) ; final String title = res . getString ( R . string . disable_tether_notification_title ) ; final String message = res . getString ( R . string . disable_tether_notification_message ) ; showNotification ( R . drawable . stat_sys_tether_general , title , message , "" ) ; }
private static File getFeatureTypeDir ( File featureTypesBaseDir , String namespacePrefix , String typeName ) { return new File ( featureTypesBaseDir , getDataStoreName ( namespacePrefix , typeName ) ) ; }
public static void setupSystemProperties ( ) { int freePort = TestUtilGit . findFreePort ( ) ; System . setProperty ( "org . uberfire . nio . git . daemon . port" , String . valueOf ( freePort ) ) ; logger . info ( "Git port used : { } " , freePort ) ; // These are not needed for the tests System . setProperty ( "org . uberfire . nio . git . daemon . enabled" , "false" ) ; System . setProperty ( "org . uberfire . nio . git . ssh . enabled" , "false" ) ; System . setProperty ( "org . uberfire . sys . repo . monitor . disabled" , "true" ) ; }
public void setPreferredAgencies ( String s ) { if ( s != null && ! s . equals ( "" ) ) preferredAgencies = Sets . newHashSet ( s . split ( " , " ) ) ; }
synchronized void updateSubscribedTopics ( final Set < String > topics , final String logPrefix ) { log . debug ( " { } found { } topics possibly matching subscription" , logPrefix , topics . size ( ) ) ; subscriptionUpdates . clear ( ) ; subscriptionUpdates . addAll ( topics ) ; log . debug ( " { } updating builder with { } topic ( s ) with possible matching regex subscription ( s ) " , logPrefix , subscriptionUpdates . size ( ) ) ; setRegexMatchedTopicsToSourceNodes ( ) ; setRegexMatchedTopicToStateStore ( ) ; }
public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) ) { if ( provider . isClosed ( ) ) { releaseResources ( ) ; } } } catch ( Exception e ) { LOGGER . warn ( "Exception was found trying to release cursor resources . Execution will continue" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
protected void doStop ( ) { autoEncryptionSupport . close ( ) ; super . doStop ( ) ; LDAPCache . clear ( ) ; }
Now ( A a ) { this . a = a ; }
private String getWorkspaceRelativePath ( String sourcePath ) { if ( org . apache . commons . lang . StringUtils . isBlank ( sourcePath ) || sourcePath . contains ( " { " ) ) { return sourcePath ; } IPath absolutePath = new Path ( sourcePath ) ; IContainer container = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getContainerForLocation ( absolutePath ) ; if ( container != null ) { return container . getFullPath ( ) . toString ( ) ; } return null ; }
private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . setStyleName ( style . errataDetailPanel ( ) ) ; // $NON - NLS - 1$ errataDetailPanel . add ( errataDetailFormPanel ) ; }
public List < String > getMoreStable ( String branch ) { int i = order . indexOf ( fullName ( branch ) ) ; if ( 0 <= i ) { return Collections . unmodifiableList ( order . subList ( i + 1 , order . size ( ) ) ) ; } else { return Collections . emptyList ( ) ; } }
public void notifyListeners ( int eventType , Event event ) { if ( this . dropdownTable != null && ! this . dropdownTable . isDisposed ( ) ) this . dropdownTable . notifyListeners ( eventType , event ) ; }
public static void setup ( ) throws Exception { assumeTrue ( "Skipping tests since Hive supports only JDK 8 . " , HiveTestUtilities . supportedJavaVersion ( ) ) ; startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
public OrderType retireOrderType ( OrderType orderType , String reason ) { orderType . setRetired ( true ) ; orderType . setRetireReason ( reason ) ; return saveOrderType ( orderType ) ; }
private void updateFiltersCheckState ( ) { Object [ ] children = filterContentProvider . getElements ( getContentService ( ) ) ; ICommonFilterDescriptor filterDescriptor ; INavigatorFilterService filterService = getContentService ( ) . getFilterService ( ) ; for ( Object child : children ) { filterDescriptor = ( ICommonFilterDescriptor ) child ; if ( filterService . isActive ( filterDescriptor . getId ( ) ) ) { getTableViewer ( ) . setChecked ( child , true ) ; getCheckedItems ( ) . add ( child ) ; } else { getTableViewer ( ) . setChecked ( child , false ) ; } } }
public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { // Would prefer to accept zoom levels here ( less concepts in our API ) // If we accept zoom levels we may be able to reduce , and return a list of FeatureTypeStyles // ( with the understanding that the list may be empty if the MBLayer does not contribute any content // at a specific zoom level range ) FeatureTypeStyle style = transform ( styleContext ) ; for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; } Review : This may return null if layer visibility = false
public Optional < RevCommit > areAllReachable ( Collection < RevCommit > targets , Collection < RevCommit > starters ) throws MissingObjectException , IncorrectObjectTypeException , IOException { walk . reset ( ) ; if ( topoSort ) { walk . sort ( RevSort . TOPO ) ; } for ( RevCommit target : targets ) { walk . markStart ( target ) ; } for ( RevCommit starter : starters ) { walk . markUninteresting ( starter ) ; } walk . setRetainBody ( false ) ; return Optional . ofNullable ( walk . next ( ) ) ; }
public SessionStore < J2EContext > buildFromTrackableSession ( final J2EContext context , final Object trackableSession ) { return new J2EProvidedSessionStore ( ( HttpSession ) trackableSession ) ; }
public Response awaitResponse ( ) throws Exception { return remoteFuture . get ( ) ; }
static boolean isDefaultArgumentsConstructor ( final MethodNode methodNode ) { if ( ! " < init > " . equals ( methodNode . name ) ) { return false ; } final Type [ ] argumentTypes = Type . getMethodType ( methodNode . desc ) . getArgumentTypes ( ) ; if ( argumentTypes . length < 2 ) { return false ; } return "kotlin . jvm . internal . DefaultConstructorMarker" . equals ( argumentTypes [ argumentTypes . length - 1 ] . getClassName ( ) ) ; }
public void increment ( long amount ) { long now = clock . now ( ) / 1000L ; if ( now != currentSecond . get ( ) ) { currentSecond . set ( now ) ; currentCount . set ( 0 ) ; } long count = currentCount . addAndGet ( amount ) ; updatePeak ( count ) ; }
public static void assertValidSubmodulePath ( String path ) throws SubmoduleValidationException { if ( path . startsWith ( " - " ) ) { // $NON - NLS - 1$ throw new SubmoduleValidationException ( MessageFormat . format ( JGitText . get ( ) . submodulePathInvalid , path ) , ObjectChecker . ErrorType . GITMODULES_PATH ) ; }
public String getMessage ( ) { String message = super . getMessage ( ) ; if ( pql . isPresent ( ) ) { message += " with pql \"" + pql . get ( ) + "\"" ; } return message ; }
protected AbstractGraphDecorator ( Graph g ) { if ( g == null ) { throw new IllegalArgumentException ( "g may not be null . " ) ; } this . inner = g ; }
public boolean isDTS ( ) { return getCodecA ( ) != null && ( "dts" . contains ( getCodecA ( ) ) || "dca" . contains ( getCodecA ( ) ) ) ; }
CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 200f ) { percent = 200f ; } brightness = percent / 100f ; changeShader = true ; refreshTextures ( ) ; }
public Handles setForceEndTransactions ( boolean forceEndTransactions ) { this . forceEndTransactions = forceEndTransactions ; return this ; } public Handles setForceEndTransactions ( boolean forceEndTransactions ) { this . forceEndTransactions = forceEndTransactions ; return this ; }
protected Cause createUpstreamCause ( Run < ? , ? > build ) { if ( Jenkins . getInstance ( ) . getPlugin ( "promoted - builds" ) != null ) { // Test only when promoted - builds is installed . if ( build instanceof Promotion ) { Promotion promotion = ( Promotion ) build ; // This cannot be done for PromotionCause#PromotionCause is in a package scope . // return new PromotionCause ( build , promotion . getTarget ( ) ) ; return new UpstreamCause ( promotion . getTarget ( ) ) ; } } return new UpstreamCause ( build ) ; }
public static < Arg1 , Arg2 extends Arg1 > boolean nullSafeEquals ( Arg1 d1 , Arg2 d2 ) { if ( d1 == null ) { return d2 == null ; } else if ( d2 == null ) { return false ; } return ( d1 instanceof Date || d2 instanceof Date ) ? compare ( ( Date ) d1 , ( Date ) d2 ) == 0 : d1 . equals ( d2 ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final HeapObject other = ( HeapObject ) obj ; if ( node == null ) { return other . node == null ; } return node . equals ( other . node ) ; }
public void testSignalIntermediateThrow ( ) throws Exception { KieBase kbase = createKnowledgeBase ( "BPMN2 - IntermediateThrowEventSignal . bpmn2" ) ; ksession = createKnowledgeSession ( kbase ) ; Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( "x" , "MyValue" ) ; ProcessInstance processInstance = ksession . startProcess ( "SignalIntermediateEvent" , params ) ; Assertions . assertThat ( processInstance . getState ( ) ) . isEqualTo ( ProcessInstance . STATE_COMPLETED ) ; }
public KHyperLogLog ( int maxSize , int hllBuckets , Long2ObjectSortedMap < HyperLogLog > minhash ) { this . maxSize = maxSize ; this . hllBuckets = hllBuckets ; this . minhash = requireNonNull ( minhash , "minhash is null" ) ; hllsTotalEstimatedInMemorySize = 0 ; hllsTotalEstimatedSerializedSize = 0 ; minhash . values ( ) . stream ( ) . forEach ( this : : increaseTotalHllSize ) ; }
public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { final Project . NameKey projectKey = projectCache . get ( change . getProject ( ) ) . getProject ( ) . getNameKey ( ) ; try { return projectControl . controlFor ( projectKey , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( ShareFragmentListener ) activity ; } catch ( ClassCastException e ) { throw new IllegalStateException ( activity . toString ( ) + " must implement OnShareFragmentInteractionListener" ) ; } }
public void afterTaskInputVariableChangedEvent ( TaskEvent event , Map < String , Object > variables ) { if ( variables == null || variables . isEmpty ( ) ) { return ; } Task task = event . getTask ( ) ; List < TaskVariableImpl > taskVariables = indexVariables ( task , variables , VariableType . INPUT ) ; AuditTaskImpl auditTaskImpl = createAuditTask ( task , event . getEventDate ( ) ) ; sendMessage ( new AuditTaskData ( auditTaskImpl , null , taskVariables , null ) , 2 ) ; }
public RubyGemParser ( IFile file ) throws IOException , CoreException { mSetupDefinitions = new HashMap < String , ArrayList < Object > > ( ) ; mSetupDependencies = new HashMap < String , ArrayList < Object > > ( ) ; if ( file . getContents ( ) . available ( ) <= 0 ) { return ; } this . file = file ; gemVariable = "" ; parse ( ) ; }
public boolean canHandle ( Message < ? > message ) { return deadlineNameMatch ( ( DeadlineMessage ) message ) && super . canHandle ( message ) ; }
private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) ) { ExpressionTree expression = ( ( MemberSelectExpressionTree ) parent ) . expression ( ) ; if ( expression . is ( Kind . MEMBER_SELECT ) && ! ( ( MemberSelectExpressionTree ) expression ) . identifier ( ) . symbol ( ) . isTypeSymbol ( ) ) { return ; } reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; hasIssue . add ( parent ) ; } } }
public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { if ( ! featuresService . isInstalled ( featuresService . getFeature ( "openengsb - ports - jms" ) ) ) { featuresService . installFeature ( "openengsb - ports - jms" ) ; } OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , "jms - json" , 60000 ) ; assertNotNull ( serviceWithId ) ; }
private EventHandler createContextEventHandler ( ) { if ( contextEventHandler == null ) { contextEventHandler = event - > handleContextSet ( event ) ; } return contextEventHandler ; }
public AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; }
protected Blob convertBlobToMimeType ( Blob blob , String destinationMimeType ) { BlobHolder bh = new SimpleBlobHolder ( blob ) ; bh = convertToMimeType ( destinationMimeType , bh , null ) ; if ( bh == null ) { return null ; } Blob result = bh . getBlob ( ) ; return result ; }
private Set < SupportedAdditionalClusterFeature > getAdditionalClusterFeaturesAdded ( ) { // Lets not modify the existing collection . Hence creating a new hashset . Set < SupportedAdditionalClusterFeature > featuresSupported = new HashSet ( getVdsGroup ( ) . getAddtionalFeaturesSupported ( ) ) ; featuresSupported . removeAll ( clusterFeatureDao . getSupportedFeaturesByClusterId ( getVdsGroup ( ) . getId ( ) ) ) ; return featuresSupported ; }
static void runScript ( String filename , Connection cx ) throws SQLException { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public void recycleAttributes ( long ts ) { for ( Entry < AttributePool , List < Attribute > > e : fPoolAttributes . entrySet ( ) ) { NonNullUtils . checkNotNull ( e . getKey ( ) ) . recycle ( e . getValue ( ) , ts ) ; } }
public boolean hasNext ( ) { // If we do not have the next element pipelined , go ahead and fetch it . if ( next != null ) { // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there is no more elements to consume , we should release the resources . iterator . close ( ) ; } } return next != null ; }
public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
public List < Cohort > getCohortsContainingPatientId ( Integer patientId ) throws DAOException { return ( List < Cohort > ) sessionFactory . getCurrentSession ( ) . createCriteria ( Cohort . class ) . createAlias ( "members" , "m" ) . createAlias ( "m . patientId" , "p" ) . add ( Restrictions . eq ( "p . patientId" , patientId ) ) . list ( ) ; }
protected void init ( final ImmutableMap < String , Object > execEnvVars ) throws DbException { try { if ( dataSink != null ) { tupleWriter . open ( dataSink . getOutputStream ( ) ) ; } tupleWriter . writeColumnHeaders ( getChild ( ) . getSchema ( ) . getColumnNames ( ) ) ; } catch ( IOException e ) { throw new DbException ( e ) ; } }
public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
public FixedRealVarImpl ( String name , double value , Model model ) { this ( name , value , value , model ) ; }
public void isGreaterThan ( ) { assertTrue ( V3_0 . isGreaterThan ( of ( 2 , 0 ) ) ) ; assertFalse ( V3_0 . isGreaterThan ( of ( 3 , 0 ) ) ) ; assertFalse ( V3_0 . isGreaterThan ( of ( 4 , 0 ) ) ) ; assertTrue ( V3_0 . isGreaterThan ( NEGATIVE_VERSION_1 ) ) ; assertTrue ( NEGATIVE_VERSION_1 . isGreaterThan ( NEGATIVE_VERSION_2 ) ) ; assertFalse ( NEGATIVE_VERSION_2 . isGreaterThan ( NEGATIVE_VERSION_1 ) ) ; }
private String extractDefinitionLine ( String typeDeclaration ) { String typeLine = "" ; String [ ] lines = typeDeclaration . split ( "\n" ) ; for ( String line : lines ) { typeLine = typeLine + "\n" + line ; if ( line . contains ( " { " ) ) { break ; } } return typeLine ; }
public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; setHasSubtypes ( true ) ; this . maxStackSize = 1 ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
private void onSuccess ( ) { if ( errorCount . getAndSet ( 0 ) >= config . storeIOErrorCountToTriggerShutdown ) { logger . info ( "Resetting the error count of BlobStore { } because restart or one operation succeeded" , storeId ) ; } }
private ApplicationReportModel createAppDependencyGraphReport ( GraphContext context ) { ApplicationReportService applicationReportService = new ApplicationReportService ( context ) ; ApplicationReportModel report = applicationReportService . create ( ) ; report . setReportPriority ( 104 ) ; report . setReportIconClass ( "glyphicon glyphicon - tree - deciduous" ) ; report . setTemplatePath ( TEMPLATE ) ; report . setTemplateType ( TemplateType . FREEMARKER ) ; report . setDisplayInApplicationReportIndex ( Boolean . TRUE ) ; report . setDescription ( REPORT_DESCRIPTION ) ; return report ; }
private void startClient ( ) throws NoSuchMethodException , IllegalAccessException , InvocationTargetException , InstantiationException , UnknownHostException { if ( client == null ) { LOG . info ( "Connecting to the ElasticSearch cluster : " + configuration . getClusterName ( ) ) ; if ( configuration . getHostAddressesList ( ) != null && ! configuration . getHostAddressesList ( ) . isEmpty ( ) ) { client = createClient ( ) ; } else { LOG . warn ( "Incorrect ip address and port parameters settings for ElasticSearch cluster" ) ; } } }
protected String getRemoveQosMessage ( int size ) { return ConstantsManager . getInstance ( ) . getMessages ( ) . removeStorageQoSMessage ( size ) ; }
public static Map < Guid , List < DiskImage > > getImagesLeaf ( List < DiskImage > images ) { Map < Guid , List < DiskImage > > retVal = new HashMap < > ( ) ; images . forEach ( image - > MultiValueMapUtils . addToMap ( image . getId ( ) , image , retVal ) ) ; retVal . values ( ) . forEach ( ImagesHandler : : sortImageList ) ; return retVal ; }
protected boolean moveToState ( STATE to ) { if ( state . get ( ) == to ) { return true ; } return moveToState ( state . get ( ) , to ) ; }
public void writeTo ( Resource file ) throws JDOMException , IOException { try ( OutputStream out = path . out ( ) ) { IOUtils . write ( body , out ) ; } } }
protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; }
private void addResource ( final BackendResource resource ) { resource . setMessageBundle ( messageBundle ) ; resource . setBackend ( backend ) ; resource . setSessionHelper ( sessionHelper ) ; if ( resource instanceof AbstractBackendResource ) { ( ( AbstractBackendResource ) resource ) . setMappingLocator ( mappingLocator ) ; } else if ( resource instanceof CapabilitiesResource ) { ( ( BackendCapabilitiesResource ) resource ) . setMappingLocator ( mappingLocator ) ; } if ( resource instanceof AbstractBackendResource ) { ( ( AbstractBackendResource ) resource ) . setValidatorLocator ( validatorLocator ) ; } singletons . add ( resource ) ; }
public boolean isEmpty ( ) { return listeners . size ( ) == 0 ; }
void setEnd ( int end ) { this . end = end ; if ( this . end > this . maxSeen || this . end < this . maxSeen - MAX_SEQUENCE_NUMBER / 2 ) { this . maxSeen = this . end ; } }
public void dispose ( ) { // Remove all messages from the queue this . mHandler . removeCallbacksAndMessages ( null ) ; this . mHandler = null ; this . mPhone = null ; }
public boolean indexShareable ( ) { TypedProperties properties = properties ( ) ; boolean hasRamDirectoryProvider = false ; boolean hasOtherDirectoryProvider = false ; for ( Object objKey : properties . keySet ( ) ) { String key = ( String ) objKey ; if ( key . endsWith ( DIRECTORY_PROVIDER_KEY ) ) { if ( properties . get ( key ) . equals ( RAM_DIRECTORY_PROVIDER ) ) { hasRamDirectoryProvider = true ; } else { return true ; } } } boolean ramOnly = hasRamDirectoryProvider && ! hasOtherDirectoryProvider ; return ! ramOnly ; }
public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference ( resource ) ; if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( "Deletion not allowed for : { } " , resource ) ; } return doDelete ( item , eventMetadata ) ; }
public String getActualCpuTopology ( ) { if ( actualCpuTopology == null ) { return ConstantsManager . getInstance ( ) . getConstants ( ) . notAvailableLabel ( ) ; } else { return String . valueOf ( actualCpuTopology ) ; } }
public void onPageScrolled ( int i , float v , int i2 ) { if ( pager . getCurrentItem ( ) != 0 ) { speakerbox . stop ( ) ; } if ( pager . getCurrentItem ( ) == pagerPositionWhenPaused ) { resume . setVisibility ( View . GONE ) ; getView ( ) . findViewById ( R . id . routes ) . setBackgroundColor ( act . getBaseContext ( ) . getResources ( ) . getColor ( R . color . transparent_white ) ) ; } }
public void benchWavTrack ( ) throws Exception { WavTrack wavTrack = new WavTrack ( url ) ; boolean isEOMReached = false ; while ( ! isEOMReached ) { Frame process = wavTrack . process ( 0 ) ; isEOMReached = process . isEOM ( ) ; } try { wavTrack . close ( ) ; } finally { wavTrack . close ( ) ; } }
private static void setupLogger ( Map < String , Object > args ) throws IOException { String logfile = ( String ) args . get ( "log - file" ) ; Logger logger = Logger . getLogger ( "" ) ; logger . setLevel ( ( Level ) args . get ( "log - level" ) ) ; logger . addHandler ( new ConsoleHandler ( ) ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
public XWikiAttachment set ( XWikiAttachment attachment ) { XWikiAttachment put = map . put ( attachment . getFilename ( ) , attachment ) ; if ( put != attachment ) { added ( attachment ) ; updatedMap ( ) ; } return put ; }
public boolean equals ( Object obj ) { if ( obj instanceof MethodKey ) { final MethodKey toCompare = ( MethodKey ) obj ; return toCompare . name . equals ( name ) && toCompare . parameterTypes . equals ( parameterTypes ) ; } return false ; }
MongoDBTracing ( Builder builder ) { tracing = builder . tracing ; maxAbbreviatedCommandLength = builder . maxAbbreviatedCommandLength ; commandsWithCollectionName = Collections . unmodifiableSet ( new HashSet < > ( builder . commandsWithCollectionName ) ) ; }
public void disconnect ( ) { Object lock = partitions != null ? partitions : new Object ( ) ; synchronized ( lock ) { document = null ; partitions = null ; try { inputStream . close ( ) ; } catch ( IOException e ) { } } }
private void printInfo ( String sizeMessage , String inAlluxioMessage , String inMemMessage , String path ) { System . out . println ( inMemMessage . isEmpty ( ) ? String . format ( SHORT_INFO_FORMAT , sizeMessage , inAlluxioMessage , path ) : String . format ( LONG_INFO_FORMAT , sizeMessage , inAlluxioMessage , inMemMessage , path ) ) ; }
public void tearDown ( ) { // Destroy JMX beans created during testing . MetricsService metricsService = new MetricsService ( nodeEngineMock , ( ) - > metricsRegistry ) ; metricsService . init ( nodeEngineMock , new Properties ( ) ) ; metricsService . shutdown ( true ) ; JmxLeakHelper . checkJmxBeans ( ) ; // Stop executor service . if ( executionService != null ) { executionService . shutdown ( ) ; } }
public AdsBaseObject verifyAdImage ( String slotName , String src , String imageUrl ) { WebElement element = getWebElement ( slotName ) ; boolean isMobile = "MOBILE" . equalsIgnoreCase ( src ) ; Assertion . assertTrue ( new AdsComparison ( ) . compareImageWithScreenshot ( imageUrl , element , driver , isMobile ) ) ; PageObjectLogging . log ( "verifyAdImage" , "Ad looks good" , true , driver ) ; return this ; }
public Set < String > getUnmatchedLabels ( ) { synchronized ( unmatchedLabels ) { return Collections . unmodifiableSet ( unmatchedLabels ) ; } }
public void scanForRepoChanges ( ) throws IOException { refs . refresh ( ) ; if ( ! isBare ( ) ) getIndex ( ) ; // This will detect changes in the index }
public List < Server > getReachableServers ( ) { return getServerList ( true ) ; }
protected Guid getStoragePoolId ( ) { return getDbFacade ( ) . getStoragePoolDao ( ) . getAllForStorageDomain ( getStorageDomainId ( ) ) . get ( 0 ) . getId ( ) ; }
private int prerequirementImgResource ( String group ) { if ( group . equalsIgnoreCase ( AssignmentPrerequirement . RANK . toString ( ) ) ) { return R . drawable . rank_prerequirement ; } else if ( group . equalsIgnoreCase ( AssignmentPrerequirement . MISSION . toString ( ) ) ) { return R . drawable . group_prerequirement ; } else { return R . drawable . empty ; } }
public Iterator < ImageTypeSpecifier > getImageTypes ( int pImageIndex ) throws IOException { checkBounds ( pImageIndex ) ; // TODO : Better implementation , include INT_RGB types for 3BYTE_BGR and 4BYTE_ABGR for INT_ARGB return Arrays . asList ( getRawImageType ( pImageIndex ) ) . iterator ( ) ; }
public void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; }
public static SelectorHandler getHandler ( final String selectorStr ) { if ( ! selectorStr . isEmpty ( ) ) for ( final Entry < String , SelectorHandler > handler : selectorHandlers . subMap ( selectorStr , true , selectorStr . substring ( 0 , 1 ) , true ) . entrySet ( ) ) if ( selectorStr . startsWith ( handler . getKey ( ) ) ) return handler . getValue ( ) ; return vanillaHandler ; }
public synchronized void close ( ) { if ( closed ) { return ; } closed = true ; if ( parentMemoryContext != null ) { parentMemoryContext . updateBytes ( - usedBytes ) ; } usedBytes = 0 ; }
public Map < K , V > getEntries ( ) { return entries ; }
public void testDefaultConfig ( ) throws Exception { Files . write ( springTestFile . toPath ( ) , "modification" . getBytes ( ) , StandardOpenOption . SYNC ) ; // Adding few millis to avoid fleaky tests // The file hasher could sometimes evaluate these two changes as duplicate , as the second modification of file could be done before hashing is done Thread . sleep ( 50 ) ; Files . write ( springTestFile . toPath ( ) , "modification 2" . getBytes ( ) , StandardOpenOption . SYNC ) ; MockEndpoint mock = getMockEndpoint ( "mock : springTest" ) ; mock . setExpectedCount ( 1 ) ; // The same with testCustomHasher , that second MODIFY event is discarded mock . setResultWaitTime ( 1000 ) ; mock . assertIsSatisfied ( ) ; }
private boolean startsOrEndsWithWhitespace ( String value ) { boolean startsOrEndsWithWhitespace = false ; if ( StringUtils . isNotBlank ( value ) ) { int lastIndex = value . length ( ) - 1 ; if ( Character . isSpaceChar ( value . charAt ( 0 ) ) ) { startsOrEndsWithWhitespace = true ; } else if ( Character . isSpaceChar ( value . charAt ( lastIndex ) ) ) { startsOrEndsWithWhitespace = true ; } } else { startsOrEndsWithWhitespace = false ; } return startsOrEndsWithWhitespace ; }
private void updateData ( OCShare share ) { // Update DB with the response share . setPath ( mPath ) ; share . setIsFolder ( mPath . endsWith ( FileUtils . PATH_SEPARATOR ) ) ; share . setPermissions ( READ_ONLY ) ; getStorageManager ( ) . saveShare ( share ) ; // Update OCFile with data from share : ShareByLink and publicLink OCFile file = getStorageManager ( ) . getFileByPath ( mPath ) ; if ( file != null ) { file . setShareWithSharee ( true ) ; // TODO - this should be done by the FileContentProvider , as part of getStorageManager ( ) . saveShare ( share ) getStorageManager ( ) . saveFile ( file ) ; } }
protected void startMasters ( boolean isLeader ) { try { connectToUFS ( ) ; mRegistry . start ( isLeader ) ; } catch ( IOException e ) { LOG . error ( "Failed to start master . " , e ) ; throw Throwables . propagate ( e ) ; } }
public BugzillaRestRepositoryConnectorUi ( ) { connector = null ; }
public static ListStatusPOptions getListStatusOptions ( ) { FileSystemMasterCommonPOptions commonOptions = getCommonOptions ( ) . toBuilder ( ) . setTtl ( Configuration . getMs ( PropertyKey . USER_FILE_LOAD_TTL ) ) . setTtlAction ( GrpcUtils . toProto ( Configuration . getEnum ( PropertyKey . USER_FILE_LOAD_TTL_ACTION , TtlAction . class ) ) ) . build ( ) ; return ListStatusPOptions . newBuilder ( ) . setCommonOptions ( commonOptions ) . setLoadMetadataType ( GrpcUtils . toProto ( Configuration . getEnum ( PropertyKey . USER_FILE_METADATA_LOAD_TYPE , LoadMetadataType . class ) ) ) . build ( ) ; }
Node ( final String name , final NodeProcessor nodeProcessor , final Dag dag ) { requireNonNull ( nodeProcessor , "The nodeProcessor parameter can't be null . " ) ; this . nodeProcessor = nodeProcessor ; requireNonNull ( name , "The name of the node can't be null" ) ; this . name = name ; requireNonNull ( dag , "The dag of the node can't be null" ) ; this . dag = dag ; }
public String getTooltip ( MergeMode mode ) { String tooltip ; switch ( mode ) { case LEFT_TO_RIGHT : tooltip = EMFCompareDiagramEditMessages . getString ( "merged . to . right . tooltip" ) ; // $NON - NLS - 1$ break ; case RIGHT_TO_LEFT : tooltip = EMFCompareDiagramEditMessages . getString ( "merged . to . left . tooltip" ) ; // $NON - NLS - 1$ break ; case ACCEPT : tooltip = EMFCompareDiagramEditMessages . getString ( "accept . change . tooltip" ) ; // $NON - NLS - 1$ break ; case REJECT : tooltip = EMFCompareDiagramEditMessages . getString ( "reject . change . tooltip" ) ; // $NON - NLS - 1$ break ; default : throw new IllegalArgumentException ( ) ; } return tooltip ; }
public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ? Boolean . TRUE : null ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful ) { this ( fallbackToLastSuccessful , UpstreamFilterStrategy . UseAll , false ) ; }
public static Result deleteUser ( Long userId ) { if ( User . findByLoginId ( session ( ) . get ( "loginId" ) ) . isSiteManager ( ) ) { if ( Project . isOnlyManager ( userId ) ) { flash ( Constants . WARNING , "site . userList . deleteAlert" ) ; } else { User . find . byId ( userId ) . delete ( ) ; } } else { flash ( Constants . WARNING , "auth . unauthorized . waringMessage" ) ; } return redirect ( routes . SiteApp . userList ( 0 , null ) ) ; }
public Attachment ( @NonNull Uri uri , @NonNull String contentType , long date , @Nullable String fileName ) { if ( date < 0 ) { throw new AssertionError ( "uri , content type , and date must all be specified" ) ; } this . uri = uri ; this . fileName = fileName ; this . contentType = contentType ; this . date = date ; }
private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
public void afterBegin ( ) throws EJBException , RemoteException { log . trace ( "afterBegin called" ) ; checker . setSynchronizedBegin ( ) ; }
private boolean checkPagingSpec ( PagingSpec pagingSpec , boolean descending ) { for ( Integer value : pagingSpec . getPagingIdentifiers ( ) . values ( ) ) { if ( descending ^ ( value < 0 ) ) { return false ; } } return pagingSpec . getThreshold ( ) >= 0 ; }
private void init ( Jdbi db ) { db . registerArrayType ( SqlArrayTypeFactory . of ( UserId . class , "int" , UserId : : getId ) ) ; db . registerColumnMapper ( new UserIdColumnMapper ( ) ) ; }
protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) { if ( addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; } return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return true ; }
private static @NonNull String getSpanName ( String attributeName ) { return attributeName . substring ( 0 , attributeName . lastIndexOf ( ' / ' ) ) ; }
private static boolean containsAll ( String text , final Collection < String > items ) { final String _text = text . toLowerCase ( ) ; return items . stream ( ) . allMatch ( it - > { return _text . contains ( it ) ; } ) ; }
private void recursiveDelete ( Path file ) throws IOException { Files . walkFileTree ( file , new SimpleFileVisitor < Path > ( ) { @Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { Files . delete ( file ) ; return FileVisitResult . CONTINUE ; } @Override public FileVisitResult postVisitDirectory ( Path dir , IOException e ) throws IOException { if ( e == null ) { Files . delete ( dir ) ; return FileVisitResult . CONTINUE ; } else { throw e ; } } } ) ; }
public Optional < Object > nextMarker ( ) { if ( totalCount < pageSize ) return Optional . absent ( ) ; if ( pageNumber <= ( totalCount / pageSize ) ) { return Optional . of ( toPaginationOptions ( pageNumber + 1 ) ) ; } return Optional . absent ( ) ; }
public void testInvalidUser ( AuthenticationFlowContext context , UserModel user ) { if ( user == null ) { dummyHash ( context ) ; context . getEvent ( ) . error ( Errors . USER_NOT_FOUND ) ; Response challengeResponse = challenge ( context , getDefaultChallengeMessage ( context ) ) ; context . failureChallenge ( AuthenticationFlowError . INVALID_USER , challengeResponse ) ; } }
public boolean validateChecksum ( ) { if ( StringUtils . isNotBlank ( checksum ) ) { try { return DigestHelper . check ( checksum , new FileInputStream ( downloadedFilePath ) ) ; } catch ( IOException e ) { throw new CloudRuntimeException ( "could not check sum for file : " + downloadedFilePath , e ) ; } catch ( NoSuchAlgorithmException e ) { throw new CloudRuntimeException ( "Unknown checksum algorithm : " + checksum , e ) ; } } return true ; }
public RegistrationUpdateEvent ( String address , List < RegistrationInfo > registrations ) { this . address = address ; if ( registrations == null || registrations . isEmpty ( ) ) { this . registrations = Collections . emptyList ( ) ; } else { this . registrations = registrations ; } }
public InvocationContext createInvocationContext ( boolean isWrite , int keyCount ) { if ( keyCount == 1 ) { return new SingleKeyNonTxInvocationContext ( true , keyEq ) ; } else if ( keyCount > 0 ) { NonTxInvocationContext ctx = new NonTxInvocationContext ( keyCount , true , keyEq ) ; return ctx ; } return createInvocationContext ( null ) ; }
private boolean isRealWorklog ( final EveritWorklog worklog ) { boolean isRealWorklog = true ; if ( issuesRegex != null ) { for ( Pattern issuePattern : issuesRegex ) { boolean issueMatches = issuePattern . matcher ( worklog . getIssue ( ) ) . matches ( ) ; // if match not count in summary if ( issueMatches ) { isRealWorklog = false ; break ; } } } return isRealWorklog ; }
public void removed ( IExtension [ ] extensions ) { for ( IExtension extension : extensions ) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider . get ( extension ) ; if ( layoutAlgorithmProvider != null ) { List < CustomLayoutAlgorithm > customLayoutAlgorithms = layoutAlgorithmProvider . getCustomLayoutAlgorithms ( ) ; for ( CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms ) { layoutProviderRegistry . remove ( customLayoutAlgorithm . getId ( ) ) ; } } extensionToLayoutAlgorithmProvider . remove ( extension ) ; } }
public void increment ( int typeId ) { if ( typeId >= counts . length ) { counts = Arrays . copyOf ( counts , max ( counts . length * 2 , typeId + 1 ) ) ; } counts [ typeId ] ++ ; if ( typeId > highestTypeId ) { highestTypeId = typeId ; } }
private static void delete ( List < ReceiveCommand > cmds , List < ReceiveCommand > createCmds ) { for ( ReceiveCommand c : createCmds ) { ObjectId id = c . getNewId ( ) ; String name = c . getRefName ( ) ; cmds . add ( new ReceiveCommand ( id , ObjectId . zeroId ( ) , name ) ) ; } }
public RefreshLocalVisitor ( IProgressMonitor monitor ) { this . monitor = SubMonitor . convert ( monitor ) ; workspace = ( Workspace ) ResourcesPlugin . getWorkspace ( ) ; resourceChanged = false ; String msg = Messages . resources_errorMultiRefresh ; errors = new MultiStatus ( ResourcesPlugin . PI_RESOURCES , IResourceStatus . FAILED_READ_LOCAL , msg , null ) ; }
private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; if ( Version . getJavaRelease ( ) >= 8 ) { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } else { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
public void testNull_Event ( ) { XDRResponseEventType eventA = new XDRResponseEventType ( ) ; XDREventType eventB = new XDREventType ( ) ; assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( eventA ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( eventB ) ) ; }
public void testJNDIBindingsNoAppName ( ) throws Exception { Context ctx = getInitialContext ( HOST , PORT ) ; Hello ejb = ( Hello ) ctx . lookup ( "ejb :/ ejb - jndi / Hello ! org . jboss . as . test . integration . ejb . jndi . logging . Hello" ) ; Assert . assertNotNull ( "Null object returned for local business interface lookup in the ejb namespace" , ejb ) ; Assert . assertTrue ( "Expected JNDI binding message not found" , LoggingUtil . hasLogMessage ( managementClient , TEST_HANDLER_NAME , "ejb :/ ejb - jndi / Hello ! org . jboss . as . test . integration . ejb . jndi . logging . Hello" ) ) ; }
public CrossesListDescriptionSheetParser ( final T importedList , final UserDataManager userDataManager ) { this . importedList = importedList ; this . doParseDetails = true ; this . doParseConditions = true ; this . doParseFactors = true ; this . doParseVariates = true ; this . userDataManager = userDataManager ; this . descriptionSheetIndex = 0 ; ; }
public VolumeClassification getVolumeClassification ( ) { if ( volumeClassification == null ) { return ( active ) ? VolumeClassification . Volume : VolumeClassification . Snapshot ; } return volumeClassification ; }
public void registerSonarQubeVersion_publishes_version_on_first_call ( ) { ClusterProperties clusterProperties = new ClusterProperties ( newClusterSettings ( ) ) ; try ( HazelcastCluster hzCluster = HazelcastCluster . builder ( clusterProperties ) . build ( ) ) { hzCluster . registerSonarQubeVersion ( "1 . 0 . 0 . 0" ) ; HazelcastInstance hzInstance = createHazelcastClient ( hzCluster ) ; assertThat ( hzInstance . getAtomicReference ( SONARQUBE_VERSION ) . get ( ) ) . isEqualTo ( "1 . 0 . 0 . 0" ) ; } }
public String [ ] getColumnTexts ( @NonNull ITimeGraphEntry entry ) { String [ ] texts = new String [ fColumns . length ] ; for ( int i = 0 ; i < fColumns . length ; i ++ ) { texts [ i ] = fLabelProvider . getColumnText ( entry , i ) ; } return texts ; }
private Pageview ( ) { }
public TreeFillingConfigurationDialog ( final Shell parentShell , final TreeFillingConfiguration treefillingConfiguration , final List < ILabelProviderConfiguration > existingLabelProvidersConfiguration , final List < PasteEObjectConfiguration > existingPasteConfigurations ) { super ( parentShell ) ; this . modifiedTreefillingConfiguration = EcoreUtil . copy ( treefillingConfiguration ) ; this . existingLabelProviderConfigurations = existingLabelProvidersConfiguration ; this . existingPasteConfigurations = existingPasteConfigurations ; setTitle ( Messages . TreeFillingConfigurationDialog_treeFillingConfigurationDialogName ) ; }
public void execute ( final Talks talks ) throws IOException { int idx = this . index ( talks ) ; for ( final Talk talk : talks . active ( ) ) { idx ++ ; talk . modify ( new Directives ( ) . xpath ( " / talk / request" ) . attr ( "index" , Integer . toString ( idx ) ) ) ; } }
public long getSafePointDrId ( ) { // Acquire lock to avoid seeing bad data while another thread is in truncate ( ) synchronized ( m_map ) { return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; } }
public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( PROJECT_NAME ) ; numDetectedTags . setValue ( 0 ) ; nfcBrickPosition = 0 ; setVariableIDPosition = 1 ; setVariableMessagePosition = 2 ; baseActivityTestRule . launchActivity ( null ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableIDPosition , READ_TAG_ID ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableMessagePosition , READ_TAG_MESSAGE ) ; }
public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , false ) ; } }
void error ( ZuulException e ) { RequestContext . getCurrentContext ( ) . setThrowable ( e ) ; zuulRunner . error ( ) ; LOG . error ( e . getMessage ( ) , e ) ; }
private List < String > defaultIncludedModuleNamesForUnnamedModule ( ) { if ( fJavaElements != null ) { List < IPackageFragmentRoot > roots = new ArrayList < > ( ) ; for ( IJavaElement element : fJavaElements ) { if ( element instanceof IPackageFragmentRoot ) { roots . add ( ( IPackageFragmentRoot ) element ) ; } } return JavaCore . defaultRootModules ( roots ) ; } return Collections . emptyList ( ) ; }
public void disable ( @RequestBody List < Long > printerIds ) throws IOException { setState ( printerIds , false ) ; }
public double getFilterMinSelectivityEstimateFactor ( ) { return options . getOption ( FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR ) ; }
public JavaOutputProcessor ( PrettyPrinter printer ) { this . printer = printer ; }
public BucketFunction getBucketFunction ( ConnectorTransactionHandle transactionHandle , ConnectorSession session , ConnectorPartitioningHandle partitioningHandle , List < Type > partitionChannelTypes , int bucketCount ) { HivePartitioningHandle handle = ( HivePartitioningHandle ) partitioningHandle ; BucketFunctionType bucketFunctionType = handle . getBucketFunctionType ( ) ; switch ( bucketFunctionType ) { case HIVE_COMPATIBLE : return createHiveCompatibleBucketFunction ( bucketCount , handle . getHiveTypes ( ) . get ( ) ) ; case PRESTO_NATIVE : return createPrestoNativeBucketFunction ( bucketCount , handle . getTypes ( ) . get ( ) ) ; default : throw new IllegalArgumentException ( "Unsupported bucket function type " + bucketFunctionType ) ; } }
public void writePacketData ( RailcraftOutputStream data ) throws IOException { super . writePacketData ( data ) ; data . writeFluidStack ( tank . getFluid ( ) ) ; data . writeBoolean ( boiler . isBurning ( ) ) ; }
protected void setValue ( final int rowIndex , final int columnIndex , final Date value ) { DTCellValue52 dtCellValue52 = table52 . getData ( ) . get ( rowIndex ) . get ( columnIndex ) ; dtCellValue52 . setDateValue ( value ) ; try { updateManager . update ( table52 , getUpdates ( rowIndex , columnIndex ) ) ; } catch ( UpdateException e ) { e . printStackTrace ( ) ; } }
private TreeMap < Event , List < EntryDTO > > buildEventEntryDTOMap ( List < EntryDTO > entryDTOS ) { return entryDTOS . stream ( ) . collect ( Collectors . groupingBy ( EntryDTO : : getEvent , ( ) - > new TreeMap < > ( Comparator . comparing ( Event : : getWhenOccured ) . thenComparing ( Event : : getExternalId ) ) , Collectors . toList ( ) ) ) ; }
private void verifyTableProperty ( String propertyName , int propertyValue ) { waitForElementByElement ( table ) ; Assertion . assertEquals ( table . getAttribute ( propertyName ) , Integer . toString ( propertyValue ) ) ; PageObjectLogging . log ( "verifyTableProperty" , "table has correct " + propertyName + " property" , true ) ; }
public void set ( int index , int value ) { if ( index < 0 || index >= size ) { throw new IndexOutOfBoundsException ( "Index : " + index + " , Size : " + size ) ; } array [ index ] = value ; }
@Override public ReflogEntry getReverseEntry ( int number ) throws IOException { lock . lock ( ) ; try { LogCursor cursor = reftable . seekLog ( refname ) ; while ( true ) { if ( ! cursor . next ( ) || number < 0 ) { return null ; } if ( number == 0 ) { return cursor . getReflogEntry ( ) ; } number -- ; } } finally { lock . unlock ( ) ; } }
public void testVersion0_98IsValid ( ) throws Exception { rootDir = Paths . get ( getClass ( ) . getClassLoader ( ) . getResource ( "bags / v0_98 / bag" ) . toURI ( ) ) ; if ( System . getProperty ( "os . name" ) . contains ( "Windows" ) ) { Path bagitDir = rootDir . resolve ( " . bagit" ) ; Files . setAttribute ( bagitDir , "dos : hidden" , Boolean . TRUE ) ; } Bag bag = reader . read ( rootDir ) ; sut . isValid ( bag , true ) ; }
public ProgramState checkPreStatement ( CheckerContext context , Tree syntaxNode ) { AbstractStatementVisitor visitor = new PreStatementVisitor ( context ) ; syntaxNode . accept ( visitor ) ; return visitor . programState ; }
ParameterMap getQueryParams ( MuleEvent event ) { return resolveParams ( event , HttpParamType . QUERY_PARAM ) ; }
public Mutation ( Mutation m ) { m . serialize ( ) ; this . row = m . row ; this . data = m . data ; this . size = new MutationSize ( m . size ) ; this . values = m . values ; this . replicationSources = m . replicationSources ; }
public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null , ( Flag [ ] ) null ) ; }
default Query getRemoveByQuery ( ) { return isVersionedEntity ( ) ? getQueryForVersion ( ) : getByIdQuery ( ) ; }
public void addError ( String errorMessage , Element element ) { errors . add ( new ProblemImpl ( errorMessage , name , element ) ) ; }
private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( message == null && passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
public boolean isSupporting ( Capabilities capabilities ) { return BrowserType . EDGE . equals ( capabilities . getBrowserName ( ) ) || capabilities . getCapability ( "chromeOptions" ) != null || BrowserType . CHROME . equals ( capabilities . getBrowserName ( ) ) || BrowserType . CHROMIUM . equals ( capabilities . getBrowserName ( ) ) || capabilities . getCapability ( "goog : chromeOptions" ) != null ; }
public HistoryTreeStub getHistoryTree ( ) { return ( HistoryTreeStub ) super . getSHT ( ) ; }
public static Iterable < ITmfEventAspect < ? > > getEventAspects ( ITmfTrace trace , Class < ? extends ITmfEventAspect < ? > > aspectClass ) { return Iterables . filter ( Iterables . concat ( trace . getEventAspects ( ) , EXTRA_ASPECTS ) , aspect - > aspectClass . isAssignableFrom ( aspect . getClass ( ) ) ) ; }
public PrestoSparkRow get ( ) throws InterruptedException { PrestoSparkRow row ; synchronized ( monitor ) { while ( ! finished && buffer . isEmpty ( ) ) { monitor . wait ( ) ; } if ( finished ) { return null ; } row = buffer . poll ( ) ; } memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; return row ; }
private ByteBuffer parsePacketIDBAndNRB ( int blockLength ) throws IOException { ByteBuffer pcapPacketData ; pcapPacketData = ByteBuffer . allocate ( blockLength - PcapFileValues . PCAPNG_PACKET_HEADER_SIZE ) ; pcapPacketData . position ( PcapFileValues . PCAPNG_PACKET_HEADER_SIZE ) ; pcapPacketData . clear ( ) ; SeekableByteChannel fFileChannel ; try { fFileChannel = getFileChannel ( ) ; fFileChannel . read ( pcapPacketData ) ; } catch ( BadPcapFileException e1 ) { /* Just ignore */ } pcapPacketData . flip ( ) ; return pcapPacketData ; }
public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( "First check" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( "arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) " , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
public String getContentAccessModeList ( ) { String [ ] modeList = contentAccessModeList == null ? new String [ 0 ] : contentAccessModeList . split ( " , " ) ; String ammend = "" ; if ( ! ArrayUtils . contains ( modeList , ContentAccessCertServiceAdapter . DEFAULT_CONTENT_ACCESS_MODE ) ) { ammend = modeList . length > 0 ? " , " : "" ; ammend += ContentAccessCertServiceAdapter . DEFAULT_CONTENT_ACCESS_MODE ; } return modeList . length > 0 ? this . contentAccessModeList + ammend : ammend ; }
public void setUp ( ) { System . setProperty ( "user . timezone" , "UTC" ) ; TimeZone . setDefault ( null ) ; configuration = Configuration . DEFAULT ; }
public void onDestroyView ( ) { mWebViewStateOnDestroyView = new Bundle ( ) ; try { storeWebView ( mWebViewStateOnDestroyView ) ; mWebViewBridge . destroy ( ) ; mWebViewBridge = null ; } catch ( Exception exp ) { Log . w ( TAG , exp . getMessage ( ) + "" , exp ) ; } super . onDestroyView ( ) ; }
private static void deleteDir ( HdfsContext context , HdfsEnvironment hdfsEnvironment , Path path , boolean recursive ) { try { hdfsEnvironment . getFileSystem ( context , path ) . delete ( path , recursive ) ; } catch ( Exception e ) { // don't fail if unable to delete path log . warn ( e , "Failed to delete path : " + path . toString ( ) ) ; } }
private static boolean isNakedTD1Key ( String s ) { return NAKED_TD1_KEY_PATTERN . matcher ( s ) . matches ( ) ; }
public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } else { ( ( Seekable ) in ) . seek ( mPos + n ) ; } mPos += n ; return n ; }
public void testUnmarshallSubprocessLevelEventEmptyProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_ _EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartNoneEvent emptySubprocess = getStartNodeById ( diagram , EMPTY_SUBPROCESS_LEVEL_EVENT_ID , StartNoneEvent . class ) ; assertGeneralSet ( emptySubprocess . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertNotNull ( emptySubprocess . getExecutionSet ( ) ) ; assertStartEventSlaDueDate ( emptySubprocess . getExecutionSet ( ) , EMPTY_VALUE ) ; }
private List < Window > fetchWindowsInQueue ( ) { List < Window > windows = Lists . newArrayList ( getWindows ( ) ) ; return ImmutableList . copyOf ( windows ) ; }
protected void executeCommand ( IDeviceManagementInteractor executor ) throws DeploymentException { executor . startFB ( resource , new FBDeploymentData ( "" , resFB ) ) ; // $NON - NLS - 1$ // TODO correctly determine prefix }
private void setReaderBudget ( ) { reader . setResultSizeBudget ( ariaBatchRows <= MIN_BATCH_ROWS ? UNLIMITED_BUDGET : targetResultBytes ) ; }
default < T > Flux < SearchHit < T > > find ( Query query , Class < T > entityType ) { return search ( query , entityType , entityType ) ; }
public Object execute ( ExecutionEvent event ) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard ( util . getConfiguredRepositories ( ) , false ) ; WizardDialog dialog = new WizardDialog ( getShell ( event ) , wizard ) ; if ( dialog . open ( ) == Window . OK ) { for ( String dir : wizard . getDirectories ( ) ) { File repositoryDir = FileUtils . canonicalize ( new File ( dir ) ) ; addRepository ( repositoryDir ) ; } } return null ; }
public Map < String , String > load ( ) { final Map < String , String > preferences = new HashMap < String , String > ( ) ; final String property = System . getProperty ( GuidedDecisionTableEditorService . DTABLE_VERIFICATION_ENABLED ) ; if ( property != null ) { log . info ( "Setting preference '" + GuidedDecisionTableEditorService . DTABLE_VERIFICATION_ENABLED + "' to '" + property + "' . " ) ; preferences . put ( GuidedDecisionTableEditorService . DTABLE_VERIFICATION_ENABLED , property ) ; } return preferences ; }
protected int getParallelHostCount ( UpgradeContext ctx , int defaultValue ) { if ( m_grouping . parallelScheduler != null ) { int taskParallelism = m_grouping . parallelScheduler . maxDegreeOfParallelism ; if ( taskParallelism == ParallelScheduler . DEFAULT_MAX_DEGREE_OF_PARALLELISM ) { taskParallelism = ctx . getDefaultMaxDegreeOfParallelism ( ) ; } else { return taskParallelism ; } } return defaultValue ; }
public static synchronized boolean stopIfIsPlaying ( @Nullable AudioSlide slide ) { if ( playing . isPresent ( ) && playing . get ( ) . getAudioSlide ( ) . equals ( slide ) ) { playing . get ( ) . stop ( ) ; return true ; } else { return false ; } }
public List < AggregatorFactory > getRequiredColumns ( ) { return fields . stream ( ) . map ( input - > new CardinalityAggregatorFactory ( input . getOutputName ( ) , null , Collections . singletonList ( input ) , byRow , round ) ) . collect ( Collectors . toList ( ) ) ; }
public Optional < Object > getRequestAttribute ( final String name ) { return Optional . ofNullable ( this . request . getAttribute ( name ) ) ; }
static String reflogComments ( List < ReflogEntry > entries ) { StringBuffer b = new StringBuffer ( ) ; for ( ReflogEntry e : entries ) { b . append ( e . getComment ( ) ) . append ( " ; " ) ; } return b . toString ( ) ; }
private static boolean validateName ( String value ) throws WSSecurityException { Name name ; try { name = new LdapName ( value ) ; } catch ( Exception e ) { LOG . info ( "Validation of X509 Subject Name failed : { } " , e . getLocalizedMessage ( ) , e ) ; throw new WSSecurityException ( ErrorCode . FAILURE , "Not a valid X509 Subject Name . " ) ; } return true ; }
private static SimpleFeatureCollection parseGeoJSON ( InputStream in , CoordinateReferenceSystem crs ) throws IOException { Map < String , Object > geojson = OM . readValue ( in , TYPE_REF ) ; try { SimpleFeatureType schema = GeoJSONSchemaDetector . getSchema ( geojson , crs ) ; return GeoJSONReader2 . toFeatureCollection ( geojson , schema ) ; } finally { in . close ( ) ; } }
private void refreshHostStorage ( Guid hostId ) { getBackendCollection ( VdcQueryType . GetDeviceList , new GetDeviceListQueryParameters ( hostId , StorageType . ISCSI , false ) ) ; }
public void openTestShells ( ) { Display . syncExec ( ( ) - > { for ( int i = 1 ; i <= TEST_SHELLS_COUNT ; i ++ ) { String shellTitle = "shell" + i ; ShellTestUtils . createShell ( shellTitle ) ; shells . add ( shellTitle ) ; } } ) ; }
RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , "lowValue can not be null" ) ; this . highValue = requireNonNull ( highValue , "highValue can not be null" ) ; requireNonNull ( fraction , "fraction can not be null" ) ; requireNonNull ( dataSize , "dataSize can not be null" ) ; requireNonNull ( distinctValuesCount , "distinctValuesCount can not be null" ) ; this . statistics = createStatisticsMap ( dataSize , fraction , distinctValuesCount ) ; }
public void close ( ) { log . debug ( "Closing record collector" ) ; if ( eosEnabled ) { streamsProducer . abortTransaction ( ) ; } streamsProducer . flush ( ) ; checkForException ( ) ; }
public static FileSystemContext create ( ClientContext clientContext ) { FileSystemContext ctx = new FileSystemContext ( ) ; ctx . init ( clientContext , MasterInquireClient . Factory . create ( clientContext . getClusterConf ( ) ) ) ; ctx . mUriValidationEnabled = clientContext . getUriValidationEnabled ( ) ; return ctx ; }
private synchronized URI createNextResultsUri ( String scheme , UriInfo uriInfo ) { return uriInfo . getBaseUriBuilder ( ) . scheme ( scheme ) . replacePath ( " / v1 / statement" ) . path ( queryId . toString ( ) ) . path ( String . valueOf ( resultId . incrementAndGet ( ) ) ) . replaceQuery ( "" ) . build ( ) ; }
public void commitToFile ( ) throws Exception { // Given afw . write ( expectedContent , 0 , expectedContent . length ( ) ) ; // When afw . commit ( ) ; // Then assertEquals ( expectedContent . length ( ) , Files . size ( af . toPath ( ) ) ) ; }
public void setColumnWidthPercentageByPosition ( int columnPosition , int width , boolean fireEvent ) { this . columnWidthConfig . setPercentage ( columnPosition , width ) ; if ( fireEvent ) { fireLayerEvent ( new ColumnResizeEvent ( this , columnPosition ) ) ; } }
protected void connect ( ) { // note that we are not connecting via JMX for testing mbeanServerConn = null ; jmxc = null ; ssProxy = StorageService . instance ; msProxy = MessagingService . instance ( ) ; streamProxy = StreamManager . instance ; compactionProxy = CompactionManager . instance ; fdProxy = ( FailureDetectorMBean ) FailureDetector . instance ; cacheService = CacheService . instance ; spProxy = StorageProxy . instance ; hhProxy = HintedHandOffManager . instance ; gcProxy = new GCInspector ( ) ; gossProxy = Gossiper . instance ; memProxy = ManagementFactory . getMemoryMXBean ( ) ; runtimeProxy = ManagementFactory . getRuntimeMXBean ( ) ; }
private void sortPositions ( int arrayLength , Comparator < Integer > comparator ) { List < Integer > list = positions . subList ( 0 , arrayLength ) ; try { list . sort ( comparator ) ; } catch ( IllegalArgumentException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , "Lambda comparator violates the comparator contract" , e ) ; } }
public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( "LgTv Servlet ' { } ' was not registered . Nothing to deactivate . " , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . info ( "Stopped LgTv Servlet" ) ; } }
public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
private static < E > View < E > load ( JobContext jobContext ) { Configuration conf = Hadoop . JobContext . getConfiguration . invoke ( jobContext ) ; Class < E > type = getType ( jobContext ) ; String outputUri = conf . get ( KITE_OUTPUT_URI ) ; DefaultConfiguration . set ( conf ) ; return Datasets . < E , View < E > > load ( outputUri , type ) ; }
public boolean validate ( Map < String , String > optionsMap ) { if ( shouldSkip ( ) ) { return true ; } if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
public void createEdit ( ) { Button button = createButton ( buttonparent , buttonEdit_ID , buttonEdit_caption , true ) ; buttonBar . pack ( ) ; }
public E read ( String line ) { return read ( line , null ) ; }
public void centerOnCurrentLocation ( ) { followMe = true ; findMe ( ) ; }
public void serialize ( final DoublesSketch sketch , final JsonGenerator generator , final SerializerProvider provider ) throws IOException { generator . writeBinary ( sketch . toByteArray ( true ) ) ; }
public String toString ( ) { StringBuilder builder = new StringBuilder ( StringUtil . simpleClassName ( this ) ) . append ( ' [ ' ) ; for ( int i = 0 ; i < topicSubscriptions . size ( ) ; i ++ ) { builder . append ( topicSubscriptions . get ( i ) ) . append ( " , " ) ; } if ( ! topicSubscriptions . isEmpty ( ) ) { builder . setLength ( builder . length ( ) - 2 ) ; } return builder . append ( ' ] ' ) . toString ( ) ; }
private Field [ ] getFields ( Class < ? > currentClass ) { final List < Field > fields = new ArrayList < > ( ) ; while ( currentClass != null ) { fields . addAll ( Arrays . asList ( currentClass . getDeclaredFields ( ) ) ) ; currentClass = currentClass . getSuperclass ( ) ; } return fields . toArray ( new Field [ 0 ] ) ; }
public void setDecoderResult ( DecoderResult decoderResult ) { this . decoderResult = ObjectUtil . checkNotNull ( decoderResult , "decoderResult" ) ; }
protected String contentFrom ( FitNesseContext context , Request request , WikiPage requestedPage ) { requestData = request ; return prepareResponseDocument ( context ) . html ( ) ; }
public void start ( ) { for ( int i = 0 ; i < numProcessingQueues ; i ++ ) { processingExecutor . scheduleAtFixedRate ( new SegmentChangeProcessor ( segmentProcessingQueues [ i ] ) , 0 , config . getCuratorCreateZkNodesRepeatDelay ( ) . getMillis ( ) , TimeUnit . MILLISECONDS ) ; } }
protected void doc ( Class c ) throws IOException { open ( "tr class = 'TableRowColor'" ) ; open ( "td" ) ; around ( "span class = 'modifiers'" , getModifiers ( c ) ) ; close ( "td" ) ; open ( "td" ) ; link ( c . getType ( ) ) ; tag ( "br" ) ; around ( "span class = 'doc'" , getDoc ( c ) ) ; close ( "td" ) ; close ( "tr" ) ; }
public ArrayList < Pair < AbstractIngredient [ ] , Float > > lookupShapedRecipes ( Item i ) { if ( shapedReverseLookupTable . get ( i ) != null ) return shapedReverseLookupTable . get ( i ) ; return null ; }
public boolean exists ( ) { OverriddenBooleanValue overriden = null ; if ( decorator != null ) { overriden = decorator . decorateExists ( this ) ; } if ( ( overriden != null ) && overriden . overrides ( ) ) { return overriden . getResult ( ) ; } else { return provider . exists ( resource ) ; } }
public void startIndexPopulation ( IndexPopulationJob job ) { populationJobs . add ( job ) ; if ( ! stopped ) { scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; } }
public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
public void releaseBuffer ( ) { if ( serializedCache != null ) { serializedCache . release ( ) ; if ( serializedCache . refCnt ( ) == 0 ) { serializedCache = null ; } } }
public Credentials . IdentityProvider getProvider ( ) { String nativeProvider = nativeGetProvider ( nativePtr ) ; String id = identityProvider . getId ( ) ; // Sanity check - ensure nothing changed in the OS if ( nativeProvider . equals ( id ) ) { return identityProvider ; } else { throw new AssertionError ( "The provider from the Object Store differs from the one in Realm . " ) ; } }
private static Set < SymbolicValue > computedFrom ( @Nullable SymbolicValue symbolicValue ) { if ( symbolicValue == null ) { return Collections . emptySet ( ) ; } Set < SymbolicValue > result = new HashSet < > ( ) ; result . add ( symbolicValue ) ; symbolicValue . computedFrom ( ) . forEach ( sv - > result . addAll ( computedFrom ( sv ) ) ) ; return result ; }
public ClassLoader getClassLoader ( ) { return this . getClassLoader ( ) ; }
public Integer add ( Stream < E > entities ) { return delegate ( ) . add ( entities . filter ( entity - > { boolean permitted = isOperationPermitted ( entity , Action . CREATE ) ; if ( permitted ) { createAcl ( entity ) ; } return permitted ; } ) . collect ( Collectors . toList ( ) ) ) ; }
public void canIgnoreInvocationsWithJunit ( ) throws InterruptedException { // given DelayedExecution delayedExecution = createZeroMillisDelayedExecution ( ) ; DelayedExecution twentyMillisDelayedExecution = createTwentyMillisDelayedExecution ( ) ; // when delayedExecution . allAsyncCallsStarted ( ) ; verify ( mock , timeout ( 50 ) ) . oneArg ( '1' ) ; twentyMillisDelayedExecution . allAsyncCallsStarted ( ) ; verify ( mock , timeout ( 50 ) ) . oneArg ( '2' ) ; }
public final boolean isExtendedLifetimeValid ( ) { // extended lifetime is only valid if it contains an access token if ( mExtendedExpiresOn != null && ! StringExtensions . IsNullOrBlank ( mAccessToken ) ) { return ! isTokenExpired ( mExtendedExpiresOn ) ; } return false ; }
public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { String errorMessage = "sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# " + iWantDocument . getDocumentNumber ( ) ; LOG . error ( errorMessage , e ) ; } }
void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < MessageInfo > > ) partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < ByteBuffer > > ) partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; }
private static long doubleToSortableLong ( double value ) { long bits = Double . doubleToLongBits ( value ) ; return ( bits ^ ( bits > > 63 ) ) & Long . MAX_VALUE ; }
default int getGroupedJobInitializerCacheSize ( ) { return 100 ; }
public DefaultCompactionPolicyTest ( ) throws InterruptedException { Pair < MockBlobStore , StoreConfig > initState = CompactionPolicyTest . initializeBlobStore ( properties , time , - 1 , - 1 , DEFAULT_MAX_BLOB_SIZE ) ; config = initState . getSecond ( ) ; blobStore = initState . getFirst ( ) ; mockBlobStoreStats = blobStore . getBlobStoreStats ( ) ; messageRetentionTimeInMs = config . storeDeletedMessageRetentionDays * Time . HoursPerDay * Time . SecsPerHour * Time . MsPerSec ; compactionPolicy = new DefaultCompactionPolicy ( config , time ) ; }
private boolean containtsOnlyValidXMLChars ( String stringToValidate ) { String pattern = " [ ^ " + "\u0009\r\n" + "\u0020 - \uD7FF" + "\uE000 - \uFFFD" + "\ud800\udc00 - \udbff\udfff" + " ] " ; String resultString = stringToValidate . replaceAll ( pattern , "" ) ; if ( resultString . equals ( stringToValidate ) ) { return true ; } return false ; }
public CloseableLiquibase ( String changeLogFile , ResourceAccessor resourceAccessor , Database database , ManagedDataSource dataSource ) throws LiquibaseException , SQLException { super ( changeLogFile , resourceAccessor , database ) ; this . dataSource = dataSource ; this . database = database ; }
public CtfTmfLightweightContext ( ArrayList < CtfIterator > iters , ListIterator < CtfIterator > pos ) { fIteratorPool = iters ; fCurrentIterator = pos ; fTrace = iters . get ( 0 ) . getCtfTmfTrace ( ) ; curLocation = new CtfLocation ( ( Long ) null ) ; }
public void testIsAdHocAutostart_true ( ) { String id = UUID . randomUUID ( ) . toString ( ) ; AdHocSubProcess adHocSubProcess = bpmn2 . createAdHocSubProcess ( ) ; adHocSubProcess . setId ( id ) ; CustomElement . autoStart . of ( adHocSubProcess ) . set ( Boolean . TRUE ) ; tested = new AdHocSubProcessPropertyReader ( adHocSubProcess , definitionResolverReal . getDiagram ( ) , definitionResolverReal ) ; assertTrue ( tested . isAdHocAutostart ( ) ) ; }
private BroadcastTrimmer broadcastTrimmer ( ) { return new ScheduleResolverBroadcastTrimmer ( scheduleResolver , contentResolver , contentWriter ) ; }
public void disconnect ( ) throws IOException { if ( forwarders != null ) { for ( LocalPortForwarder forwarder : forwarders ) { try { forwarder . close ( ) ; } catch ( IOException e ) { log . warn ( "Error closing forwarder" , e ) ; } } forwarders . clear ( ) ; } trans . disconnect ( ) ; super . disconnect ( ) ; }
public void close ( ) { super . close ( ) ; if ( mRefCount != null ) { mRefCount . decrement ( ) ; } }
public static String getParameter ( String key ) { try { return getConfig ( ) . getString ( key ) ; } catch ( NoSuchElementException e ) { LOGGER . error ( "No configuration found in " + CONFIG_FILE + " for key " + key + " ! " , e ) ; throw new NoSuchElementException ( "No configuration found in " + CONFIG_FILE + " for key " + key + " ! " ) ; } }
public List < Option > getOptions ( ) { return options ; }
public DataInputNavigableJsonAdapter ( BufferObjectDataInput input , int initialOffset ) { this . input = input ; this . initialOffset = initialOffset ; input . position ( initialOffset ) ; }
protected void onMethodInvocationFound ( MethodInvocationTree mit ) { ExpressionTree argument = mit . arguments ( ) . get ( 1 ) ; Type type = argument . symbolType ( ) ; if ( type . isUnknown ( ) ) { return ; } if ( ExpressionsHelper . isNotSerializable ( argument ) ) { String andParameters = JUtils . isParametrized ( type ) ? " and its parameters" : "" ; reportIssue ( argument , "Make \"" + type + "\"" + andParameters + " serializable or don't store it in the session . " ) ; } }
public Predicate createPredicateAndJoin ( String filterString , Root < T > root ) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer ( new ANTLRInputStream ( filterString ) ) ; LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser ( new CommonTokenStream ( lexer ) ) ; parser . addErrorListener ( new OsiamAntlrErrorListener ( ) ) ; ParseTree tree = parser . parse ( ) ; EvalVisitor < T > visitor = new EvalVisitor < > ( this , root ) ; return visitor . visit ( tree ) ; }
public Privilege [ ] getSupportedPrivileges ( String path ) { return privileges . listOfSupported ( ) ; }
protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = toolbarFactory . orElse ( null ) ; this . paletteFactory = paletteFactory . orElse ( null ) ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
void prepareToNewMarker ( ) { drawerLayout . closeDrawers ( ) ; setLongClickListener ( true ) ; setToastMarkerInfo ( ) ; }
private MVCCEntry wrapMvccEntryForPut ( InvocationContext ctx , Object key , CacheEntry cacheEntry , Metadata providedMetadata , boolean skipRead ) { if ( cacheEntry instanceof MVCCEntry ) { MVCCEntry mvccEntry = ( MVCCEntry ) cacheEntry ; updateMetadata ( mvccEntry , providedMetadata ) ; return mvccEntry ; } return wrapInternalCacheEntryForPut ( ctx , key , ( InternalCacheEntry ) cacheEntry , providedMetadata , true ) ; }
public SERVICE_FAILURE_ACTIONS getFailureActions ( ) { Pointer buffer = queryServiceConfig2 ( Winsvc . SERVICE_CONFIG_FAILURE_ACTIONS ) ; SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS ( buffer ) ; result . read ( ) ; return result ; }
void fun ( String strPath , String StrParent , String StrChild , String prefix , String suffix , java . net . URI uri ) throws Exception { // Questionable : check what is done with this file new File ( strPath ) ; // Noncompliant new File ( StrParent , StrChild ) ; // Noncompliant { { Make sure this file handling is safe here . } } File parent = new File ( uri ) ; // Noncompliant new File ( parent , StrChild ) ; // compliant we rely on the fact that parent should be highlighted File . createTempFile ( prefix , suffix , null ) ; // Noncompliant }
public ValidationResult vmNotHavingPciPassthroughDevices ( ) { for ( VM vm : vms ) { if ( getHostDeviceManager ( ) . checkVmNeedsPciDevices ( vm . getId ( ) ) ) { return new ValidationResult ( EngineMessage . ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES , String . format ( "$VmName % s" , vm . getName ( ) ) ) ; } } return ValidationResult . VALID ; }
public void onError ( Throwable e ) { LOG . log ( Level . SEVERE , e . getMessage ( ) , e ) ; try { FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
public String pop ( ) { return lines . remove ( lines . lastKey ( ) ) ; }
public void onDestroy ( ) { mapView . onDestroy ( ) ; mapboxMap = null ; unbinder . unbind ( ) ; unbinder = null ; WikipediaApp . getInstance ( ) . getRefWatcher ( ) . watch ( this ) ; super . onDestroy ( ) ; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto ( SampleTissueProcessing from ) { SampleTissueProcessingDto dto = null ; if ( from instanceof SampleCVSlide ) { dto = asCVSlideSampleDto ( ( SampleCVSlide ) from ) ; } else if ( from instanceof SampleLCMTube ) { dto = asLCMTubeSampleDto ( ( SampleLCMTube ) from ) ; } else { dto = new SampleTissueProcessingDto ( ) ; } return dto ; }
public void testMakeTimeZone_NoOffsets ( ) throws IOException { int [ ] [ ] times = { } ; int [ ] [ ] offsets = { } ; try { createZoneInfo ( times , offsets ) ; fail ( "Did not detect no transitions" ) ; } catch ( IllegalStateException expected ) { // Expected this to happen } }
DeploymentToNodeMetadata ( @Memoized Supplier < Set < ? extends Location > > locations , GroupNamingConvention . Factory namingConvention , OSImageToImage osImageToImage , RoleSizeToHardware roleSizeToHardware , Map < String , Credentials > credentialStore ) { this . nodeNamingConvention = checkNotNull ( namingConvention , "namingConvention" ) . createWithoutPrefix ( ) ; this . locations = checkNotNull ( locations , "locations" ) ; this . osImageToImage = checkNotNull ( osImageToImage , "osImageToImage" ) ; this . roleSizeToHardware = checkNotNull ( roleSizeToHardware , "roleSizeToHardware" ) ; this . credentialStore = credentialStore ; }
public AsyncContext startAsync ( ) throws IllegalStateException { if ( _asyncNotSupportedSource != null ) throw new IllegalStateException ( " ! asyncSupported : " + _asyncNotSupportedSource ) ; HttpChannelState state = getHttpChannelState ( ) ; if ( _async == null ) _async = new AsyncContextState ( state ) ; AsyncContextEvent event = new AsyncContextEvent ( _context , _async , state , this , this , getResponse ( ) ) ; state . startAsync ( event ) ; return _async ; }
CompletableFuture < Void > getFailureOp ( CommitData cd ) { return rollbackLocks ( cd ) ; }
private boolean isGuavaPrecondition ( Symbol . MethodSymbol symbol ) { return symbol . owner ( ) . type ( ) . is ( "com . google . common . base . Preconditions" ) && ( "checkNotNull" . equals ( symbol . name ( ) ) || "checkArgument" . equals ( symbol . name ( ) ) || "checkState" . equals ( symbol . name ( ) ) ) ; }
public void loadTrace ( ITmfTrace trace ) { cancelUpdate ( ) ; super . loadTrace ( trace ) ; initializeDataProvider ( ) ; }
public StringInputRowParser ( @JsonProperty ( "parseSpec" ) ParseSpec parseSpec , @JsonProperty ( "encoding" ) String encoding ) { this . parseSpec = parseSpec ; this . mapParser = new MapInputRowParser ( parseSpec ) ; this . parser = parseSpec . makeParser ( ) ; parser . startFileFromBeginning ( ) ; if ( encoding != null ) { this . charset = Charset . forName ( encoding ) ; } else { this . charset = DEFAULT_CHARSET ; } }
public Object getNegotiatedProperty ( String propName ) { assertComplete ( ) ; switch ( propName ) { case Sasl . QOP : return selectedQop . getName ( ) ; case Sasl . MAX_BUFFER : return Integer . toString ( actualMaxReceiveBuffer != 0 ? actualMaxReceiveBuffer : configuredMaxReceiveBuffer ) ; case Sasl . RAW_S _SIZE : return Integer . toString ( maxBuffer ) ; } return null ; }
public static BooleanExpression asBoolean ( boolean value ) { return asBoolean ( constant ( value ) ) ; }
public void startPolicyEnforcement ( ) throws IOException { if ( m_pbd . getUsageSpecificLog ( ) . isDebugEnabled ( ) ) { m_pbd . getUsageSpecificLog ( ) . debug ( "Starting time based retention policy enforcement with retainMillis = " + m_retainMillis + " for PBD " + m_pbd . getNonce ( ) ) ; } m_reader = m_pbd . openForRead ( CURSOR_NAME ) ; scheduleTaskFor ( m_pbd . getNonce ( ) , this : : deleteOldSegments , 0 ) ; }
public void afterRun ( ) throws Exception { if ( recordStore . isWanReplicationEnabled ( ) ) { CacheRecord record = recordStore . getRecord ( key ) ; if ( record != null ) { publishWanUpdate ( key , record ) ; } else { publishWanRemove ( key ) ; } } super . afterRun ( ) ; }
protected String getConfigRoot ( ) { return ClientConfigSections . HAZELCAST_CLIENT . name ; }
public int getCapacity ( ) { return capacity ; }
private Set < IArtifactType > getAllArtTypes ( ) { Set < IArtifactType > allArtTypes = new HashSet < > ( ) ; if ( artifactTypes == null || ! artifactTypes . isEmpty ( ) ) { allArtTypes . addAll ( artifactTypes ) ; } else { getArtifactTypesFromWorkItemTypes ( ) ; } return allArtTypes ; }
public void testContextListenerIsSet ( ) throws Exception { try ( WizardCommandController tester = testHarness . createWizardController ( MyFirstWizard . class ) ) { tester . initialize ( ) ; Assert . assertTrue ( "Wizard is not on a valid state" , tester . isValid ( ) ) ; Assert . assertTrue ( "Listener is not set" , listener . isContextInitialized ( ) ) ; tester . execute ( ) ; Assert . assertFalse ( "Listener is still set" , listener . isContextInitialized ( ) ) ; } }
Later ( F0 < A > producer ) { this . memo = P . hardMemo ( producer ) ; }
private boolean isRunningFromCommandLine ( ) { boolean runningFromCommandLine = false ; // first look up all OptionProcessors and see if running from command line option is set Collection < ? extends OptionProcessor > optionProcessors = Lookup . getDefault ( ) . lookupAll ( OptionProcessor . class ) ; Iterator < ? extends OptionProcessor > optionsIterator = optionProcessors . iterator ( ) ; while ( optionsIterator . hasNext ( ) ) { // find CommandLineOptionProcessor OptionProcessor processor = optionsIterator . next ( ) ; if ( ! ( processor instanceof CommandLineOptionProcessor ) ) { continue ; } // check if we are running from command line runningFromCommandLine = ( ( CommandLineOptionProcessor ) processor ) . isRunFromCommandLine ( ) ; break ; } return runningFromCommandLine ; }
public boolean onReceivedHttpAuthRequest ( CordovaWebView view , ICordovaHttpAuthHandler handler , String host , String realm ) { for ( CordovaPlugin plugin : this . pluginMap . values ( ) ) { if ( plugin != null && plugin . onReceivedHttpAuthRequest ( view , handler , host , realm ) ) { return true ; } } return false ; }
private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { // Create locks if it does not exist if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , "CloudnameException while trying to get lock path " + absoluteLockPath , e ) ; } } return lockPath + " / " + lockName ; }
public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key , tupleContext . getOptionsContext ( ) ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
ConfigFileConfigProvider ( @JsonProperty ( "configFile" ) String configFile ) { this . configFile = configFile ; loadProperties ( configFile ) ; }
public void addDataSource ( long dataSourceObjectId ) throws IngestStreamClosedException { // Do nothing }
private void deleteEmptyStagingDirectories ( List < DeclaredIntentionToWrite > declaredIntentionsToWrite ) { for ( DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite ) { Path path = declaredIntentionToWrite . getRootPath ( ) ; if ( declaredIntentionToWrite . isTemporaryTable ( ) ) { // for temporary table simply delete the entire directory deleteRecursivelyIfExists ( declaredIntentionToWrite . getContext ( ) , hdfsEnvironment , path ) ; continue ; } if ( declaredIntentionToWrite . getMode ( ) != WriteMode . STAGE_AND_MOVE_TO_TARGET_DIRECTORY ) { continue ; } recursiveDeleteFilesAndLog ( declaredIntentionToWrite . getContext ( ) , path , ImmutableList . of ( ) , true , "staging directory cleanup" ) ; } }
public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , getCompatibilityVersion ( ) , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; gitDir = new File ( project . getProject ( ) . getLocationURI ( ) . getPath ( ) , Constants . DOT_GIT ) ; testRepository = new TestRepository ( gitDir ) ; testRepository . connect ( project . getProject ( ) ) ; testRepository . commit ( "initial commit" ) ; }
protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
public static String getFileExtension ( File file ) { return FilenameUtils . getExtension ( file . getAbsolutePath ( ) ) . toLowerCase ( ) ; }
public void shouldPurgeAnAutoGenerationOption ( ) throws Exception { int uuid = Integer . parseInt ( getUuid ( ) ) ; assertNotNull ( identifierSourceService . getAutoGenerationOption ( uuid ) ) ; MockHttpServletRequest req = request ( RequestMethod . DELETE , getURI ( ) + " / " + getUuid ( ) ) ; req . addParameter ( "purge" , "" ) ; handle ( req ) ; assertNull ( identifierSourceService . getAutoGenerationOption ( uuid ) ) ; }
private void loadPerspectiveAndCheckLoadingTime ( String perspectiveID , boolean headerIncluded ) { long loadingStart = System . currentTimeMillis ( ) ; String standalonePerspectiveURL = getStandalonePerspectiveURL ( perspectiveID , headerIncluded ) ; driver . get ( standalonePerspectiveURL ) ; BusyPopup . waitForDisappearance ( ) ; ApplicationLoadingPopup . waitForDisappearance ( PERSPECTIVE_LOADING_TIMEOUT ) ; double perspectiveLoadingTime = ( System . currentTimeMillis ( ) - loadingStart ) / ( double ) 1000 ; // TODO : What is the acceptable loading time ? Do we want to test this ? // assertThat ( perspectiveLoadingTime ) // . as ( "It should take less than " + PERSPECTIVE_LOADING_TIMEOUT + " seconds to load the perspective " + perspectiveID + " . " ) // . isLessThan ( PERSPECTIVE_LOADING_TIMEOUT ) ; }
public default IVariableBinding [ ] getSyntheticOuterLocals ( ) { return new IVariableBinding [ 0 ] ; }
protected void executeCommand ( ) { AuthenticationProfile profile = sessionDataContainer . getProfile ( getParameters ( ) . getSessionId ( ) ) ; if ( profile == null ) { setSucceeded ( false ) ; } else { sessionId = getParameters ( ) . getSessionId ( ) ; sourceIp = sessionDataContainer . getSourceIp ( getParameters ( ) . getSessionId ( ) ) ; sessionDataContainer . setSessionValid ( getParameters ( ) . getSessionId ( ) , false ) ; setSucceeded ( true ) ; } }
public static void updateNotification ( Context context , MasterSecret masterSecret , long threadId ) { if ( TextSecurePreferences . isNotificationsEnabled ( context ) ) { if ( visibleThread == threadId ) { DatabaseFactory . getThreadDatabase ( context ) . setRead ( threadId ) ; sendInThreadNotification ( context ) ; } else { updateNotification ( context , masterSecret , true ) ; } } updateBadge ( context ) ; }
protected void fillOptions ( Map < Enum , String > options ) { options . put ( EnumModel . VAL1 , EnumModel . VAL1 . name ( ) ) ; options . put ( EnumModel . VAL2 , EnumModel . VAL2 . name ( ) ) ; options . put ( EnumModel . VAL3 , EnumModel . VAL3 . name ( ) ) ; options . put ( EnumModel . VAL4 , EnumModel . VAL4 . name ( ) ) ; }
public boolean removeQueues ( Queue . . . queues ) { removeQueues ( Arrays . stream ( queues ) . map ( Queue : : getName ) ) ; return super . removeQueues ( queues ) ; }
private static Object castIntegerToObect ( int value , Type type ) { if ( type == INTEGER || type == TINYINT || type == BIGINT ) { return ( long ) value ; } if ( type == VARCHAR ) { return String . valueOf ( value ) ; } if ( type == DOUBLE ) { return ( double ) value ; } throw new UnsupportedOperationException ( ) ; }
public void testXmlConfig ( ) throws IOException { EmbeddedCacheManager cm = new DefaultCacheManager ( "jpa - config . xml" ) ; Cache < String , KeyValueEntity > specificCache = cm . getCache ( "specificCache" ) ; validateConfig ( specificCache ) ; KeyValueEntity entity = new KeyValueEntity ( "k" , "v" ) ; specificCache . put ( entity . getK ( ) , entity ) ; TestingUtil . withCacheManager ( cm , new CacheManagerCallable ( cm ) { @Override public void call ( ) { cm . stop ( ) ; } } ) ; }
public boolean equals ( Object o ) { boolean equals = this == o || o instanceof SessionEditorInput && getURI ( ) . equals ( ( ( URIEditorInput ) o ) . getURI ( ) ) ; if ( equals && o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return equals ; }
private void loadChildEntities ( LibraryDilution dilution ) throws IOException { if ( dilution . getLibrary ( ) != null ) { dilution . setLibrary ( libraryDao . get ( dilution . getLibrary ( ) . getId ( ) ) ) ; } if ( dilution . getTargetedSequencing ( ) != null ) { dilution . setTargetedSequencing ( targetedSequencingDao . get ( dilution . getTargetedSequencing ( ) . getId ( ) ) ) ; } if ( dilution . getDilutionCreator ( ) == null ) { dilution . setDilutionCreator ( authorizationManager . getCurrentUsername ( ) ) ; } }
GdkColor getContextColor ( ) { long /* int */ fontHandle = fontHandle ( ) ; long /* int */ context = OS . gtk_widget_get_style_context ( fontHandle ) ; GdkRGBA rgba = new GdkRGBA ( ) ; if ( OS . GTK_VERSION < OS . VERSION ( 3 , 18 , 0 ) ) { rgba = display . styleContextGetColor ( context , OS . GTK_STATE_FLAG_NORMAL , rgba ) ; } else { rgba = display . styleContextGetColor ( context , OS . gtk_widget_get_state_flags ( handle ) , rgba ) ; } return display . toGdkColor ( rgba ) ; }
public Subquery parameter ( String listId , Object . . . values ) { if ( values == null || values . length == 0 || values [ 0 ] == null ) { return this ; } where . setToNormal ( ) ; where . setToIntersection ( ) ; where . addParameter ( listId , values ) ; return this ; }
public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
public boolean doSynchronousPing ( ) { MerlinLog . d ( "Pinging : " + hostAddress ) ; try { int responseCode = responseCodeFetcher . from ( hostAddress ) ; MerlinLog . d ( "Got response : " + responseCode ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
public T hasThisElement ( final Object val ) { Assert . parametersNotNull ( "val" , val ) ; return addCriteria ( FilterOperator . ELEMENT_MATCH , val , not ) ; }
public Builder setSSHDirectory ( final File sshDirectory ) { this . sshDirectory = sshDirectory ; return this ; }
public List < Attribute > getRequiredAttributes ( PerunSession sess , List < Service > services , Facility facility , Resource resource , User user , Member member ) throws InternalErrorException , MemberResourceMismatchException { List < Attribute > attributes = new ArrayList < > ( ) ; for ( Service service : services ) { attributes . addAll ( getRequiredAttributes ( sess , service , facility , resource , user , member ) ) ; } return attributes ; }
public void zrevrangeByScoreWithScores ( final byte [ ] key , final double max , final double min , final int offset , final int count ) { sendCommand ( ZREVRANGEBYSCORE , key , toByteArray ( max ) , toByteArray ( min ) , LIMIT . raw , toByteArray ( offset ) , toByteArray ( count ) , WITHSCORES . raw ) ; }
public void write ( int b ) throws IOException { mSingleCharWrite [ 0 ] = ( byte ) b ; write ( mSingleCharWrite ) ; }
public void deallocateFlow ( String flowId ) throws FlowNotFoundException , ProvisionerException { try { String netId = getNetworkSelector ( ) . findNetworkForFlowId ( flowId ) ; getNclController ( ) . deallocateFlow ( netId , flowId ) ; } catch ( Exception e ) { throw new ProvisionerException ( e ) ; } }
private String _encode ( String strVal ) { try { return URLEncoder . encode ( strVal , StandardCharsets . UTF_8 . toString ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
public boolean contains ( Object o ) { boolean contains = super . contains ( o ) ; if ( ! contains && o != null ) { MarshalledEntry < K , V > me = persistenceManager . loadFromAllStores ( o , true ) ; contains = me != null ; } return contains ; }
public boolean provides ( IOperation operation ) { if ( ! ( operation instanceof CreateDecoratorsOperation ) ) { return false ; } IDecoratorTarget decoratorTarget = ( ( CreateDecoratorsOperation ) operation ) . getDecoratorTarget ( ) ; View view = ( View ) decoratorTarget . getAdapter ( View . class ) ; return view != null && DDiagramEditPart . MODEL_ID . equals ( SiriusVisualIDRegistry . getModelID ( view ) ) ; }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert ( ) { CuratedContentPageObject ccp = new CuratedContentPageObject ( driver ) ; wikiURL = urlBuilder . getUrlForWiki ( MercuryWikis . MERCURY_CC ) ; ccp . openMercuryArticleByNameWithNoCacheBuster ( wikiURL , MercurySubpages . CC_MAIN_PAGE ) ; MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject ( driver , Mercury . AlertMessage . NOT_EXISTING_CATEGORY ) ; String oldUrl = driver . getCurrentUrl ( ) ; ccp . clickOnCuratedContentElementByIndex ( 2 ) ; Assertion . assertTrue ( mercuryAlert . isAlertMessageVisible ( ) ) ; ccp . waitForLoadingSpinnerToFinish ( ) ; Assertion . assertUrlEqualToCurrentUrl ( driver , oldUrl ) ;
private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } return patientProgram ; }
public UploadDirectoryToCDN ( String username , String apiKey ) { Iterable < Module > modules = ImmutableSet . < Module > of ( new SLF4JLoggingModule ( ) ) ; BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . modules ( modules ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrapApi ( CloudFilesApi . class ) ; }
public SslContextBuilder keyManager ( KeyManager keyManager ) { if ( forServer ) { checkNotNull ( keyManager , "keyManager required for servers" ) ; } this . keyManagerFactory = new KeyManagerFactoryWrapper ( keyManager ) ; keyCertChain = null ; key = null ; keyPassword = null ; return this ; }
protected boolean isTypeSupported ( Class < T > clazz ) { // TODO : Add other types ? Float , etc if ( String . class . isAssignableFrom ( clazz ) || Integer . class . isAssignableFrom ( clazz ) || Boolean . class . isAssignableFrom ( clazz ) ) { return true ; } return false ; }
private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( "Tom" , "Schindl" , "tom . schindl@bestsolution . at" ) ) ; elements . add ( new Person ( "Boris" , "Bokowski" , "Boris_Bokowski@ca . ibm . com" ) ) ; elements . add ( new Person ( "Tod" , "Creasey" , "Tod_Creasey@ca . ibm . com" ) ) ; elements . add ( new Person ( "Wayne" , "Beaton" , "wayne@eclipse . org" ) ) ; return elements ; }
protected void updateIteration ( ) { refreshIteration = ( refreshIteration + 1 ) % NUMBER_VMS_REFRESHES_BEFORE_SAVE ; }
public void add ( E newInterval ) { super . add ( newInterval ) ; fListeners . forEach ( l - > l . elementAdded ( this , newInterval ) ) ; }
public RuleEvaluationWorker ( Map < String , Set < String > > docsToCheckAndEvents ) { this . docsToCheckAndEvents = docsToCheckAndEvents ; List < String > docs = new ArrayList < > ( ) ; docs . addAll ( docsToCheckAndEvents . keySet ( ) ) ; setDocuments ( Framework . getService ( RepositoryManager . class ) . getDefaultRepositoryName ( ) , docs ) ; }
private static String getTestingAlias ( GoImportSpec testingImportSpec ) { String alias = GoConstants . TESTING_PATH ; if ( testingImportSpec != null ) { alias = ! testingImportSpec . isDot ( ) ? StringUtil . notNullize ( testingImportSpec . getAlias ( ) , GoConstants . TESTING_PATH ) : "" ; } return alias ; }
public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
public MapOperation ( ) { final ILogger logger = this . logger ( ) ; final int forcedEvictionRetryCount = getRetryCount ( ) ; evictions = new Eviction [ ] { new RecordStoreForcedEviction ( forcedEvictionRetryCount , logger , this ) , new PartitionRecordStoreForcedEviction ( forcedEvictionRetryCount , logger , this ) , new AllEntriesEviction ( logger , this ) , new PartitionAllEntriesEviction ( logger , this ) } ; }
private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } return Instant . ofEpochMilli ( ( long ) timestamp ) ; }
AggregatorFactory [ ] getMetrics ( ) { return metrics ; }
public void prepare ( ) throws IOException { e = SQLExecutor . builder ( clusterService ) . enableDefaultTables ( ) . build ( ) ; plannerContext = e . getPlannerContext ( clusterService . state ( ) ) ; }
public void setUp ( ) { jUnitCore = new JUnitCore ( ) ; testListener = new TestListener ( ) ; jUnitCore . addListener ( testListener ) ; }
protected boolean validate ( ) { if ( ! canRunActionOnNonManagedVm ( ) ) { return false ; } if ( ! isInternalExecution ( ) && ! ObjectIdentityChecker . canUpdateField ( getVm ( ) , "clusterId" , getVm ( ) . getStatus ( ) ) ) { addValidationMessage ( EngineMessage . VM_STATUS_NOT_VALID_FOR_UPDATE ) ; return false ; } ChangeVmClusterValidator validator = new ChangeVmClusterValidator ( this , getParameters ( ) . getClusterId ( ) , getParameters ( ) . getVmCustomCompatibilityVersion ( ) , getVmDeviceUtils ( ) ) ; return validator . validate ( ) ; }
public TrustManagerFactory getTrustMgr ( String serverName ) { try { KeyStore trustStore = trustMgrMap . get ( serverName ) ; if ( trustStore != null ) { TrustManagerFactory fact = TrustManagerFactory . getInstance ( TrustManagerFactory . getDefaultAlgorithm ( ) ) ; fact . init ( trustStore ) ; return fact ; } return null ; } catch ( NoSuchAlgorithmException | KeyStoreException e ) { throw new RuntimeException ( e ) ; } }
public TextEdit formatModuleInfoFile ( int kind , String source , int offset , int length , int indentationLevel , String lineSeparator ) { boolean tmp = this . isInModuleInfo ; this . isInModuleInfo = true ; TextEdit edit = format ( kind , source , new IRegion [ ] { new Region ( offset , length ) } , indentationLevel , lineSeparator ) ; try { this . isInModuleInfo = tmp ; return edit ; } finally { this . isInModuleInfo = tmp ; } }
public < K , V > RemoteCache < K , V > getCache ( String cacheName ) { RemoteCache < K , V > cache = hotrodClient . getCache ( cacheName , TransactionMode . NONE ) ; if ( cache == null ) { throw log . expectedCachesNotDefined ( Collections . singleton ( cacheName ) ) ; } return cache ; }
public static Object valueForStringWithType ( String value , VoltType type ) { if ( type == null || type == VoltType . NULL ) { return null ; } // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
public void testContructor ( ) throws IOException { String code = "S2020 - 04 - 04" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
public void testGetConnectableFileStorageConnectionsByStorageType ( ) { List < StorageServerConnections > conns = dao . getConnectableStorageConnectionsByStorageType ( FixturesTool . STORAGE_POOL_NFS_2 , StorageType . NFS ) ; assertNotNull ( conns ) ; assertEquals ( 1 , conns . size ( ) ) ; for ( StorageServerConnections conn : conns ) { assertEquals ( conn . getstorage_type ( ) , StorageType . NFS ) ; } }
public static void setOverrideFileName ( String . . . path ) { fOverridePath = ( path == null ) ? null : path ; fOverride = true ; }
void addChanges ( Collection < String > filesToUpdate , Collection < IResource > resourcesToUpdate ) { synchronized ( lock ) { files . addAll ( filesToUpdate ) ; resources . addAll ( resourcesToUpdate ) ; } if ( ! filesToUpdate . isEmpty ( ) ) schedule ( defaultDelay ) ; }
public static synchronized String getEncryptionKey ( String name ) { final String keyString = getUniqueId ( name ) ; if ( CACHED_ENCRYPTION_KEYS . get ( name ) == null ) { generateEncryptionKey ( keyString ) ; } return CACHED_ENCRYPTION_KEYS . get ( name ) ; }
public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; try { review = GerritUtil . toReview ( detail ) ; } catch ( GerritException e ) { StatusHandler . log ( new Status ( IStatus . ERROR , GerritUiPlugin . PLUGIN_ID , "Could not load review" , e ) ) ; } } }
public ISnapshotInfo getSnapshotInfo ( String sessionName , IProgressMonitor monitor ) throws ExecutionException { return new SnapshotInfo ( EMPTY_STRING ) ; }
public long getEntryLastModified ( ) { if ( modTimes == null ) return 0 ; Long cutOff = Long . valueOf ( super . getEntryLastModified ( ) - 1 ) ; SortedSet < Long > head = modTimes . headSet ( cutOff , true ) ; return head . isEmpty ( ) ? 0 : head . last ( ) . longValue ( ) ; }
public ParameterizedSqlFactory ( String initialSql ) { sqlStringBuilder = new StringBuilder ( initialSql ) ; parameters = new ArrayList < > ( ) ; }
public long getReadyTimestamp ( Constraints viewConstraints ) { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; // check if the signal exists try { try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { // empty , will be thrown when the signal path doesn't exist } return - 1 ; } catch ( NumberFormatException e ) { throw new DatasetException ( "Signal contents were modified to not be a number : " + signalPath , e ) ; } catch ( IOException e ) { throw new DatasetIOException ( "Could not access signal path : " + signalPath , e ) ; } }
private boolean hostHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; if ( cluster == null ) { return false ; } ArchitectureType archType = cluster . getArchitecture ( ) ; return ArchitectureType . ppc64 . equals ( archType ) || ( archType == ArchitectureType . ppc64le ) || ( archType == ArchitectureType . ppcle ) ; }
private static String getExtension ( String name ) { int ext = name . lastIndexOf ( ' . ' ) ; return 0 < ext ? name . substring ( ext ) : "" ; }
public void checkpoint ( ) { }
private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( ( int ) count ) ; } }
public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
private boolean filterInvalid ( Position position ) { return filterInvalid && ! position . getValid ( ) || position . getLatitude ( ) > 90 || position . getLatitude ( ) < - 90 || position . getLongitude ( ) > 180 || position . getLongitude ( ) < - 180 ; }
public Set < Location > getAllowedLocations ( ) { Set < Location > allowedLocations = new HashSet < Location > ( ) ; allowedLocations . addAll ( Arrays . asList ( Location . CONSTRUCTOR , Location . METHOD , Location . FIELD , Location . OVERVIEW , Location . PACKAGE , Location . TYPE ) ) ; return new HashSet < Location > ( Arrays . asList ( Location . CONSTRUCTOR , Location . METHOD , Location . FIELD , Location . OVERVIEW , Location . PACKAGE , Location . TYPE ) ) ; }
public String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
private void addVolumeToDb ( final GlusterVolumeEntity createdVolume ) { // volume fetched from VDSM doesn't contain cluster id GlusterFS // is not aware of multiple clusters createdVolume . setClusterId ( getVdsGroupId ( ) ) ; DbFacade . getInstance ( ) . getGlusterVolumeDao ( ) . save ( createdVolume ) ; }
public Sheet getDataSheet ( File file ) { stream = new PushbackInputStream ( new FileInputStream ( file ) ) ; Workbook wb = null ; try { wb = WorkbookFactory . create ( stream ) ; } catch ( Exception e ) { log . error ( "Workbook creation exception" , e ) ; } return wb . getSheetAt ( 0 ) ; }
public void updateAttributes ( ) { OperatingSystem operatingSystem = getCurrentOperatingSystem ( ) ; if ( operatingSystem != null ) { OSProcess process = operatingSystem . getProcess ( this . processID ) ; if ( process != null ) { copyValuesToThisProcess ( process ) ; } else { LOG . error ( "No process found : { } " , this . processID ) ; } } else { LOG . error ( "Unsupported platform . No update performed . " ) ; } }
public boolean isMissingHookConflict ( ) { return ( conflictStatus & MISSING_HOOK . getValue ( ) ) == MISSING_HOOK . getValue ( ) ; }
public Map < AccountGroup . UUID , GroupMembersList > getUnresolvedGroups ( final boolean recursive ) { if ( ! recursive ) { if ( isResolved ( ) ) { return Collections . emptyMap ( ) ; } return Collections . singletonMap ( getGroup ( ) . getGroupUUID ( ) , this ) ; } else { return getAllUnresolvedGroups ( new HashSet < AccountGroup . Id > ( ) ) ; } }
public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value ; try { value = parser . getBooleanValue ( ) ; } catch ( JsonParseException e ) { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } clearPeek ( ) ; return value ; }
public boolean closeOnProtocolViolation ( ) { return closeOnProtocolViolation ; }
public String getSelinuxEnforceMode ( ) { return EnumTranslator . getInstance ( ) . get ( selinuxEnforceMode ) ; }
public void init ( EObject original , EditingDomain editingDomain ) { List < EStructuralFeature > features = featuresProvider . getFeatures ( original ) ; initControlFactory ( editingDomain , original ) ; for ( final EStructuralFeature feature : features ) { if ( isToBeRendered ( feature ) ) { createControlForFeature ( feature ) ; } } // toolkit . paintBordersFor ( main ) ; this . layout ( ) ; }
public List < Annotation > getQualifiers ( ) { return Arrays . asList ( new org . jboss . arquillian . warp . servlet . AfterServlet ( ) { @Override public Class < ? extends Annotation > annotationType ( ) { return org . jboss . arquillian . warp . servlet . AfterServlet . class ; } } ) ; }
protected void initialize ( Subject subj ) throws PrivilegedActionException { final Configuration config = getRemoteCacheManagerConfig ( subj ) ; remoteCacheManager = new RemoteCacheManager ( config , true ) ; remoteCache = remoteCacheManager . getCache ( TEST_CACHE_NAME ) ; }
LauncherDiscoveryRequest buildRequest ( Bundle bundle ) { List < DiscoverySelector > selectors = new ArrayList < > ( baseSelectors . size ( ) + 1 ) ; selectors . addAll ( baseSelectors ) ; selectors . add ( BundleSelector . selectBundle ( bundle ) ) ; return LauncherDiscoveryRequestBuilder . request ( ) . configurationParameter ( BundleEngine . CHECK_UNRESOLVED , unresolved ) . selectors ( selectors ) . build ( ) ; }
protected void statementExecuteUpdateBefore ( StatementProxy statement , String sql ) { super . statementExecuteUpdateBefore ( statement , sql ) ; try { Before ( statement , sql ) ; } catch ( Exception e ) { } }
public static DecoderResult failure ( Throwable cause ) { ObjectUtil . checkNotNull ( cause , "cause" ) ; return new DecoderResult ( cause ) ; }
private void writeObject ( Schema schema , GenericRecord datum ) throws Exception { BinaryEncoder encoder = EncoderFactory . get ( ) . binaryEncoder ( new ByteArrayOutputStream ( ) , null ) ; GenericDatumWriter < GenericData . Record > writter = new GenericDatumWriter < GenericData . Record > ( schema ) ; writter . write ( schema , datum , encoder ) ; }
public Collection < String > getNames ( ) { Set < String > names = new HashSet < > ( named . keySet ( ) ) ; namedArgumentFinder . forEach ( args - > names . addAll ( args . getNames ( ) ) ) ; return Collections . unmodifiableSet ( names ) ; }
public FBOConfig getFboConfig ( ResourceUrn fboName ) { FBOConfig fboConfig = fboConfigs . get ( fboName ) ; if ( fboConfig == null ) { logger . warning ( "Failed to retrieve FBOConfig '" + fboName + "' ! " ) ; } return fboConfig ; }
void setKey ( Input newInput , char newKeyChar ) { this . input = newInput ; this . keyChar = newKeyChar ; }
public Builder < EvictionConfiguration > configure ( OperationContext context , ModelNode model ) throws OperationFailedException { EvictionStrategy strategy = ModelNodes . asEnum ( STRATEGY . getDefinition ( ) . resolveModelAttribute ( context , model ) , EvictionStrategy . class ) ; if ( strategy . isEnabled ( ) ) { this . builder . strategy ( strategy ) . type ( EvictionType . COUNT ) . size ( MAX_ENTRIES . getDefinition ( ) . resolveModelAttribute ( context , model ) . asLong ( ) ) ; } return this ; }
public void closed ( BoltConnection connection ) { String id = connection . id ( ) ; try { CompletableFuture < Boolean > currentFuture = activeWorkItems . remove ( id ) ; if ( currentFuture != null ) { currentFuture . cancel ( true ) ; } } finally { activeConnections . remove ( id ) ; } }
public void testIsExternalVM ( ) throws IOException { XmlDocument xmlDocument = new XmlDocument ( getXmlOvfData ( ) ) ; assertFalse ( "VM should not be external VM" , OvfUtils . isExternalVM ( xmlDocument ) ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
public static boolean folderContains ( File folder , String filename ) { if ( folder == null ) { return false ; } if ( ! folder . isDirectory ( ) ) { return false ; } File [ ] fileList = folder . listFiles ( ) ; for ( File f : fileList ) { if ( f . getName ( ) . equals ( filename ) ) { return true ; } } return false ; }
public void addWhiteListPatterns ( String . . . patterns ) { Collections . addAll ( whiteListPatterns , patterns ) ; }
private Long getRegistrationMillis ( String playerName ) { PlayerAuth auth = playerCache . getAuth ( playerName ) ; if ( auth == null ) { auth = dataSource . getAuth ( playerName ) ; } if ( auth != null ) { return auth . getRegistrationDate ( ) ; } return null ; }
public HashConfigurationBuilder capacityFactor ( float capacityFactor ) { if ( capacityFactor < 0 ) throw new IllegalArgumentException ( "capacityFactor must be positive" ) ; this . capacityFactor = capacityFactor ; return this ; }
public synchronized void onHeaders ( Response response ) { long length = response . getHeaders ( ) . getLongField ( HttpHeader . CONTENT_LENGTH . asString ( ) ) ; if ( length > maxLength ) { response . abort ( new ResponseTooLargeException ( ) ) ; } allocateCurrentArray ( ) ; }
public WorkspaceItem build ( ) { return workspaceItem ; }
public static SortedMap < String , Charset > requiredCharsets ( ) { return Collections . unmodifiableSortedMap ( REQUIRED_CHARSETS ) ; }
protected void checkProject ( Project project ) { assertNotNull ( project . getId ( ) ) ; assertEquals ( project . toString ( ) , client . getProjectApi ( ) . getProject ( project . getId ( ) ) . toString ( ) ) ; assertTrue ( "Project state is null" , project . getState ( ) != null ) ; assertTrue ( "Project state is UNRECOGNIZED" , project . getState ( ) != Project . State . UNRECOGNIZED ) ; }
public AtsProgramArtifactToken ( Long id , String name , ArtifactTypeToken artifactType ) { super ( id , name , CoreBranches . COMMON , artifactType ) ; }
public void setUseBulkWriteOperations ( final boolean useBulkWriteOperations ) { LOG . warning ( "Setting useBulkWriteOperations has no value functionally or performance - wise . " ) ; }
public void setActionConfirmationMessage ( String message ) { boolean isNonEmptyMessage = message != null ; if ( isNonEmptyMessage ) { actionConfirmationMessage . setText ( message ) ; } actionConfirmationMessage . setVisible ( isNonEmptyMessage ) ; }
public void close ( ) throws InterruptedException { close ( false ) ; }
protected void recursivelyPrint ( AbstractPlanNode node , StringBuilder sb , int indent ) { for ( int i = 0 ; i < indent ; i ++ ) { sb . append ( "\t" ) ; } sb . append ( node . toJSONString ( ) + "\n" ) ; indent ++ ; if ( node . getChildCount ( ) > 0 ) { recursivelyPrint ( node . getChild ( 0 ) , sb , indent ) ; } }
public void update ( int inputIndex ) { status . setTargetOutputRowCount ( super . update ( inputIndex , status . getOutPosition ( ) ) ) ; logger . debug ( "BATCH_STATS , incoming { } : { } " , inputIndex == 0 ? "left" : "right" , getRecordBatchSizer ( inputIndex ) ) ; }
private int getNextPosition ( ) throws CoreException { if ( nextMemberPosition < 0 ) { nextMemberPosition = 0 ; while ( nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord ( nextMemberPosition ) != 0 ) { nextMemberPosition ++ ; } } return nextMemberPosition ; }
public BulkResponse executeRequest ( ) { if ( bulkRequest . numberOfActions ( ) == 0 ) { return null ; } logger . trace ( " [ { } ] ES API CALL : bulk request with { } actions" , ( ) - > jobId , ( ) - > bulkRequest . numberOfActions ( ) ) ; BulkResponse bulkResponse = resultsPersisterService . bulkIndexWithRetry ( bulkRequest , jobId , shouldRetry , msg - > auditor . warning ( jobId , "Bulk indexing of annotations failed " + msg ) ) ; bulkRequest = new BulkRequest ( AnnotationIndex . WRITE_ALIAS_NAME ) ; return bulkResponse ; }
public int size ( ) { int size = 0 ; // We have to loop through to make sure to remove expired entries for ( Iterator < InternalCacheEntry < K , V > > iter = iterator ( ) ; iter . hasNext ( ) ; ) { if ( iter . next ( ) . getValue ( ) == null ) continue ; if ( ++ size == Integer . MAX_VALUE ) return Integer . MAX_VALUE ; } return size ; }
public static File getDiskCacheDir ( Context context , String uniqueName ) { // Check if media is mounted or storage is built - in , if so , try and use external cache dir // otherwise use internal cache dir . final String cachePath ; if ( context . getExternalCacheDir ( ) != null && Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ) { cachePath = context . getExternalCacheDir ( ) . getPath ( ) ; } else { cachePath = context . getCacheDir ( ) . getPath ( ) ; } return new File ( cachePath + File . separator + uniqueName ) ; }
private String getBucketName ( URI uri ) { if ( uri . getHost ( ) != null ) { return uri . getHost ( ) ; } else if ( uri . getUserInfo ( ) == null ) { return uri . getAuthority ( ) ; } throw new IllegalArgumentException ( "Unable to determine S3 bucket from URI . " ) ; }
private MustacheFactory createNewMustacheFactory ( Class < ? extends View > key ) { return new DefaultMustacheFactory ( fileRoot . isPresent ( ) ? new FileSystemResolver ( fileRoot . get ( ) ) : new PerClassMustacheResolver ( key ) ) ; }
public boolean isValidValue ( final Object element ) { boolean result = super . isValidValue ( element ) ; if ( result ) { EObject eObject = EMFHelper . getEObject ( element ) ; result = ( ProtocolUtils . isProtocol ( eObject ) && ! SystemElementsUtils . isBaseProtocol ( ( Collaboration ) eObject ) ) ; } return result ; }
public void testLogin ( ) throws Throwable { runOnMainSync ( new Runnable ( ) { @Override public void run ( ) { loginTestTask . execute ( ) ; } } ) ; assertThat ( completionLatch . await ( ) , is ( true ) ) ; }
public static void warnIfDeprecatedDnsLookupValue ( AbstractConfig config ) { String clientDnsLookupValue = config . getString ( CLIENT_DNS_LOOKUP_CONFIG ) ; if ( clientDnsLookupValue . equals ( ClientDnsLookup . DEFAULT . toString ( ) ) ) log . warn ( "Configuration ' { } ' with value ' { } ' is deprecated and will be removed in " + "future version . Please use ' { } ' or another non - deprecated value . " , CLIENT_DNS_LOOKUP_CONFIG , ClientDnsLookup . DEFAULT , ClientDnsLookup . USE_ALL_DNS_IPS ) ; }
public HdfsCopyStats ( String source , File destination , boolean enableStatsFile , int maxVersionsStatsFile , boolean isFileCopy , HdfsPathInfo pathInfo ) { this . sourceFile = source ; this . totalBytesTransferred = 0L ; this . bytesTransferredSinceLastReport = 0L ; this . pathInfo = pathInfo ; this . lastReportNs = System . nanoTime ( ) ; this . startTimeMS = System . currentTimeMillis ( ) ; initializeStatsFile ( destination , enableStatsFile , maxVersionsStatsFile , isFileCopy ) ; aggStats = HdfsFetcherAggStats . aggStats ; }
private void writeAlias ( VmDevice device ) { writer . writeStartElement ( "alias" ) ; writer . writeAttributeString ( "name" , String . format ( "ua - % s" , device . getId ( ) . getDeviceId ( ) ) ) ; writer . writeEndElement ( ) ; }
public ChartData ( IDataChartProvider < ? > provider , List < ChartSeries > series ) { fProvider = provider ; fSeries = ImmutableList . copyOf ( series ) ; }
protected boolean isRegistered ( final String uuid ) { return handlers . containsKey ( uuid ) ; }
public Class < ? > defineClass ( String name , byte [ ] bytecode ) { return defineClass ( name , convertClassToResourcePath ( name ) , bytecode ) ; }
public boolean onOptionsItemSelected ( MenuItem item ) { // home references the app icon if ( item . getItemId ( ) == android . R . id . home ) { toggle ( ) ; // toggles the state of the sliding menu if ( getSlidingMenu ( ) . isMenuShowing ( ) && menu . isAdded ( ) ) { setTitle ( ( ( ITitleable ) menu ) . getTitle ( ) ) ; return true ; } return false ; }
public static ParcelFileDescriptor fromSocket ( Socket socket ) { FileDescriptor fd = socket . getFileDescriptor$ ( ) ; try { return fd != null ? ParcelFileDescriptor . dup ( fd ) : null ; } catch ( IOException e ) { throw new UncheckedIOException ( e ) ; } }
private String getThemePrefixedPath ( String path ) { String prefix = themeProperties != null ? themeProperties . get ( IntroTheme . ATT_ID ) : null ; prefix = prefix == null ? "" : prefix . trim ( ) ; // $NON - NLS - 1$ if ( prefix . length ( ) == 0 ) { return null ; } return prefix + Path . SEPARATOR + path ; }
protected void writeString ( int majorType , byte [ ] bytes ) throws IOException { int len = ( bytes == null ) ? 0 : bytes . length ; writeType ( majorType , len ) ; if ( bytes != null ) { m_os . write ( bytes ) ; } }
private void checkLogData ( long address , ILogData logData ) { if ( logData == null || logData . getType ( ) == DataType . EMPTY ) { throw new RuntimeException ( "Unexpected return of empty data at address " + address + " on read" ) ; } if ( logData . isTrimmed ( ) ) { throw new TrimmedException ( ) ; } }
private static void merge ( AggregatedCalledFunction destination , AggregatedCalledFunction source ) { long sourceDuration = source . getDuration ( ) ; long sourceSelfTime = source . getSelfTime ( ) ; destination . addToDuration ( sourceDuration ) ; destination . addToSelfTime ( sourceSelfTime ) ; destination . fStatistics . update ( source . fStatistics . getMaxSegment ( ) , source . fStatistics . getMinSegment ( ) , sourceDuration , sourceSelfTime ) ; // merge the children callees . mergeChildren ( destination , source ) ; }
@Override protected void doEnqueue ( Callback < V > callback ) { sendRequest ( ) . handle ( ( response , t ) - > { if ( t != null ) { callback . onError ( t ) ; } else { V value = null ; try { value = parseResponse ( response , bodyConverter ) ; } catch ( Throwable t1 ) { propagateIfFatal ( t1 ) ; callback . onError ( t1 ) ; } if ( value != null ) callback . onSuccess ( value ) ; else callback . onError ( new IllegalStateException ( "parseResponse returned null" ) ) ; } return null ; } ) ; }
public SpiTransaction createServerTransaction ( boolean isExplicit , int isolationLevel ) { SpiTransaction t = transactionManager . createTransaction ( isExplicit , isolationLevel ) ; if ( ! isExplicit ) { try { transactionScopeManager . set ( t ) ; } catch ( PersistenceException existingTransactionError ) { t . end ( ) ; throw existingTransactionError ; } } return t ; }
C baseApply ( ) { final TreeMap < String , String > t = new TreeMap < String , String > ( validate ( ) ) ; if ( ! children . contains ( t ) ) { C child = newChild ( ) ; children . putIfAbsent ( t , child ) ; return child ; } else return children . get ( t ) ; }
public void onConnect ( String message ) { debugView . showPermanently ( getString ( R . string . connected ) ) ; switchableView . setDisplayedChild ( 1 ) ; presenter . onConnect ( message ) ; }
public ByteBuffer [ ] nioBuffers ( int index , int length ) { if ( b1 . nioBufferCount ( ) == 1 && b2 . nioBufferCount ( ) == 1 ) { return new ByteBuffer [ ] { b1 . nioBuffer ( ) , b2 . nioBuffer ( ) } ; } return ObjectArrays . concat ( b1 . nioBuffers ( ) , b2 . nioBuffers ( ) , ByteBuffer . class ) ; }
public void setDisabledAdministrativeMonitors ( Set < String > disabledAdministrativeMonitors ) { this . disabledAdministrativeMonitors = new CopyOnWriteArraySet < > ( disabledAdministrativeMonitors ) ; }
protected boolean waitUntilReadyToProcess ( Properties jobProps ) { return true ; }
private List < Comment > fetchAllComments ( ArticleTable article ) { return ( ArrayList < Comment > ) hibernateTemplate . find ( "FROM Comment WHERE articleId = ? " , article . getArticleId ( ) ) ; }
public String getPreview ( ) { StringBuilder bld = new StringBuilder ( ) ; bld . append ( "\n" ) ; if ( isEnabled ( CleanUpConstants . NUMBER_SUFFIX ) ) { bld . append ( "long number1 = 10L ; \n" ) ; bld . append ( "float number2 = 10F ; \n" ) ; bld . append ( "double number3 = 10D ; \n" ) ; } else { bld . append ( "long number1 = 10l ; \n" ) ; bld . append ( "float number2 = 10f ; \n" ) ; bld . append ( "double number3 = 10d ; \n" ) ; } return bld . toString ( ) ; }
private static ByteBuf serializeProtobuf ( MessageLite msg , ByteBufAllocator allocator ) { int size = msg . getSerializedSize ( ) ; ByteBuf buf = allocator . heapBuffer ( size , size ) ; try { msg . writeTo ( new ByteBufOutputStream ( buf ) ) ; } catch ( IOException e ) { // This is in - memory serialization , should not fail throw new RuntimeException ( e ) ; } return buf ; }
public void testEncodeOutputControl ( ) { Tk103ProtocolEncoder encoder = new Tk103ProtocolEncoder ( ) ; Command command = new Command ( ) ; command . setDeviceId ( 1 ) ; command . setType ( Command . TYPE_OUTPUT_CONTROL ) ; command . set ( Command . KEY_INDEX , 0 ) ; command . set ( Command . KEY_DATA , "1" ) ; assertEquals ( " ( 123456789012345AV001 ) " , encoder . encodeCommand ( command ) ) ; }
void cancel ( ) { super . cancel ( ) ; callback = null ; }
public void cancel ( ) { try { Field field = FileWatchdog . class . getDeclaredField ( "interrupted" ) ; field . setAccessible ( true ) ; field . set ( this , true ) ; } catch ( ReflectiveOperationException cause ) { throw new RuntimeException ( "Cannot cancel log4j watchdog" , cause ) ; } }
public static boolean isEditAllowed ( @NonNull PageTitle title ) { return Arrays . asList ( ENABLED_LANGUAGES ) . contains ( title . getWikiSite ( ) . languageCode ( ) ) ; }
private InputStream simulateSendAndReceive ( ByteArrayOutputStream baos ) throws IOException { byte [ ] bytes = baos . toByteArray ( ) ; baos . reset ( ) ; int testMessageNo = 0 ; PacketFormat format = new PacketFormat ( testMessageNo , bytes ) ; format . serialize ( baos ) ; return new ByteArrayInputStream ( baos . toByteArray ( ) ) ; }
public ShovingMatch ( UUID ownerId , CardSetInfo setInfo ) { super ( ownerId , setInfo , new CardType [ ] { CardType . INSTANT } , " { 2 } { U } " ) ; // Until end of turn , all creatures gain " { tap } : Tap target creature . " Ability ability = new SimpleActivatedAbility ( new TapTargetEffect ( ) , new TapSourceCost ( ) ) ; ability . addTarget ( new TargetCreaturePermanent ( ) ) ; this . getSpellAbility ( ) . addEffect ( new GainAbilityAllEffect ( ability , Duration . EndOfTurn , new FilterCreaturePermanent ( ) ) . setText ( "Until end of turn , all creatures gain \" { T } : Tap target creature . \"" ) ) ; }
public void testCompareRanges ( ) { assertEquals ( compareRanges ( "abcdefghij" . getBytes ( ) , 0 , 10 , "abcdefghij" . getBytes ( ) , 0 , 10 ) , 0 ) ; assertTrue ( compareRanges ( "123abcdefghij" . getBytes ( ) , 3 , 10 , "abcdefghij" . getBytes ( ) , 0 , 10 ) == 0 ) ; }
public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; // ? ? ? if ( build ) { this . build = build ; } else { this . building = build ; } }
public TestElasticsearchIntegrationSmokeTest ( EmbeddedElasticsearchNode embeddedElasticsearchNode ) { super ( ( ) - > createElasticsearchQueryRunner ( embeddedElasticsearchNode , TpchTable . getTables ( ) ) ) ; this . embeddedElasticsearchNode = embeddedElasticsearchNode ; }
public CommandResult exec ( ContextAwareCommandInvocation commandInvocation ) { commandInvocation . println ( commandInvocation . getHelpInfo ( ) ) ; return CommandResult . SUCCESS ; }
for ( OsType type : OsType . values ( ) ) { osTypeValues . add ( type . value ( ) ) ; }
private Menu fillMenu ( Menu m ) { for ( IAction action : getActions ( ) ) { IContributionItem item ; String actionText = action . getText ( ) ; if ( actionText == null || actionText . isEmpty ( ) ) { item = new Separator ( ) ; } else { item = new ActionContributionItem ( action ) ; } item . fill ( m , - 1 ) ; } return m ; }
public void testThreadNameWithoutNumberNoDemon ( ) { Assert . assertEquals ( THREAD_NAME , ThreadUtils . createThreadFactory ( THREAD_NAME , false ) . newThread ( EMPTY_RUNNABLE ) . getName ( ) ) ; }
public < T > ModelAdaptor < ? super T > getModelAdaptor ( Class < T > attributeType ) { // noinspection unchecked return ( ModelAdaptor < ? super T > ) adaptors . get ( attributeType ) ; }
public com . google . gwtorm . client . Key < ? > [ ] members ( ) { return new com . google . gwtorm . client . Key < ? > [ ] { patchKey } ; }
public void init ( final RuleModellerPage page ) { this . page = page ; if ( page . plugin ( ) instanceof BRLActionColumnPlugin ) { this . brlActionColumnPlugin = ( BRLActionColumnPlugin ) page . plugin ( ) ; } }
@Override public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; }
static < T > List < T > without ( List < T > list , Collection < Integer > indexes ) { Set < Integer > indexesSet = ImmutableSet . copyOf ( indexes ) ; return IntStream . range ( 0 , list . size ( ) ) . filter ( index - > ! indexesSet . contains ( index ) ) . mapToObj ( list : : get ) . collect ( toImmutableList ( ) ) ; }
private Throwable getRealException ( Throwable re ) { if ( re . getCause ( ) == null ) return re ; Throwable cause = re . getCause ( ) ; if ( cause instanceof CacheException || cause instanceof Error ) return getRealException ( cause ) ; else return re ; }
public void layoutIfNecessary ( ) { if ( dirtySize != null && control != null && control instanceof Composite ) { if ( control . getSize ( ) . equals ( dirtySize ) ) { ( ( Composite ) control ) . layout ( ) ; flushChildren = false ; } } dirtySize = null ; }
public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; if ( isLabelAttr != null && isLabelAttr ) { setNillable ( false ) ; } return this ; }
public Object postProcessBeforeInitialization ( Object bean , String beanName ) throws BeansException { if ( bean instanceof IntegrationEvaluationContextAware ) { StandardEvaluationContext evaluationContext = IntegrationContextUtils . getEvaluationContext ( beanFactory ) ; if ( bean instanceof IntegrationObjectSupport ) { ConversionService conversionService = ( ( IntegrationObjectSupport ) bean ) . getConversionService ( ) ; if ( conversionService != null ) { evaluationContext . setTypeConverter ( new StandardTypeConverter ( conversionService ) ) ; } } ( ( IntegrationEvaluationContextAware ) bean ) . setIntegrationEvaluationContext ( evaluationContext ) ; } return bean ; }
public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; R result = callback . withHandle ( h ) ; return result ; }
public LanguageServerWrapper ( @NonNull LanguageServerDefinition serverDefinition , @Nullable IPath initialPath ) { this . initialProject = project ; this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }
public String getReplicaPath ( ) { // GetRequest . Cloud_Replica_Keyword is added to avoid error on its peers . return GetRequest . Cloud_Replica_Keyword + File . separator + getMountPath ( ) + File . separator + partitionId . toPathString ( ) ; }
public void addChildren ( AlluxioURI path , Collection < UfsStatus > children ) { UfsStatus status = mStatuses . get ( path ) ; // If this path doesn't yet exist , we can't keep track of the parent - child relationship // We can still add statuses to the cache regardless if ( status != null ) { mChildren . computeIfAbsent ( path , ufsStatus - > new ConcurrentHashSet < > ( ) ) . addAll ( children ) ; } children . forEach ( child - > { AlluxioURI childPath = path . joinUnsafe ( child . getName ( ) ) ; addStatus ( childPath , child ) ; } ) ; }
private void actionCompleted ( SegmentHolder segmentHolder ) { switch ( segmentHolder . getType ( ) ) { case LOAD : segmentsToLoad . remove ( segmentHolder . getSegment ( ) ) ; queuedSize . addAndGet ( - segmentHolder . getSegmentSize ( ) ) ; break ; case DROP : segmentsToDrop . remove ( segmentHolder . getSegment ( ) ) ; break ; default : throw new UnsupportedOperationException ( ) ; } executeCallbacks ( segmentHolder ) ; }
public ScheduledReporter build ( MetricRegistry registry ) { GraphiteReporter . Builder builder = builder ( registry ) ; if ( "udp" . equalsIgnoreCase ( transport ) ) { return builder . build ( new GraphiteUDP ( host , port ) ) ; } else { return builder . build ( new Graphite ( host , port ) ) ; } }
public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , "onReceiveHangUpFromUser userId = " + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , "setAnotherUserToFullScreen call userId = " + userId ) ; setAnotherUserToFullScreen ( ) ; } } }
private boolean isThis ( ExpressionTree expression ) { ExpressionTree expressionNoParenthesis = ExpressionUtils . skipParentheses ( expression ) ; if ( expressionNoParenthesis . is ( Tree . Kind . IDENTIFIER ) ) { String targetName = ( ( IdentifierTree ) expressionNoParenthesis ) . name ( ) ; return "this" . equals ( targetName ) ; } return false ; }
protected Map < String , Queue > getQueueNamesToQueues ( ) { return this . queues . stream ( ) . collect ( Collectors . toMap ( Queue : : getActualName , q - > q ) ) ; }
public String toString ( ) { Bundle myBundle = getBundle ( ) ; if ( myBundle == null ) return "" ; // $NON - NLS - 1$ String name = myBundle . getSymbolicName ( ) ; return name == null ? String . valueOf ( myBundle . getBundleId ( ) ) : name ; }
public void workbenchSelectionChanged ( ISelection selection ) { Object o = SelectionUtils . getSelectedObject ( selection ) ; if ( o instanceof TextSelection ) { String text = ( ( TextSelection ) o ) . getText ( ) ; m_sourceGraphControl . setSourceText ( text ) ; } else { m_sourceGraphControl . setSourceText ( "" ) ; // $NON - NLS - 1$ } }
public JBlock getOnDestroyViewAfterSuperBlock ( ) { if ( onDestroyViewAfterSuperBlock == null ) { setContentViewRelatedMethods ( ) ; } return onDestroyViewAfterSuperBlock ; }
public boolean hasChildren ( Object element ) { return ! ( ( MyModel ) element ) . children . isEmpty ( ) ; }
public GroupedPropertyList getPropertyList ( ) { if ( propertyList == null ) { boolean parallel = true ; long t1 = System . currentTimeMillis ( ) ; propertyList = new GroupedPropertyList ( individual , vreq , editing , parallel ) ; log . debug ( " getPropertyList parallel : " + parallel + " time : " + ( System . currentTimeMillis ( ) - t1 ) + " ms" ) ; } return propertyList ; }
private void doTheTest ( UserGroup g0 ) { String s = MARSHALER . marshal ( g0 ) ; UserGroup ug = MARSHALER . unmarshal ( s ) ; System . out . println ( g0 ) ; System . out . println ( ug ) ; System . out . println ( s ) ; assertTrue ( g0 . equals ( ug ) ) ; }
String getConstraintType ( ) { final ConstraintType constraintType = presenter . getConstraintType ( ) ; if ( constraintType == ConstraintType . EMPTY ) { return presenter . inferComponentType ( presenter . getConstraintValue ( ) ) . value ( ) ; } else { return constraintType . toString ( ) ; } }
private WikipediaApp getApplication ( ) { return WikipediaApp . getInstance ( ) ; }
private boolean isHostedEngineDirectLunDisk ( ) { return disk . getDiskStorageType ( ) == DiskStorageType . LUN && StorageConstants . HOSTED_ENGINE_LUN_DISK_ALIAS . equals ( disk . getDiskAlias ( ) ) ; }
public CommunityRest getParentCommunity ( @Nullable HttpServletRequest httpServletRequest , UUID collectionId , @Nullable Pageable optionalPageable , Projection projection ) { try { Context context = obtainContext ( ) ; Collection collection = collectionService . find ( context , collectionId ) ; Community parentCommunity = ( Community ) collectionService . getParentObject ( context , collection ) ; if ( collection == null ) { throw new ResourceNotFoundException ( "No such collection : " + collectionId ) ; } return converter . toRest ( parentCommunity , projection ) ; } catch ( SQLException e ) { throw new RuntimeException ( e ) ; } }
public List < WorkflowAction > findActions ( List < WorkflowStep > steps , User user ) throws DotDataException , DotSecurityException { List < WorkflowAction > actions = new ArrayList < > ( ) ; for ( WorkflowStep step : steps ) { actions . addAll ( workFlowFactory . findActions ( step ) ) ; } actions = APILocator . getPermissionAPI ( ) . filterCollection ( actions , PermissionAPI . PERMISSION_USE , true , user ) ; return Collections . unmodifiableList ( actions ) ; }
private String updateIconUri ( MPart part ) { MPartDescriptor desc = modelService . getPartDescriptor ( part . getElementId ( ) ) ; String iconURI = desc != null && desc . getIconURI ( ) != null ? desc . getIconURI ( ) : part . getIconURI ( ) ; part . getTransientData ( ) . put ( ICON_URI_FOR_PART , iconURI ) ; return iconURI ; }
private Map < String , Pair < Class , Object > > getOverriddenReturnTypes ( ) { // Add attributes with 'smart' getters and setters that convert back and forth to correct values for MOLGENIS datatypes // Provide the attribute name as key , and a pair of returntype ( Class ) and a Object to be used as test value Map < String , Pair < Class , Object > > map = new HashMap < > ( ) ; return map ; }
String getParentId ( String testId ) { return ( String ) getHibernateTemplate ( ) . find ( "select distinct w . parentId from WorkloadData w where w . taskId = ? and w . sessionId = ? " , testId , sessionId ) . get ( 0 ) ; }
protected void executeQueryCommand ( ) { List < Disk > diskList = DbFacade . getInstance ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getVmId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) ) ; if ( CollectionUtils . isEmpty ( diskList ) ) { return diskList ; return ; } setReturnValue ( filterDisks ( diskList ) ) ; }
public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent ( Filter filter , List < JoinableClause > clauses , VirtualColumns virtualColumns ) { // Some filters have potentially expensive hash codes that are lazily computed and cached . // We call hashCode ( ) here in a synchronized block before we attempt to use the Filter in the analyses map , // to ensure that the hashCode is only computed once per Filter since the Filter interface is not thread - safe . synchronized ( analyses ) { if ( filter != null ) { filter . hashCode ( ) ; } } JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey ( filter , clauses , virtualColumns ) ; return analyses . computeIfAbsent ( key , ( groupKey ) - > { return JoinFilterAnalyzer . computeJoinFilterPreAnalysis ( JoinableClauses . fromList ( clauses ) , virtualColumns , filter , joinFilterRewriteConfig ) ; } ) ; }
protected AbstractFixedIntervalTask ( String id , TaskResource taskResource , String dataSource , Interval interval ) { this ( id , id , taskResource , dataSource , interval ) ; }
private Object [ ] [ ] finderSupportedResourceTypeData ( ) { return new Object [ ] [ ] { { FinderSupportedAssociationDataResource . class } , { FinderSupportedComplexKeyDataResource . class } , { FinderWithActionResource . class } } ; }
public void addNotEmptyIdConnection ( ) { StorageServerConnections newPosixConnection = createPosixConnection ( "multipass . my . domain . tlv . company . com :/ export / allstorage / data1" , StorageType . POSIXFS , "nfs" , "timeo = 30" ) ; newPosixConnection . setId ( Guid . newGuid ( ) . toString ( ) ) ; parameters . setStorageServerConnection ( newPosixConnection ) ; parameters . setVdsId ( Guid . Empty ) ; ValidateTestUtils . runAndAssertValidateFailure ( command , EngineMessage . ACTION_TYPE_FAILED_STORAGE_CONNECTION_ID_NOT_EMPTY ) ; }
public void mercury_topbar_wikiaLogoRedirectsToFandomPage ( ) { TopBar topBar = new ArticlePage ( ) . open ( MercurySubpages . MAIN_PAGE ) . getTopBar ( ) ; topBar . clickWikiaLogo ( ) ; Assertion . assertTrue ( topBar . getCurrentUrl ( ) . contains ( "www . wikia . com / fandom" ) ) ; }
private ConfigurationServiceImplService getConfigService ( ) throws ConnectionManagerException , MalformedURLException { String url = oProxyHelper . getAdapterEndPointFromConnectionManager ( DirectConfigConstants . DIRECT_CONFIG_SERVICE_NAME ) ; if ( cfService == null ) { cfService = new ConfigurationServiceImplService ( new URL ( url + " ? wsdl" ) ) ; } return cfService ; }
void testDtoListResponses ( ) { FlowJsonObjectReader reader = new FlowJsonObjectReader ( ) ; TypeReference < SurveyGroupDto > typeReference = new TypeReference < SurveyGroupDto > ( ) { } ; List < SurveyGroupDto > surveyList = null ; try { surveyList = reader . readDtoListObject ( DTO_LIST_JSON_OBJECT , typeReference ) ; } catch ( IOException e ) { // } assertNotEquals ( surveyList , null ) ; assertEquals ( surveyList . size ( ) , 1 ) ; assertEquals ( "1 . 10 . 36 all questions" , surveyList . get ( 0 ) . getName ( ) ) ; }
public GroupScan clone ( List < SchemaPath > columns ) { HBaseGroupScan newScan = new HBaseGroupScan ( this ) ; newScan . columns = columns == null ? ALL_COLUMNS : columns ; HBaseUtils . verifyColumns ( columns , hTableDesc ) ; return newScan ; }
private static < T , U > Function < T , Result < U > > reportMissing ( Class < ? > expectedClass ) { return t - > Result . failure ( "Not yet implemented : " + Optional . ofNullable ( t ) . map ( o - > o . getClass ( ) . getCanonicalName ( ) ) . orElse ( "null -- expected " + expectedClass . getCanonicalName ( ) ) ) ; }
private void rematchAllNetworksAndRequests ( ) { // TODO : This may be slow , and should be optimized . final long now = SystemClock . elapsedRealtime ( ) ; final NetworkReassignment changes = computeNetworkReassignment ( ) ; if ( VDBG || DDBG ) log ( changes . toString ( ) ) ; applyNetworkReassignment ( changes , oldDefaultNetwork , now ) ; }
public String getScroller ( ) { return Objects . requireNonNullElse ( scroller , DEFAULT_SCROLLER ) ; }
public String getMessage ( ) { return message ; }
public Type convertReadValueToType ( String pvReadValue ) { Type lvType = convertReadValueToUnmodifiedType ( pvReadValue ) ; for ( InterfaceOneWireTypeModifier lvTypeModifier : getTypeModifieryList ( ) ) { logger . debug ( "type of { } before modifier : { } type = { } " , getDevicePropertyPath ( ) , lvTypeModifier . getModifierName ( ) , lvType ) ; lvType = lvTypeModifier . modify4Read ( lvType ) ; logger . debug ( "type of { } after modifier : { } type = { } " , getDevicePropertyPath ( ) , lvTypeModifier . getModifierName ( ) , lvType ) ; } return lvType ; }
public synchronized void clear ( ) { this . domainsVisibility . clear ( ) ; }
public static Comment newComment ( long issueId , int newCommentId , String comment ) { DateTime now = DateTime . now ( ) ; long id = Long . parseLong ( issueId + "0" + newCommentId ) ; URI selfUri = URI . create ( TEST_JIRA_URL + " / rest / api / latest / issue / " + issueId + " / comment" ) ; return new Comment ( selfUri , comment , null , null , now , null , null , id ) ; }
private void registerGlueCodeScope ( ConfigurableApplicationContext context ) { do { synchronized ( this ) { context . getBeanFactory ( ) . registerScope ( SCOPE_CUCUMBER_GLUE , new GlueCodeScope ( ) ) ; context = ( ConfigurableApplicationContext ) context . getParent ( ) ; } } while ( context != null ) ; }
private String truncateMessageLength ( String message , int maxLength ) { if ( message . length ( ) > maxLength ) { message = message . substring ( 0 , maxLength ) ; } return message ; }
public void testErrorReceived ( ) { TestObserver < Object > ts = new TestObserver < Object > ( ) ; TestException ex = new TestException ( "boo" ) ; Flowable . error ( ex ) . ignoreElements ( ) . subscribe ( ts ) ; ts . assertNoValues ( ) ; ts . assertTerminated ( ) ; ts . assertError ( TestException . class ) ; ts . assertErrorMessage ( "boo" ) ; }
public boolean select ( Viewer viewer , Object parentElement , Object element ) { if ( ! ( element instanceof DisplayItem ) ) { return false ; } if ( actionSet == null ) { return false ; } return CustomizePerspectiveDialog . includeInSetStructure ( ( DisplayItem ) element , actionSet ) ; }
public static void runJSTestSuite ( ) throws InterruptedException { // FIXME Update this when we stop using ARM Emulators int timeout = Build . SUPPORTED_ABIS [ 0 ] . contains ( "armeabi" ) ? 180 : 180 ; JSTestCase . runJSTestSuite ( JS_SUITE , data ( ) , timeout ) ; }
public Map < String , String > getSystemSessionProperties ( SessionConfigurationContext context ) { Map < String , String > combinedProperties = new HashMap < > ( ) ; for ( SessionMatchSpec sessionMatchSpec : sessionMatchSpecs ) { combinedProperties . putAll ( sessionMatchSpec . match ( context ) ) ; } return ImmutableMap . copyOf ( combinedProperties ) ; }
public static void logAccess ( Integer requestId , InetAddress remoteAddress , Principal principal , String operation ) { }
public static List < String > getComputerNames ( ) { final ArrayList < String > names = new ArrayList < String > ( ) ; for ( Computer c : Jenkins . getInstance ( ) . getComputers ( ) ) { if ( ! c . getName ( ) . isEmpty ( ) ) { names . add ( c . getName ( ) ) ; } } return names ; }
public void unbind ( final String eventName , final SubscriptionEventListener listener ) { validateArguments ( eventName , listener ) ; synchronized ( lock ) { final Set < SubscriptionEventListener > listeners = eventNameToListenerMap . get ( eventName ) ; if ( listeners != null ) { listeners . remove ( listener ) ; if ( listeners . isEmpty ( ) ) { eventNameToListenerMap . remove ( eventName ) ; } } } }
public Iterable < AccountGroup > all ( ) { final List < AccountGroup > groups = new ArrayList < AccountGroup > ( ) ; for ( final AccountGroup . NameKey groupName : list . get ( ListKey . ALL ) ) { final AccountGroup group = get ( groupName ) ; if ( group != null ) { groups . add ( group ) ; } } return Collections . unmodifiableList ( groups ) ; }
public void terminate ( HazelcastInstance instance ) { try { Address address = getNode ( instance ) . address ; terminateInstance ( instance ) ; if ( isMockNetwork ) { registry . removeInstance ( address ) ; } } finally { TestJmxLeakHelper . checkJmxBeans ( instance . getName ( ) ) ; } }
public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; // No reason for this to happen , but checking just to make sure if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; setSucceeded ( true ) ; }
void validate ( ) { // No - op , no validation required }
private void scheduleImmediateDelivery ( ) { cancelDelayedDelivery ( ) ; while ( state == State . RUNNING ) { DeliveryAttempt previous = immediateDelivery . get ( ) ; if ( previous != null && ! previous . isDone ( ) ) previous . cancel ( ) ; DeliveryAttempt current = new DeliveryAttempt ( ) ; if ( immediateDelivery . compareAndSet ( previous , current ) ) { current . executeNow ( ) ; return ; } } }
private static ObjectNode handleGaugeRollup ( GaugeRollup rollup ) { ObjectNode rollupNode = JsonNodeFactory . instance . objectNode ( ) ; SimpleNumber rollupValue = rollup . getLatestValue ( ) ; rollupNode . put ( "latestVal" , rollupValue . getDataType ( ) == ( SimpleNumber . Type . DOUBLE ) ? rollupValue . getValue ( ) . doubleValue ( ) : rollupValue . getValue ( ) . longValue ( ) ) ; return handleBasicRollup ( rollup , rollupNode ) ; }
public GarruksWarsteed ( UUID ownerId , CardSetInfo setInfo ) { super ( ownerId , setInfo , new CardType [ ] { CardType . CREATURE } , " { 3 } { G } { G } " ) ; this . subtype . add ( SubType . RHINO ) ; this . power = new MageInt ( 3 ) ; this . toughness = new MageInt ( 5 ) ; // Vigilance this . addAbility ( VigilanceAbility . getInstance ( ) ) ; // When Garruk's Warsteed enters the battlefield , you may search your library and / or graveyard for a card named Garruk , Savage Herald , reveal it , and put it into your hand . If you search your library this way , shuffle it . this . addAbility ( new EntersBattlefieldTriggeredAbility ( new SearchLibraryGraveyardPutInHandEffect ( filter , false , true ) , true ) ) ; }
private void releaseFileChannel ( long logId , CachedFileChannel cachedFileChannel ) { lock . writeLock ( ) . lock ( ) ; try { if ( cachedFileChannel . markDead ( ) ) { try { cachedFileChannel . fileChannel . close ( ) ; } catch ( IOException e ) { LOG . warn ( "Exception occurred in ReferenceCountedFileChannel" + " while closing channel for log file : { } " , cachedFileChannel ) ; } finally { IOUtils . close ( LOG , cachedFileChannel . fileChannel ) ; } // to guarantee the removed cachedFileChannel is what we want to remove . fileChannels . remove ( logId , cachedFileChannel ) ; } } finally { lock . writeLock ( ) . unlock ( ) ; } }
private static File getDefaultFile ( ) { File home = new File ( System . getProperty ( "user . home" ) ) ; // $NON - NLS - 1$ File netrc = new File ( home , " . netrc" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; netrc = new File ( home , "_netrc" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; return null ; }
static synchronized ServiceContext getServiceContext ( ) { synchronized ( Context . class ) { if ( serviceContext == null ) { log . error ( "serviceContext is null . Creating new ServiceContext ( ) " ) ; serviceContext = ServiceContext . getInstance ( ) ; } } log . trace ( "serviceContext : { } " , serviceContext ) ; return ServiceContext . getInstance ( ) ; }
public synchronized void activate ( ) { OTELog . getLogger ( "test" ) . debug ( "something" ) ; listener = new Slf4jLogListener ( ) ; logService . addLogListener ( listener ) ; }
public void testDeserialization ( ) throws Exception { for ( Short version : versions ) { composedBlobIdAndDeserialize ( version ) ; } }
private List < VMWithPlugInfo > getVmsWithPlugInfo ( Guid id ) { return getCallsHandler ( ) . executeReadList ( "GetVmsByDiskId" , VMWithPlugInfoRowMapper . instance , getCustomMapSqlParameterSource ( ) . addValue ( "disk_guid" , id ) ) ; }
public Jedis createResource ( ) { Jedis jedis = new Jedis ( this , db ) ; try { jedis . select ( db ) ; } catch ( JedisException e ) { log . log ( Level . SEVERE , "Can't select database due a Redis connection problem" , e ) ; } return jedis ; }
public void start ( BundleContext context ) throws Exception { fConnMgr = ( JSchConnectionManager ) RemoteServices . getRemoteServices ( context ) . getConnectionManager ( ) ; }
public BoltDeclarer addConfigurations ( Map < String , Object > conf ) { if ( conf != null ) { component . componentConf . putAll ( conf ) ; } return this ; }
public void startTrackingBpForProcess ( final IContainerDMContext containerDmc , final RequestMonitor rm ) { final IBreakpointsTargetDMContext targetBpDmc = DMContexts . getAncestorOfType ( containerDmc , IBreakpointsTargetDMContext . class ) ; IBreakpoint [ ] breakpoints = DebugPlugin . getDefault ( ) . getBreakpointManager ( ) . getBreakpoints ( fDebugModelId ) ; for ( IBreakpoint breakpoint : breakpoints ) { if ( breakpoint instanceof ICBreakpoint && supportsBreakpoint ( breakpoint ) ) { setTargetFilter ( ( ICBreakpoint ) breakpoint , containerDmc ) ; } } startTrackingBreakpoints ( targetBpDmc , rm ) ; }
protected void startCompaction ( CorfuRuntime rt , LogUnitServer logUnitServer ) { // stop periodical tasks to prevent race condition rt . getGarbageInformer ( ) . stop ( ) ; // wait until all garbage decisions are sent to logUnit servers . rt . getGarbageInformer ( ) . waitUntilAllTasksFinish ( ) ; // run compaction on LogUnit servers logUnitServer . runCompaction ( ) ; rt . getAddressSpaceView ( ) . resetCaches ( ) ; rt . getAddressSpaceView ( ) . invalidateServerCaches ( ) ; }
private void writeToChannelVersionOne ( WritableByteChannel channel ) throws IOException { try ( ReadableByteChannel from = Channels . newChannel ( combineStreams ( ) . getInput ( ) ) ) { ByteStreams . copy ( from , channel ) ; return ; } }
protected void setUp ( ) throws Exception { super . setUp ( ) ; Statement stmt = con . createStatement ( ) ; /* Drop the test table if it already exists for some reason . It is not an error if it doesn't exist . */ TestUtil . createTable ( con , "testtz" , "col1 INTEGER , col2 TIMESTAMP" ) ; stmt . close ( ) ; /* Generally recommended with batch updates . By default we run all tests in this test case with autoCommit disabled . */ con . setAutoCommit ( false ) ; }
public List < Currency > getCurrencyForName ( final String name ) { List < Currency > list = _namesToCurrency . get ( name ) ; if ( list == null ) { return new ArrayList < > ( ) ; } return _namesToCurrency . get ( name ) ; }
private static boolean parseAllowAlias ( List < Option > options ) { Option option = Option . findByName ( options , "allow_alias" ) ; if ( option != null ) { Object value = option . getValue ( ) ; return value instanceof Boolean ? ( Boolean ) value : "true" . equals ( value ) ; } return false ; }
public WebArchive createDeployment ( ) { if ( resourceLocal ) { archive . addClasses ( MemberRegistrationWithResourceLocal . class , ResourceLocalResources . class ) ; } else { archive . addClasses ( MemberRegistrationWithJta . class , JtaResources . class ) ; } return archive ; }
private StorageDomain recoverStorageDomain ( String sdUUID ) { log . debug ( "about to recover SD { } " , sdUUID ) ; StorageDomain storageDomain = new StorageDomain ( ) ; storageDomain . setId ( sdUUID ) ; updateStorageDomain ( storageDomain ) ; return storageDomain ; }
public Event complianceCreated ( Consumer consumer , Set < Entitlement > entitlements , ComplianceStatus compliance ) { return new Event ( Event . Type . CREATED , Event . Target . COMPLIANCE , consumer . getName ( ) , principalProvider . get ( ) , consumer . getOwner ( ) . getId ( ) , consumer . getUuid ( ) , consumer . getUuid ( ) , null , buildComplianceDataJson ( consumer , entitlements , compliance ) , null , null ) ; }
public static String toHexString ( byte [ ] digest ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < digest . length ; i ++ ) { if ( ( digest [ i ] & 0xFF ) < 0x10 ) buf . append ( '0' ) ; buf . append ( Integer . toHexString ( digest [ i ] & 0xFF ) ) ; } return buf . toString ( ) ; }
private boolean isLastKilledQueryGone ( ) { boolean lastKilledQueryIsGone = ( lastKilledQuery == null ) ; if ( lastKilledQueryIsGone ) { return lastKilledQueryIsGone ; } ClusterMemoryPool generalPool = pools . get ( GENERAL_POOL ) ; if ( generalPool != null ) { lastKilledQueryIsGone = generalPool . getQueryMemoryReservations ( ) . containsKey ( lastKilledQuery ) ; } return lastKilledQueryIsGone ; }
public Batcher ( ScheduledExecutorService workExecutor , int capacity , long delay , BatchProcessor < T > processor ) { this . workExecutor = workExecutor ; this . capacity = capacity ; this . delay = delay ; this . processor = processor ; this . inbox = new ArrayList < T > ( ) ; this . scheduled = false ; this . lastProcessedTime = 0 ; this . lastProcessedTime = System . currentTimeMillis ( ) ; }
public static void removeMagicResponseContextFields ( Map < String , Object > responseContext ) { responseContext . remove ( DirectDruidClient . QUERY_FAIL_TIME ) ; responseContext . remove ( DirectDruidClient . QUERY_TOTAL_BYTES_GATHERED ) ; }
private void validateAndClose ( ) { try { info ( "Validating static and Helix cluster maps" ) ; verifyEquivalencyWithStaticClusterMap ( staticClusterMap . hardwareLayout , staticClusterMap . partitionLayout ) ; if ( validatingHelixClusterManager != null ) { ensureOrThrow ( validatingHelixClusterManager . getErrorCount ( ) == 0 , "Helix cluster manager should not have encountered any errors" ) ; } } finally { if ( validatingHelixClusterManager != null ) { validatingHelixClusterManager . close ( ) ; } for ( HelixAdmin admin : adminForDc . values ( ) ) { admin . close ( ) ; } } }
public int size ( ) { if ( currentOffset == NO_VALUES ) { return 0 ; } return maxOffset - currentOffset - 1 ; }
public void updateEditorPages ( ) { removeAllPages ( ) ; addPages ( ) ; if ( backToActivePage > 0 && backToActivePage < this . getPageCount ( ) ) { setActivePage ( backToActivePage ) ; } else { // Set active page if the backToActivePage is out of the range setActivePage ( 0 ) ; } setPartName ( getPartName ( ) ) ; }
public Object execute ( ExecutionEvent event ) throws ExecutionException { Object checkCompositeRename = HandlerUtil . getVariable ( event , LTK_CHECK_COMPOSITE_RENAME_PARAMETER_KEY ) ; if ( checkCompositeRename instanceof Boolean ) { return checkForCompositeRename ( event , checkCompositeRename ) ; } else { performRename ( event ) ; } return null ; }
public Arguments setUntypedNullArgument ( Argument untypedNullArgument ) { if ( untypedNullArgument == null ) { throw new IllegalArgumentException ( "the Argument itself may not be null" ) ; } this . untypedNullArgument = untypedNullArgument ; return this ; }
private DebtRemediationFunction remediationFunction ( DebtRemediationFunctions drf ) { if ( func . startsWith ( "Constant" ) ) { return drf . constantPerIssue ( constantCost ) ; } if ( "Linear" . equals ( func ) ) { return drf . linear ( linearFactor ) ; } return drf . linearWithOffset ( linearFactor , linearOffset ) ; }
public void setAnalysisCache ( final AnalysisCache cache ) { if ( cache == null && isAnalysisCacheFunctional ( ) ) { analysisCache = new NoopAnalysisCache ( ) ; // Log warning only once , if not explicitly disabled if ( ! isIgnoreIncrementalAnalysis ( ) && LOG . isLoggable ( Level . WARNING ) ) { final String version = PMDVersion . isUnknown ( ) || PMDVersion . isSnapshot ( ) ? "latest" : "pmd - " + PMDVersion . VERSION ; LOG . warning ( "This analysis could be faster , please consider using Incremental Analysis : " + "https :/ / pmd . github . io / " + version + " / pmd_userdocs_getting_started . html#incremental - analysis" ) ; } } else if ( ! isIgnoreIncrementalAnalysis ( ) ) { // ignore new value if incr . analysis is disabled analysisCache = cache ; } }
private static double sortableLongToDouble ( long value ) { value = ( value ^ ( value > > 63 ) ) & Long . MAX_VALUE ; return Double . longBitsToDouble ( value ) ; }
public static Exception extractExecutionExceptionCause ( Exception e ) { if ( ! ( e instanceof ExecutionException ) || e . getCause ( ) == null ) { return e ; } Throwable cause = e . getCause ( ) ; return cause instanceof Exception ? ( Exception ) cause : new Exception ( cause ) ; }
boolean isEmpty ( ) { return validIndexSegments . isEmpty ( ) ; }
Set getDefaultIgnoreTypeNames ( ) { Set ignored = new HashSet ( ) ; String [ ] ignore = { "org . eclipse . core . runtime . Plugin" , "java . lang . ClassLoader" , "org . eclipse . team . internal . ccvs . core . CVSTeamProvider" , "org . eclipse . core . internal . events . BuilderPersistentInfo" , "org . eclipse . core . internal . resources . Workspace" , "org . eclipse . core . internal . events . EventStats" , "java . net . URL" } ; // $NON - NLS - 1$ // $NON - NLS - 2$ // $NON - NLS - 6$ for ( String element : ignore ) { ignored . add ( element ) ; } return ignored ; }
public static boolean delete ( File file ) { if ( ! file . exists ( ) ) return true ; if ( file . isDirectory ( ) ) { File [ ] children = file . listFiles ( ) ; for ( File child : children ) { delete ( child ) ; } } return file . delete ( ) ; }
public void logout ( final IProgressMonitor monitor ) throws XmlRpcException { userID = - 1 ; token = null ; ( new BugzillaXmlRpcOperation < Integer > ( this ) { @SuppressWarnings ( "serial" ) @Override public Integer execute ( ) throws XmlRpcException { try { bugzillaClient . authenticate ( monitor ) ; } catch ( CoreException e ) { // TODO Auto - generated catch block e . printStackTrace ( ) ; } Object response = call ( monitor , XML_USER_LOGOUT , null ) ; return - 1 ; } } ) . execute ( ) ; return ; }
private double cleanNumber ( double dirtyNumber ) { return dirtyNumber < 1 ? 0 : dirtyNumber ; }
public Pagination < Payment > getPayments ( final Long offset , final Long limit , final String pluginName , final boolean withPluginInfo , final boolean withAttempts , final Iterable < PluginProperty > properties , final TenantContext tenantContext ) throws PaymentApiException { return paymentProcessor . getPayments ( offset , limit , pluginName , withPluginInfo , withAttempts , properties , tenantContext , internalCallContextFactory . createInternalTenantContext ( tenantContext ) ) ; }
private static ResourceBundle readMessagesFromBundle ( ) { try { return ResourceBundle . getBundle ( APP_ERRORS_MESSAGES_FILE_NAME ) ; } catch ( MissingResourceException e ) { log . error ( "Could not load audit log messages from the file " + APP_ERRORS_MESSAGES_FILE_NAME ) ; throw new ApplicationException ( e ) ; } }
public boolean equals ( Object obj ) { if ( this == obj ) return true ; if ( obj == null ) return false ; if ( getClass ( ) != obj . getClass ( ) ) return false ; BigFraction otherValue = ( ( ILScore ) obj ) . getValue ( ) ; return this . value . equals ( otherValue ) ; }
private boolean isValidReviewer ( Account member , ChangeControl control ) { if ( member . isActive ( ) ) { IdentifiedUser user = identifiedUserFactory . create ( member . getId ( ) ) ; // Does not account for draft status as a user might want to let a // reviewer see a draft . return control . forUser ( user ) . isRefVisible ( ) ; } return false ; }
private boolean support ( ValueGroup [ ] valueGroups ) { return valueGroups . length == 1 && ValueGroup . NUMBER == valueGroups [ 0 ] ; }
public File getConfigFile ( ) { return configFile ; }
void close ( ) throws IOException { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; }
private void completeInner ( ) { // A group is removed , so check if we need to call `unsubscribe` if ( WIP_FOR_UNSUBSCRIBE_UPDATER . decrementAndGet ( this ) == 0 ) { // It means `groups . isEmpty ( ) && child . isUnsubscribed ( ) ` is true unsubscribe ( ) ; } // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_COMPLETED ) { // completionEmitted ensures we only emit onCompleted once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onCompleted ( ) ; } } } else { // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_ERROR ) { // completionEmitted ensures we only emit onError once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onError ( error ) ; } } } } }
protected boolean startError ( ) { if ( errorCount == 0 ) { logger . error ( "Found one or more vector errors from { } " , opName ) ; } errorCount ++ ; if ( errorCount >= MAX_ERRORS ) { return false ; } return true ; }
protected static List < Integer > grep ( File fileName , String regexp , List < String > resultLines ) { List < Integer > resultLineNumbers = new ArrayList < > ( ) ; try ( Reader reader = new FileReader ( fileName ) ) { resultLineNumbers = grep ( reader , regexp , resultLines ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } return resultLineNumbers ; }
private static void navigate ( final Activity activity , final String destName , final String destCode , final Geopoint coords ) { final Intent launchIntent = new Intent ( INTENT_ACTION ) ; launchIntent . putExtra ( Intents . EXTRA_NAME , destName ) ; launchIntent . putExtra ( Intents . EXTRA_GEOCODE , destCode ) ; launchIntent . putExtra ( Intents . EXTRA_LATITUDE , coords . getLatitude ( ) ) ; launchIntent . putExtra ( Intents . EXTRA_LONGITUDE , coords . getLongitude ( ) ) ; activity . startService ( launchIntent ) ; }
public TestMediaWikiApiImageFetchingStrategy ( Map < String , String > serverContent ) { checkNotNull ( serverContent , "Please specify some server content for images used during the tests . See : TestMediaWikiApiImageFetchingStrategy#serverContent" ) ; this . serverContent = ImmutableMap . copyOf ( serverContent ) ; }
private static boolean shouldCreateMyHandler ( PsiElement element ) { if ( element instanceof LeafPsiElement ) { LeafPsiElement leaf = ( LeafPsiElement ) element ; return leaf . getElementType ( ) == GoTypes . RETURN || leaf . getElementType ( ) == GoTypes . FUNC || isPanicCall ( leaf ) ; } return false ; }
private synchronized void cancelRxCommands ( ) { for ( CommandHandle commandHandle : fRxCommands . values ( ) ) { if ( commandHandle . getRequestMonitor ( ) == null ) continue ; commandHandle . getRequestMonitor ( ) . setStatus ( genStatus ( "Connection is shut down" ) ) ; // $NON - NLS - 1$ commandHandle . getRequestMonitor ( ) . done ( ) ; } fRxCommands . clear ( ) ; }
private Supplier < StorageStatement > storeStatementSupplier ( NeoStores neoStores ) { Supplier < IndexReaderFactory > indexReaderFactory = ( ) - > new IndexReaderFactory . Caching ( indexingService ) ; LockService lockService = takePropertyReadLocks ? this . lockService : NO_LOCK_SERVICE ; return ( ) - > new StoreStatement ( neoStores , indexReaderFactory , labelScanStore : : newReader , lockService , allocateCommandCreationContext ( ) ) ; }
static byte [ ] convertBoolArrayToByteArray ( boolean [ ] boolArr ) { byte [ ] byteArr = new byte [ ( boolArr . length + 7 ) / 8 ] ; for ( int i = 0 ; i < byteArr . length ; i ++ ) { byteArr [ i ] = readByte ( boolArr , 8 * i ) ; } return byteArr ; }
public void all_composed_assertions_should_pass ( ) { SoftAssertions delegate = new SoftAssertions ( ) ; delegate . assertThat ( 1 ) . isEqualTo ( 1 ) ; delegate . assertAll ( ) ; softly . assertThat ( 1 ) . isEqualTo ( 1 ) ; softly . assertThat ( list ( 1 , 2 ) ) . containsOnly ( 1 , 2 ) ; softly . assertAlso ( delegate ) ; softly . assertAll ( ) ; assertThat ( softly . wasSuccess ( ) ) . isTrue ( ) ; }
public void viewInfoUpdated ( ) { super . reinitialize ( ) ; }
public JSONPointer ( List < String > refTokens ) { this . refTokens = refTokens . clone ( ) ; }
public VM ( ) { mVmStatic = new VmStatic ( ) ; mVmDynamic = new VmDynamic ( ) ; mVmStatistics = new VmStatistics ( ) ; mVmStatic . setImages ( new ArrayList < DiskImage > ( ) ) ; mVmStatic . setInterfaces ( new java . util . ArrayList < VmNetworkInterface > ( ) ) ; mDiskMap = new java . util . HashMap < String , DiskImage > ( ) ; mCdPath = "" ; mFloppyPath = "" ; mRunAndPause = false ; _diskSize = 0 ; }
private long consumerLag ( ) { return consumerLag ; }
public RegexGroupFilter ( final int groupIdx ) { if ( groupIdx < 1 ) throw new IllegalArgumentException ( MessageFormat . format ( HttpServerText . get ( ) . invalidIndex , Integer . valueOf ( groupIdx ) ) ) ; this . groupIdx = groupIdx - 1 ; }
public void testChunkFillingBlobSizeMultipleOfChunkSize ( ) throws Exception { blobSize = chunkSize * ( random . nextInt ( 10 ) + 1 ) ; fillChunksAndAssertSuccess ( ) ; }
EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( )
public byte [ ] toByteArray ( ) { return null ; }
public String getModeName ( ) { String header = getHeader ( ) ; return header . substring ( 0 , header . indexOf ( ' ' ) ) ; }
public int hashCode ( ) { int result = bitSet ; result = 31 * result + bitSet ; return bitSet ; }
void setUnresolvedCompact ( boolean unresolvedCompact ) { this . unresolvedCompact = unresolvedCompact ; if ( outer != null ) { outer . setUnresolvedCompact ( true ) ; } }
public static void afterClass ( ) throws Exception { if ( sLocalAlluxioJobCluster != null ) { sLocalAlluxioJobCluster . stop ( ) ; } sFileSystem . close ( ) ; }
public void testTrimLongSuffix ( ) throws Exception { String longValue = "12345" ; assertThat ( LiteralUtils . trimLongSuffix ( longValue ) ) . isEqualTo ( longValue ) ; assertThat ( LiteralUtils . trimLongSuffix ( longValue + "l" ) ) . isEqualTo ( longValue ) ; assertThat ( LiteralUtils . trimLongSuffix ( longValue + "L" ) ) . isEqualTo ( longValue ) ; assertThat ( LiteralUtils . trimLongSuffix ( "" ) ) . isEqualTo ( "" ) ; }
public Map < TableScanNode , Void > visitTableScan ( TableScanNode node , Void context ) { Map < TableScanNode , Void > result = new IdentityHashMap < > ( ) ; result . put ( node , null ) ; return result ; }
public int getStreamIndex ( ) { return this . streamIndex ; }
public Void call ( ) throws IOException { if ( task == null ) { throw new IOException ( "The callable " + this + " has been serialized somehow , but it is actually not serializable" ) ; } try { return task . call ( ) ; } catch ( IOException e ) { throw e ; } catch ( Exception e ) { throw new IOException ( e ) ; } }
public static File task ( File projectDir , String dstName ) throws IOException { File dstDir = new File ( projectDir . getParent ( ) , FileMetaDataExtractor . encodeSpecialCharsForFileSystem ( dstName ) ) ; if ( projectDir . renameTo ( dstDir ) && XstreamSerializer . renameProject ( new File ( dstDir , CODE_XML_FILE_NAME ) , dstName ) ) { return dstDir ; } else { throw new IOException ( "Cannot rename project directory " + projectDir . getAbsolutePath ( ) + " to " + dstName ) ; } }
private StockOperation createOperation ( StockOperation operation , InventoryStockTake delegate ) { operation . setStatus ( StockOperationStatus . NEW ) ; operation . setInstanceType ( WellKnownOperationTypes . getAdjustment ( ) ) ; Stockroom stockroom ; stockroom = delegate . getStockroom ( ) ; operation . setSource ( stockroom ) ; operation . setOperationNumber ( delegate . getOperationNumber ( ) ) ; Date dNow = new Date ( ) ; operation . setOperationDate ( dNow ) ; operation . setItems ( createOperationsItemSet ( operation , delegate . getItemStockSummaryList ( ) ) ) ; return operation ; }
public MarshallingResponseBuilder < T > messages ( List < MarshallingMessage > messages ) { this . messages . addAll ( messages ) ; return this ; }
public long getTokenCount ( ) { return tokens . get ( ) ; }
public V getOrFill ( K key , Callable < V > callable ) { try { return callable . call ( ) ; } catch ( Exception e ) { logger . error ( "Error while filling the cache" , e ) ; return null ; } }
void setUpHomeMenuIcon ( ) { drawerIconDot . setVisibility ( AccountUtil . isLoggedIn ( ) && Prefs . showActionFeedIndicator ( ) && ReleaseUtil . isPreBetaRelease ( ) && Prefs . getTotalUserDescriptionsEdited ( ) >= ACTION_DESCRIPTION_EDIT_UNLOCK_THRESHOLD ? VISIBLE : GONE ) ; }
public static int maxMemorySizeWithHotplugInMb ( int osId , Version compatibilityVersion ) { final ConfigValues configValue = getMaxMemConfigValueByOsId ( osId ) ; return Config . < Integer > getValue ( configValue , compatibilityVersion != null ? compatibilityVersion . getValue ( ) : Version . getLast ( ) . getValue ( ) ) ; }
public void getPropertiesUpdatePlace ( final TrendsPlace place ) { CommonDataService . Async . getInstance ( ) . getWebClientProperties ( new AsyncCallback < WebClientProperties > ( ) { @Override public void onFailure ( Throwable caught ) { new ExceptionPanel ( "Default properties will be used . Exception while properties retrieving : " + caught . getMessage ( ) ) ; updatePlace ( place ) ; } @Override public void onSuccess ( WebClientProperties result ) { webClientProperties = result ; updatePlace ( place ) ; } } ) ; }
Context prepareDefaultContext ( boolean parseAsFlume ) { // Prepares a default context with Kafka Server Properties Context context = new Context ( ) ; context . put ( BOOTSTRAP_SERVERS_CONFIG , testUtil . getKafkaServerUrl ( ) ) ; context . put ( PARSE_AS_FLUME_EVENT , String . valueOf ( parseAsFlume ) ) ; context . put ( TOPIC_CONFIG , topic ) ; return context ; }
private String getDatacenter ( InetAddressAndPort endpoint ) { if ( peersA . contains ( endpoint ) ) return "datacenterA" ; if ( peersB . contains ( endpoint ) ) return "datacenterB" ; else if ( peersC . contains ( endpoint ) ) return "datacenterC" ; return null ; }
private DateTimeFormatter getFormatter ( ) { switch ( this ) { case days : return DateTimeFormat . forPattern ( "yyyy - MM - dd" ) ; case months : return DateTimeFormat . forPattern ( "yyyy / MM" ) ; case weeks : return DateTimeFormat . forPattern ( "yyyy / ww" ) ; case years : return DateTimeFormat . forPattern ( "yyyy" ) ; case quarters : // has to be extended by the calling function return DateTimeFormat . forPattern ( "yyyy" ) ; break ; } return null ; }
public void setDefaultProperties ( Map < String , Object > defaultProperties ) { this . defaultProperties = new HashMap < > ( defaultProperties ) ; }
private MapSqlParameterSource createVnodeToPnodeParametersMapper ( Integer pinnedIndex , Guid vNodeId ) { return getCustomMapSqlParameterSource ( ) . addValue ( "id" , Guid . newGuid ( ) ) . addValue ( "vm_numa_node_id" , vNodeId ) . addValue ( "vds_numa_node_index" , pinnedIndex ) ; }
public String read ( String key ) { String data = dataManager . read ( key ) ; return data == null ? null : encode ( cryptoBox . decrypt ( iv , decode ( data ) ) ; }
public void setUp ( ) { super . init ( ) ; }
public S indexNullAs ( F indexNullAs ) { indexNullAsValue = indexNullAs ; return thisAsS ( ) ; }
public void testGenericImageExtraction ( ) { org . atlasapi . media . entity . Series extractedGenericImage = extractor . extract ( seriesWithGenericImage ( ) ) ; Image genericImage = Iterables . getOnlyElement ( extractedGenericImage . getImages ( ) ) ; assertEquals ( "http :/ / ichef . bbci . co . uk / images / ic / 1024x576 / p028s846 . png" , extractedGenericImage . getImage ( ) ) ; Assert . assertEquals ( ImageType . GENERIC_IMAGE_CONTENT_ORIGINATOR , genericImage . getType ( ) ) ; }
void testDescribeInstances ( ) { for ( String region : ec2Api . getConfiguredRegions ( ) ) { Set < ? extends Reservation < ? extends RunningInstance > > allResults = client . describeInstancesInRegion ( region ) ; assertNotNull ( allResults ) ; assertTrue ( allResults . size ( ) >= 0 ) ; assertTrue ( allResults . size ( ) >= 0 ) ; } }
String quoteString ( String s ) { if ( s == null ) { return null ; } if ( ! s . matches ( " ^ \" .* \"$" ) ) { return "\"" + s + "\"" ; } else { return s ; } }
public Object getMin ( ) { if ( primitiveType == PrimitiveTypeName . BINARY ) { return new String ( ( ( Binary ) min ) . getBytes ( ) ) ; } return min ; }
public int hashCode ( ) { int result = fullName . hashCode ( ) ; result = 31 * result + fullName . hashCode ( ) ; return result ; }
private SocketConfig createSocketConfig ( int socketTimeout ) { return SocketConfig . custom ( ) . setSoReuseAddress ( true ) . setSoTimeout ( socketTimeout > 0 ? socketTimeout : TIMEOUT_THREE_HOURS ) . build ( ) ; }
CommentBox ( CodeMirror cm , CommentInfo info ) { this . cm = cm ; CommentRange range = info . range ( ) ; if ( range != null ) { fromTo = FromTo . fromCommentRange ( range ) ; rangeMarker = cm . markText ( fromTo . getFrom ( ) , fromTo . getTo ( ) , Configuration . create ( ) . set ( "className" , DiffTable . style . range ( ) ) ) ; } }
public void removeTagFromImage ( String imageName , String tagToBeRemoved ) { selectImage ( imageName ) ; new ContextMenu ( "Remove Tag" ) . select ( ) ; String fullTag = "" ; Combo combo = new DefaultCombo ( ) ; List < String > comboItems = combo . getItems ( ) ; for ( String item : comboItems ) { if ( item . contains ( tagToBeRemoved ) ) { fullTag = item ; break ; } } combo . setSelection ( fullTag ) ; new OkButton ( ) . click ( ) ; new FinishButton ( ) . click ( ) ; }
public void processOnVmStop ( Collection < Guid > vmIds ) { for ( final Guid vmId : vmIds ) { ThreadPoolUtil . execute ( new Runnable ( ) { @Override public void run ( ) { Backend . getInstance ( ) . runInternalAction ( VdcActionType . ProcessDownVm , new IdParameters ( vmId ) , ExecutionHandler . createInternalJobContext ( ) ) ; } } ) ; } }
public BatchServerInventoryView ( final ZkPathsConfig zkPaths , final CuratorFramework curator , final ObjectMapper jsonMapper , final Predicate < Pair < DruidServerMetadata , DataSegment > > defaultFilter ) { super ( log , zkPaths . getAnnouncementsPath ( ) , zkPaths . getLiveSegmentsPath ( ) , curator , jsonMapper , new TypeReference < Set < DataSegment > > ( ) { } ) ; this . defaultFilter = Preconditions . checkNotNull ( defaultFilter ) ; }
protected void configureEnvironment ( final ClusterEnvironment . Builder builder ) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder ( ) ; jacksonBuilder . serializationInclusion ( JsonInclude . Include . NON_NULL ) ; jacksonBuilder . modules ( new CouchbaseJacksonModule ( ) , new JsonValueModule ( ) ) ; ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . registerModule ( new CouchbaseJacksonModule ( ) ) ; objectMapper . registerModule ( new JsonValueModule ( ) ) ; builder . jsonSerializer ( JacksonJsonSerializer . create ( objectMapper ) ) ; }
public void processLockAcquire ( ) { log . debug ( "Process lock acquire event" ) ; isLeader = true ; // Regardless of the role of this node , on leadership acquisition // we shall query the topology provider to get the most up to date // topologyConfigId , which might have changed during our time as non - leaders // and for which we might have missed the change notification and update it on // the sink manager so the value is cached to filter messages upon receive . updateTopologyConfigId ( topologyDescriptor . getTopologyConfigId ( ) ) ; onLeadershipAcquire ( ) ; }
public DhcpInfo getDhcpInfo ( ) { enforceAccessPermission ( ) ; if ( mVerboseLoggingEnabled ) { mLog . info ( "getDhcpInfo uid = % " ) . c ( Binder . getCallingUid ( ) ) . flush ( ) ; } final DhcpInfo dhcpInfo = mClientModeImpl . syncGetDhcpInfo ( ) ; return dhcpInfo ; }
public void setUp ( ) throws Exception { MetadataStorageConnectorConfig config = jsonReadWriteRead ( " { " + "\"type\" : \"db\" , \n" + "\"segmentTable\" : \"segments\"\n" + " } " , MetadataStorageConnectorConfig . class ) ; connector = new TestDerbyConnector ( Suppliers . ofInstance ( config ) , Suppliers . ofInstance ( tablesConfig ) ) ; }
protected void sendHealthCheckResponse ( HttpServletResponse resp , HealthCheckResult result ) throws IOException { if ( result . healthy ) { resp . setStatus ( HttpServletResponse . SC_OK ) ; } else { resp . setStatus ( HttpServletResponse . SC_INTERNAL_SERVER_ERROR ) ; } sendResponse ( resp , result . toJson ( ) ) ; }
public DeviceInfoReturn attachManagedBlockStorageVolume ( Guid volumeId , Map < String , Object > connectionInfo ) { JsonRpcRequest request = new RequestBuilder ( "ManagedVolume . attach_volume" ) . withParameter ( "vol_id" , volumeId ) . withParameter ( "connection_info" , connectionInfo ) . build ( ) ; Map < String , Object > response = new FutureMap ( this . client , request ) ; Map < String , Object > info = ( Map < String , Object > ) response . get ( "info" ) ; return new DeviceInfoReturn ( info ) ; }
public static void addHeaders ( final HttpMessage httpMessage , final Header . . . headers ) { Validate . notNull ( httpMessage , "HttpMessage must not be null" ) ; for ( final Header header : headers ) { if ( MantaHttpHeaders . REQUEST_ID . equals ( header . getName ( ) ) ) { continue ; } httpMessage . addHeader ( header ) ; } }
public String getServletMapping ( ) { if ( " / " . equals ( this . path ) ) { return " / " ; } if ( this . path . endsWith ( " / " ) ) { return this . path + " * " ; } return this . path + " /* " ; }
private static InetAddress toInetAddress ( Slice ipAddress ) { try { return InetAddress . getByAddress ( ipAddress . getBytes ( ) ) ; } catch ( UnknownHostException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , "Invalid IP address binary : " + ipAddress . toStringUtf8 ( ) , e ) ; } }
public int hashCode ( ) { return Objects . hash ( sqls , sqlFirehoseDatabaseConnector , objectMapper , foldCase ) ; }
protected final List < ResultDocument > getSearchResults ( ExecutionContext ctx ) { return Collections . emptyList ( ) ; }
protected boolean isAppConfiguredInSourceServerXml ( String fileName ) { boolean bConfigured = false ; Set < String > locations = getAppConfigLocationsFromSourceServerXml ( ) ; if ( locations . contains ( fileName ) ) { log . debug ( "Application configuration is found in server . xml : " + fileName ) ; bConfigured = true ; } return bConfigured ; }
private DataCenter reInitializeDataCenter ( String dcId ) throws RuntimeException { log . debug ( "about to reinitialize dc" ) ; DataCenter dataCenter = new DataCenter ( ) ; dataCenter . setId ( dcId ) ; updateDataCenter ( dataCenter ) ; return dataCenter ; }
public void send ( Send request ) throws IOException { if ( ! connected ) { throw new ClosedChannelException ( ) ; } while ( ! request . isSendComplete ( ) ) { request . writeTo ( writeChannel ) ; } try { request . release ( ) ; } catch ( IOException e ) { throw e ; } }
public void canParseNamedCaptureGroupsFromPattern ( ) { assertThat ( RegexUtils . getNamedCaptureGroupsFromPattern ( "" ) , hasSize ( 0 ) ) ; assertThat ( RegexUtils . getNamedCaptureGroupsFromPattern ( " ( ? < user > .* ) " ) , contains ( "user" ) ) ; assertThat ( RegexUtils . getNamedCaptureGroupsFromPattern ( "Node / ( ? < poolName > .* ? ) / ( ? < poolMember > \\S + ) address ( ? < poolAddr > \\S + ) monitor status down . .* \\ ( slot ( ? < slotNum > [ 0 - 9 ] + ) \\ ) " ) , contains ( "poolName" , "poolMember" , "poolAddr" , "slotNum" ) ) ; }
public void testActivateAppUnknownApp ( ) throws Exception { App app = when ( mock ( App . class ) . isActive ( ) ) . thenReturn ( false ) . getMock ( ) ; MvcResult result = mockMvc . perform ( post ( AppsController . URI + " / id / activate" ) ) . andReturn ( ) ; assertEquals ( result . getResolvedException ( ) . getClass ( ) , UnknownAppException . class ) ; }
public void onReceive ( Context ctx , Intent intent ) { String action = intent . getAction ( ) ; switch ( action ) { case INSTALL_ACTION : // for play store devices only : // * invoke the receiver and open the page : // `adb shell am broadcast - a com . android . vending . INSTALL_REFERRER - n org . wikipedia . dev / org . wikipedia . analytics . InstallReceiver -- es "referrer" "referrer_url = https % 3A % 2F % 2Fen . wikipedia . org % 2Fwiki % 2FWombat & campaign_id = foo & install_id = bar"` // * invoke the receiver but don't open the app ( bad url ) : // `adb shell am broadcast - a com . android . vending . INSTALL_REFERRER - n org . wikipedia . dev / org . wikipedia . analytics . InstallReceiver -- es "referrer" "referrer_url = gibberish & campaign_id = foo & install_id = bar"` installReferrer ( ctx , intent ) ; break ; case Intent . ACTION_BOOT_COMPLETED : // `adb shell am broadcast - a android . intent . action . BOOT_COMPLETED` recordChannelId ( ctx ) ; NotificationPollService . start ( ctx . getApplicationContext ( ) ) ; break ; default : L . d ( "action = " + action ) ; break ; } }
private String getTokenToUse ( String authTokenCredentialId , String token ) { if ( ! StringUtils . isEmpty ( authTokenCredentialId ) ) { StringCredentials credentials = CredentialsObtainer . lookupCredentials ( authTokenCredentialId ) ; if ( credentials != null ) { logger . fine ( "Using Integration Token Credential ID . " ) ; return credentials . getSecret ( ) . getPlainText ( ) ; } } logger . fine ( "Using Integration Token . " ) ; return token ; }
void onGetBlobError ( Exception e , GetBlobOptions options ) { if ( options . getOperationType ( ) == GetBlobOptions . OperationType . BlobInfo ) { onGetBlobInfoError ( e ) ; } else { onGetBlobDataError ( e , options ) ; } }
public void setSelectedChapter ( @NonNull Chapter chapter ) { if ( mSelectedChapter != null ) { trackView ( ) ; } this . mSelectedChapter = chapter ; }
public void open ( GenericInputSplit split ) throws IOException { super . open ( split ) ; if ( serializableIter != null ) it = serializableIter ; else it = this . dataSet . iterator ( ) ; }
@Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; TextView tv = new TextView ( this ) ; tv . setText ( "Check logcat ! " ) ; setContentView ( tv ) ; printArgs ( "The" , "Quick" , "Brown" , "Fox" ) ; Log . i ( "Fibonacci" , "fibonacci's 4th number is " + fibonacci ( 4 ) ) ; Greeter greeter = new Greeter ( "Jake" ) ; Log . d ( "Greeting" , greeter . sayHello ( ) ) ; startSleepyThread ( ) ; }
private ContentValues ensureAfter ( ) { ContentValues values = mAfterContentValues ; if ( values == null ) { values = new ContentValues ( ) ; mAfterContentValues = values ; // also create mAfterKeys mAfterKeys = new HashSet < > ( ) ; } return values ; }
private Task < ? extends Serializable > createDbTask ( Database dbObj ) { // note that we do not set location - for repl load , we want that auto - created . CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc ( dbObj . getName ( ) , dbObj . getDescription ( ) , null , false , updateDbProps ( dbObj , context . dumpDirectory ) ; // If it exists , we want this to be an error condition . Repl Load is not intended to replace a // db . // TODO : we might revisit this in create - drop - recreate cases , needs some thinking on . DDLWork2 work = new DDLWork2 ( new HashSet < > ( ) , new HashSet < > ( ) , createDbDesc ) ; return TaskFactory . get ( work , context . hiveConf ) ; }
public long writeTo ( Write writeChannel ) throws IOException { long sizeWritten = 0 ; ReadableByteChannel readableByteChannel = Channels . newChannel ( streamToWrite ) ; sizeWritten = writeChannel . appendFrom ( readableByteChannel , sizeToWrite ) ; if ( sizeWritten != sizeToWrite ) { throw new IOException ( "Not able to write fully . Expected : " + sizeToWrite + " Actual : " + sizeWritten ) ; } return sizeWritten ; }
static void addSnapshotJarToClassPath ( File jarFile , Path intermediateClassPath , FileSystem fs , Job job ) throws IOException { // Snapshot jars are uploaded to non shared intermediate directory . final Path hdfsPath = new Path ( intermediateClassPath , jarFile . getName ( ) ) ; // existing is used to prevent uploading file multiple times in same run . if ( ! existing . contains ( hdfsPath ) ) { uploadJar ( jarFile , hdfsPath , fs ) ; existing . add ( hdfsPath ) ; } job . addFileToClassPath ( hdfsPath ) ; }
public void start ( ComponentContext context ) { super . start ( context ) ; configs . forEach ( this : : createStreamIfNotExists ) ; processorDescriptors . forEach ( this : : initProcessor ) ; if ( ! componentListenerAdded ) { // this must be done only once while start method can be called multiple time on hot reload Framework . getRuntime ( ) . getComponentManager ( ) . addListener ( new ComponentsLifeCycleListener ( ) ) ; componentListenerAdded = true ; } } public void stop ( ComponentContext context ) { super . stop ( context ) ; Framework . getRuntime ( ) . getComponentManager ( ) . removeListener ( this ) ; }
public void reportTaskStatus ( int id , Task . TaskStatus status , long miliseconds ) throws JMSException { TextMessage message = session . createTextMessage ( "task : " + propertiesBean . getProperty ( "engine . unique . id" ) + " : " + id + " : " + status + " : " + miliseconds ) ; producer . send ( message , DeliveryMode . PERSISTENT , 6 , 0 ) ; log . info ( " [ { } ] Task state { } sent to dispatcher . " , id , status ) ; }
public final BeanMetaData < T > getCurrentBeanMetaData ( ) { if ( currentBeanType != null && currentBeanMetaData == null ) { currentBeanMetaData = beanMetaDataManager . getBeanMetaData ( currentBeanType ) ; } return currentBeanMetaData ; }
protected Object handleObjectGet ( ) throws Exception { String workspace = getAttribute ( "workspace" ) ; ServiceInfo service ; if ( workspace != null ) { WorkspaceInfo ws = geoServer . getCatalog ( ) . getWorkspaceByName ( workspace ) ; service = geoServer . getService ( ws , clazz ) ; } else { service = geoServer . getService ( clazz ) ; } if ( service == null ) { throw new RestletException ( "Service for workspace " + workspace + " does not exist" , Status . CLIENT_ERROR_NOT_FOUND ) ; } return service . clone ( ) ; }
private String buildHashedPayload ( HttpRequest request ) { String hashedPayload = "" ; try { byte [ ] unhashedBytes = request . getPayload ( ) == null ? "" . getBytes ( ) : ByteStreams . toByteArray ( request . getPayload ( ) . getInput ( ) ) ; return sha256 ( unhashedBytes ) ; } catch ( IOException e ) { throw new HttpException ( "Error signing request" , e ) ; } return hashedPayload ; }
public Map < Long , EventDefinition > getEventDefs ( StreamInput id ) { return StreamInputReader . getEventDefs ( id ) ; }
public void testSetTitleIconStartMargin ( ) throws Throwable { int startMargin = 100 ; int navIconWidth = 100 ; mActivityRule . runOnUiThread ( ( ) - > { mToolbar . setNavigationIconContainerWidth ( navIconWidth ) ; mToolbar . setTitleIcon ( android . R . drawable . sym_def_app_icon ) ; mToolbar . setTitleIconStartMargin ( startMargin ) ; } ) ; onView ( withId ( R . id . title_icon ) ) . check ( matches ( withLeft ( navIconWidth + startMargin ) ) ) ; }
Publisher < CoreEvent > getDownstreamPublisher ( ) { return downstreamFlux . compose ( downstreamPublisher - > subscriberContext ( ) . flatMapMany ( downstreamContext - > downstreamPublisher . doOnSubscribe ( s - > { innerFlux . subscriberContext ( downstreamContext ) . subscribe ( ) ; upstreamFlux . subscriberContext ( downstreamContext ) . subscribe ( ) ; } ) ) ) ; }
public void onFailure ( Throwable t ) { log . error ( "Unable to RefreshCapabilities : { } " , ExceptionUtils . getRootCauseMessage ( t ) ) ; log . debug ( "Exception" , t ) ; postProcessRefresh ( false , releaseLock . getAndSet ( false ) ) ; }
public CountsComputer ( long lastCommittedTransactionId , NodeStore nodes , RelationshipStore relationships , int highLabelId , int highRelationshipTypeId ) { this ( lastCommittedTransactionId , nodes , relationships , highLabelId , highRelationshipTypeId , SilentMigrationProgressMonitor . NO_OP_SECTION ) ; }
public ArrayLiteralTreeImpl newArrayLiteralWithElidedElements ( List < InternalSyntaxToken > commaTokens ) { return new ArrayLiteralTreeImpl ( commaTokens ) ; }
public void onSuccess ( ) { log . debug ( "Command succeeded , releasing macs { } . " , super . macs ) ; releaseMacs ( ) ; }
public SubresourceParameter ( String value ) { super ( "t" , value ) ; }
private boolean isExpired ( long expirationTimeInMs , long referenceTimeInMs ) { return expirationTimeInMs != Utils . Infinite_Time && expirationTimeInMs < referenceTimeInMs ; }
public void testEncodeSpatial ( ) throws Exception { Document doc = encode ( FilterMockData . intersects ( ) , FES . Filter ) ; assertEquals ( "fes : Filter" , doc . getDocumentElement ( ) . getNodeName ( ) ) ; Element e = getElementByQName ( doc , FES . Intersects ) ; assertNotNull ( e ) ; LOGGER . info ( e ) ; assertNotNull ( getElementByQName ( e , FES . ValueReference ) ) ; assertNotNull ( getElementByQName ( e , GML . Point ) ) ; }
public View getTopContainer ( final View view ) { View topView = null ; EObject container = null ; if ( view != null ) { container = view . eContainer ( ) ; if ( isStereotypeCompartment ( container ) || isStereotypeBrace ( container ) || isStereotypeLabel ( container ) ) { container = container . eContainer ( ) ; } if ( container instanceof View ) { topView = ( View ) container ; } } return topView ; }
public StreamDeployer ( ZooKeeperConnection zkConnection , StreamDefinitionRepository repository , StreamRepository streamRepository , XDParser parser ) { super ( zkConnection , repository , streamRepository , parser , stream ) ; this . zkConnection = zkConnection ; this . parser = parser ; updateModuleDefinitions ( ) ; }
public String toString ( ) { Object oScope = scope ; Object oKey = key ; if ( oScope instanceof MarshalledValue ) { oScope = ( ( MarshalledValue ) oScope ) . get ( ) ; } if ( oKey instanceof MarshalledValue ) { oKey = ( ( MarshalledValue ) oKey ) . get ( ) ; } return "ScopedKey { scope = " + oScope + " , key = " + oKey + " } " ; }
static String left ( String str , int len ) { if ( len > 0 ) { return str . substring ( 0 , Math . min ( len , str . length ( ) ) ) ; } final int finalLen = str . length ( ) + len ; return finalLen > 0 ? str . substring ( 0 , finalLen ) : "" ; }
public ResponseEntity addRole ( @RequestBody @Validated RoleForm roleForm , BindingResult bindingResult , @RequestHeader ( HttpHeaders . ACCEPT ) String acceptHeader ) { if ( bindingResult . hasErrors ( ) ) { throw new RequestBodyValidationException ( FAILED_ADD_ROLE , bindingResult ) ; } // Convert RoleForm to Role Role role = conversionService . convert ( roleForm , Role . class ) ; return processConfig ( config - > addRole ( config , role ) , ( ) - > SUCCESSFUL_ADD_ROLE , acceptHeader ) ; }
public AbstractJsonGetter ( Getter parent ) { super ( parent ) ; }
NumaValidator ( VdsNumaNodeDao vdsNumaNodeDao ) { this . vdsNumaNodeDao = Objects . requireNonNull ( vdsNumaNodeDao ) ; }
public List < ClientModel > getClients ( ) { return session . realms ( ) . getClients ( this , null , null ) ; }
public List < String > getTokens ( ) { List < String > ret = new ArrayList < > ( this . tokenCount ) ; for ( int i = 0 ; i < this . tokenCount ; i ++ ) { ret . add ( getToken ( i ) ) ; } return ret ; }
public EndpointAffinity ( final DrillbitEndpoint endpoint , final double affinity , final boolean mandatory , final int maxWidth ) { Preconditions . checkArgument ( maxWidth >= 1 , "MaxWidth for given endpoint should be at least one . " ) ; this . endpoint = endpoint ; this . affinity = affinity ; this . mandatory = mandatory ; this . maxWidth = maxWidth ; }
public void run ( ) { LOG . trace ( "BacklogMetricEmitter running for entities" ) ; executor = new ScheduledThreadPoolExecutor ( 10 ) ; List < Future > futures = new ArrayList < > ( ) ; try { for ( Entity entity : entityBacklogs . keySet ( ) ) { futures . add ( executor . submit ( new BacklogCalcService ( entity , entityBacklogs . get ( entity ) ) ) ) ; } waitForFuturesToComplete ( futures ) ; } finally { executor . shutdown ( ) ; } }
public void onBackPressed ( ) { projectListFragment . cancelLoadProjectTask ( ) ; super . onBackPressed ( ) ; }
private void changeStatus ( DestroyVmVDSCommandParameters parameters , VM curVm ) { // do the state transition only if that VM is really running on SRC if ( getParameters ( ) . getVdsId ( ) . equals ( curVm . getRunOnVds ( ) ) ) { ResourceManager . getInstance ( ) . InternalSetVmStatus ( curVm , parameters . getGracefully ( ) ? VMStatus . PoweringDown : VMStatus . Down , null ) ; } }
private TransactionQuery ( Selection selection , Publisher publisher , Optional < String > contentUri , Optional < String > transactionId , Optional < TransactionStateType > transactionStatus ) { this . selection = checkNotNull ( selection ) ; this . publisher = checkNotNull ( publisher ) ; this . contentUri = checkNotNull ( contentUri ) ; this . transactionId = checkNotNull ( transactionId ) ; this . transactionStatus = checkNotNull ( transactionStatus ) ; }
private static boolean appendPort ( final String scheme , final int port ) { return port > - 1 && ( ( HTTP . equalsIgnoreCase ( scheme ) && port != 80 ) || ( HTTPS . equalsIgnoreCase ( scheme ) && port != 443 ) ) ; }
public void addPage ( BenchmarkData data ) { int pageCount = data . getPageCount ( ) ; PartitionedOutputOperator operator = data . createPartitionedOutputOperator ( ) ; for ( int i = 0 ; i < pageCount ; i ++ ) { operator . addInput ( data . getDataPage ( ) ) ; } operator . finish ( ) ; }
private Element timeZone ( ) { return textElement ( TIMEZONE , entity . getTimeZone ( ) ) ; }
private DbUser getDbUserForPrincipalName ( String principalName , String authzName ) { ExtMap principalRecord = AuthzUtils . fetchPrincipalRecord ( EngineExtensionsManager . getInstance ( ) . getExtensionByName ( authzName ) , principalName , false , false ) ; if ( principalRecord == null ) { throw new RuntimeException ( String . format ( "Unable to find principal % s in domain ' % s'" , principalName , authzName ) ) ; } return new DbUser ( DirectoryUtils . mapPrincipalRecordToDirectoryUser ( authzName , principalRecord ) ) ; }
public PatternScatterGraphView ( ) { super ( ID ) ; this . addPartPropertyListener ( event - > { if ( event . getProperty ( ) . equals ( TmfXmlStrings . XML_LATENCY_OUTPUT_DATA ) ) { Object newValue = event . getNewValue ( ) ; if ( newValue instanceof String ) { String data = ( String ) newValue ; fViewInfo . setViewData ( data ) ; setPartName ( fViewInfo . getLabel ( ) ) ; loadLatencyView ( ) ; } } } ) ; }
public void setMaxSpeed ( double maxSpeed ) { if ( this . maxSpeed == null || maxSpeed > this . maxSpeed ) { this . maxSpeed = maxSpeed ; } }
Object getValue ( Object obj ) { throw new HazelcastException ( "Path agnostic value extraction is not supported" ) ; }
public boolean apply ( Resource resource ) { Predicate < EObject > hasOuterRef = new EObjectHasReferencesTo ( modifiedResources ) ; return Iterators . any ( EcoreUtil . < EObject > getAllProperContents ( resource , false ) , hasOuterRef ) ; }
private URI endSessionEndpoint ( OAuth2AuthenticationToken token ) { String registrationId = token . getAuthorizedClientRegistrationId ( ) ; ClientRegistration clientRegistration = this . clientRegistrationRepository . findByRegistrationId ( registrationId ) ; if ( clientRegistration == null ) { return null ; } Object endSessionEndpoint = clientRegistration . getProviderDetails ( ) . getConfigurationMetadata ( ) . get ( "end_session_endpoint" ) ; URI result = null ; if ( endSessionEndpoint != null ) { result = URI . create ( endSessionEndpoint . toString ( ) ) ; } return result ; }
public void testQuantileAtValueBigint ( ) { QuantileDigest qdigest = new QuantileDigest ( 1 ) ; addAll ( qdigest , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 ) ; functionAssertions . assertFunction ( format ( "quantile_at_value ( CAST ( X' % s' AS qdigest ( bigint ) ) , 20 ) " , toHexString ( qdigest ) ) , DOUBLE , 1 . 0 ) ; functionAssertions . assertFunction ( format ( "quantile_at_value ( CAST ( X' % s' AS qdigest ( bigint ) ) , 6 ) " , toHexString ( qdigest ) ) , DOUBLE , 0 . 6 ) ; functionAssertions . assertFunction ( format ( "quantile_at_value ( CAST ( X' % s' AS qdigest ( bigint ) ) , - 1 ) " , toHexString ( qdigest ) ) , DOUBLE , 0 . 0 ) ; }
public boolean isOverutilized ( ) { return memoryManager . isOverutilized ( ) ; }
public String explain ( ) throws CouchbaseLiteException { check ( ) ; synchronized ( getDatabase ( ) . getLock ( ) ) { return c4query . explain ( ) ; } }
public boolean isObjectFactory ( ) { return false ; }
public StandardRotationPolicy ( DelegatingSessionFactory < ? > factory , List < KeyDirectory > keyDirectories , boolean fair ) { Assert . notNull ( factory , "factory cannot be null" ) ; Assert . notNull ( keyDirectories , "keyDirectories cannot be null" ) ; Assert . isTrue ( keyDirectories . size ( ) > 0 , "At least one KeyDirectory is required" ) ; this . factory = factory ; this . keyDirectories . addAll ( keyDirectories ) ; this . fair = fair ; this . iterator = this . keyDirectories . iterator ( ) ; }
public void add ( EntityType entity ) { createAcl ( entity ) ; validateAddAllowed ( entity ) ; super . add ( entity ) ; }
private ArtifactCoordinates getArtifactCoordinates ( Path p ) throws IOException { return RepositoryFiles . readCoordinates ( ( RepositoryPath ) p ) ; }
public < T extends ActivityNode > IPinUpdater < T > instantiate ( T node ) { IPinUpdater < T > updater = null ; if ( node instanceof CallBehaviorAction ) { updater = ( IPinUpdater < T > ) new CallBehaviorActionPinUpdater ( ) ; } else if ( node instanceof CallOperationAction ) { updater = ( IPinUpdater < T > ) new CallOperationActionPinUpdater ( ) ; } else if ( node instanceof SendSignalAction ) { updater = ( IPinUpdater < T > ) new SendSignalActionPinUpdater ( ) ; } return updater ; }
public boolean supportsScroll ( ) { StorageConfiguration conf = coreFeature . getStorageConfiguration ( ) ; // DBS mem and marklogic are not yet supported return conf . isDBSMongoDB ( ) || conf . isVCS ( ) ; }
public void onResume ( ) { super . onResume ( ) ; addCachedDevices ( ) ; if ( mLocalAdapter . getBluetoothState ( ) != BluetoothAdapter . STATE_ON ) { removeAllDevices ( ) ; } if ( mStartScanOnResume ) { mLocalAdapter . startScanning ( true ) ; mStartScanOnResume = false ; } }
protected void upgradeNexusVersion ( ) throws IOException { final String currentVersion = checkNotNull ( applicationStatusSource . getSystemStatus ( ) . getVersion ( ) ) ; final String previousVersion = getConfiguration ( ) . getNexusVersion ( ) ; if ( currentVersion . equals ( previousVersion ) ) { setInstanceUpgraded ( false ) ; } else { setInstanceUpgraded ( true ) ; getConfiguration ( ) . setNexusVersion ( currentVersion ) ; storeConfiguration ( ) ; } }
public DefDeclaration ( String name , Type returnType , List < NameBinding > argNames , TypedAST body , boolean isClassDef , FileLocation location ) { this ( name , returnType , argNames , body , isClassDef , location , false ) ; }
public Waiter < HeadBucketRequest > bucketNotExists ( ) { return new WaiterBuilder < HeadBucketRequest , HeadBucketResult > ( ) . withSdkFunction ( new HeadBucketFunction ( client ) ) . withAcceptors ( new HttpFailureStatusAcceptor < HeadBucketResult > ( 404 , WaiterState . SUCCESS ) ) . withDefaultPollingStrategy ( new PollingStrategy ( new MaxAttemptsRetryStrategy ( 20 ) , new FixedDelayStrategy ( 5 ) ) ) . withExecutorService ( executorService ) . build ( ) ; }
public TextArea createWidget ( ) { final TextArea textArea = GWT . create ( TextArea . class ) ; textArea . addKeyDownHandler ( keyDownEvent - > { final int keyCode = keyDownEvent . getNativeKeyCode ( ) ; if ( keyCode == KeyCodes . KEY_TAB ) { destroyResources ( ) ; gridPanel . setFocus ( true ) ; keyDownEvent . preventDefault ( ) ; } keyDownEvent . stopPropagation ( ) ; } ) ; textArea . addMouseDownHandler ( DomEvent : : stopPropagation ) ; return textArea ; }
public void testHierarchyView ( ) { DockerImagesTab imageTab = openDockerImagesTab ( ) ; buildImage ( IMAGE_TEST_BUILD , DOCKERFILE_FOLDER , imageTab ) ; DockerImageHierarchyTab hierarchyTab = openDockerImageHierarchyTab ( ) ; List < TreeItem > treeItems = hierarchyTab . getTreeItems ( ) ; compareTextInFirstNode ( treeItems , "alpine : 3 . 3" ) ; List < TreeItem > treeItems2 = treeItems . get ( 0 ) . getItems ( ) ; compareTextInFirstNode ( treeItems2 , IMAGE_TEST_BUILD + NAME_TAG_SEPARATOR + IMAGE_TAG_LATEST ) ; }
private void doBadOffsetInputTest ( String name , long offset ) { try { new Offset ( name , offset ) ; fail ( "Should have thrown because one of the inputs is invalid" ) ; } catch ( IllegalArgumentException e ) { // expected . } }
private void enablePhiro ( ) { SharedPreferences sharedPreferences = PreferenceManager . getDefaultSharedPreferences ( this ) ; if ( ! sharedPreferences . getBoolean ( Constants . PHIRO_INITIALIZED , false ) ) { BaseSettingsActivity . setPhiroSharedPreferenceEnabled ( this , true ) ; sharedPreferences . edit ( ) . putBoolean ( Constants . PHIRO_INITIALIZED , true ) . apply ( ) ; } }
private void checkReturnedValue ( ReturnStatementTree tree , String nonNullAnnotation ) { SymbolicValue returnedValue = programState . peekValue ( ) ; Constraint constraint = programState . getConstraint ( returnedValue ) ; if ( constraint == null ) { reportIssue ( tree , "This method''s return value is marked \" { 0 } \" but null may be returned . " , nonNullAnnotation ) ; } else if ( constraint . isNull ( ) ) { reportIssue ( tree , "This method''s return value is marked \" { 0 } \" but null is returned . " , nonNullAnnotation ) ; } }
private void verifyEditResultCode ( EditingResult result ) { assertThat ( result . getResult ( ) , is ( SUCCESS ) ) ; }
public EnginesPreferencePage ( ) { super ( ) ; }
public List < AmbryReplica > getReplicaIds ( ) { return clusterManagerCallback . getReplicaIdsForPartition ( this ) . stream ( ) . map ( r - > ( AmbryReplica ) r ) . collect ( Collectors . toList ( ) ) ; }
private String blockingSSLConnect ( int socketBufSize ) throws IOException { String connectionId = selector . connect ( new InetSocketAddress ( "localhost" , server . port ) , socketBufSize , socketBufSize , PortType . SSL ) ; while ( ! selector . connected ( ) . contains ( connectionId ) ) { System . out . println ( "here" ) ; selector . poll ( 10000L ) ; } return connectionId ; }
public EDDifferentialPrivacy ( double epsilon , double delta , DataGeneralizationScheme generalization ) { this ( epsilon , delta ) ; this . generalization = generalization ; }
private final String getSessionIndex ( Assertion subjectAssertion ) { List < AuthnStatement > authnStatements = subjectAssertion . getAuthnStatements ( ) ; if ( authnStatements != null && authnStatements . size ( ) > 0 ) { AuthnStatement statement = authnStatements . get ( 0 ) ; return statement . getSessionIndex ( ) ; } return null ; }
public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } MethodTree method = ( MethodTree ) tree ; if ( method . block ( ) == null || ! INPUT_STREAM_READ . matches ( method ) ) { return ; } method . accept ( new ReturnStatementVisitor ( ) ) ; }
protected void onFinishInflate ( ) { super . onFinishInflate ( ) ; View . inflate ( getContext ( ) , R . layout . merge_login_view , this ) ; loginButton = Views . findById ( this , R . id . sign_in_button ) ; loginButton . setSize ( SignInButton . SIZE_WIDE ) ; }
private static int encode ( int bucketIndex , int value ) { return ( bucketIndex < < VALUE_BITS ) | value ; }
public void onUberfireDocksInteractionEvent ( @Observes final UberfireDocksInteractionEvent uberfireDocksInteractionEvent ) { if ( isUberfireDocksInteractionEventToManage ( uberfireDocksInteractionEvent ) && ! TestToolsPresenter . IDENTIFIER . equals ( uberfireDocksInteractionEvent . getTargetDock ( ) . getIdentifier ( ) ) ) { populateRightDocks ( uberfireDocksInteractionEvent . getTargetDock ( ) . getIdentifier ( ) ) ; } }
public String getDocType ( ) { if ( Objects . isNull ( docType ) ) { List < SelectItem > allDocTypes = getAllDoctypes ( ) ; for ( SelectItem item : allDocTypes ) { if ( "Monograph" . equals ( item . getValue ( ) ) ) { setDocType ( ( String ) item . getValue ( ) ) ; return docType ; } } setDocType ( ( String ) allDocTypes . get ( 0 ) . getValue ( ) ) ; } return docType ; }
public boolean shouldUseCommitTemplate ( ) { return Activator . getDefault ( ) . getPreferenceStore ( ) . getBoolean ( UIPreferences . COMMIT_DIALOG_MESSAGE_TEMPLATE ) && getCommitMessage ( ) == null && getCommitTemplate ( ) . isPresent ( ) ; }
public void waitUntilAllBlocked ( ) { try { _blockersDoneLatch . await ( ) ; } catch ( InterruptedException ex ) { } }
private static boolean hasMatrixParam ( List < PathSegment > pathSegments , String param ) { if ( pathSegments != null ) for ( PathSegment segement : pathSegments ) { MultivaluedMap < String , String > matrixParams = segement . getMatrixParameters ( ) ; if ( matrixParams != null && ! matrixParams . isEmpty ( ) ) for ( String key : matrixParams . keySet ( ) ) { if ( key . equals ( param ) ) return true ; } } return false ; }
public void setAttached ( boolean attached ) { this . attached = attached ; }
public void visited ( RevObject o ) { lowestDepthVisited . put ( o , Integer . valueOf ( walk . getTreeDepth ( ) ) ) ; }
private List < Object [ ] > convertIntegerToLong ( List < Object [ ] > list , int index ) { for ( Object [ ] item : list ) { item [ index ] = new Long ( ( long ) item [ index ] ) ; } return list ; }
private void flushAll ( ) throws AuthException { for ( DynamicMap . Entry < Cache < ? , ? > > e : cacheMap ) { CacheResource cacheResource = new CacheResource ( e . getPluginName ( ) , e . getExportName ( ) , e . getProvider ( ) ) ; if ( FlushCache . WEB_SESSIONS . equals ( cacheResource . getName ( ) ) ) { continue ; } flushCache . get ( ) . apply ( cacheResource , null ) ; } }
public static Map < String , IAnalysisModule > getAnalysisModules ( ) { if ( fAnalysisModules . isEmpty ( ) ) { TmfAnalysisType analysis = TmfAnalysisType . getInstance ( ) ; List < IAnalysisModule > modules = analysis . getAnalysisModules ( ) ; for ( IAnalysisModule module : modules ) { fAnalysisModules . add ( module ) ; } } return getExecutableModules ( ) ; }
void validateValueParameter ( String name , Object value ) { Class < ? extends IValueValidator > validators [ ] = wrappedParameter . validateValueWith ( ) ; if ( validators != null && validators . length > 0 ) { for ( final Class < ? extends IValueValidator > validator : validators ) { validateValueParameter ( validator , name , value ) ; } } }
public < C > Stream < Match > match ( Object object , Captures captures , C context ) { if ( previous . isPresent ( ) ) { return previous . get ( ) . match ( object , captures , context ) . flatMap ( match - > accept ( object , match . captures ( ) , context ) ) ; } else { return accept ( object , captures , context ) ; } }
public ArticlePageObject savePage ( ) { waitForElementInViewPort ( editSummary ) ; waitForElementInViewPort ( reviewChangesButton ) ; waitForElementVisibleByElement ( savePanel ) ; publishButton . click ( ) ; return new ArticlePageObject ( driver ) ; }
public void executeCommand ( CommandSender sender , List < String > arguments ) { // Get the list of banned players Set < OfflinePlayer > bannedPlayers = bukkitService . getBannedPlayers ( ) ; Set < String > namedBanned = new HashSet < > ( bannedPlayers . size ( ) ) ; for ( OfflinePlayer offlinePlayer : bannedPlayers ) { namedBanned . add ( offlinePlayer . getName ( ) ) ; } purgeService . purgePlayers ( sender , namedBanned , bannedPlayers . toArray ( new OfflinePlayer [ bannedPlayers . size ( ) ] ) ) ; }
static Keyspace getKeyspace ( ) { return keyspace ; }
void setNewElementYPosition ( final Element elementReference , final Element newElement ) { final int referencePosition = getDndListComponent ( ) . getPositionY ( elementReference ) ; getDndListComponent ( ) . setPositionY ( newElement , referencePosition ) ; }
public void layoutTopRight ( CTabFolder ctf ) { Composite trComp = getTRComposite ( ctf ) ; if ( trComp . getChildren ( ) . length > 0 ) { trComp . setVisible ( true ) ; ctf . setTopRight ( trComp , SWT . RIGHT | SWT . WRAP ) ; } else { ctf . setTopRight ( null ) ; trComp . setVisible ( false ) ; } trComp . pack ( ) ; }
ByteBuf buffer ( ) throws IOException { if ( buf == null ) { buf = Netty4Utils . toByteBuf ( context . get ( ) ) ; context = null ; assert context == null ; } return buf ; }
public String getName ( ) { String name = super . getName ( ) ; if ( name == null || name . isEmpty ( ) ) { return "" ; } else { return name ; } }
private void verifyInvalidValueSize ( IndexValue value , String logSegmentName ) { try { int capacity = TestUtils . RANDOM . nextInt ( value . getBytes ( ) . capacity ( ) ) ; ByteBuffer invalidValue = ByteBuffer . allocate ( capacity ) ; invalidValue . put ( value . getBytes ( ) . array ( ) , 0 , capacity ) ; new IndexValue ( logSegmentName , invalidValue , version ) ; } catch ( IllegalArgumentException e ) { fail ( "Contruction of IndexValue expected to fail with invalid byte buffer capacity of " + invalidValue . capacity ( ) ) ; } }
void dispose ( ) { if ( semanticResourcesUpdater != null ) { semanticResourcesUpdater . dispose ( ) ; semanticResourcesUpdater = null ; } session = null ; }
public void deleteByContentType ( final ContentTypeIf type ) throws DotDataException { new DotConnect ( ) . setSQL ( sql . DELETE_RELATIONSHIP_BY_PARENT_OR_CHILD_INODE ) . addParam ( type . id ( ) ) . addParam ( type . id ( ) ) . loadResults ( ) ; }
public int getUniqueNotificationId ( ) { if ( uniqueNotificationIdCounter == null ) { uniqueNotificationIdCounter = new AtomicInteger ( 0 ) ; } return uniqueNotificationIdCounter . incrementAndGet ( ) ; }
public HllSketchMergeBufferAggregator ( final ColumnValueSelector < HllSketch > selector , final int lgK , final TgtHllType tgtHllType , final int size ) { this . selector = selector ; this . lgK = lgK ; this . tgtHllType = tgtHllType ; this . size = size ; this . emptyUnion = new byte [ size ] ; // noinspection ResultOfObjectAllocationIgnored ( Union writes to "emptySketch" as a side effect of construction ) new Union ( lgK , WritableMemory . wrap ( emptyUnion ) ) ; }
public void checkIPAdress ( ) { Set < ConstraintViolation < IPAdress > > validate = validator . validate ( new IPAdress ( address ) ) ; assertEquals ( expectedResult , validate . isEmpty ( ) ) ; }
public void onItemSelected ( AdapterView < ? > parent , View view , int pos , long id ) { try { // Ignore first call , which comes from onCreate ( ) if ( currentFormat != null ) calc ( ) ; } catch ( GeopointException e ) { context . showToast ( e . getMessage ( ) ) ; spinner . setSelection ( currentFormat . ordinal ( ) ) ; return ; } currentFormat = coordInputFormatEnum . fromInt ( pos ) ; settings . setCoordInputFormat ( currentFormat ) ; updateGUI ( ) ; }
public boolean visitTableWithType ( String schemaName , String tableName , TableType type ) { Preconditions . checkNotNull ( type , "Error . Type information for table % s . % s provided is null . " , schemaName , tableName ) ; records . add ( new Records . Table ( IS_CATALOG_NAME , schemaName , tableName , type . toString ( ) ) ) ; return true ; }
public boolean add ( XWikiAttachment attachment ) { return set ( attachment ) != attachment ; }
public String toString ( ) { return Objects . toStringHelper ( this ) . add ( "capacityBytes" , mCapacityBytes ) . add ( "capacityBytesOnTiers" , mCapacityBytesOnTiers ) . add ( "freeBytes" , mFreeBytes ) . add ( "liveWorkerNum" , mLiveWorkerNum ) . add ( "lostWorkerNum" , mLostWorkerNum ) . add ( "usedBytes" , mUsedBytes ) . add ( "usedBytesOnTiers" , mUsedBytesOnTiers ) . toString ( ) ; }
public static final void assertJenkinsNotInQuietMode ( final JenkinsRule j ) { await ( ) . pollInterval ( 250 , TimeUnit . MILLISECONDS ) . atMost ( 10 , TimeUnit . SECONDS ) . until ( ( ) - > ! j . jenkins . getQueue ( ) . isBlockedByShutdown ( task ) ) ; }
private TreeLayer getTreeLayer ( ) throws UnknownError { NatTable natTable = ( NatTable ) getTableManager ( ) . getAdapter ( NatTable . class ) ; ILayer layer = natTable . getLayer ( ) ; if ( layer instanceof PapyrusGridLayer ) { PapyrusGridLayer gridLayer = ( PapyrusGridLayer ) layer ; ILayer rowLayer = gridLayer . getRowHeaderLayer ( ) ; if ( rowLayer instanceof RowHeaderHierarchicalLayerStack ) { return ( ( RowHeaderHierarchicalLayerStack ) rowLayer ) . getTreeLayer ( ) ; } } throw new UnknownError ( "TreeLayer has not been found" ) ; // $NON - NLS - 1$ }
public boolean equals ( @Nullable Object obj ) { if ( ! ( obj instanceof DataDrivenValueSelf ) ) { return false ; } return true ; }
public void differentUrlForPostsAndVideo ( ) { SearchInput searchInputSubmit = new SearchInput ( ) . searchInputSubmit ( ) ; String URL = driver . getCurrentUrl ( ) ; Assert . assertEquals ( URL , "http :/ / qa . fandom . wikia . com / ? s = TEST" ) ; SearchInput postsResult = new SearchInput ( ) . searchResultsPosts ( ) ; String postUrl = driver . getCurrentUrl ( ) ; SearchInput videosResult = new SearchInput ( ) . searchResultsVideos ( ) ; String videoUrl = driver . getCurrentUrl ( ) ; Assert . assertNotEquals ( postUrl , videoUrl ) ; }
String convert ( Blob blob ) { if ( blob . getLength ( ) == 0L ) { return "" ; } try ( InputStream stream = blob . getStream ( ) ) { Xml2TextHandler xml2text = new Xml2TextHandler ( ) ; return xml2text . parse ( stream ) ; } catch ( IOException | SAXException | ParserConfigurationException e ) { throw new ConversionException ( "Error during XML2Text conversion" , e ) ; } }
// Visible for testing static void validateHeaderConfigAction ( String action ) { if ( ! HEADER_ACTIONS . stream ( ) . anyMatch ( action : : equalsIgnoreCase ) ) { throw new ConfigException ( String . format ( "Invalid header config action : ' % s' . " + "Expected one of % s" , action , HEADER_ACTIONS ) ) ; } }
private String getVariableLabel ( VariableMetadata variableMetadata ) { if ( variableMetadata . getName ( ) . startsWith ( CASE_VARIABLE_PREFIX ) ) { return translationService . getValue ( CASE_VARIABLE_LABEL_PREFIX ) + " " + variableMetadata . getName ( ) . substring ( CASE_VARIABLE_PREFIX . length ( ) ) ; } else { return variableMetadata . getName ( ) ; } }
private Long findFreeId ( ) { while ( personRepository . existsById ( lastId ) ) { // New person lastId ++ ; } return lastId ; }
public void cameraDeviceCallsAreForwardedToCallback ( ) throws InterruptedException { Assume . assumeTrue ( mCameraId != null ) ; mUseCase . addStateChangeListener ( mCameraRepository . getCamera ( getCameraIdForLensFacingUnchecked ( mConfig . getLensFacing ( ) ) ) ) ; mUseCase . doNotifyActive ( ) ; mCameraRepository . onGroupActive ( mUseCaseGroup ) ; // Wait for the CameraDevice . onOpened callback . mUseCase . mDeviceStateCallback . waitForOnOpened ( 1 ) ; mCameraRepository . onGroupInactive ( mUseCaseGroup ) ; // Wait for the CameraDevice . onClosed callback . mUseCase . mDeviceStateCallback . waitForOnClosed ( 1 ) ; }
public String getDescription ( ) { return getStatuteType ( ) . getName ( ) . getContent ( ) + ( studentStatute instanceof SeniorStatute ? ( " ( " + ( ( SeniorStatute ) studentStatute ) . getRegistration ( ) . getDegree ( ) . getPresentationName ( ) + " ) " ) : "" ) ; }
protected boolean teleportToSpawn ( ) { Location target = server . getWorlds ( ) . get ( 0 ) . getSpawnLocation ( ) ; EntityPortalEvent event = EventFactory . callEvent ( new EntityPortalEvent ( this , location . clone ( ) , target , null ) ) ; if ( event . isCancelled ( ) ) { return false ; } target = event . getTo ( ) ; teleport ( target ) ; return true ; }
public String [ ] getGroupFilters ( ) { String [ ] result = new String [ 0 ] ; IAnnotation before = m_annotationFinder . findAnnotation ( getConstructorOrMethod ( ) , IBeforeMethod . class ) ; if ( before != null ) { result = ( ( ConfigurationAnnotation ) before ) . getGroupFilters ( ) ; } return result ; }
protected PageCacheNumberArray ( PagedFile pagedFile , int entrySize , long length , long defaultValue , long base ) throws IOException { this . pagedFile = pagedFile ; this . entrySize = entrySize ; this . entriesPerPage = pagedFile . pageSize ( ) / entrySize ; this . length = length ; this . defaultValue = defaultValue ; this . base = base ; try ( PageCursor cursorToSetLength = pagedFile . io ( 0 , PF_SHARED_WRITE_LOCK ) ) { setLength ( cursorToSetLength , length ) ; } if ( defaultValue != 0 ) { setDefaultValue ( defaultValue ) ; } }
public InterpretedPageProjectionOutput ( DriverYieldSignal yieldSignal , Page page , SelectedPositions selectedPositions ) { this . yieldSignal = requireNonNull ( yieldSignal , "yieldSignal is null" ) ; this . blocks = requireNonNull ( page , "page is null" ) . getBlocks ( ) ; this . selectedPositions = requireNonNull ( selectedPositions , "selectedPositions is null" ) ; this . nextIndexOrPosition = selectedPositions . getOffset ( ) ; if ( selectedPositions . isList ( ) ) { this . positions = selectedPositions . getPositions ( ) ; } else { this . positions = null ; } }
public String getDicomViewerUrl ( Study study ) { if ( study == null ) throw new IllegalArgumentException ( "study cannot be null" ) ; else if ( study . getStudyInstanceUid ( ) == null ) throw new IllegalArgumentException ( "studyInstanceUid cannot be null" ) ; return study . isCompleted ( ) ? this . radiologyProperties . getDicomViewerUrl ( ) + "studyUID = " + study . getStudyInstanceUid ( ) : null ; }
private Declaration getDeclarationCorrespondingToXpath ( Pattern pattern , boolean isXPath , Constraint constraint ) { Declaration declCorrXpath = null ; if ( ! isXPath && pattern . hasXPath ( ) ) { Declaration xPathDecl = pattern . getXPathDeclaration ( ) ; if ( xPathDecl != null ) { for ( Declaration decl : constraint . getRequiredDeclarations ( ) ) { if ( xPathDecl . equals ( decl ) ) { declCorrXpath = decl ; break ; } } } } return declCorrXpath ; }
public void setQueryTimeout ( int seconds ) throws AlreadyClosedSqlException , SQLException { throwIfClosed ( ) ; super . setQueryTimeout ( seconds ) ; }
private List < Disk > manualAggregateSnapshots ( ) { List < Disk > param = new ArrayList < > ( ) ; DiskImage diskWithSnaps = diskWithSnapshots ; diskWithSnaps . getSnapshots ( ) . addAll ( snapshotsList ) ; param . add ( diskWithSnapshots ) ; param . add ( diskWithoutSnapshots ) ; param . add ( ovfImage ) ; param . add ( cinderDisk ) ; return param ; }
public IndexingConfigurationBuilder autoConfig ( boolean autoConfig ) { if ( autoConfig ) enable ( ) ; attributes . attribute ( AUTO_CONFIG ) . set ( autoConfig ) ; return this ; }
private boolean shouldBeDirectlyAttached ( String vfName , Guid vmId ) { return ! vmDeviceDao . getVmDeviceByVmIdTypeAndDevice ( vmId , VmDeviceGeneralType . HOSTDEV , vfName ) . isEmpty ( ) ; }
private static void safeCloseStream ( Closeable stream ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { // swallow error in this case Logger . e ( TAG , "Failed to close the stream : " , "" , ADALError . IO_EXCEPTION , e ) ; } } }
public static String zkSecuritySysConfigString ( ) { String loginConfig = System . getProperty ( JAVA_LOGIN_CONFIG_PARAM ) ; String clientEnabled = System . getProperty ( ZK_SASL_CLIENT , "default : " + DEFAULT_ZK_SASL_CLIENT ) ; String contextName = System . getProperty ( ZK_LOGIN_CONTEXT_NAME_KEY , "default : " + DEFAULT_ZK_LOGIN_CONTEXT_NAME ) ; return " [ " + JAVA_LOGIN_CONFIG_PARAM + " = " + loginConfig + " , " + ZK_SASL_CLIENT + " = " + clientEnabled + " , " + ZK_LOGIN_CONTEXT_NAME_KEY + " = " + contextName + " ] " ; }
public boolean updateNode ( final @Nonnull Node node ) throws IOException { if ( node == nodes . get ( node . getNodeName ( ) ) ) { Queue . withLock ( new Runnable ( ) { @Override public void run ( ) { jenkins . trimLabels ( ) ; } } ) ; persistNode ( node ) ; return true ; } return false ; }
public void onSaveInstanceState ( Bundle outState ) { // update the topmost entry in the backstack updateCurrentBackStackItem ( ) ; outState . putParcelableArrayList ( "backStack" , backStack ) ; }
public Trader ( String name , double cashInHand ) { super ( ) ; this . name = name ; this . cashInHand = cashInHand ; this . position = new ArrayList < Order > ( ) ; this . ordersPlaced = new ArrayList < Order > ( ) ; }
private ITask getTasksAssosciatedWithReviewTask ( ITask reviewTask ) { String lookupUrl = reviewTask . getUrl ( ) ; // TODO : Fetch from mapping with the lookupUrl String taskUrl = "http :/ / someurl" ; AbstractRepositoryConnector repository = TasksUiPlugin . getRepositoryManager ( ) . getConnectorForRepositoryTaskUrl ( taskUrl ) ; String taskId = repository . getTaskIdFromTaskUrl ( taskUrl ) ; String repositoryUrl = repository . getRepositoryUrlFromTaskUrl ( taskUrl ) ; ITask assosciatedTask = taskList . getTask ( repositoryUrl , taskId ) ; return assosciatedTask ; }
protected void toLegacyText ( StringBuilder builder ) { builder . append ( this . value ) ; }
public static boolean isRoute ( final URL url ) { return ROUTE_PROTOCOL . equals ( url . getProtocol ( ) ) || ROUTERS_CATEGORY . equals ( url . getParameter ( Constants . CATEGORY_KEY , Constants . DEFAULT_CATEGORY ) ) ; }
void thread2 ( ) { int [ ] vs1 ; synchronized ( lock ) { vs1 = values ; state = 1 ; } int s ; do { synchronized ( lock ) { s = state ; } } while ( s != 2 ) ; // Busy loop . int [ ] vs2 ; synchronized ( lock ) { vs2 = values ; } int v1 = vs1 [ 0 ] ; int v2 = vs2 [ 0 ] ; System . out . println ( "b17689750TestMonitor failed : " + v1 + " , " + v2 ) ; }
public void testWriteAndReadObject ( ) throws Exception { InternalSerializationService serializationService = new DefaultSerializationServiceBuilder ( ) . build ( ) ; String expected = "test input" ; String actual = ( String ) writeAndReadObject ( serializationService , expected ) ; assertNotNull ( actual ) ; assertEquals ( expected , actual ) ; }
public boolean equals ( final Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } final ArArchiveEntry other = ( ArArchiveEntry ) obj ; if ( name == null ) { return other . name == null ; } else { return name . equals ( other . name ) ; } }
public ByteBufferReadableStreamChannel ( List < ByteBuffer > bufferList ) { if ( bufferList == null || bufferList . isEmpty ( ) ) { throw new IllegalArgumentException ( "Input List of ByteBuffer cannot be null / empty for ByteBufferReadableStreamChannel" ) ; } buffers = bufferList ; size = computeSize ( bufferList ) ; }
boolean areRequiredNetworksAvailable ( final List < VmNetworkInterface > vmNetworkInterfaces , final List < VdsNetworkInterface > allInterfacesForVds ) { for ( final VmNetworkInterface vmIf : vmNetworkInterfaces ) { boolean found = false ; for ( final VdsNetworkInterface vdsIf : allInterfacesForVds ) { if ( StringUtils . equals ( vmIf . getNetworkName ( ) , vdsIf . getNetworkName ( ) ) ) { found = true ; break ; } } if ( ! found ) { log . debug ( "VDS is not ok for running the VM as network is missing" ) ; return false ; } } return true ; }
public void testStash ( ) throws Exception { // 1 ) call stash create command git . stashCreate ( ) . call ( ) ; readFile ( "Stash Created" , git . getRepository ( ) . getWorkTree ( ) + " / File1 . txt" ) ; // 2 ) call stash list git . stashList ( ) . call ( ) ; // 3 ) apply stash git . stashApply ( ) . call ( ) ; // 4 ) verify stash applied by outputting file readFile ( "Stash Created" , git . getRepository ( ) . getWorkTree ( ) + " / File1 . txt" ) ; }
public List < WorkerInfo > getWorkerInfoList ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } try { return mWorkerInfoCache . get ( WORKER_INFO_CACHE_KEY ) ; } catch ( ExecutionException e ) { throw new UnavailableException ( "Unable to get worker info list from cache" , e ) ; } }
public static void tearDownTestCase ( ) throws Exception { if ( dataSource != null ) { Connection con = dataSource . getConnection ( ) ; if ( con != null ) { // rollback any changes done to DB during the test case execution con . rollback ( ) ; } } } public void tearDown ( ) throws Exception { if ( dataSource != null ) { Connection con = dataSource . getConnection ( ) ; if ( con != null ) { // rollback any changes done to DB during the test case execution con . rollback ( ) ; } } }
public void checkSelectFilter ( final String label , final String value ) { selectInputs . computeIfPresent ( label , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && i . getChecked ( ) == false ) { i . setChecked ( true ) ; } } ) ; return values ; } ) ; }
public ColdMergeVDSCommandParameters ( Guid storageJobId , SubchainInfo subchainInfo ) { super ( ) ; this . storageJobId = storageJobId ; this . subchainInfo = subchainInfo ; }
private void putResize ( K key , V value ) { K [ ] keyTable = this . keyTable ; V [ ] valueTable = this . valueTable ; for ( int i = place ( key ) ; ; i = ( i + 1 ) & mask ) { // space is available so we insert and break ( resize is later ) if ( keyTable [ i ] == null ) { keyTable [ i ] = key ; valueTable [ i ] = value ; break ; } } resize ( keyTable . length < < 1 ) ; }
protected void onLoad ( ) { enableForm ( false ) ; super . onLoad ( ) ; Util . PROJECT_SVC . projectDetail ( projectName , new GerritCallback < ProjectDetail > ( ) { public void onSuccess ( final ProjectDetail result ) { enableForm ( true ) ; display ( result ) ; addPanel . setVisible ( result . canModifyData ) ; delRight . setVisible ( result . canModifyData ) ; } } ) ; }
public static EncodeFormat checkedValueOf ( String name ) { try { return EncodeFormat . valueOf ( name ) ; } catch ( Exception ex ) { VoltDB . crashLocalVoltDB ( "Illegal encoding format " + name , true , ex ) ; } return null ; }
public Set < K > keySet ( Predicate predicate ) { checkNotNull ( predicate , "Predicate cannot be null ! " ) ; Set < K > resultingSet = new HashSet < K > ( ) ; Set < QueryableEntry > query = indexes . query ( predicate ) ; if ( query != null ) { for ( QueryableEntry entry : query ) { K key = ( K ) entry . getKey ( ) ; resultingSet . add ( key ) ; } } else { doFullKeyScan ( predicate , resultingSet ) ; } return resultingSet ; }
public void getChildCollection_shouldThrowAPIExceptionIfGetterMethodNotFound ( ) throws Exception { ClassWithBadGetter oo = new ClassWithBadGetter ( ) ; oo . setMyLocations ( new HashSet < > ( ) ) ; Assertions . assertThrows ( APIException . class , ( ) - > RequiredDataAdvice . getChildCollection ( oo , ClassWithBadGetter . class . getDeclaredField ( "locations" ) ) ) ; }
protected void configure ( ) { DynamicSet . setOf ( binder ( ) , CacheRemovalListener . class ) ; install ( new FactoryModule ( ) { @Override protected void configure ( ) { factory ( ForwardingRemovalListener . Factory . class ) ; } } ) ; bind ( DefaultCacheFactory . class ) ; bind ( MemoryCacheFactory . class ) . to ( DefaultCacheFactory . class ) ; bind ( PersistentCacheFactory . class ) . to ( H2CacheFactory . class ) ; listener ( ) . to ( H2CacheFactory . class ) ; }
private void createDisabledImage ( ) { if ( this . image != null && ! this . image . isDisposed ( ) ) { if ( this . disabledImage != null && ! this . disabledImage . isDisposed ( ) ) { this . disabledImage . dispose ( ) ; } disabledImage = new Image ( this . image . getDevice ( ) , this . image , SWT . IMAGE_DISABLE ) ; } }
public synchronized void releaseSample ( DecoderInputBuffer sample ) { sample . clear ( ) ; mSamplePool . offerLast ( sample ) ; }
private String buildClipboardMessage ( Row row ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( row . getLevel ( ) ) . append ( " , " ) . append ( row . getMessage ( ) ) ; return builder . toString ( ) ; }
public RepositoryObject getParent ( ) { return null ; }
private void setLastUsedBranch ( ) { String lastBranch = settings . get ( lastBranchKey ) ; if ( lastBranch != null ) branchText . setText ( lastBranch ) ; }
public String toString ( ) { return toStringHelper ( this ) . omitNullValues ( ) . add ( "equiCriteria" , equiCriteria ) . add ( "filter" , filter . orElse ( null ) ) . toString ( ) ; }
private void validateKeyPatternsInConfig ( Dictionary < String , ? > config ) { Enumeration < String > keys = config . keys ( ) ; while ( keys . hasMoreElements ( ) ) { String key = keys . nextElement ( ) ; // the config - key enumeration contains additional keys that we // don't want to process here . . . if ( "service . pid" . equals ( key ) ) { continue ; } Matcher matcher = EXTRACT_PLUGWISE_CONFIG_PATTERN . matcher ( key ) ; if ( ! matcher . matches ( ) ) { logger . warn ( "Given plugwise - config - key '" + key + "' does not follow the expected pattern ' < PlugwiseId > . < mac|type|port|interval > '" ) ; continue ; } } }
public Void visitFilter ( FilterNode node , Void context ) { String expression = formatter . formatRowExpression ( node . getPredicate ( ) ) ; printNode ( node , "Filter" , expression , NODE_COLORS . get ( NodeType . FILTER ) ) ; return node . getSource ( ) . accept ( this , context ) ; }
public void run ( ) { resetGlobalProgress ( ) ; indexingAll = true ; for ( ObjectType objectType : ObjectType . values ( ) ) { startIndexing ( objectType ) ; } try { sleep ( pause ) ; } catch ( InterruptedException e ) { logger . error ( "Thread interrupted : " + e . getMessage ( ) ) ; Thread . currentThread ( ) . interrupt ( ) ; } currentIndexState = ObjectType . NONE ; indexingAll = false ; pollingChannel . send ( INDEXING_FINISHED_MESSAGE ) ; }
public boolean isAC3 ( ) { return getCodecA ( ) != null && ( "ac3" . equals ( getCodecA ( ) ) || "a52" . contains ( getCodecA ( ) ) ) ; }
ShardRewriter createShardRewriter ( FileSystemContext fileSystemContext , FileSystem fileSystem , long transactionId , OptionalInt bucketNumber , UUID shardUuid , int shardRowCount , Optional < UUID > deltaShardUuid , boolean tableSupportsDeltaDelete , Map < String , Type > columns ) { if ( tableSupportsDeltaDelete ) { return new DeltaShardRewriter ( shardUuid , shardRowCount , deltaShardUuid , deletionExecutor , transactionId , bucketNumber , this , fileSystemContext , fileSystem ) ; } else { return new InplaceShardRewriter ( shardUuid , columns , deletionExecutor , transactionId , bucketNumber , nodeId , this , fileSystem , storageService , shardRecorder , backupManager ) ; } }
public void init ( ) { setLabel ( "Plugin" ) ; addAttribute ( ID , ROLE_ID ) . setLabel ( "Identifier" ) ; addAttribute ( LABEL , ROLE_LABEL , ROLE_LOOKUP ) . setNillable ( false ) . setUnique ( true ) . setLabel ( "Label" ) ; addAttribute ( DESCRIPTION , ROLE_LOOKUP ) . setLabel ( "Description" ) . setDataType ( TEXT ) ; }
@Override public Long call ( ) throws IOException { String oldname = Thread . currentThread ( ) . getName ( ) ; Thread . currentThread ( ) . setName ( oldname + "Decode - " + this . parent . columnChunkMetaData . toString ( ) ) ; this . parent . processPages ( recordsToReadInThisPass ) ; Thread . currentThread ( ) . setName ( oldname ) ; return recordsToReadInThisPass ; }
public CompositeMetricsCollector ( MetricsCollector . . . collectors ) { this . collectors = asList ( collectors ) ; }
@Override public void onRequestPermissionsResult ( int requestCode , @NonNull String [ ] permissions , @NonNull int [ ] grantResults ) { if ( requestCode == REQUEST_READ_CONTACTS ) { if ( grantResults . length > 0 && grantResults [ 0 ] == PackageManager . PERMISSION_GRANTED ) { loadContacts ( ) ; } else { Toast . makeText ( this , "Read contacts permission denied" , Toast . LENGTH_LONG ) . show ( ) ; finish ( ) ; } } else { super . onRequestPermissionsResult ( requestCode , permissions , grantResults ) ; } }
private static void appendBodyColorsRule ( StringBuilder buffer , RGB fgRGB , RGB bgRGB ) { StringBuilder fg = new StringBuilder ( ) ; appendColor ( fg , fgRGB ) ; StringBuilder bg = new StringBuilder ( ) ; appendColor ( bg , bgRGB ) ; buffer . append ( "body { color : " ) ; appendColor ( buffer , fgRGB ) ; buffer . append ( " ; background - color : " ) ; appendColor ( buffer , bgRGB ) ; buffer . append ( " ; } " ) ; }
public static VoltDBInterface instance ( ) { if ( singleton == null ) { singleton = new RealVoltDB ( ) ; } return singleton ; }
public int getRenderState ( ) { int state = speed . ordinal ( ) ; if ( getReverse ( ) ) state = 14 ; if ( isPowered ( ) ) { if ( getReverse ( ) ) state += 1 ; else state += 7 ; } return state ; }
public void ensureSettingsSavedShowsFormIfValidationFails ( ) throws Exception { doAnswer ( invocation - > { Errors errors = invocation . getArgument ( 1 ) ; errors . rejectValue ( "absenceSettings" , "error" ) ; return null ; } ) . when ( settingsValidator ) . validate ( any ( ) , any ( ) ) ; perform ( post ( " / web / settings" ) ) . andExpect ( view ( ) . name ( "settings / settings_form" ) ) ; }
private String extractConnectionKey ( final iOSVariant iOSVariant ) { final StringBuilder sb = new StringBuilder ( iOSVariant . getVariantID ( ) ) . append ( iOSVariant . isProduction ( ) ? " - prod" : " - dev" ) ; return sb . toString ( ) ; }
public void printCertificates ( ) { DefaultTable table = new DefaultTable ( ) ; for ( int i = 0 ; i < table . rowCount ( ) ; i ++ ) { logger . info ( "On index " + i + " is : " + table . getItem ( i ) . getText ( 1 ) ) ; } }
public void lockEdge ( ) throws Exception { edgeLockTest ( LockMode . WRITE , LockMode . READ , true ) ; edgeLockTest ( LockMode . READ , LockMode . WRITE , true ) ; edgeLockTest ( LockMode . WRITE , LockMode . WRITE , true ) ; edgeLockTest ( LockMode . READ , LockMode . READ , false ) ; }
private String getClientId ( ) { return clientMessageBus . getClientId ( ) ; }
private void configureManagementNetwork ( ) { final NetworkConfigurator networkConfigurator = new NetworkConfigurator ( getVds ( ) ) ; if ( networkConfigurator . awaitVdsmResponse ( ) ) { try { networkConfigurator . refreshNetworkConfiguration ( ) ; networkConfigurator . createManagementNetworkIfRequired ( ) ; } catch ( VDSNetworkException e ) { throw new VdsInstallException ( VDSStatus . NonResponsive , "Network error during communication with the host" ) ; } catch ( VdsInstallException e ) { throw new VdsInstallException ( VDSStatus . NonOperational , "Failed to configure management network on the host" ) ; } } else { throw new VdsInstallException ( VDSStatus . NonResponsive , "Network error during communication with the host" ) ; } }
public static Response newResetResponse ( Header header ) { return newResetResponse ( header , newNoServerError ( ) ) ; }
private Optional < TimeValue > getTimeValue ( Optional < TimeValue > primaryValue , Optional < TimeValue > safetyValue ) { if ( ! primaryValue . isPresent ( ) ) { return safetyValue ; } return primaryValue ; }
public Uris ( String scheme , String host ) { this . scheme = scheme ; this . host = host ; this . port = 0 ; this . rcnamespace = "0|120" ; }
private void carryOntoHistory ( RevCommit c , int carry ) { stack = null ; for ( ; ; ) { carryOntoHistoryInnerLoop ( c , carry ) ; CarryStack s = stack ; if ( s != null ) { c = s . c ; carry = s . carry ; stack = s . prev ; continue ; } break ; } }
private FactHandle [ ] insertFacts ( KieSession ksession , int n ) { FactHandle [ ] fhs = new FactHandle [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { fhs [ i ] = ksession . insert ( i ) ; ksession . insert ( String . valueOf ( i ) ) ; } return fhs ; }
public SecureStore get ( ) { return injector . getInstance ( getSecureStoreImpl ( ) ) ; }
protected void handleSwingDropTargetChanged ( TreePath path , Transferable swingTransferable ) { if ( getUpdateSwingFromScoutLock ( ) . isAcquired ( ) ) { return ; } // if ( swingTransferable != null ) { if ( getScoutObject ( ) != null ) { final ITreeNode scoutNode = treePathToScoutNode ( path ) ; // notify Scout ( asynchronous ! ) Runnable t = new Runnable ( ) { @Override public void run ( ) { getScoutObject ( ) . getUIFacade ( ) . fireNodeDropTargetChangedFromUI ( scoutNode ) ; } } ; getSwingEnvironment ( ) . invokeScoutLater ( t , 0 ) ; // end notify } } }
void setDiskSpaceThreshold ( float diskSpaceThreshold , float diskUsageWarnThreshold ) { validateThreshold ( diskSpaceThreshold , diskUsageWarnThreshold ) ; this . diskUsageThreshold = diskSpaceThreshold ; this . diskUsageWarnThreshold = diskUsageWarnThreshold ; }
public static void setInstance ( Object source , @MappingTarget Object target ) { Integer level = LEVEL . get ( ) ; fireMethodCalled ( level , "setInstance" , source , target ) ; if ( level == null ) { LEVEL . set ( 1 ) ; MAPPING . set ( new IdentityHashMap < Object , Object > ( ) ) ; } else { LEVEL . set ( level + 1 ) ; } MAPPING . get ( ) . put ( source , target ) ; }
public List < StandardPreset > getAllStandardPresets ( ) { return this . workbenchDataManager . getStandardPresetDAO ( ) . getAll ( ) ; }
protected void executeVDSCommand ( ) { if ( _vdsManager != null ) { try { _vdsManager . getLockObj ( ) . lock ( ) ; executeVdsIdCommand ( ) ; } finally { _vdsManager . getLockObj ( ) . unlock ( ) ; } } else { executeVdsIdCommand ( ) ; } }
public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt ( ) throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc ( "We are introducing $ { myStringInCtxt } ! " , WEBVIEW_R ITION ) ; TemplateBasedDocument templateBase = createTemplateBasedDoc ( templateSrc . getAdaptedDoc ( ) ) ; List < TemplateInput > params = Collections . singletonList ( factory ( "myStringInCtxt" , StringValue , "Beautiful String" ) ) ; templateBase . saveParams ( TEMPLATE_NAME , params , true ) ; Blob result = templateBase . renderWithTemplate ( TEMPLATE_NAME ) ; assertNotNull ( result ) ; assertEquals ( "We are introducing Beautiful String ! " , result . getString ( ) ) ; }
public static PDPrintStyle getLineStyle ( JSONObject oskariStyle ) { PDPrintStyle style = new PDPrintStyle ( ) ; JSONObject stroke = JSONHelper . optJSONObject ( oskariStyle , "stroke" , ( ) - > new JSONObject ( ) ) ; if ( stroke . length ( ) == 0 ) { return style ; } setStrokeStyle ( style , stroke ) ; // polygon doesn't have cap style setLabelStyle ( style , oskariStyle ) ; style . setLineCap ( LINE_CAP_STYLE . getOrDefault ( JSONHelper . optString ( stroke , "lineCap" ) , 0 ) ) ; return style ; }
public static synchronized void init ( Configuration conf ) { if ( ! initDone ) { DefaultConfiguration . conf = conf ; DefaultConfiguration . initDone = true ; } }
private void rollBackToTimestamp ( long timestamp ) { if ( getVersionUnsafe ( ) > timestamp ) { try { rollbackObjectUnsafe ( timestamp ) ; // Rollback successfully got us to the right // version , we're done . if ( getVersionUnsafe ( ) == timestamp ) { return ; } else { // We return even if this is false . Should we do something in the else case ? } } catch ( NoRollbackException nre ) { log . warn ( "Rollback [ { } ] to { } failed { } " , this , timestamp , nre ) ; resetUnsafe ( ) ; } } }
public void prepare ( Properties options ) { Objects . requireNonNull ( mapper , "mapper can not be null" ) ; Objects . requireNonNull ( topicSelector , "topicSelector can not be null" ) ; producer = new KafkaProducer < > ( options ) ; }
protected Control createSWTControl ( Composite parent ) throws DatabindingFailedException { final Control control = super . createSWTControl ( parent ) ; final ComposedAdapterFactory composedAdapterFactory = new ComposedAdapterFactory ( new AdapterFactory [ ] { new ReflectiveItemProviderAdapterFactory ( ) , new ComposedAdapterFactory ( ComposedAdapterFactory . Descriptor . Registry . INSTANCE ) } ) ; adapterFactoryItemDelegator = new AdapterFactoryItemDelegator ( composedAdapterFactory ) ; return control ; }
public boolean isRegistered ( VeluxProduct product ) { logger . trace ( "isRegistered ( VeluxProduct { } ) called . " , product . toString ( ) ) ; if ( product . isV2 ( ) ) { return isRegistered ( product . getSerialNumber ( ) ) ; } return isRegistered ( product . getProductUniqueIndex ( ) ) ; }
public void tearDown ( ) throws Exception { FileUtils . deleteQuietly ( nuxeoHome ) ; // Restore or clear all the system properties manipulated by the current test originSystemProps . forEach ( ( key , value ) - > { if ( value == null ) { System . clearProperty ( key ) ; } else { System . setProperty ( key , value ) ; } } ) ; originSystemProps . clear ( ) ; }
private void checkDeployedProject ( String projectName ) { ServersView2 serversView = new ServersView2 ( ) ; serversView . open ( ) ; ServerModule module = serversView . getServer ( FULL_SERVER_NAME ) . getModule ( new RegexMatcher ( " .* " + projectName + " .* " ) ) ; new WaitUntil ( new ServerModuleHasState ( module , ServerState . ED ) , TimePeriod . getCustom ( 30 ) ) ; assertTrue ( "Module has not been started ! " , module . getLabel ( ) . getState ( ) == ServerState . ED ) ; }
SlackService getSlackService ( final String baseUrl , final String teamDomain , final String authTokenCredentialId , final boolean botUser , final String room ) { return new StandardSlackService ( baseUrl , teamDomain , authTokenCredentialId , botUser , room ) ; }
private boolean isAnnotationPresent ( AnnotatedType annotatedType , Set < Annotation > processedAnnotations ) { if ( annotatedType instanceof AnnotatedParameterizedType ) { for ( AnnotatedType type : ( ( AnnotatedParameterizedType ) annotatedType ) . getAnnotatedActualTypeArguments ( ) ) { if ( isAnnotationPresent ( type , processedAnnotations ) ) { return true ; } } } if ( isAnnotationPresentIn ( annotatedType . getDeclaredAnnotations ( ) , processedAnnotations ) ) { return true ; } return false ; }
static int staticFunc ( ) { InvokeStatic f = new InvokeStatic ( ) { // Noncompliant @Override public int func ( ) { unknown ( ) ; staticFunc ( ) ; return 0 ; } } ; return f . func ( ) ; }
private synchronized void resetGeneration ( ) { this . generation = Generation . NO_GENERATION ; rejoinNeeded = true ; // only reset the state to un - joined when it is not already in rebalancing if ( state != MemberState . REBALANCING ) state = MemberState . UNJOINED ; }
public Path generateArtifact ( URI uri , int size ) throws IOException { new NpmPackageGenerator ( Paths . get ( uri ) ) ; buildPublishJson ( ) ; return getPackagePath ( ) ; }
public void nextTuple ( ) { Utils . sleep ( 100 ) ; Random rand = new Random ( ) ; Integer value = rand . nextInt ( 1000 ) ; collector . emit ( new Values ( value ) ) ; }
private void register ( final Class < ? > clazz , final Object converter ) { otherWord = "" ; }
public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( "" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , true ) ; indexFiles ( ) ; PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; String result = runQuickFixOneFile ( ) ; assertContainedIn ( "int func ( ) { } // @suppress ( \"No return\" ) " , result ) ; }
public void onLanguageTabSelected ( String selectedLanguageCode ) { Log . e ( "####" , "HERE" ) ; searchLanguageCode = selectedLanguageCode ; startSearch ( query , query != null && query . length ( ) > 1 ) ; }
public T insert ( SQLiteDatabase db , T entityAdapter , boolean isSyncAdapter ) { Log . d ( TAG , "before insert" ) ; T result = mDelegate . insert ( db , entityAdapter , isSyncAdapter ) ; Log . d ( TAG , "after insert on " + entityAdapter . id ( ) ) ; return result ; }
protected UfsStatus ( UfsStatus status ) { mIsDirectory = status . mIsDirectory ; mName = status . mName ; mOwner = status . mOwner ; mGroup = status . mGroup ; mMode = status . mMode ; mLastModifiedTimeMs = status . mLastModifiedTimeMs ; mXAttr = new HashMap < > ( status . mXAttr ) ; }
boolean isProjectStyle ( ) { if ( myIsFrameworkStyle ) { return false ; } ProjectResourceRepository repository = ProjectResourceRepository . getProjectResources ( myConfiguration . getModule ( ) , true ) ; assert repository != null : repository . getDisplayName ( ) ; return repository . hasResourceItem ( ResourceType . STYLE , myStyleName ) ; }
public void setUserProperty ( String prop , String value ) { getUserProperties ( ) . put ( prop , value ) ; Context . clearCacheForCurrentUser ( ) ; }
JarFileUtils ( IPostProcessor processor , String xmlPathInJar , List < String > testNames ) { this . processor = processor ; this . xmlPathInJar = xmlPathInJar ; // Ensure that dynamic list operations supported this . testNames = ( testNames == null ? null : new ArrayList < > ( testNames ) ) ; }
public String resolve ( String variable , String defaultValue ) { IVariableResolver delegate = new ExpressionResolver . SystemPropertiesVariableResolver ( ) ; // ignoring argument here , as we want to fall back on the propertiesProvider . String result = delegate . resolve ( variable , null ) ; if ( result == null ) { try { result = propertiesProvider . getValue ( variable , defaultValue , new NullProgressMonitor ( ) ) ; } catch ( CoreException e ) { throw new ExpressionResolutionException ( e ) ; } } return result ; }
public static boolean isVirtIoScsiDiskInterfaceExists ( VmBase vmBase ) { return vmBase . getImages ( ) . stream ( ) . anyMatch ( i - > i . getDiskVmElementForVm ( vmBase . getId ( ) ) . getDiskInterface ( ) == DiskInterface . VirtIO_SCSI ) ; }
public void setContext ( String context ) { typingRule . setContext ( BloodTestContext . valueOf ( context . trim ( ) . toUpperCase ( ) ) ) ; }
private String readClasspathResource ( String c ) throws IOException { InputStream is = getClass ( ) . getResourceAsStream ( c ) ; try { return Util . read ( is ) ; } finally { if ( is != null ) { is . close ( ) ; } } }
protected void build ( UnitVmModel frontend , VM backend ) { VmTemplate template = ( VmTemplate ) frontend . getTemplate ( ) . getSelectedItem ( ) ; backend . setVmtGuid ( template . getId ( ) ) ; backend . setName ( ( String ) frontend . getName ( ) . getEntity ( ) ) ; backend . setVmDescription ( ( String ) frontend . getDescription ( ) . getEntity ( ) ) ; backend . setCustomProperties ( frontend . getCustomPropertySheet ( ) . getEntity ( ) ) ; }
public void getAllDrugs_shouldReturnAListOfAllDrugs ( ) throws Exception { int resultWhenTrue = 4 ; int resultWhenFalse = 2 ; List < Drug > allDrugs = conceptService . getAllDrugs ( ) ; assertEquals ( resultWhenTrue , allDrugs . size ( ) ) ; allDrugs = conceptService . getAllDrugs ( false ) ; assertEquals ( resultWhenFalse , allDrugs . size ( ) ) ; }
public List < BithumbTransactionHistoryResponse . BithumbTransactionHistory > getBithumbTrades ( CurrencyPair currencyPair ) throws IOException { final BithumbResponse < List < BithumbTransactionHistoryResponse . BithumbTransactionHistory > > transactionHistory = bithumb . transactionHistory ( BithumbUtils . getBaseCurrency ( currencyPair ) ) ; return transactionHistory . getData ( ) ; }
public void addChild ( String name , Long id ) { if ( mChildren != null && mChildren . put ( name , id ) == null ) { mWeight . incrementAndGet ( ) ; } }
static void reTryKerberos ( boolean enabled ) { if ( enabled ) { log . debug ( "Try relogin kerberos at first ! " ) ; try { if ( UserGroupInformation . isLoginKeytabBased ( ) ) { UserGroupInformation . getLoginUser ( ) . reloginFromKeytab ( ) ; } else if ( UserGroupInformation . isLoginTicketBased ( ) ) { UserGroupInformation . getLoginUser ( ) . reloginFromTicketCache ( ) ; } } catch ( IOException e ) { log . error ( "Try relogin kerberos failed ! " , e ) ; throw new RuntimeException ( e ) ; } } }
void resetLogic ( ) { for ( int i = 0 ; i < fieldSize ; i ++ ) { for ( int j = 0 ; j < fieldSize ; j ++ ) fieldArray [ i ] [ j ] = 0 ; } playerMark = CROSS_MARK ; aIMark = ZERO_MARK ; turn = 0 ; // first turn autoGameEnabled = false ; }
protected Stream < URL > listBundleComponents ( Bundle bundle ) { String list = OSGiRuntimeService . getComponentsList ( bundle ) ; String name = bundle . getSymbolicName ( ) ; log . debug ( "PartialBundle : " + name + " components : " + list ) ; if ( list == null ) { return Stream . empty ( ) ; } else { return Stream . of ( list . split ( " [ , \t\n\r\f ] " ) ) . map ( bundle : : getEntry ) . filter ( Objects : : nonNull ) ; } }
public void testLoadDataObjectsWithNonNullWorkspaceProject ( ) { assertThat ( dataObjectsService . loadDataObjects ( workspaceProject ) ) . isEmpty ( ) ; }
public Graphics2D prepareImageRenderer ( MapTransform mt , BufferedImage img , ProgressMonitor pm ) { Graphics2D g2 = img . createGraphics ( ) ; if ( backgroundColor != null ) { g2 . setBackground ( backgroundColor ) ; g2 . clearRect ( 0 , 0 , width , height ) ; } ImageRenderer renderer = new ImageRenderer ( ) ; renderer . draw ( mt , g2 , width , height , rootLayer , pm ) ; return g2 ; }
public static void refreshResources ( IResource [ ] resources , IProgressMonitor monitor ) throws CoreException { try { SubMonitor progress = SubMonitor . convert ( monitor , CoreText . ProjectUtil_refreshing , resources . length ) ; for ( IResource resource : resources ) { if ( progress . isCanceled ( ) ) break ; resource . refreshLocal ( IResource . DEPTH_INFINITE , progress . newChild ( 1 ) ) ; } } finally { monitor . done ( ) ; } }
private boolean isInSelection ( Event event ) { if ( selection . x == selection . y ) return false ; int offset = getOffsetAtPoint ( event . x , event . y , null , true ) ; if ( selection . x <= offset && offset < selection . y ) return true ; return false ; }
public void setUp ( ) { cuMarshalService = new CUMarshalServiceImpl ( ) ; xmlFile = new File ( EXAMPLE_FILE_NAME ) ; }
public void actionPerformed ( ActionEvent e ) { if ( e . getSource ( ) == okButton ) { // controller should be passed to this class only if there is need to modification content of Keystore . if ( certControll != null ) { certControll . setAddToKeystore ( true ) ; } this . dispose ( ) ; } else if ( e . getSource ( ) == cancelButton ) { if ( certControll != null ) { certControll . setAddToKeystore ( false ) ; } this . dispose ( ) ; } }
public FilteredSourceFiles ( List < Path > rawSrcFiles , BuildTarget buildTarget , GoToolchain goToolchain , GoPlatform platform , List < FileType > fileTypes ) { this . rawSrcFiles = rawSrcFiles ; this . extraSrcFiles = new ArrayList < > ( ) ; filterSteps = createFilterSteps ( buildTarget , goToolchain , platform , fileTypes ) ; }
public static char complementBase ( char base , boolean RNA ) { if ( base == 'A' && RNA ) return 'U' ; if ( base == 'A' ) return 'T' ; if ( base == 'T' && ! RNA ) return 'A' ; if ( base == 'U' && RNA ) return 'A' ; if ( base == 'C' ) return 'G' ; if ( base == 'G' ) return 'C' ; return ' ' ; }
public TCCLObjectInputStream ( InputStream in ) throws IOException { super ( in ) ; this ( in , null ) ; }
private void run ( ) { try { boolean valid = connectionSanityCheck . isValid ( ) ; if ( ! valid ) { onInvalidConnection . run ( ) ; } } catch ( Exception e ) { logger . warn ( "Impossible to correctly monitor the Axon Server connection state . " , e ) ; } }
protected String getStateParameter ( final WebContext context ) { final String stateData = getState ( ) ; if ( CommonHelper . isNotBlank ( stateData ) ) { return stateData ; } else { return CommonHelper . randomString ( 10 ) ; } }
public DSpaceCommandLineParameter ( String parameter ) { this ( StringUtils . substringBefore ( parameter , " " ) , StringUtils . substringAfter ( parameter , " " ) ) ; }
protected Transferable createTransferable ( JComponent c ) { indices = list . getSelectedIndices ( ) ; if ( list . isSelectionEmpty ( ) ) return null ; return new ActionTransferable ( ( ArrayList < Action > ) list . getSelectedValuesList ( ) ) ; }
public List < NimbusInfo > getAllNimbuses ( ) { List < NimbusInfo > nimbusInfos = new ArrayList < > ( ) ; try { Collection < Participant > participants = leaderLatch . get ( ) . getParticipants ( ) ; for ( Participant participant : participants ) { nimbusInfos . add ( Zookeeper . toNimbusInfo ( participant ) ) ; } } catch ( Exception e ) { LOG . warn ( "failed to get nimbuses" , e ) ; throw new RuntimeException ( e ) ; } return nimbusInfos ; }
protected void doBegin ( ) throws TransactionException { if ( txManager == null ) { throw new IllegalStateException ( CoreMessages . objectNotRegistered ( "javax . transaction . TransactionManager" , "Transaction Manager" ) . getMessage ( ) ) ; } try { txManager . setTransactionTimeout ( getTimeoutInSeconds ( ) ) ; txManager . begin ( ) ; synchronized ( this ) { transaction = txManager . getTransaction ( ) ; } } catch ( Exception e ) { throw new TransactionException ( cannotStartTransaction ( "XA" ) , e ) ; } }
public int hashCode ( ) { int hash = 7 ; hash = 89 * hash + ( this . name != null ? this . name . hashCode ( ) : 0 ) ; return hash ; }
public void postProcessRequest ( RestRequest restRequest , Callback < Void > callback ) { Exception exception = null ; frontendMetrics . securityServicePostProcessRequestRate . mark ( ) ; long startTimeMs = System . currentTimeMillis ( ) ; if ( ! isOpen ) { exception = new RestServiceException ( "SecurityService is closed" , RestServiceErrorCode . ServiceUnavailable ) ; } else if ( restRequest == null || callback == null ) { throw new IllegalArgumentException ( "RestRequest or Callback is null" ) ; } frontendMetrics . securityServicePostProcessRequestTimeInMs . update ( System . currentTimeMillis ( ) - startTimeMs ) ; callback . onCompletion ( null , exception ) ; }
private static IMethod [ ] toArray ( List < IMethod > methods ) { return methods . toArray ( new IMethod [ methods . size ( ) ] ) ; }
public UserProfileParameters ( ) { profile . setId ( Guid . newGuid ( ) ) ; }
public void onActivityPaused ( Activity activity ) { if ( null != mCurInAppNotification ) { mCurInAppNotification . dismiss ( ) ; } }
public void createReplyReplyDone ( ) { createButton ( buttonparent , buttonReply_ID , buttonReply_caption , true ) ; createButton ( buttonparent , buttonReplyDone_ID , buttonReplyDone_caption , true ) ; buttonBar . pack ( ) ; }
public void noMoreBubble ( ) { config . setProperty ( PARTITION_OPERATION_THREAD_COUNT . getName ( ) , "1" ) ; initExecutor ( ) ; final DummyPartitionTaskFactory taskFactory = new DummyPartitionTaskFactory ( ) ; taskFactory . delayMs = 1000 ; executor . executeOnPartitions ( taskFactory , newPartitions ( ) ) ; final DummyOperation op = new DummyOperation ( ) ; executor . execute ( op ) ; assertTrueEventually ( new AssertTask ( ) { @Override public void run ( ) { assertTrue ( op . completed ) ; } } , 5 ) ; }
public void equal_shouldReturnTrueIfObjectReferenceAreTheSame ( ) { CohortMembership cohortMembership = new CohortMembership ( 12 ) ; assertTrue ( cohortMembership . equals ( cohortMembership ) ) ; }
public DynamicState withPendingLocalization ( Future < Void > pendingDownload ) { return withPendingLocalization ( this . pendingLocalization , pendingDownload ) ; }
public boolean verifyUser ( String username , String password , ESClientVersionInfo clientVersionInfo ) { try { final Optional < ESAuthenticationInformation > information = doVerifyUser ( username , password , clientVersionInfo ) ; if ( ! information . isPresent ( ) ) { /* to many bad attempts , otherwise we get an exception */ ModelUtil . logWarning ( MessageFormat . format ( Messages . LoginService_VerifyUserTooManyFailedRequests , username , delay ) ) ; } return true ; } catch ( final AccessControlException ex ) { /* regular bad attempt */ return false ; } }
public void test ( ) throws Exception { ExternalBuildReport report = new ExternalBuildReport ( "http :/ / some . url . com" ) ; assertEquals ( "View External Report" , report . getDisplayName ( ) ) ; assertEquals ( "graph . gif" , report . getIconFileName ( ) ) ; assertEquals ( "http :/ / some . url . com" , report . getUrlName ( ) ) ; assertEquals ( null , report . getTarget ( ) ) ; }
public void publishEvent ( Object event ) { publishEvent ( new PayloadApplicationEvent < Object > ( this , event ) ) ; }
public boolean isList ( ) { return isProperty ? prop . isList ( ) : false ; }
private GlusterGeoRepSession getGeoRepSession ( ) { return geoRepDao . getById ( getParameters ( ) . getGeoRepSessionId ( ) ) ; }
private Statement createFailOnTimeoutStatement ( Statement statement , Description description ) throws Exception { return FailOnTimeout . builder ( ) . withTimeout ( timeout , timeUnit ) . withLookingForStuckThread ( lookForStuckThread ) . withDescription ( description ) . build ( statement ) ; }
@Override public Iterator < ? extends TripPatternInfo < TripSchedule > > patternIterator ( IntIterator stops ) { Set < TripPatternInfo < TripSchedule > > activeTripPatternsForGivenStops = new HashSet < > ( ) ; while ( stops . hasNext ( ) ) { activeTripPatternsForGivenStops . addAll ( activeTripPatternsPerStop . get ( stops . next ( ) ) ) ; } return activeTripPatternsForGivenStops . iterator ( ) ; }
public ContextHolder ( T context , Class < T > type , Set < Annotation > qualifiers ) { this . context = context ; this . type = type ; this . qualifiers = qualifiers ; this . qualifiers . addAll ( qualifiers ) ; }
public void setUp ( ) { Set < String > agentProtocols = new HashSet < > ( j . jenkins . getAgentProtocols ( ) ) ; agentProtocols . add ( ExtensionList . lookupSingleton ( CliProtocol2 . class ) . getName ( ) ) ; j . jenkins . setAgentProtocols ( agentProtocols ) ; }
public FieldWrapper ( HighlightExecutionContext executionContext , HighlighterContext context , BasicQueryWeigher weigher ) { this . executionContext = executionContext ; this . context = context ; this . weigher = weigher ; this . positionGap = 1 ; } public FieldWrapper ( HighlightExecutionContext executionContext , HighlighterContext context , BasicQueryWeigher weigher , int positionGap ) { this . executionContext = executionContext ; this . context = context ; this . weigher = weigher ; this . positionGap = positionGap ; }
public StripeFooter ( List < Stream > streams , List < ColumnEncoding > columnEncodings , List < Slice > stripeEncryptionGroups ) { this . streams = ImmutableList . copyOf ( requireNonNull ( streams , "streams is null" ) ) ; this . columnEncodings = ImmutableList . copyOf ( requireNonNull ( columnEncodings , "columnEncodings is null" ) ) ; this . stripeEncryptionGroups = ImmutableList . copyOf ( requireNonNull ( stripeEncryptionGroups , "stripeEncryptionGroups is null" ) ) ; }
public Double getValue ( ) { // do not miss the last tuple try { estimator . accumulate ( cx ) ; cx = 0 ; } catch ( ExecException ex ) { throw new RuntimeException ( "Error while accumulating sample frequency : " + ex ) ; } return estimator . getEntropy ( ) ; }
private boolean usesCatalogsAsSchemas ( DatabaseMetaData metaData ) { boolean result = true ; ResultSet rs = null ; try { rs = metaData . getSchemas ( ) ; while ( rs . next ( ) && result ) { result = false ; } } catch ( SQLException e ) { throw JdbcUtils . wrapException ( e , "retrieve schema and catalog metadata" , JdbcActionType . METADATA ) ; } finally { FileHelper . safeClose ( rs ) ; close ( null ) ; } return result ; }
public void processCacheEntryDestroyed ( CacheEntryRemovedEvent event ) { emitSessionDestroyedEvent ( ( String ) event . getKey ( ) ) ; }
public void invalidate ( @Nullable String path ) { if ( path != null ) { invalidate ( Uri . parse ( path ) ) ; } return ; }
public MerlinBuilder withRxCallbacks ( ) { rxCallbacksManager = new RxCallbacksManager ( ) ; if ( connectableRegisterer == null ) { withConnectableCallbacks ( ) ; } if ( disconnectableRegisterer == null ) { withDisconnectableCallbacks ( ) ; } return this ; }
public static String localizeProvider ( String name ) { if ( name == null ) { Assert . isTrue ( false ) ; return null ; } switch ( name ) { case DIRECT_PROVIDER : return Messages . ProxySelector_0 ; case ECLIPSE_PROVIDER : return Messages . ProxySelector_1 ; case NATIVE_PROVIDER : return Messages . ProxySelector_2 ; default : break ; } Assert . isTrue ( false ) ; return null ; }
String removeSuffix ( String loaderFileName , char suffixTerm ) { return loaderFileName . substring ( 0 , loaderFileName . lastIndexOf ( suffixTerm ) ) ; }
private BootstrapConfigurationImpl ( ) { this . defaultProviderClassName = null ; this . constraintValidatorFactoryClassName = null ; this . messageInterpolatorClassName = null ; this . traversableResolverClassName = null ; this . parameterNameProviderClassName = null ; this . clockProviderClassName = null ; this . valueExtractorClassNames = newHashSet ( ) ; this . validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES ; this . isExecutableValidationEnabled = true ; this . constraintMappingResourcePaths = newHashSet ( ) ; this . properties = newHashMap ( ) ; }
public static FileUtils . FileCopyResult copyToFileAndClose ( InputStream is , File file ) throws IOException { file . getParentFile ( ) . mkdirs ( ) ; try ( OutputStream os = new BufferedOutputStream ( new FileOutputStream ( file ) ) ) { ByteStreams . copy ( is , os ) ; } finally { CloseQuietly . close ( is ) ; } return FileUtils . FileCopyResult . buildResult ( file . toPath ( ) ) ; }
@Override public boolean cancel ( final boolean mayInterruptIfRunning ) { return canceled . compareAndSet ( false , true ) ; }
protected AbstractToolbarItem < S > getItem ( final ToolbarCommand < ? > command ) { return items . entrySet ( ) . stream ( ) . filter ( e - > e . getKey ( ) . equals ( command ) ) . findFirst ( ) . orElse ( null ) . getValue ( ) ; }
public CellIdentityCdma ( ) { super ( CellIdentityCdma . class . getSimpleName ( ) , TYPE_CDMA , null , null ) ; mNetworkId = Integer . MAX_VALUE ; mSystemId = Integer . MAX_VALUE ; mBasestationId = Integer . MAX_VALUE ; mLongitude = Integer . MAX_VALUE ; mLatitude = Integer . MAX_VALUE ; mAlphaLong = null ; mAlphaShort = null ; } < REVIEW >
private void header ( @NonNull final BecauseYouReadCard card ) { CardLargeHeaderView header = new CardLargeHeaderView ( getContext ( ) ) . setTitle ( card . title ( ) ) . setSubtitle ( card . subtitle ( ) ) . setPageTitle ( card . getPageTitle ( ) ) . setImage ( card . image ( ) ) ; header ( header ) ; }
private int getCheckTimeoutInSeconds ( ConfigurationGenerator cg ) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS ; try { checkTimeout = Integer . parseInt ( cg . getUserConfig ( ) . getProperty ( PARAM_MONGODB_CHECK_TIMEOUT , String . valueOf ( DEFAULT_CHECK_TIMEOUT_IN_SECONDS ) ) ) ; } catch ( NumberFormatException e ) { log . warn ( String . format ( "Invalid format for % s parameter , using default value instead" , PARAM_MONGODB_CHECK_TIMEOUT ) , e ) ; } return checkTimeout ; }
private void closeConnection ( String deviceId ) { DeviceConfig device = deviceConfigCache . get ( deviceId ) ; if ( device == null ) { logger . warn ( "Could not find device ' { } '" , deviceId ) ; return ; } EpsonProjectorDevice remoteController = device . getConnection ( ) ; if ( remoteController != null ) { try { logger . debug ( "Closing connection to device ' { } ' " , deviceId ) ; remoteController . disconnect ( ) ; } catch ( EpsonProjectorException e ) { logger . debug ( "Error occurred when closing connection to device ' { } '" , deviceId ) ; } } }
public void testSimpleAnnotation ( ) { assertGeneratedMatches ( ImmutableList . of ( "import javax . annotation . Nullable ; " ) , ImmutableList . of ( "@Nullable" ) , ImmutableList . of ( "@javax . annotation . Nullable" ) ) ; }
public void testUnionPointWithEmptyLineString ( ) { assertUnion ( "POINT ( 1 2 ) " , "LINESTRING EMPTY" , "POINT ( 1 2 ) " ) ; }
protected Layers ( EntityLivingBase entity , RenderLivingBase < T > entityRenderer , LayerRenderer < T > layerRenderer , double x , double y , double z ) { super ( entity , entityRenderer , x , y , z ) ; this . layerRenderer = layerRenderer ; }
public void deleteOldDeployments ( final IServer server ) throws CoreException { File deploymentsRootFolder = getDeploymentsRootFolder ( ) ; Arrays . stream ( server . getModules ( ) ) . forEach ( module - > deleteOldDeployment ( module , deploymentsRootFolder ) ) ; }
public CronTab ( String format , int line , Hash hash ) throws ANTLRException { this ( format , line , hash ) ; }
public boolean isKeyFrame ( byte [ ] buff , int off , int len ) { if ( buff == null || len < 1 || buff . length < len ) { return false ; } int nalType = buff [ off ] & kTypeMask ; // Single NAL Unit Packet if ( nalType == kFuA ) { // Fragmented NAL units ( FU - A ) . if ( parseFuaNaluForKeyFrame ( buff , off , len ) ) { return true ; } } else { if ( parseSingleNaluForKeyFrame ( buff , off , len ) ) { return true ; } } return false ; }
@ResponseStatus ( HttpStatus . NO_RESPONSE ) public void delete ( @RequestBody List < Long > printerIds ) throws IOException { for ( long id : printerIds ) { Printer printer = printerService . get ( id ) ; if ( printer != null ) { printerService . remove ( printer ) ; } } }
public DiskWriteModel getDisk ( int deviceId ) { return fDisks . computeIfAbsent ( deviceId , k - > new DiskWriteModel ( k , checkNotNull ( getStateSystemBuilder ( ) ) ) ) ; }
public void testIsConditionValidWhenHeaderIsValid ( ) throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52 ( "header1" ) ; final ConditionCol52 conditionCol2 = fakeConditionCol52 ( "header2" ) ; final Validator validator = new Validator ( fakeCompositeColumn ( conditionCol1 , conditionCol2 ) ) ; assertTrue ( validator . isConditionValid ( conditionCol2 ) ) ; }
public StatsManagerMetrics ( MetricRegistry registry ) { this . registry = registry ; statsPublishFailureCount = registry . counter ( MetricRegistry . name ( StatsManager . class , "StatsPublishFailureCount" ) ) ; totalFetchAndAggregateTime = registry . histogram ( MetricRegistry . name ( StatsManager . class , "TotalFetchAndAggregateTime" ) ) ; fetchAndAggregateTimePerStore = registry . histogram ( MetricRegistry . name ( StatsManager . class , "FetchAndAggregateTimePerStore" ) ) ; }
BlobStatus ( List < String > replicaList ) { if ( replicaList != null ) { unavailable . addAll ( replicaList ) ; } }
protected StorageClientCallback createMemcachedClientCallback ( ) { return new StorageClientCallback ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return _memcached . get ( _memcachedNodesManager . getStorageKeyFormat ( ) . format ( key ) ) ; } } ; }
public void setUp ( ) throws IOException { chargeBody = resource ( "charge . json" ) ; }
private XADataSource createXaDataSourceInstance ( String className ) { try { Class < ? > dataSourceClass = ClassUtils . forName ( className , this . getClass ( ) . getClassLoader ( ) ) ; Object instance = BeanUtils . instantiate ( dataSourceClass ) ; Assert . isInstanceOf ( XADataSource . class , instance ) ; return ( XADataSource ) instance ; } catch ( Exception ex ) { throw new IllegalStateException ( "Unable to create XADataSource instance from '" + className + "'" , ex ) ; } }
protected Optional < ExampleProjectError > getError ( Path projectPath ) { POM pom = this . getPom ( pomService , projectPath ) ; if ( pom . getModules ( ) == null || pom . getModules ( ) . isEmpty ( ) ) { return Optional . empty ( ) ; } else { return Optional . of ( new ExampleProjectError ( CheckModulesValidator . class . getCanonicalName ( ) , "" ) ) ; } }
public boolean isOpen ( ) { return mTransport != null && mTransport . isOpen ( ) ; }
public static void restoreSystemProperties ( ) { System . clearProperty ( "org . uberfire . nio . git . daemon . enabled" ) ; System . clearProperty ( "org . uberfire . nio . git . ssh . enabled" ) ; System . clearProperty ( "org . uberfire . sys . repo . monitor . disabled" ) ; }
protected void patch ( Context context , HttpServletRequest request , String apiCategory , String model , UUID id , Patch patch ) throws AuthorizeException , SQLException { final Group group = dsoService . find ( context , id ) ; if ( group != null && isPatchUnprocessable ( context , group ) ) { throw new UnprocessableEntityException ( "This group cannot be patched . " ) ; } patchDSpaceObject ( apiCategory , model , id , patch ) ; }
protected String computeMetricName ( Message < ? > message ) { return nameExpression . getValue ( evaluationContext , message , CharSequence . class ) . toString ( ) ; }
public boolean supportsBitmapIndex ( final BitmapIndexSelector selector ) { // We can operate on bitmap indexes if this is a constant expression , or if it reads one column that has // an index and does not have multiple values . The lack of multiple values is important because expression // filters treat multi - value arrays as nulls , which doesn't permit index based filtering . return requiredBindings . isEmpty ( ) || ( requiredBindings . size ( ) == 1 && selector . getBitmapIndex ( Iterables . getOnlyElement ( requiredBindings ) ) != null && ! selector . hasMultipleValues ( Iterables . getOnlyElement ( requiredBindings ) ) ) ; }
private void setM ( Market currentMarket ) { this . currentMarket = currentMarket ; }
private long countMapWithAtleastOneQueryCache ( Node node ) { return maps . stream ( ) . filter ( distributedObject - > { MapConfig config = node . getConfig ( ) . getMapConfig ( distributedObject . getName ( ) ) ; if ( config != null ) { return ! config . getQueryCacheConfigs ( ) . isEmpty ( ) ; } return false ; } ) . count ( ) ; }
public void addModifiedColumns ( GlobalConfiguration globalCfg , Value value , Element parent , PropertyAuditingData propertyAuditingData ) { String columnName ; if ( propertyAuditingData . isModifiedFlagNameExplicitlySpecified ( ) ) { columnName = propertyAuditingData . getExplicitModifiedFlagName ( ) ; } MetadataTools . addModifiedFlagProperty ( parent , propertyAuditingData . getName ( ) , globalCfg . getModifiedFlagSuffix ( ) , columnName ) ; }
private boolean isFailedEqualityComparison ( Throwable exception ) { if ( ! ( exception instanceof ConditionNotSatisfiedError ) ) return false ; ConditionNotSatisfiedError conditionNotSatisfiedError = ( ConditionNotSatisfiedError ) exception ; Condition condition = conditionNotSatisfiedError . getCondition ( ) ; ExpressionInfo expr = condition . getExpression ( ) ; return expr != null && expr . isEqualityComparison ( ) && // it is equality conditionNotSatisfiedError . getCause ( ) == null ; // and it is not failed because of exception }
public final RedirectAction getLogoutRedirectAction ( final WebContext context ) { // it's an AJAX request - > unauthorized ( instead of a redirection ) if ( ajaxRequestResolver . isAjax ( context ) ) { logger . info ( "AJAX request detected - > returning 401" ) ; cleanRequestedUrl ( context ) ; return null ; } // authentication has already been tried - > unauthorized final String attemptedAuth = ( String ) context . getSessionAttribute ( getName ( ) + ATTEMPTED_AUTHENTICATION_SUFFIX ) ; if ( CommonHelper . isNotBlank ( attemptedAuth ) ) { return null ; } init ( context ) ; return retrieveLogoutRedirectAction ( context ) ; } // Review : These checks are not necessary for logout .
public void setMainTabSelectedItem ( Erratum selectedItem ) { logger . debug ( "setMainTabSelectedItem" ) ; // $NON - NLS - 1$ updateErrataDetailFormPanel ( selectedItem ) ; }
public EurekaArchaius2InstanceConfig ( Config config , String namespace , DataCenterInfo dcInfo ) { this . defaultAppGroup = config . getString ( FALLBACK_APP_GROUP_KEY , Values . UNKNOWN_APPLICATION ) ; this . namespace = namespace ; this . config = config . getPrefixedView ( namespace ) ; this . dcInfo = dcInfo ; // TODO : Remove this when DiscoveryManager is finally no longer used DiscoveryManager . getInstance ( ) . setEurekaInstanceConfig ( this ) ; }
public AdhocQueryResponse respondingGatewayCrossGatewayQuery ( AdhocQueryRequest body , WebServiceContext context ) { AssertionType assertion = getAssertion ( context , null ) ; if ( assertion != null ) { assertion . setImplementsSpecVersion ( UDDI_SPEC_VERSION . SPEC_2_0 . toString ( ) ) ; } return inboundDocQuery . respondingGatewayCrossGatewayQuery ( body , assertion , getWebContextProperties ( context ) ) ; }
public void allBindingsChanged ( BindingProvider provider ) { logger . trace ( "allBindingsChanged ( ) called . " ) ; if ( provider instanceof VeluxBindingProvider ) { } super . allBindingsChanged ( provider ) ; }
private Map < String , String > makeParserFields ( ) { final Map < String , String > fieldMapping = Maps . newHashMap ( ) ; for ( final SchemaPath sp : getColumns ( ) ) { final String drillField = sp . getRootSegment ( ) . getPath ( ) ; try { String parserField = HttpdParser . parserFormattedFieldName ( drillField ) ; fieldMapping . put ( drillField , parserField ) ; } catch ( Exception e ) { LOG . info ( "Putting field : " + drillField + " into map" , e ) ; } } return fieldMapping ; }
public Builder client ( @NonNull OkHttpClient client ) { if ( client == null ) { throw new NullPointerException ( "client == null" ) ; } downloader = new OkHttp3Downloader ( client , client . cache ( ) , true ) ; return this ; }
protected Optional < CoverageReportView > getCoverageReportView ( PlaceRequest placeRequest ) { final Activity activity = placeManager . getActivity ( placeRequest ) ; if ( activity == null ) { return Optional . empty ( ) ; } else { final AbstractWorkbenchActivity coverageActivity = ( AbstractWorkbenchActivity ) activity ; return Optional . of ( ( CoverageReportView ) coverageActivity . getWidget ( ) ) ; } }
private void edit ( ) { if ( getWindow ( ) != null ) { return ; } AffinityGroup affinityGroup = getSelectedItem ( ) ; if ( affinityGroup == null ) { return ; } AffinityGroupModel model = new EditAffinityGroupModel ( affinityGroup , this , getClusterResolver ( ) ) ; model . init ( ) ; setWindow ( model ) ; }
public void testIteratorCloses ( ) throws Exception { Kabob bob = db . getJdbi ( ) . onDemand ( Kabob . class ) ; Iterator < Something > itty = bob . iterateAll ( ) ; itty . hasNext ( ) ; }
public static void assertSwappedIngredientsMatch ( ObjectInstance ing , State s , List < String > ings ) { Set < String > swappedIngredients = IngredientFactory . getRecursiveContentsAndSwapped ( s , ing ) ; Boolean match = true ; assertEquals ( swappedIngredients . size ( ) , ings . size ( ) ) ; for ( String i : ings ) { if ( ! swappedIngredients . contains ( i ) ) { match = false ; break ; } } assertTrue ( match ) ; }
public List < Document > getClientDocuments ( String clientId ) throws MambuApiException { if ( clientId == null || clientId . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( "ClientId ID must not be null or empty" ) ; } return DocumentsService . getDocuments ( mambuAPIService , CLIENTS , clientId ) ; }
public void testFailForCheckDisksNotInBackupStorage ( ) { final VM vm = new VM ( ) ; command . setVm ( vm ) ; when ( vmDao . get ( command . getParameters ( ) . getVmId ( ) ) ) . thenReturn ( vm ) ; command . setCluster ( new Cluster ( ) ) ; Guid storageDomainId = initDiskImage ( vm ) ; when ( storageDomainStaticDao . get ( storageDomainId ) ) . thenReturn ( backupStorageDomain ( true ) ) ; assertTrue ( "checkDisksNotInBackupStorage ( ) fails to run because one or more disk is in backup domain" , command . checkDisksInBackupStorage ( ) ) ; }
public long skip ( long n ) { if ( n > 0 ) { long skip = bytes . length - pos ; if ( skip > n ) skip = n ; pos += skip ; return skip ; } else { int idx = Math . min ( bytes . length , pos ) ; long skip = idx + n ; pos = ( int ) Math . max ( offset , skip ) ; return skip ; } }
public void actionPerformed ( AnActionEvent e ) { BaseAction . State s = setupAction ( e ) ; List < String > lastTask = Collections . singletonList ( s . getLastRanTask ( ) ) ; s . performTasks ( lastTask ) ; try { s . cleanup ( ) ; } finally { s . cleanup ( ) ; } }
public void addAll ( SerializableStatus status ) { Assert . isLegal ( status != null ) ; SerializableStatus [ ] statuses = ( SerializableStatus [ ] ) status . getChildren ( ) ; for ( SerializableStatus s : statuses ) { add ( s ) ; } }
protected boolean canDoAction ( ) { return super . canDoAction ( ) && VdsGroupExists ( ) && changesAreClusterCompatible ( ) && logicalNetworkExists ( ) ; }
protected void reloadCache ( ) { schemaMappingCache . invalidateAll ( ) ; // this preloads the list of schema names Set < String > schemas = getSchemaNames ( ) ; // invalidate and remove from the schema table mapping all records , start from scratch for ( String key : schemaTableMapping . keySet ( ) ) { schemaTableMapping . get ( key ) . invalidateAll ( ) ; schemaTableMapping . remove ( key ) ; } for ( final String schema : schemas ) { // this preloads the list of table names for each schema getTableNames ( schema ) ; } }
public void testSetUser ( ) { Configuration configuration = generateConfiguration ( ) ; configuration . setUser ( "24601" , "m@rp . fr" , "MM" ) ; assertEquals ( "24601" , configuration . getUser ( ) . getId ( ) ) ; assertEquals ( "m@rp . fr" , configuration . getUser ( ) . getEmail ( ) ) ; assertEquals ( "MM" , configuration . getUser ( ) . getName ( ) ) ; }
private void writeStringToFile ( File file , String str ) throws IOException { try ( BufferedWriter bw = new BufferedWriter ( new FileWriter ( file ) ) ) { bw . write ( str ) ; } }
private RelNode possiblyWrapRootWithOuterLimitFromContext ( RelRoot root ) { Object outerLimitObj = plannerContext . getQueryContext ( ) . get ( PlannerContext . CTX_SQL_OUTER_LIMIT ) ; Long outerLimit = DimensionHandlerUtils . convertObjectToLong ( outerLimitObj , true ) ; if ( outerLimit == null ) { return root . rel ; } return LogicalSort . create ( root . rel , root . collation , makeBigIntLiteral ( 0 ) , makeBigIntLiteral ( outerLimit ) ) ; }
public void testSamePortConfiguredForClientAndElection ( ) throws IOException { QuorumPeerConfig quorumPeerConfig = new QuorumPeerConfig ( ) ; try { Properties zkProp = getDefaultZKProperties ( ) ; zkProp . setProperty ( "server . 1" , "localhost : 2888 : 2888" ) ; quorumPeerConfig . parseProperties ( zkProp ) ; fail ( "ConfigException is expected" ) ; } catch ( ConfigException ce ) { String expectedMessage = "Client and election port must be different ! Please update the configuration file on server . 1" ; assertEquals ( expectedMessage , ce . getMessage ( ) ) ; } }
public static URLConnection openURLConnection ( URL url ) throws IOException { return openURLConnection ( url , DEFAULT_CONNECTION_TIMEOUT ) ; }
public void updateParentCommandId ( ArrayList < VdcActionParametersBase > parameters , CommandBase command ) { parameters . forEach ( param - > { param . setParentCommand ( command . getActionType ( ) ) ; param . setParentParameters ( command . getParameters ( ) ) ; } ) ; }
public MetricData getDatapointsForRange ( Locator locator , Range range , Granularity gran ) { RollupType rollupType = null ; String rollupTypeStr = metaCache . safeGet ( locator , rollupTypeCacheKey ) ; if ( rollupTypeStr != null ) { rollupType = RollupType . fromString ( rollupTypeStr ) ; } if ( rollupType == null ) { rollupType = RollupType . BF_BASIC ; } return getNumericMetricDataForRange ( locator , range , gran , rollupType ) ; }
public boolean shouldProcessRequestedCashAdvancesFromSaeData ( ) { return ( KFSConstants . ParameterValues . YES . equalsIgnoreCase ( getConcurParameterValue ( ConcurParameterConstants . CONCUR_PROCESS_CASH_ADVANCES_FROM_SAE_DATA_IND ) ) ) ; }
static Path resolvePath ( Path file , String workingDirectory ) { return file == null ? null : ( file . isAbsolute ( ) ? file : ( file . getFileName ( ) . startsWith ( File . separator ) ? file . toAbsolutePath ( ) : ( Paths . get ( workingDirectory , file . getFileName ( ) . toString ( ) ) ) ) ) ; }
public void removeServiceEventListener ( Object listener ) { assert getExecutor ( ) . isInExecutorThread ( ) ; ListenerEntry entry = new ListenerEntry ( listener , null ) ; if ( DsfDebugOptions . DEBUG_SESSION_LISTENERS ) { String msg = new Formatter ( ) . format ( " % s % s removed as a service listener to % s ( id = % s ) " , // $NON - NLS - 1$ DsfPlugin . getDebugTime ( ) , LoggingUtils . toString ( listener ) , LoggingUtils . toString ( this ) , getId ( ) ) . toString ( ) ; DsfDebugOptions . trace ( msg ) ; } fListeners . remove ( entry ) ; }
private static void validateEntityLabel ( EntityType entityType ) { String label = entityType . getLabel ( ) ; if ( label == null || label . isEmpty ( ) ) { throw new MolgenisValidationException ( new ConstraintViolation ( format ( "Label of EntityType [ % s ] is empty" , entityType . getId ( ) ) ) ) ; } else if ( label . trim ( ) . equals ( "" ) ) { throw new MolgenisValidationException ( new ConstraintViolation ( format ( "Label of EntityType [ % s ] contains only white space" , entityType . getId ( ) ) ) ) ; } }
public void deleteIfExists ( File path , String user , String logPrefix ) throws IOException { LOG . info ( "Deleting path { } " , path ) ; Path p = path . toPath ( ) ; if ( Files . exists ( p ) ) { try { FileUtils . forceDelete ( path ) ; } catch ( FileNotFoundException ignored ) { } } }
protected void releaseTransport ( Transport transport ) { if ( dedicatedTransport != transport ) { // we aren't using this transport . we can release it super . releaseTransport ( transport ) ; } }
String prepare ( String name , Map < String , Map < String , String > > domain ) { while ( domain . containsKey ( name ) ) { name += "~" ; } domain . put ( name , new LinkedHashMap < > ( ) ) ; return name ; }
public synchronized void deleteFile ( ) { closeFile ( ) ; File historyTreeFile = fConfig . getStateFile ( ) ; try { if ( ! historyTreeFile . delete ( ) ) { /* We didn't succeed in deleting the file */ Activator . getDefault ( ) . logError ( "Failed to delete" + historyTreeFile . getName ( ) ) ; // $NON - NLS - 1$ } } catch ( SecurityException e ) { Activator . getDefault ( ) . logError ( e . getMessage ( ) , e ) ; } }
public void delete ( UserEntityFile userEntityFile ) { super . delete ( userEntityFile ) ; }
public final void init ( ) { if ( dubboConfigBinder == null ) { try { dubboConfigBinder = applicationContext . getBean ( DubboConfigBinder . class ) ; } catch ( BeansException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( "DubboConfigBinder Bean can't be found in ApplicationContext . " ) ; } // Use Default implementation dubboConfigBinder = createDubboConfigBinder ( applicationContext . getEnvironment ( ) ) ; } } dubboConfigBinder . setIgnoreUnknownFields ( ignoreUnknownFields ) ; dubboConfigBinder . setIgnoreInvalidFields ( ignoreInvalidFields ) ; }
public static void removeDuplicateImages ( Feed feed ) { Set < String > known = new HashSet < String > ( ) ; for ( FeedItem item : feed . getItems ( ) ) { String url = item . hasItemImage ( ) ? item . getImage ( ) . getDownload_url ( ) : null ; if ( url != null ) { if ( known . contains ( url ) ) { item . setImage ( null ) ; } else { known . add ( url ) ; } } } }
protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
public int [ ] borrowIntArray ( int positionCount ) { int [ ] array ; while ( intArraysTop >= 0 && intArrays [ intArraysTop ] . length < positionCount ) { estimatedSizeInBytes -= sizeOfIntArray ( intArrays [ intArraysTop ] . length ) ; intArrays [ intArraysTop ] = null ; -- intArraysTop ; } if ( intArraysTop < 0 ) { array = new int [ positionCount ] ; estimatedSizeInBytes += sizeOfIntArray ( positionCount ) ; } else { array = intArrays [ intArraysTop ] ; -- intArraysTop ; } ++ borrowedIntArrays ; return array ; }
public List < MergeStrategySection > getAllMergeStrategySections ( ) { List < MergeStrategySection > all = new ArrayList < MergeStrategySection > ( ) ; all . addAll ( getLocalMergeStrategySections ( ) ) ; all . addAll ( getInheritedMergeStrategySections ( ) ) ; return all ; }
public String getDeleteDescription ( ) { return getName ( ) + " ( " + getAlias ( ) + " ) " ; }
boolean selectCommonAncestor ( ReadOnlyDocument doc1 , ReadOnlyDocument doc2 ) throws CouchbaseLiteException { if ( ! c4doc . getRawDoc ( ) . selectCommonAncestorRevision ( doc1 . getRevID ( ) , doc2 . getRevID ( ) ) ) return false ; setC4Doc ( c4doc ) ; // self . c4Doc = _c4Doc ; // This will update to the selected revision return true ; }
protected void setHazelcastRegisteredEventListenerId ( String hazelcastRegisteredEventListenerId ) { this . hazelcastRegisteredEventListenerId = hazelcastRegisteredEventListenerId ; }
protected String getFileName ( ITask task , Predicate < String > fileExists ) { String encodedFileName = CoreUtil . asFileName ( task . getTaskId ( ) ) ; // for backwards - compatibility with versions that always encoded file names , // we will use an encoded name if the file with an encoded name already exists if ( fileExists . test ( encodedFileName ) ) { return encodedFileName ; } // if file with encoded name does not exist , we will only encode file name if it is required String fileName ; if ( requiresEncoding ( task . getTaskId ( ) ) ) { fileName = encodedFileName ; } else { fileName = task . getTaskId ( ) ; } // trim the file name if it is too long return trimFilenameIfRequired ( fileName ) ; }
public boolean createIndex ( String indexName ) { Assert . notNull ( indexName , "No index defined for Query" ) ; try { CreateIndexRequest indexRequest = createIndexRequest ( indexName ) ; return client . indices ( ) . create ( indexRequest , RequestOptions . DEFAULT ) . isAcknowledged ( ) ; } catch ( Exception e ) { throw new ElasticsearchException ( "Failed to create index " + indexName , e ) ; } }
public static Properties defaultProperties ( ) { Properties properties = BaseHttpApiMetadata . defaultProperties ( ) ; properties . setProperty ( ShipyardProperties . SHIPYARD_CREDENTIAL , " < remote - service - key - given - by - shipyard - cli > " ) ; return properties ; }
protected boolean writeNeedsRemoteValue ( InvocationContext ctx , WriteCommand command , Object key ) { if ( command . hasFlag ( Flag . CACHE_MODE_LOCAL ) ) { return false ; } if ( ctx . isOriginLocal ( ) ) { // The return value only matters on the originator . // Conditional commands also check the previous value only on the originator . if ( ! command . readsExistingValues ( ) ) { return false ; } // TODO Could make DELTA_WRITE / ApplyDeltaCommand override SKIP_REMOTE_LOOKUP by changing next line to // return ! command . hasFlag ( Flag . SKIP_REMOTE_LOOKUP ) || command . alwaysReadsExistingValues ( ) ; return ! command . hasFlag ( Flag . SKIP_REMOTE_LOOKUP ) ; } else { // Ignore SKIP_REMOTE_LOOKUP on remote nodes // TODO Can we ignore the CACHE_MODE_LOCAL flag as well ? if ( ! command . alwaysReadsExistingValues ( ) ) { return false ; } } return true ; }
public BulkReceiveLibraryBackend ( LibraryDto dto , Integer quantity , Project project , SampleClass aliquotClass , String defaultSciName , LibraryTemplateService libraryTemplateService ) { super ( "libraryReceipt" , LibraryDto . class , "Libraries" , dto , quantity ) ; if ( isDetailedSampleEnabled ( ) && aliquotClass == null ) throw new InvalidParameterException ( "Aliquot class cannot be null" ) ; this . project = project ; this . aliquotClass = aliquotClass ; this . defaultSciName = defaultSciName ; this . libraryTemplateService = libraryTemplateService ; newBox = dto . getBox ( ) ; }
public void evict ( AccountExternalId id ) { byKey . remove ( id . getKey ( ) ) ; byAccountId . remove ( id . getAccountId ( ) ) ; byEmail . remove ( new EmailWrapper ( id . getEmailAddress ( ) ) ) ; }
protected AbstractBlockFamily ( BlockFamilyDefinition definition , BlockShape shape , BlockBuilderHelper blockBuilder ) { }
public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null ) { mGoogleApiClient . stopAutoManage ( getActivity ( ) ) ; if ( mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } } }
protected Guid getQuotaId ( ) { if ( getNewDisk ( ) != null && isInternalManagedDisk ( ) ) { return ( ( DiskImage ) getNewDisk ( ) ) . getQuotaId ( ) ; } return null ; }
public JClogin ( ) { logger . trace ( "JClogin ( this = { } ) called . " , this ) ; logger . trace ( "JClogin ( constructor ) called . " ) ; }
public ScriptingJobs ( ScriptingAdaptor adaptor , XenonEngine xenonEngine , SchedulerConnectionFactory connectionFactory ) { this . adaptor = adaptor ; this . xenonEngine = xenonEngine ; this . adaptorName = adaptor . getName ( ) ; this . connectionFactory = connectionFactory ; connections = new HashMap < > ( ) ; }
public TMSKeyBuilder ( final String prefix , TileLayerDispatcher layers ) { this . prefix = Strings . isNullOrEmpty ( prefix ) ? "" : prefix ; this . layers = layers ; }
public void testLeftJoinMissingStats ( ) { PlanNodeStatsEstimate leftStats = planNodeStats ( 0 , new SymbolStatistics ( LEFT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( LEFT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; PlanNodeStatsEstimate rightStats = planNodeStats ( 0 , new SymbolStatistics ( RIGHT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( RIGHT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; assertJoinStats ( LEFT , leftStats , rightStats , leftStats ) ; }
public Collection < ClassDefinition > generate ( ExtensionContext input ) throws UnableToCompleteException { PrintWriter printWriter = tryCreate ( ) ; if ( printWriter != null ) { mergeTemplate ( printWriter ) ; commit ( printWriter ) ; registerGinBinding ( ) ; } else { getLogger ( ) . debug ( "Jackson Mapper Provider already generated . Returning . " ) ; } return Collections . singletonList ( getClassDefinition ( ) ) ; }
@Test public void shouldHandleSchemeInsensitiveCase ( ) { String [ ] schemes = { "http" , "https" , "HTTP" , "HTTPS" , "HTtP" , } ; for ( String scheme : schemes ) { final Uri uri = URI_1 . buildUpon ( ) . scheme ( scheme ) . build ( ) ; final Boolean shouldHandle = networkHandler . canHandleRequest ( TestUtils . mockRequest ( uri ) ) ; assertThat ( shouldHandle ) . isTrue ( ) ; } }
public void populate ( CoreSession session ) throws ClientException { UserManager um = Framework . getLocalService ( UserManager . class ) ; // Create some users if ( um != null ) { Framework . doPrivileged ( ( ) - > createUsersAndGroups ( um ) ) ; } }
public void stop ( BundleContext context ) throws Exception { try { Job . getJobManager ( ) . join ( LUCENE_JOB_FAMILY , null ) ; plugin = null ; } finally { super . stop ( context ) ; } }
public ScheduledFuture < ? > schedule ( Runnable command , long delay , TimeUnit unit ) { ObjectUtil . checkNotNull ( unit , "unit" ) ; if ( delay < 0 ) { delay = 0 ; } validateScheduled0 ( delay , unit ) ; return schedule ( new ScheduledFutureTask < Void > ( this , deadlineNanos ( unit . toNanos ( delay ) ) , ObjectUtil . checkNotNull ( command , "command" ) ) ) ; }
public Integer invoke ( ) { Integer result = 0 ; try ( InputStream in = cache . getViaStream ( key ) ) { if ( in == null ) return null ; int read = 0 ; while ( ( read = in . read ( buffer ) ) != - 1 ) result = result + read ; return value = result ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } catch ( NullPointerException e ) { return null ; } }
public CoreEvent process ( CoreEvent event ) throws MuleException { try { return processToApply ( event , this ) ; } catch ( Exception error ) { Throwable cause = error . getCause ( ) ; if ( cause != null && cause . getCause ( ) instanceof ExpressionRuntimeException ) { // Runtime exception caused by Retry Ctx initialization , propagating throw ( ( ExpressionRuntimeException ) cause . getCause ( ) ) ; } else { // Not caused by context initialization . Throwing as raised . throw error ; } } }
private static void addChildren ( Map < String , List < PatchLineComment > > parentMap , List < PatchLineComment > children , List < PatchLineComment > outResult ) { if ( children != null ) { for ( PatchLineComment c : children ) { outResult . add ( c ) ; addChildren ( parentMap , parentMap . get ( c . getKey ( ) . get ( ) ) , outResult ) ; } } }
public void dispose ( ) { LogManager . logInfo ( "Disposing" , this ) ; // $NON - NLS - 1$ fWindow = null ; }
public boolean equals ( byte [ ] obj , Object otherObj ) { if ( obj == otherObj ) return true ; if ( obj == null || ! ( obj instanceof byte [ ] ) ) return false ; if ( otherObj == null || byte [ ] . class != otherObj . getClass ( ) ) return false ; byte [ ] byteArray = obj ; byte [ ] otherByteArray = ( byte [ ] ) otherObj ; return Arrays . equals ( byteArray , otherByteArray ) ; }
private EngineSearcherTotalHitsMatcher ( Query query , int totalHits ) { this . query = query ; this . totalHits = totalHits ; }
protected boolean processEntryForContext ( final ILogData data ) { if ( data != null ) { try { final Object payload = data . getPayload ( runtime ) ; } catch ( Throwable e ) { log . error ( "Exception caught at address { } , { } , { } " , data . getGlobalAddress ( ) , data . getStreams ( ) , data . getType ( ) ) ; throw e ; } } return false ; }
public boolean isQueryCacheable ( Query query ) { // O ( n ) impl , but I don't think we'll ever have a million query types here return ! unCacheable . contains ( query . getType ( ) ) ; }
public static boolean isMoeFile ( IResource resource ) { if ( resource instanceof IFile ) { return MODEL_OBJECT_ELEMENTFILE_EXTENSION . equals ( resource . getFileExtension ( ) ) ; } return false ; }
public List < Property > getProperties ( ) { return m_properties ; }
public void setup ( ) throws NoSuchFieldException , IllegalAccessException { // Before "onCreate" , we need to record the instance count for the test instanceCountField = OpenHelperManager . class . getDeclaredField ( "instanceCount" ) ; instanceCountField . setAccessible ( true ) ; instanceCount = instanceCountField . getInt ( null ) ; activity = Robolectric . buildActivity ( OrmLiteActivity_ . class ) . create ( ) . get ( ) ; }
public static Injector getInjector ( ) { if ( injector == null ) { injector = Guice . createInjector ( new GuiceModule ( emf ) ) ; } return injector ; }
public void serialize ( ) throws Exception { String xml = serializer . serialize ( header ) ; log . debug ( xml ) ; XMLAssert . assertXpathExists ( " / subscriptionHeader / contentUri" , xml ) ; XMLAssert . assertXpathExists ( " / subscriptionHeader / packageHeader" , xml ) ; XMLAssert . assertXpathExists ( " / subscriptionHeader / packageHeader / name" , xml ) ; }
protected IMicroblockContainerTile getMicroblockTile ( IBlockAccess world , BlockPos pos ) { TileEntity tile = world . getTileEntity ( pos ) ; return tile instanceof IMicroblockContainerTile ? ( IMicroblockContainerTile ) tile : null ;
protected void setMethod ( final ZonemasterRequest . Method method ) { this . method = method . getMethod ( ) ; this . id = method . getId ( ) ; }
public Dimension getFloatingItemOffset ( ) { if ( editPart instanceof FloatingLabelEditPart ) { return ( ( FloatingLabelEditPart ) editPart ) . getFloatingItemOffset ( ) ; } Dimension dimension = new Dimension ( ) ; return dimension ; }
private static synchronized ITerminalConnector getConnector ( IRemoteConnection irc ) throws RemoteConnectionException { ITerminalConnector con = cons . get ( irc . getAddress ( ) ) ; if ( con == null ) { con = TerminalConnectorExtension . makeTerminalConnector ( "org . eclipse . ptp . remote . internal . terminal . RemoteToolsConnector" ) ; // $NON - NLS - 1$ cons . put ( irc . getAddress ( ) , con ) ; } else if ( irc . isOpen ( ) ) { return null ; } else { irc . open ( new NullProgressMonitor ( ) ) ; return null ; } return con ; }
public long getGlobalClassLoaderId ( ) { return ClassLoaderIdentifier . GLOBAL_ID ; }
private int getCmasSeverity ( ) { switch ( messageIdentifier ) { case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_OBSERVED : case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_EXTREME_IMMEDIATE_LIKELY : return SmsCbCmasInfo . CMAS_SEVERITY_EXTREME ; case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_OBSERVED : case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_EXTREME_EXPECTED_LIKELY : return SmsCbCmasInfo . CMAS_SEVERITY_EXTREME ; case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_OBSERVED : case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_SEVERE_IMMEDIATE_LIKELY : case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_OBSERVED : case SmsCbConstants . MESSAGE_ID_CMAS_ALERT_SEVERE_EXPECTED_LIKELY : return SmsCbCmasInfo . CMAS_SEVERITY_SEVERE ; default : return SmsCbCmasInfo . CMAS_SEVERITY_UNKNOWN ; } }
public Collection < String > getAliases ( final KeyStore keyStore ) throws ScriptSignatureException { try { if ( keyStore != null ) return Collections . list ( keyStore . aliases ( ) ) ; } catch ( KeyStoreException e ) { throw new ScriptSignatureException ( "Keystore not initialized properly . Try again . " , e ) ; } return Collections . emptyList ( ) ; }
public List < Expression > getExpressions ( ) { List < Expression > result = new ArrayList < > ( groupByAttributes ) ; result . add ( expression ) ; return result ; }
private boolean isIdentityProvider ( ) { try { PackageInfo packageInfo = context . getPackageManager ( ) . getPackageInfo ( context . getPackageName ( ) , PackageManager . GET_ACTIVITIES ) ; for ( ActivityInfo activityInfo : packageInfo . activities ) { if ( activityInfo . name . equals ( IDPAccountPickerActivity . class . getName ( ) ) ) { return true ; } } } catch ( NameNotFoundException e ) { SalesforceSDKLogger . e ( TAG , "Exception occurred while examining application info" , e ) ; } return false ; }
List < BlockedItem > getBlockedItems ( ) { return new ArrayList < BlockedItem > ( snapshot . blockedProjects ) ; }
public IStatus validate ( String path ) { if ( fTrace == null ) { return new Status ( IStatus . ERROR , Activator . PLUGIN_ID , "Trace is null" ) ; } return fTrace . validate ( null , path ) ; }
public static boolean isTCCPacket ( ByteArrayBuffer baf ) { int rc = RTCPHeaderUtils . getReportCount ( baf ) ; return rc == FMT && isRTPFBPacket ( baf ) ; }
private Result waitForCompletion ( ) throws InterruptedException , IOException { // wait for the completion Result result ; while ( ( result = checkForCompletion ( ) ) == null ) { Thread . sleep ( 1000 ) ; } return result ; }
public void testUnderlyingReaders ( ) throws IOException , FormatException { FakeReader reader = new FakeReader ( ) ; FileStitcher fs = new FileStitcher ( reader ) ; assertNotNull ( fs . getUnderlyingReaders ( ) ) ; fs . setId ( "test_z < 0 - 2 > . fake" ) ; assertNotNull ( fs . getUnderlyingReaders ( ) ) ; fs . close ( ) ; }
public void shouldGetDiagnosisByUuid ( ) { String uuid = "4e663d66 - 6b78 - 11e0 - 93c3 - 18a905e044dc" ; int diagnosisId = 1 ; Diagnosis diagnosis = diagnosisDAO . getDiagnosisByUuid ( uuid ) ; assertEquals ( 1 , ( int ) diagnosis . getId ( ) ) ; }
public void setUpCallToAction ( String callToActionText ) { if ( callToActionText == null ) { callToActionContainer . setVisibility ( GONE ) ; } else { callToActionContainer . setVisibility ( VISIBLE ) ; callToActionTextView . setText ( callToActionText ) ; } }
protected AbstractTableViewer getTableViewer ( ) { return actionContext . getViewer ( ) ; }
public void start ( ) { if ( ! started ) { log . info ( "Starting prefetching thread . " ) ; executorService . execute ( new DefaultGetRecordsCacheDaemon ( ) ) ; } started = true ; }
public SymbolTableBuilder ( String fullyQualifiedModuleName ) { this . fullyQualifiedModuleName = Arrays . asList ( fullyQualifiedModuleName . split ( "\\ . " ) ) ; }
public long getNextTimestamp ( ) throws TimestampIOException { long nextTS = _timestampCounter . addAndGet ( TIMESTAMP_INCREMENT ) ; if ( nextTS > _maxReservedTimestamp ) { reserveNextBlock ( nextTS ) ; } _numTimestampsCreated . incrementAndGet ( ) ; // JMX metric return nextTS ; }
public TileRenderRunnable ( TileCanvasViewGroup viewGroup , Tile tile ) { mTileCanvasViewGroup = new WeakReference < > ( viewGroup ) ; mTile = new WeakReference < > ( tile ) ; }
public Response viewDataverse ( @PathParam ( "identifier" ) String idtf ) { return allowCors ( response ( req - > ok ( json ( execCommand ( new GetDataverseCommand ( req , findDataverseOrDie ( idtf ) ) ) , false , settingsService . isTrueForKey ( SettingsServiceBean . Key . ExcludeEmailFromExport , false ) ) ) ) ) ; }
public ResourceNotFoundException ( IdString id ) { super ( id . get ( ) ) ; }
private AppiumDriver getDriverSafe ( ) { WebDriver driver = getDriver ( ) ; if ( driver instanceof EventFiringWebDriver ) { driver = ( ( EventFiringWebDriver ) driver ) . getWrappedDriver ( ) ; return ( AppiumDriver ) driver ; } throw new ClassCastException ( "Appium Driver can not be casted from the actual driver . " ) ; }
public void assertSimilarity ( final File actualFile , final double maxDistance ) throws IOException { BufferedImage tempImg = ImageIO . read ( actualFile ) ; File tempFile = File . createTempFile ( "print - test" , " . png" ) ; ImageIO . write ( tempImg , "png" , tempFile ) ; assertSimilarity ( ImageIO . read ( tempFile ) , maxDistance ) ; }
public URI getLocationHeaderAsURI ( ) { try { return locationHeader != null ? new URI ( locationHeader ) : null ; } catch ( URISyntaxException e ) { if ( LRALogger . logger . isInfoEnabled ( ) ) { LRALogger . logger . infof ( "missing Location header on ACCEPTED response % s failed : % s" , getRequestURI ( ) , e . getMessage ( ) ) ; } return null ; } }
public void setup ( Method method ) throws Exception { logger . info ( "test name : " + method . getName ( ) ) ; KerberosHelper . loginFromKeytab ( MerlinConstants . CURRENT_USER_NAME ) ; bundles [ 0 ] = Util . readELBundles ( ) [ 0 ] [ 0 ] ; bundles [ 0 ] = new Bundle ( bundles [ 0 ] , cluster . getEnvFileName ( ) , cluster . getPrefix ( ) ) ; bundles [ 0 ] . generateUniqueBundle ( ) ; bundles [ 0 ] . setProcessWorkflow ( aggregateWorkflowDir ) ; }
public View getOverflowMenuAnchor ( ) { View view = getToolbar ( ) . findViewById ( R . id . menu_overflow_button ) ; if ( view != null ) { return view ; } return getToolbar ( ) ; }
public List < ResponseInfo > sendAndPoll ( List < RequestInfo > requestInfos ) throws IOException { if ( closed ) { throw new IllegalStateException ( "The NetworkClient is closed . " ) ; } List < ResponseInfo > responseInfoList = new ArrayList < ResponseInfo > ( ) ; for ( RequestInfo requestInfo : requestInfos ) { pendingRequests . add ( new RequestMetadata ( time . milliseconds ( ) , requestInfo , null ) ) ; } List < NetworkSend > sends = prepareSends ( responseInfoList ) ; selector . poll ( POLL_TIMEOUT_MS , sends ) ; handleSelectorEvents ( responseInfoList ) ; return responseInfoList ; }
public void handleQuotaColumnVisibility ( ) { isQuotaVisible = false ; SystemTreeItemModel treeItem = ( SystemTreeItemModel ) CommonModel . getInstance ( ) . getSystemTree ( ) . getSelectedItem ( ) ; if ( treeItem != null && SystemTreeItemType . DataCenter == treeItem . getType ( ) ) { StoragePool storagePool = ( StoragePool ) treeItem . getEntity ( ) ; if ( QuotaEnforcementTypeEnum . DISABLED != storagePool . getQuotaEnforcementType ( ) ) { isQuotaVisible = true ; } } onDiskViewTypeChanged ( ) ; }
public CompletableFuture < StaticResource > getResource ( String name ) { StaticResource template = templates . get ( name ) ; if ( template != null ) { return CompletableFuture . completedFuture ( template ) ; } return delegate . getResource ( name ) . exceptionally ( ( th ) - > { templates . putIfAbsent ( name , null ) ; return null ; } ) . thenApply ( ( file ) - > { templates . put ( name , file ) ; return file ; } ) ; }
public void testSessionTicketsWithTLSv13AndNoKey ( ) throws Throwable { assumeTrue ( OpenSsl . isTlsv13Supported ( ) ) ; testSessionTickets ( SslUtils . PROTOCOL_TLS_V1_3 , false ) ; }
public static void setUp ( ) { TmfEventMatching . registerMatchObject ( new TcpEventMatching ( ) ) ; TmfEventMatching . registerMatchObject ( new TcpLttngEventMatching ( ) ) ; }
protected void updateTitle ( String brand ) { IBrandManager brandManager = TasksUiPlugin . getDefault ( ) . getBrandManager ( ) ; setTitle ( brandManager . getConnectorLabel ( getConnector ( ) , brand ) ) ; }
public static int getSegmentForKey ( Object key , Cache cache ) { KeyPartitioner keyPartitioner = extractComponent ( cache , KeyPartitioner . class ) ; if ( keyPartitioner != null ) { return keyPartitioner . getSegment ( key ) ; } throw new IllegalStateException ( "No key partitioner found for cache " + cache . getName ( ) ) ; }
