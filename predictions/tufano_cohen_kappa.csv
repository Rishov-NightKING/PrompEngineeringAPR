sample no,Ground Truth,GT abs or modified,PLBART prediction,score1,score2,CodeT5 prediction,score1,score2,zero shot gpt prediction,score1,score2,few shot gpt prediction,score1,score2,codeDaVinci edit prediction,score1,score2
0,"private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
","private static Set < String > METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . map ( TYPE_2 : : METHOD_3 ) . collect ( Collectors . VAR_3 ( TYPE_4 : : new ) ) ; }
","private static Set < String > METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . map ( TYPE_2 : : METHOD_3 ) . filter ( VAR_2 - > ! TYPE_3 . contains ( VAR_2 ) ) . collect ( Collectors . VAR_3 ( TYPE_4 : : new ) ) ; }
",,,"private static Set < String > METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . map ( TYPE_2 : : METHOD_3 ) . filter ( VAR_2 - > ! TYPE_3 . contains ( VAR_2 ) ) . collect ( Collectors . VAR_3 ( TYPE_4 : : new ) ) ; }
",,,"private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . filter ( q - > ! DEPRECATED_QUALIFIERS . contains ( q ) && ! q . equals ( ""LIBRARY"" ) ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
",,,"private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . filter ( q - > ! DEPRECATED_QUALIFIERS . contains ( q ) ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
",,,"private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . filter ( q - > ! DEPRECATED_QUALIFIERS . contains ( q ) ) . filter ( q - > ! LIBRARY_QUALIFIERS . contains ( q ) ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
",,
3,"public void testCreate ( ) throws StripeException { final Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""currency"" , ""usd"" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , "" / v1 / orders"" , params ) ; }
","public void METHOD_1 ( ) throws TYPE_1 { final Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( STRING_1 , STRING_2 ) ; final TYPE_2 VAR_1 = TYPE_2 . create ( params ) ; assertNotNull ( VAR_1 ) ; METHOD_2 ( TYPE_3 . TYPE_4 . VAR_4 , STRING_3 , params ) ; }
","public void METHOD_1 ( ) throws TYPE_1 { final TYPE_2 VAR_1 = TYPE_2 . create ( params ) ; assertNotNull ( VAR_1 ) ; METHOD_2 ( TYPE_3 . TYPE_4 . VAR_4 , STRING_3 , params ) ; }
",,,"public void METHOD_1 ( ) throws TYPE_1 { final Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( STRING_1 , STRING_2 ) ; final TYPE_2 VAR_1 = TYPE_2 . create ( params ) ; assertNotNull ( VAR_1 ) ; METHOD_2 ( TYPE_3 . TYPE_4 . VAR_4 , params ) ; }
",,,"public void testCreate ( ) throws StripeException { Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""currency"" , ""usd"" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , "" / v1 / orders"" , params ) ; }
",,,"public void testCreate ( ) throws StripeException { Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""currency"" , ""usd"" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , "" / v1 / orders"" , params ) ; }
",,,"public void testCreate ( ) throws StripeException { Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( ""currency"" , ""usd"" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , "" / v1 / orders"" , params ) ; }
",,
12,"public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { this . VAR_1 = VAR_1 ; o . VAR_2 ( this ) ; VAR_1 . request ( Long . VAR_3 ) ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { o . VAR_2 ( this ) ; VAR_1 . request ( Long . VAR_3 ) ; }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 . METHOD_2 ( this , VAR_1 ) ; o . VAR_2 ( this ) ; VAR_1 = VAR_1 ; VAR_1 . request ( Long . VAR_3 ) ; }
",,,"public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
",,,"public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
",,,"public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
",,
13,"public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( INT_1 , TimeUnit . VAR_2 ) ; try { return VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_4 e ) { TYPE_5 . log ( VAR_4 , String . format ( VAR_5 , VAR_1 . toString ( ) ) , false ) ; throw e ; } finally { METHOD_5 ( ) ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( INT_1 , TimeUnit . VAR_2 ) ; try { return VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_4 e ) { TYPE_5 . log ( VAR_4 , String . format ( VAR_5 , VAR_1 . toString ( ) ) , e ) ; throw e ; } finally { METHOD_5 ( ) ; } }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { METHOD_2 ( INT_1 , TimeUnit . VAR_2 ) ; try { return VAR_3 . METHOD_3 ( TYPE_3 . METHOD_4 ( VAR_1 ) ) ; } catch ( TYPE_4 e ) { TYPE_5 . log ( VAR_4 , String . format ( VAR_5 , VAR_1 . toString ( ) ) , false ) ; throw e ; } finally { METHOD_5 ( ) ; } }
",,,"public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
",,,"public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
",,,"public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
",,
17,"public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; if ( getDefaultLabel ( switchStatementTree ) ) { if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Add a default case to this switch . "" ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Complete cases by adding the missing enum constants or add a default case to this switch . "" ) ; } } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! METHOD_2 ( ) ) { return ; } TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; if ( METHOD_3 ( VAR_2 ) ) { if ( ! METHOD_4 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ; } else if ( METHOD_7 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_2 ) ; } } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! METHOD_2 ( ) ) { return ; } TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; if ( ! METHOD_3 ( VAR_2 ) . isPresent ( ) ) { if ( ! METHOD_4 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ; } else if ( METHOD_7 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_2 ) ; } } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! METHOD_2 ( ) ) { return ; } TYPE_2 VAR_2 = ( TYPE_2 ) VAR_1 ; Optional < TYPE_3 > VAR_3 = METHOD_3 ( VAR_2 ) ; if ( ! VAR_3 . isPresent ( ) ) { if ( ! METHOD_4 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_1 ) ; } else if ( METHOD_7 ( VAR_2 ) ) { METHOD_5 ( VAR_2 . METHOD_6 ( ) , STRING_2 ) ; } } }
",,,"public boolean hasNoDefault ( SwitchStatementTree switchStatementTree ) { return allLabels ( switchStatementTree ) . noneMatch ( SwitchLastCaseIsDefaultCheck : : isDefault ) ; } public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; if ( ! hasNoDefault ( switchStatementTree ) ) { return ; } if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Add a default case to this switch . "" ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Complete cases by adding the missing enum constants or add a default case to this switch . "" ) ; } }
",,,"public boolean visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return false ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; Optional < CaseLabelTree > defaultLabel = getDefaultLabel ( switchStatementTree ) ; if ( ! defaultLabel . isPresent ( ) ) { if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Add a default case to this switch . "" ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Complete cases by adding the missing enum constants or add a default case to this switch . "" ) ; } } return true ; }
",,,"public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; if ( hasNoDefault ( switchStatementTree ) ) { if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Add a default case to this switch . "" ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , ""Complete cases by adding the missing enum constants or add a default case to this switch . "" ) ; } } }
",,
20,"private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) { if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; } }
","private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 . clear ( ) ; for ( TYPE_1 element : VAR_3 . METHOD_2 ( ) ) { if ( ! element . VAR_4 ( ) ) VAR_2 . add ( element ) ; } }
","private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 . clear ( ) ; for ( TYPE_1 element : VAR_3 . METHOD_2 ( ) ) { if ( ! element . VAR_4 ( ) ) VAR_2 . add ( element ) ; } }
",,,"private void METHOD_1 ( ) { VAR_1 = 0 ; VAR_2 . clear ( ) ; for ( TYPE_1 element : VAR_3 . METHOD_2 ( ) ) if ( ! element . VAR_4 ( ) ) VAR_2 . add ( element ) ; }
",,,"private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; }
",,,"private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) { if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; } }
",,,"private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) { if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; } }
",,
25,"public IssueOutputView ( Issue issue ) { this ( issue , null ) ; }
","public TYPE_2 ( TYPE_1 VAR_2 ) { this ( VAR_2 , null ) ; }
","public TYPE_2 ( TYPE_1 VAR_2 ) { this ( VAR_2 , null , null ) ; }
",,,"public TYPE_2 ( TYPE_1 VAR_2 ) { super ( VAR_2 ) ; }
",,,"public IssueOutputView ( Issue issue , IssueArticles issueArticles ) { this ( issue , issueArticles , null ) ; }
",,,"public IssueOutputView ( Issue issue ) { this ( issue , null , null ) ; }
",,,"public IssueOutputView ( Issue issue ) { this ( issue , null , null ) ; }
",,
26,"public void setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; }
","public void METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; }
","public TYPE_1 METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; }
",,,"public TYPE_1 METHOD_1 ( int VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; }
",,,"public ProcessEngineConfiguration setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; return this ; } // This code may break binary compatibility .
",,,"public ProcessEngineConfiguration setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; return this ; }
",,,"public ProcessEngineConfiguration setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; return this ; }
",,
33,"public Mutation toMutation ( K key ) { return new Mutations . ReadWriteWithValue < > ( value , f ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 key ) { return new TYPE_5 . TYPE_6 < > ( value , f ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 key ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( key ) ; return new TYPE_5 . TYPE_6 < > ( VAR_1 , f ) ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 key ) { TYPE_3 VAR_1 = VAR_2 . METHOD_2 ( value ) ; return new TYPE_5 . TYPE_6 < > ( VAR_1 , f ) ; }
",,,"public Mutation toMutation ( K key ) { byte [ ] encodedValue = valueDataConversion . toStorage ( value . toString ( ) . getBytes ( StandardCharsets . UTF_8 ) ) ; V valueFromStorage = valueDataConversion . fromStorage ( encodedValue ) ; return new Mutations . ReadWriteWithValue < > ( valueFromStorage , f ) ; }
",,,"public Mutation toMutation ( K key ) { V valueFromStorage = ( V ) valueDataConversion . fromStorage ( value ) ; return new Mutations . ReadWriteWithValue < > ( valueFromStorage , f ) ; }
",,,"public Mutation toMutation ( K key ) { V valueFromStorage = ( V ) valueDataConversion . fromStorage ( value ) ; return new Mutations . ReadWriteWithValue < > ( valueFromStorage , f ) ; }
",,
35,"private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( ""\\ ? "" ) [ 0 ] . split ( "" : "" , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) throw new URISyntaxException ( uri , ""invalid path"" ) ; else return parts [ 1 ] ; }
","private String METHOD_1 ( ) throws TYPE_1 { String [ ] VAR_1 = uri . split ( STRING_1 ) [ 0 ] . split ( STRING_2 , 2 ) ; if ( VAR_1 . length < 2 || VAR_1 [ 1 ] . isEmpty ( ) ) throw new TYPE_1 ( uri , STRING_3 ) ; else return VAR_1 [ 1 ] ; }
","private String METHOD_1 ( ) throws TYPE_1 { String [ ] VAR_1 = uri . split ( STRING_1 ) [ 0 ] . split ( STRING_2 , 2 ) ; if ( VAR_1 . length < 2 || VAR_1 [ 1 ] . isEmpty ( ) ) throw new TYPE_1 ( uri , STRING_3 ) ; else return VAR_1 [ 1 ] ; }
",,,"private String METHOD_1 ( ) throws TYPE_1 { String [ ] VAR_1 = uri . split ( STRING_1 ) [ 0 ] . split ( STRING_2 , 2 ) ; if ( VAR_1 . length < 2 || VAR_1 [ 1 ] . isEmpty ( ) ) throw new TYPE_1 ( uri , STRING_3 ) ; else return VAR_1 [ 1 ] ; }
",,,"private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( ""\\ ? "" ) [ 0 ] . split ( "" : "" , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) { throw new URISyntaxException ( uri , ""invalid path"" ) ; } else { return parts [ 1 ] ; } }
",,,"private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( ""\\ ? "" ) [ 0 ] . split ( "" : "" , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) { throw new URISyntaxException ( uri , ""invalid path"" ) ; } else { return parts [ 1 ] ; } }
",,,"private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( ""\\ ? "" ) [ 0 ] . split ( "" : "" , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) throw new URISyntaxException ( uri , ""invalid path"" ) ; else return parts [ 1 ] ; }
",,
42,"public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { if ( null != manager ) { return manager ; } manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; return manager ; }
","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 view , final TYPE_4 VAR_2 ) { if ( null != VAR_3 ) { return VAR_3 ; } VAR_3 = new TYPE_1 ( VAR_1 , view , VAR_2 ) { @Override protected void METHOD_2 ( ) { } } ; return VAR_3 ; }
","public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 view , final TYPE_4 VAR_2 ) { if ( null != VAR_3 ) { return VAR_3 ; } VAR_3 = new TYPE_1 ( VAR_1 , view , VAR_2 ) { @Override protected void METHOD_2 ( ) { } } ; return VAR_3 ; }
",,,"public TYPE_1 METHOD_1 ( final TYPE_2 VAR_1 , final TYPE_3 view , final TYPE_4 VAR_2 ) { if ( VAR_3 != null ) { return VAR_3 ; } VAR_3 = new TYPE_1 ( VAR_1 , view , VAR_2 ) { @Override protected void METHOD_2 ( ) { } } ; return VAR_3 ; }
",,,"public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { ProviderNotificationManager manager = null ; if ( manager == null ) { manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; } return manager ; }
",,,"public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { if ( null != manager ) { return manager ; } manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; return manager ; }
",,,"public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { if ( null != manager ) { return manager ; } manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; return manager ; }
",,
43,"private void startSyncFolderOperation ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; // perform folder synchronization RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = System . currentTimeMillis ( ) ; VAR_3 = true ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_1 , VAR_2 , false , false , false , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_4 . execute ( METHOD_3 ( ) , this , null , null ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = System . currentTimeMillis ( ) ; VAR_3 = true ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_1 , VAR_2 , false , false , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_4 . execute ( METHOD_3 ( ) , this , null , null ) ; }
",,,"private void METHOD_1 ( TYPE_1 VAR_1 ) { long VAR_2 = System . currentTimeMillis ( ) ; VAR_3 = true ; TYPE_2 VAR_4 = new TYPE_3 ( VAR_1 , VAR_2 , false , false , false , METHOD_2 ( ) , METHOD_3 ( ) , METHOD_4 ( ) ) ; VAR_4 . execute ( METHOD_3 ( ) , this , null , null ) ; }
",,,"private void syncFolder ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; }
",,,"private void startSyncFolderOperation ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; } private ParamDef mockParamDef ( String name , String type ) { ParamDef paramDef = mock ( ParamDef . class ) ; when ( paramDef . getName ( ) ) . thenReturn ( name ) ; when ( paramDef . getType ( ) ) . thenReturn ( type ) ; return paramDef ; } private ConditionParamPresenter mockParamPresenter ( ) { ConditionParamPresenter paramPresenter = mock ( ConditionParamPresenter . class ) ; ConditionParamPresenter . View paramPresenterView = mock ( ConditionParamPresenter . View . class ) ; HTMLElement element = mock ( HTMLElement . class ) ; when ( paramPresenter . getView ( ) ) . thenReturn ( paramPresenterView ) ; when ( paramPresenterView . getElement ( ) ) . thenReturn ( element ) ; return paramPresenter ; }
",,,"private void startSyncFolderOperation ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; // perform folder synchronization RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; }
",,
48,"public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectThrowable ( runnable . toString ( ) , runnable ) ; }
","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 . toString ( ) , VAR_1 ) ; }
","public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 . toString ( ) , VAR_1 ) ; }
",,,"public static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return METHOD_1 ( VAR_1 . toString ( ) , VAR_1 ) ; }
",,,"public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectException ( runnable . toString ( ) , runnable ) ; }
",,,"DefaultExtendedDnsCacheEntry ( String hostname , InetAddress address ) { this . hostname = hostname ; this . address = address ; this . cause = null ; this . hostnameFromPtrRecord = null ; } public int findItemIndex ( ITimeGraphEntry entry ) { Item item = fItemMap . get ( entry ) ; if ( item == null ) { return - 1 ; } return item . fExpandedIndex ; } public void onDestroyView ( ) { recyclerView . setAdapter ( null ) ; unbinder . unbind ( ) ; unbinder = null ; super . onDestroyView ( ) ; } public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectException ( runnable . toString ( ) , runnable ) ; }
",,,"public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectException ( runnable . toString ( ) , runnable ) ; }
",,
57,"public String toString ( ) { return ""FileListCacheValue { fileNames = "" + getFileNames ( ) + "" } "" ; }
","public String toString ( ) { return STRING_1 + METHOD_2 ( ) + STRING_2 ; }
","public String toString ( ) { VAR_1 . METHOD_1 ( ) ; try { return STRING_1 + METHOD_2 ( ) + STRING_2 ; } finally { VAR_1 . METHOD_3 ( ) ; } }
",,,"public String toString ( ) { return STRING_1 + METHOD_2 ( ) + STRING_2 ; }
",,,"public String toString ( ) { return ""FileListCacheValue { fileNames = "" + getFileNames ( ) + "" } "" ; }
",,,"public String toString ( ) { return ""FileListCacheValue { fileNames = "" + getFileNames ( ) + "" } "" ; }
",,,"public String toString ( ) { return ""FileListCacheValue { fileNames = "" + getFileNames ( ) + "" } "" ; }
",,
59,"public boolean isEnabled ( ) { return true ; }
","public boolean METHOD_1 ( ) { return true ; }
","public boolean METHOD_1 ( ) { return true ; }
",,,"public boolean METHOD_1 ( ) { return true ; }
",,,"public boolean isEnabled ( ) { return true ; }
",,,"public boolean isEnabled ( ) { return getActiveTextEditor ( ) != null ; }
",,,"public boolean isEnabled ( ) { return true ; }
",,
65,"public static ProjectBuildType getProjectType ( IProject project ) { // -- -- -- -- -- AUTOTOOLS // Autotools has an 'Autotools' nature by which we can identify it . if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; // -- -- -- -- -- MANAGED PROJECT if ( projIsManaged ) { return ProjectBuildType . MANAGED_MAKEFILE ; } else { return ProjectBuildType . OTHER ; // E . g a manual makefile . } }
","public static TYPE_1 METHOD_1 ( TYPE_2 project ) { if ( METHOD_2 ( project ) ) { return TYPE_1 . VAR_1 ; } TYPE_3 VAR_2 = METHOD_3 ( project ) ; TYPE_4 builder = VAR_2 . METHOD_4 ( ) ; Boolean VAR_3 = builder . VAR_4 ( ) ; if ( VAR_3 ) { return TYPE_1 . VAR_5 ; } else { return TYPE_1 . VAR_6 ; } }
","public static TYPE_1 METHOD_1 ( TYPE_2 project ) { if ( METHOD_2 ( project ) ) { return TYPE_1 . VAR_1 ; } TYPE_3 VAR_2 = METHOD_3 ( project ) ; TYPE_4 builder = VAR_2 . METHOD_4 ( ) ; Boolean VAR_3 = builder . VAR_4 ( ) ; if ( VAR_3 ) { return TYPE_1 . VAR_5 ; } else { return TYPE_1 . VAR_6 ; } }
",,,"public static TYPE_1 METHOD_1 ( TYPE_2 project ) { TYPE_3 VAR_2 = METHOD_3 ( project ) ; TYPE_4 builder = VAR_2 . METHOD_4 ( ) ; Boolean VAR_3 = builder . VAR_4 ( ) ; if ( VAR_3 ) { return TYPE_1 . VAR_5 ; } else { return TYPE_1 . VAR_6 ; } }
",,,"public static ProjectBuildType getProjectType ( IProject project ) { if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; if ( projIsManaged ) { return ProjectBuildType . MANAGED_MAKEFILE ; } else { return ProjectBuildType . OTHER ; // E . g a manual makefile . } }
",,,"public static ProjectBuildType getProjectType ( IProject project ) { // -- -- -- -- -- -- AUTOTOOLS // Autotools has an 'Autotools' nature by which we can identify it . if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; if ( projIsManaged ) { return ProjectBuildType . MANAGED_MAKEFILE ; } else { return ProjectBuildType . OTHER ; // E . g a manual makefile . } }
",,,"public static ProjectBuildType getProjectType ( IProject project ) { // -- -- -- -- -- -- AUTOTOOLS // Autotools has an 'Autotools' nature by which we can identify it . if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; if ( projIsManaged ) return ProjectBuildType . MANAGED_MAKEFILE ; else return ProjectBuildType . OTHER ; // E . g a manual makefile . }
",,
67,"private Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) { Collection < VCastResult > results = null ; results = dataStore . getAllResults ( ) ; return results ; }
","private Collection < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { Collection < TYPE_1 > results = null ; results = VAR_1 . METHOD_2 ( ) ; return results ; }
","private Collection < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { Collection < TYPE_1 > results = null ; try { results = VAR_1 . METHOD_2 ( ) ; } catch ( TYPE_3 ex ) { throw new TYPE_3 ( ex , STRING_1 ) ; } return results ; }
",,,"private Collection < TYPE_1 > METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 . METHOD_2 ( ) ; }
",,,"private Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) throws OseeCoreException { Collection < VCastResult > results = null ; try { results = dataStore . getAllResults ( ) ; } catch ( OseeCoreException ex ) { throw new OseeCoreException ( ""SQL error while reading results"" , ex ) ; } return results ; } In the original code , catching and then throwing the same exception type is redundant and unnecessary .
",,,"protected Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) throws OseeCoreException { Collection < VCastResult > results = null ; try { results = dataStore . getAllResults ( ) ; } catch ( OseeCoreException ex ) { throw new OseeCoreException ( ex , ""SQL error while reading results"" ) ; } return results ; }
",,,"private Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) { Collection < VCastResult > results = null ; try { results = dataStore . getAllResults ( ) ; } catch ( OseeCoreException ex ) { throw ex ; } return results ; }
",,
75,"public ExtentBufferedCompositePattern ( Extent extent , Pattern . . . patterns ) { super ( extent ) ; checkArgument ( patterns . length != 0 , ""patterns cannot be empty"" ) ; this . patterns = patterns ; }
","public TYPE_3 ( TYPE_1 VAR_2 , TYPE_2 ... VAR_3 ) { super ( VAR_2 ) ; METHOD_1 ( VAR_3 . length != 0 , STRING_1 ) ; this . VAR_3 = VAR_3 ; }
","public TYPE_3 ( TYPE_1 VAR_2 , TYPE_2 ... VAR_3 ) { super ( VAR_2 ) ; METHOD_1 ( VAR_3 . length == 0 , STRING_1 ) ; this . VAR_3 = VAR_3 ; }
",,,"public TYPE_3 ( TYPE_1 VAR_2 , TYPE_2 ... VAR_3 ) { super ( VAR_2 ) ; this . VAR_3 = VAR_3 ; }
",,,"public ExtentBufferedCompositePattern ( Extent extent , Pattern . . . patterns ) { super ( extent ) ; checkArgument ( patterns . length > 0 , ""patterns cannot be empty"" ) ; this . patterns = patterns ; }
",,,"public ExtentBufferedCompositePattern ( Extent extent , Pattern . . . patterns ) { super ( extent ) ; checkArgument ( patterns . length != 0 , ""patterns cannot be empty"" ) ; this . patterns = patterns ; }
",,,"public void testGet ( ) { assertEquals ( 1 , cache . get ( 1 , new Callable < Integer > ( ) { @Override public Integer call ( ) { return 2 ; } } ) ) ; }
",,
78,"private void removeAppBar ( ) { APPBARDATA data = new APPBARDATA . ByReference ( ) ; data . cbSize . setValue ( data . size ( ) ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( new DWORD ( ShellAPI . ABM_REMOVE ) , data ) ; assertNotNull ( result ) ; }
","private void METHOD_1 ( ) { TYPE_2 data = new TYPE_2 . TYPE_9 ( ) ; data . VAR_2 . METHOD_2 ( data . size ( ) ) ; TYPE_5 result = TYPE_7 . TYPE_8 . METHOD_3 ( new TYPE_1 ( TYPE_10 . VAR_4 ) , data ) ; assertNotNull ( result ) ; }
","private void METHOD_1 ( ) { TYPE_1 VAR_1 = new TYPE_1 ( ) ; TYPE_2 TYPE_3 = new TYPE_2 . TYPE_9 ( ) ; TYPE_3 . VAR_2 . METHOD_2 ( TYPE_3 . size ( ) ) ; VAR_1 . METHOD_2 ( TYPE_10 . VAR_4 ) ; TYPE_5 result = TYPE_7 . TYPE_8 . METHOD_3 ( VAR_1 , TYPE_3 ) ; assertNotNull ( result ) ; }
",,,"private void METHOD_1 ( ) { TYPE_2 data = new TYPE_2 . TYPE_9 ( ) ; data . VAR_2 . METHOD_2 ( data . size ( ) ) ; data . VAR_2 . METHOD_2 ( TYPE_10 . VAR_4 ) ; TYPE_5 result = TYPE_7 . TYPE_8 . METHOD_3 ( new TYPE_1 ( ) , data ) ; assertNotNull ( result ) ; }
",,,"private void removeAppBar ( ) { DWORD dwABM = new DWORD ( ) ; APPBARDATA ABData = new APPBARDATA . ByReference ( ) ; ABData . cbSize . setValue ( ABData . size ( ) ) ; dwABM . setValue ( ShellAPI . ABM_REMOVE ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( dwABM , ABData ) ; assertNotNull ( result ) ; }
",,,"public void writeObject ( ObjectOutput output , ScriptMetadata object ) throws IOException { output . writeUTF ( object . name ) ; output . writeUTF ( object . extension ) ; output . writeUTF ( object . mode . name ( ) ) ; writeSet ( output , object . parameters ) ; output . writeObject ( object . language ) ; output . writeObject ( object . role ) ; output . writeObject ( object . reducer ) ; output . writeObject ( object . collator ) ; output . writeObject ( object . combiner ) ; } public void testReWriteArtifactViaStreamFails ( ) throws Exception { ProvisionException expectedException = null ; try ( OutputStream addSink = subject . getOutputStream ( ARTIFACT_A_CANONICAL ) ) { addSink . write ( new byte [ 1 ] ) ; } catch ( ProvisionException e ) { expectedException = e ; } assertThat ( expectedException , is ( instanceOf ( ProvisionException . class ) ) ) ; assertThat ( expectedException . getStatus ( ) . getCode ( ) , is ( ProvisionException . ARTIFACT_EXISTS ) ) ; } public synchronized Inode getLastExistingInode ( ) { return mInodes . get ( mInodes . size ( ) - 1 ) ; } private void removeAppBar ( ) { DWORD dwABM = new DWORD ( ) ; APPBARDATA ABData = new APPBARDATA . ByReference ( ) ; ABData . cbSize . setValue ( ABData . size ( ) ) ; dwABM . setValue ( ShellAPI . ABM_REMOVE ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( dwABM , ABData ) ; assertNotNull ( result ) ; }
",,,"private void removeAppBar ( ) { DWORD dwABM = new DWORD ( ) ; APPBARDATA ABData = new APPBARDATA . ByReference ( ) ; ABData . cbSize . setValue ( ABData . size ( ) ) ; dwABM . setValue ( ShellAPI . ABM_REMOVE ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( dwABM , ABData ) ; assertNotNull ( result ) ; }
",,
88,"public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { // worker net address is unmodifiable after initialization , no locking is needed workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
","public Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_2 ( TYPE_5 . TYPE_6 . getMessage ( ) ) ; } Set < TYPE_1 > VAR_2 = new HashSet < > ( VAR_4 . size ( ) ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_2 ; }
","public Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_2 ( TYPE_5 . TYPE_6 . getMessage ( ) ) ; } Set < TYPE_1 > VAR_2 = new HashSet < > ( VAR_4 . size ( ) ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_2 ; }
",,,"public Set < TYPE_1 > METHOD_1 ( ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( ) ) { throw new TYPE_2 ( TYPE_5 . TYPE_6 . getMessage ( ) ) ; } Set < TYPE_1 > VAR_2 = new HashSet < > ( VAR_4 . size ( ) ) ; for ( TYPE_4 VAR_3 : VAR_4 ) { VAR_2 . add ( VAR_3 . METHOD_3 ( ) ) ; } return VAR_2 ; }
",,,"public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
",,,"public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
",,,"public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { // worker net address is unmodifiable after initialization , no locking is needed workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
",,
89,"public void setUp ( ) { params . put ( ""Digits"" , ""1234"" ) ; params . put ( ""CallSid"" , ""CA1234567890ABCDE"" ) ; params . put ( ""To"" , "" + 18005551212"" ) ; params . put ( ""Caller"" , "" + 14158675309"" ) ; params . put ( ""From"" , "" + 14158675309"" ) ; }
","public void METHOD_1 ( ) { params . put ( STRING_5 , STRING_6 ) ; params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_8 , STRING_9 ) ; params . put ( STRING_3 , STRING_4 ) ; params . put ( STRING_7 , STRING_4 ) ; }
","public void METHOD_1 ( ) { params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_3 , STRING_4 ) ; params . put ( STRING_5 , STRING_6 ) ; params . put ( STRING_7 , STRING_4 ) ; params . put ( STRING_8 , STRING_9 ) ; }
",,,"public void METHOD_1 ( ) { params . put ( STRING_1 , STRING_2 ) ; params . put ( STRING_3 , STRING_4 ) ; params . put ( STRING_5 , STRING_6 ) ; params . put ( STRING_7 , STRING_4 ) ; params . put ( STRING_8 , STRING_9 ) ; }
",,,"public void setUp ( ) { String signature = ""RSOYDt4T1cUTdK1PDd93 / VVr8B8 = "" ; params . put ( ""CallSid"" , ""CA1234567890ABCDE"" ) ; params . put ( ""Caller"" , "" + 14158675309"" ) ; params . put ( ""Digits"" , ""1234"" ) ; params . put ( ""From"" , "" + 14158675309"" ) ; params . put ( ""To"" , "" + 18005551212"" ) ; }
",,,"public void setUp ( ) { params . put ( ""CallSid"" , ""CA1234567890ABCDE"" ) ; params . put ( ""Caller"" , "" + 14158675309"" ) ; params . put ( ""Digits"" , ""1234"" ) ; params . put ( ""From"" , "" + 14158675309"" ) ; params . put ( ""To"" , "" + 18005551212"" ) ; signature = ""RSOYDt4T1cUTdK1PDd93 / VVr8B8 = "" ; }
",,,"public void setUp ( ) { params . put ( ""CallSid"" , ""CA1234567890ABCDE"" ) ; params . put ( ""Caller"" , "" + 14158675309"" ) ; params . put ( ""Digits"" , ""1234"" ) ; params . put ( ""From"" , "" + 14158675309"" ) ; params . put ( ""To"" , "" + 18005551212"" ) ; }
",,
90,"public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
","public ANNOTATION_1 String METHOD_1 ( ANNOTATION_1 String name ) { return name ; }
","public ANNOTATION_1 String METHOD_1 ( ANNOTATION_1 String name ) { return name ; }
",,,"public ANNOTATION_1 String METHOD_1 ( ANNOTATION_1 String name ) { return name ; }
",,,"public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
",,,"public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
",,,"public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
",,
105,"private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
","private static TYPE_1 METHOD_1 ( TYPE_2 list ) { TYPE_1 buf = TYPE_3 . buffer ( list . VAR_1 ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . VAR_2 ( list . VAR_3 ( i ) . METHOD_2 ( ) ) ; } return buf ; }
","public static TYPE_1 METHOD_1 ( TYPE_2 list ) { TYPE_1 buf = TYPE_3 . buffer ( list . VAR_1 ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . VAR_2 ( list . VAR_3 ( i ) . METHOD_2 ( ) ) ; } return buf ; }
",,,"public static TYPE_1 METHOD_1 ( TYPE_2 list ) { TYPE_1 buf = TYPE_3 . buffer ( list . VAR_1 ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . VAR_2 ( list . VAR_3 ( i ) . METHOD_2 ( ) ) ; } return buf ; }
",,,"private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
",,,"private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
",,,"private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
",,
106,"private String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
","private String METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) instanceof TYPE_2 ) { return ( ( TYPE_2 ) VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) ; } return null ; }
","private String METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) instanceof TYPE_2 ) { return ( ( TYPE_2 ) VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) ; } return null ; }
",,,"private String METHOD_1 ( final TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) instanceof TYPE_2 ) { return ( ( TYPE_2 ) VAR_1 . METHOD_2 ( ) ) . METHOD_3 ( VAR_1 ) ; } return null ; }
",,,"private String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
",,,"public String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
",,,"private String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
",,
107,"public float getPressure ( ) { return 0 ; }
","public float METHOD_1 ( ) { return 0 ; }
","public float METHOD_1 ( ) { return 0 ; }
",,,"public float METHOD_1 ( ) { return 0 ; }
",,,"@Override public float getPressure ( ) { return 0 ; }
",,,"public abstract void define ( OutputMutator outputMutator ) throws SchemaChangeException ; public abstract void load ( int rowIndex , String value ) ; @Override public String toString ( ) { return ""Name : "" + name + "" , Index : "" + index ; } public void refresh ( ) { if ( parent != null ) { parent . refresh ( ) ; } } ZoneId getZoneId ( ) { throw new UnsupportedTemporalUnitException ( String . format ( ""Cannot get the timezone of : % s"" , this ) ) ; } @Override public float getPressure ( ) { return 0 ; } public String getName ( ) { return this . name ; }
",,,"@Override public float getPressure ( ) { return 0 ; }
",,
112,"public void resumeNode ( String id ) { api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
","public void METHOD_1 ( String id ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( id , TYPE_2 . TYPE_3 . create ( TYPE_4 . TYPE_6 . VAR_5 , TYPE_4 . TYPE_5 . VAR_7 ) ) ; }
","public void METHOD_1 ( String id ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( id , TYPE_2 . TYPE_3 . create ( TYPE_4 . TYPE_6 . VAR_5 , TYPE_4 . TYPE_5 . VAR_7 ) ) ; }
",,,"public void METHOD_1 ( String id ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( id , TYPE_2 . TYPE_3 . create ( TYPE_4 . TYPE_6 . VAR_5 , TYPE_4 . TYPE_5 . VAR_7 ) ) ; }
",,,"public void resumeNode ( String id ) { api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
",,,"public void resumeNode ( String id ) { waitServerUntilAvailable . apply ( getNode ( id ) ) ; api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
",,,"public void resumeNode ( String id ) { waitServerUntilAvailable . apply ( getNode ( id ) ) ; api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
",,
117,"public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
","public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
","public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ; }
",,,"public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
",,,"public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
",,,"public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
",,,"public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
",,
122,"public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_START_EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; // Know issue . Should be uncommented after https :/ / issues . jboss . org / browse / JBPM - 7038 will be fixed // assertDataIOSet ( emptySubprocess . getDataIOSet ( ) , EMPTY_VALUE ) ; }
","public void METHOD_1 ( ) throws Exception { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_4 ) ; TYPE_4 VAR_5 = METHOD_4 ( VAR_1 , VAR_6 , TYPE_4 . class ) ; METHOD_5 ( VAR_5 . METHOD_6 ( ) , VAR_7 , VAR_7 ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) , VAR_8 , VAR_7 ) ; }
","public void METHOD_1 ( ) throws Exception { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_4 ) ; TYPE_4 VAR_5 = METHOD_4 ( VAR_1 , VAR_6 , TYPE_4 . class ) ; METHOD_5 ( VAR_5 . METHOD_6 ( ) , VAR_7 , VAR_7 ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) , VAR_8 , VAR_7 ) ; }
",,,"public void METHOD_1 ( ) throws Exception { TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = METHOD_2 ( VAR_2 , VAR_3 ) ; METHOD_3 ( VAR_1 , VAR_4 ) ; TYPE_4 VAR_5 = METHOD_4 ( VAR_1 , VAR_6 , TYPE_4 . class ) ; METHOD_5 ( VAR_5 . METHOD_6 ( ) , VAR_7 , VAR_7 ) ; METHOD_7 ( VAR_5 . METHOD_8 ( ) , VAR_8 , VAR_7 ) ; }
",,,"public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_START_EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; // Know issue . Should be uncommented after https :/ / issues . jboss . org / browse / JBPM - 7038 will be fixed // assertDataIOSet ( emptySubprocess . getDataIOSet ( ) , EMPTY_VALUE ) ; }
",,,"public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_START_EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; }
",,,"public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_ _EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; // Know issue . Should be uncommented after https :/ / issues . jboss . org / browse / JBPM - 7038 will be fixed // assertDataIOSet ( emptySubprocess . getDataIOSet ( ) , EMPTY_VALUE ) ; }
",,
127,"private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Error e ) { throw e ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , ""Unexpected uncaught exception encountered while "" + ""processing onFailure ( ) listener call in "" + cl + "" for agent "" + plannedNode . displayName , e ) ; } } }
","private static void METHOD_1 ( final TYPE_4 . TYPE_5 VAR_1 , final Throwable VAR_2 ) { for ( TYPE_2 VAR_3 : TYPE_2 . METHOD_2 ( ) ) { try { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( TYPE_3 e ) { throw e ; } catch ( Throwable e ) { LOGGER . log ( Level . VAR_4 , STRING_1 + STRING_2 + VAR_3 + STRING_3 + VAR_1 . VAR_5 , e ) ; } } }
","private static void METHOD_1 ( final TYPE_4 . TYPE_5 VAR_1 , final Throwable VAR_2 ) { for ( TYPE_2 VAR_3 : TYPE_2 . METHOD_2 ( ) ) { try { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( Throwable e ) { LOGGER . log ( Level . VAR_4 , STRING_1 + STRING_2 + VAR_3 + STRING_3 + VAR_1 . VAR_5 , e ) ; throw e ; } } }
",,,"private static void METHOD_1 ( final TYPE_4 . TYPE_5 VAR_1 , final Throwable VAR_2 ) { for ( TYPE_2 VAR_3 : TYPE_2 . METHOD_2 ( ) ) { try { VAR_3 . METHOD_3 ( VAR_1 , VAR_2 ) ; } catch ( Throwable e ) { LOGGER . log ( Level . VAR_4 , STRING_1 + STRING_2 + VAR_3 + STRING_3 + VAR_1 . VAR_5 , e ) ; } } }
",,,"private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , ""Unexpected uncaught exception encountered while "" + ""processing onFailure ( ) listener call in "" + cl + "" for agent "" + plannedNode . displayName , e ) ; if ( e instanceof Error ) { throw e ; } } } }
",,,"private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , ""Unexpected uncaught exception encountered while processing onFailure ( ) listener call in "" + cl + "" for agent "" + plannedNode . displayName , e ) ; if ( e instanceof Error ) { throw e ; } } } }
",,,"private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , ""Unexpected uncaught exception encountered while "" + ""processing onFailure ( ) listener call in "" + cl + "" for agent "" + plannedNode . displayName , e ) ; if ( e instanceof Error ) { throw e ; } } } }
",,
128,"public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . v ( TAG , "" { } - Last MQ notif was yesterday"" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , "" { } - Last MQ notif was recent , do not notify"" , getCurrentModeName ( ) ) ; return false ; } }
","public synchronized boolean METHOD_1 ( ) { long VAR_1 = INT_1 * INT_2 ; long VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) + VAR_4 , - VAR_1 ) + VAR_1 ; if ( VAR_2 < TYPE_1 . getInstance ( ) . METHOD_4 ( ) ) { Logger . v ( TAG , STRING_1 , METHOD_3 ( ) ) ; return true ; } else { Logger . v ( TAG , STRING_2 , METHOD_3 ( ) ) ; return false ; } }
","public synchronized boolean METHOD_1 ( ) { long VAR_1 = INT_1 * INT_2 ; long VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) + VAR_4 , - VAR_1 ) + VAR_1 ; if ( VAR_2 < TYPE_1 . getInstance ( ) . METHOD_4 ( ) ) { Logger . d ( TAG , STRING_1 , METHOD_3 ( ) ) ; return true ; } else { Logger . d ( TAG , STRING_2 , METHOD_3 ( ) ) ; return false ; } }
",,,"public synchronized boolean METHOD_1 ( ) { long VAR_1 = INT_1 * INT_2 ; long VAR_2 = VAR_3 . METHOD_2 ( METHOD_3 ( ) + VAR_4 , - VAR_1 ) + VAR_1 ; if ( VAR_2 < TYPE_1 . getInstance ( ) . METHOD_4 ( ) ) { Logger . d ( TAG , STRING_1 , METHOD_3 ( ) ) ; return true ; } else { Logger . d ( TAG , STRING_2 , METHOD_3 ( ) ) ; return false ; } }
",,,"public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . d ( TAG , "" { } - Last MQ notif was yesterday"" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , "" { } - Last MQ notif was recent , do not notify"" , getCurrentModeName ( ) ) ; return false ; } }
",,,"public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . d ( TAG , "" { } - Last MQ notif was yesterday"" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , "" { } - Last MQ notif was recent , do not notify"" , getCurrentModeName ( ) ) ; return false ; } }
",,,"public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . d ( TAG , "" { } - Last MQ notif was yesterday"" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , "" { } - Last MQ notif was recent , do not notify"" , getCurrentModeName ( ) ) ; return false ; } }
",,
131,"public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = requireNonNull ( expectedOutputSymbolCount , ""expectedOutputSymbolCount is null"" ) ; this . expectedRows = requireNonNull ( expectedRows , ""expectedRows is null"" ) ; }
","public TYPE_3 ( Map < String , Integer > VAR_2 , Optional < Integer > VAR_3 , Optional < List < List < TYPE_1 > > > VAR_4 ) { this . VAR_2 = TYPE_2 . METHOD_1 ( VAR_2 ) ; this . VAR_3 = METHOD_2 ( VAR_3 , STRING_2 ) ; this . VAR_4 = METHOD_2 ( VAR_4 , STRING_3 ) ; }
","public TYPE_3 ( Map < String , Integer > VAR_2 , Optional < Integer > VAR_3 , Optional < List < TYPE_1 > > > VAR_4 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; }
",,,"public TYPE_3 ( Map < String , Integer > VAR_2 , Optional < Integer > VAR_3 , Optional < List < List < TYPE_1 > > > VAR_4 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; }
",,,"public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = expectedOutputSymbolCount ; this . expectedRows = expectedRows ; }
",,,"public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = requireNonNull ( expectedOutputSymbolCount , ""expectedOutputSymbolCount is null"" ) ; this . expectedRows = requireNonNull ( expectedRows , ""expectedRows is null"" ) ; }
",,,"public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = requireNonNull ( expectedOutputSymbolCount , ""expectedOutputSymbolCount is null"" ) ; this . expectedRows = requireNonNull ( expectedRows , ""expectedRows is null"" ) ; }
",,
141,"protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
","protected void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) ; if ( ! cluster . VAR_1 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( cluster . VAR_3 ( ) ) ; cluster . VAR_4 ( VAR_2 ) ; } }
","protected void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) ; if ( ! cluster . VAR_1 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( cluster . VAR_3 ( ) ) ; cluster . VAR_4 ( VAR_2 ) ; } }
",,,"protected void METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) ; if ( ! cluster . VAR_1 ( ) ) { TYPE_2 VAR_2 = TYPE_3 . METHOD_3 ( cluster . VAR_3 ( ) ) ; cluster . VAR_4 ( VAR_2 ) ; } }
",,,"protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
",,,"protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
",,,"protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
",,
143,"public CustomTxtParserWizard ( ) { this ( null ) ; }
","public TYPE_1 ( ) { this ( null ) ; }
","public TYPE_1 ( ) { super ( ) ; METHOD_1 ( null ) ; }
",,,"public TYPE_1 ( ) { super ( null ) ; }
",,,"public CustomTxtParserWizard ( ) { this ( null ) ; } public CustomTxtParserWizard ( String title ) { super ( ) ; setWindowTitle ( title != null ? title : Messages . CustomTxtParserInputWizardPage_windowTitle ) ; }
",,,"public CustomTxtParserWizard ( ) { this ( null ) ; } public CustomTxtParserWizard ( String windowTitle ) { super ( ) ; setWindowTitle ( Messages . CustomTxtParserInputWizardPage_windowTitle ) ; }
",,,"public CustomTxtParserWizard ( ) { super ( ) ; setWindowTitle ( Messages . CustomTxtParserInputWizardPage_windowTitle ) ; }
",,
150,"public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; if ( activity instanceof Listener ) { mListener = ( Listener ) activity ; } else { Lg . e ( activity . getClass ( ) . getName ( ) , "" should implement "" , Listener . class . getName ( ) ) ; } }
","public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; if ( VAR_1 instanceof TYPE_2 ) { VAR_2 = ( TYPE_2 ) VAR_1 ; } else { TYPE_4 . e ( VAR_1 . getClass ( ) . getName ( ) , STRING_1 , TYPE_2 . class . getName ( ) ) ; } }
","public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; try { VAR_2 = ( TYPE_2 ) VAR_1 ; } catch ( final TYPE_3 e ) { TYPE_4 . e ( VAR_1 . getClass ( ) . getName ( ) , STRING_1 , TYPE_2 . class . getName ( ) ) ; } }
",,,"public void METHOD_1 ( final TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; try { VAR_2 = ( TYPE_2 ) VAR_1 ; } catch ( final TYPE_3 e ) { TYPE_4 . e ( VAR_1 . getClass ( ) . getName ( ) , STRING_1 , TYPE_2 . class . getName ( ) ) ; } }
",,,"public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; if ( activity instanceof Listener ) { mListener = ( Listener ) activity ; } else { Lg . e ( activity . getClass ( ) . getName ( ) , "" should implement "" , Listener . class . getName ( ) ) ; } }
",,,"public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( Listener ) activity ; } catch ( final ClassCastException e ) { Lg . e ( activity . getClass ( ) . getName ( ) , "" should implement "" , Listener . class . getName ( ) ) ; } }
",,,"public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( Listener ) activity ; } catch ( final ClassCastException e ) { Lg . e ( activity . getClass ( ) . getName ( ) , "" should implement "" , Listener . class . getName ( ) ) ; } }
",,
160,"protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( ""BlobStorageService cannot be null"" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( ""BlobStorage service set to { } "" , blobStorageService . getClass ( ) ) ; }
","protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new IllegalArgumentException ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; logger . trace ( STRING_2 , VAR_1 . getClass ( ) ) ; }
","protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new IllegalArgumentException ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; logger . trace ( STRING_2 , VAR_1 . getClass ( ) ) ; }
",,,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { throw new IllegalArgumentException ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; logger . trace ( STRING_2 , VAR_1 . getClass ( ) ) ; }
",,,"protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( ""BlobStorageService cannot be null"" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( ""BlobStorage service set to { } "" , blobStorageService . getClass ( ) ) ; }
",,,"protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( ""BlobStorageService cannot be null"" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( ""BlobStorage service set to { } "" , blobStorageService . getClass ( ) ) ; }
",,,"protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( ""BlobStorageService cannot be null"" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( ""BlobStorage service set to { } "" , blobStorageService . getClass ( ) ) ; }
",,
164,"public ReleasableBytesReference retainedSlice ( int from , int length ) { return new ReleasableBytesReference ( delegate . slice ( from , length ) , refCounted ) ; }
","public TYPE_1 METHOD_1 ( int from , int length ) { return new TYPE_1 ( VAR_2 . METHOD_2 ( from , length ) , VAR_3 ) ; }
","private TYPE_1 METHOD_1 ( int from , int length ) { TYPE_2 VAR_1 = VAR_2 . METHOD_2 ( from , length ) ; return new TYPE_1 ( VAR_1 , VAR_3 ) ; }
",,,"public TYPE_1 METHOD_1 ( int from , int length ) { return new TYPE_1 ( VAR_2 . METHOD_2 ( from , length ) , VAR_3 ) ; }
",,,"public ReleasableBytesReference retainedSlice ( int from , int length ) { BytesReference slice = delegate . slice ( from , length ) ; return new ReleasableBytesReference ( slice , refCounted . incRef ( ) ) ; }
",,,"public ReleasableBytesReference retainedSlice ( int from , int length ) { BytesReference slice = delegate . slice ( from , length ) ; return new ReleasableBytesReference ( slice , refCounted ) ; }
",,,"public ReleasableBytesReference retainedSlice ( int from , int length ) { BytesReference slice = delegate . slice ( from , length ) ; return new ReleasableBytesReference ( slice , refCounted ) ; }
",,
169,"public void typeInSearchField ( String content , int length ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content . substring ( 0 , 3 ) ) ; PageObjectLogging . log ( ""typeInSearchField"" , ""String > > "" + content . substring ( 0 , length ) + "" < < was typed in string field"" , true ) ; }
","public void METHOD_1 ( String content , int length ) { METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( content . substring ( 0 , 3 ) ) ; TYPE_1 . log ( STRING_1 , STRING_2 + content . substring ( 0 , length ) + STRING_3 , true ) ; }
","public void METHOD_1 ( String content , int length ) { METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( content . substring ( 0 , length ) + TYPE_1 . log ( STRING_1 , STRING_2 + content . substring ( 0 , length ) + STRING_3 , true ) ; }
",,,"public void METHOD_1 ( String content , int length ) { METHOD_2 ( VAR_1 ) ; VAR_1 . METHOD_3 ( content . substring ( 0 , length ) ) ; TYPE_1 . log ( STRING_1 , STRING_2 + content . substring ( 0 , length ) + STRING_3 , true ) ; }
",,,"public void typeInSearchField ( String content ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content ) ; PageObjectLogging . log ( ""typeInSearchField"" , ""String > > "" + content + "" < < was typed in string field"" , true ) ; }
",,,"public void typeInSearchField ( String content , int length ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content ) ; PageObjectLogging . log ( ""typeInSearchField"" , ""String > > "" + content + "" < < was typed in string field"" , true ) ; }
",,,"public void typeInSearchField ( String content , int length ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content ) ; PageObjectLogging . log ( ""typeInSearchField"" , ""String > > "" + content . substring ( 0 , length ) + "" < < was typed in string field"" , true ) ; }
",,
171,"public void setRefreshInterval ( final long refreshInterval ) { this . refreshInterval = refreshInterval ; }
","public void METHOD_1 ( final long VAR_1 ) { this . VAR_1 = VAR_1 ; }
","public void METHOD_1 ( final long VAR_1 ) { VAR_2 = VAR_1 ; }
",,,"public void METHOD_1 ( final long VAR_1 ) { VAR_2 = VAR_1 ; }
",,,"public void setRefreshInterval ( final long refreshInterval ) { final long refreshIntervalInSeconds = refreshInterval ; }
",,,"public void setRefreshInterval ( final long refreshInterval ) { refresh_interval_in_seconds = refreshInterval ; }
",,,"public void setRefreshInterval ( final long refreshInterval ) { refreshIntervalInSeconds = refreshInterval ; }
",,
174,"public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = ""link_preview_dialog"" ; if ( getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) == null ) { LinkPreviewDialog linkPreview = LinkPreviewDialog . newInstance ( title , entrySource ) ; linkPreview . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { final String VAR_3 = STRING_1 ; if ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) == null ) { TYPE_2 VAR_4 = TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_5 ( METHOD_2 ( ) , VAR_3 ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { final String VAR_3 = STRING_1 ; if ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) == null ) { VAR_4 . METHOD_5 ( METHOD_2 ( ) , VAR_3 ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 , int VAR_2 ) { final String VAR_3 = STRING_1 ; if ( METHOD_2 ( ) . METHOD_3 ( VAR_3 ) == null ) { VAR_4 = TYPE_2 . METHOD_4 ( VAR_1 , VAR_2 ) ; VAR_4 . METHOD_5 ( METHOD_2 ( ) , VAR_3 ) ; } }
",,,"public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = ""link_preview_dialog"" ; LinkPreviewDialog linkPreview = ( LinkPreviewDialog ) getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) ; if ( linkPreview == null ) { linkPreview = LinkPreviewDialog . newInstance ( title , entrySource ) ; linkPreview . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } else { linkPreview . dismiss ( ) ; } }
",,,"public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = ""link_preview_dialog"" ; if ( getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) == null ) { LinkPreviewDialog linkPreview = LinkPreviewDialog . newInstance ( title , entrySource ) ; linkPreview . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } }
",,,"public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = ""link_preview_dialog"" ; if ( getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) == null ) { LinkPreviewDialog . newInstance ( title , entrySource ) . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } }
",,
178,"protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; }
","protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 , SWT . VAR_3 ) ; VAR_2 . setText ( METHOD_2 ( ) ) ; }
","protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 , SWT . VAR_3 ) ; VAR_2 . setText ( METHOD_2 ( ) ) ; VAR_2 . METHOD_3 ( METHOD_4 ( e - > { } ) ) ; }
",,,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_2 = new TYPE_2 ( VAR_1 , SWT . VAR_3 ) ; VAR_2 . setText ( METHOD_2 ( ) ) ; }
",,,"protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; }
",,,"protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; }
",,,"protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; fJarButton . addSelectionListener ( widgetSelectedAdapter ( e - > { } ) ) ; }
",,
179,"public String getTurnDescription ( Translation tr ) { if ( rawName ) return getName ( ) ; return tr . tr ( ""finish"" ) ; }
","public String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 ) return getName ( ) ; return VAR_1 . METHOD_2 ( STRING_1 ) ; }
","public String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 || name . isEmpty ( ) ) return getName ( ) ; return VAR_1 . METHOD_2 ( STRING_1 ) ; }
",,,"public String METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( STRING_1 ) ; }
",,,"public String getTurnDescription ( Translation tr ) { if ( ! name . isEmpty ( ) ) { return getName ( ) ; } return tr . tr ( ""finish"" ) ; }
",,,"public String getTurnDescription ( Translation tr ) { if ( ! name . isEmpty ( ) ) { return getName ( ) ; } return tr . tr ( ""finish"" ) ; }
",,,"public String getTurnDescription ( Translation tr ) { if ( rawName || ! name . isEmpty ( ) ) return getName ( ) ; return tr . tr ( ""finish"" ) ; }
",,
180,"private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) throws Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 = TYPE_3 . run ( VAR_1 , VAR_2 , true ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) throws Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 = TYPE_3 . run ( VAR_1 , VAR_2 , true ) ; }
",,,"private void METHOD_1 ( TYPE_1 VAR_1 ) throws Exception { TYPE_2 VAR_2 = new TYPE_2 ( ) ; VAR_2 . METHOD_2 ( VAR_3 . METHOD_3 ( ) ) ; VAR_4 = TYPE_3 . run ( VAR_1 , VAR_2 , true ) ; }
",,,"private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; }
",,,"private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; try { createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; } catch ( Exception e ) { throw e ; } }
",,,"private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; try { createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; } catch ( Exception e ) { throw e ; } }
",,
181,"public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( ""Error while constructing new ObjectMapper"" , e ) ; } return writer . toString ( ) ; }
","public String toString ( ) { TYPE_1 writer = new TYPE_1 ( ) ; try { new TYPE_2 ( ) . METHOD_1 ( writer , VAR_1 ) ; } catch ( Exception e ) { log . error ( STRING_1 , e ) ; } return writer . toString ( ) ; }
","public String toString ( ) { TYPE_1 writer = new TYPE_1 ( ) ; try { new TYPE_2 ( ) . METHOD_1 ( writer , VAR_1 ) ; } catch ( Exception e ) { log . error ( STRING_1 , e ) ; } return writer . toString ( ) ; }
",,,"public String toString ( ) { try ( TYPE_1 writer = new TYPE_1 ( ) ) { new TYPE_2 ( ) . METHOD_1 ( writer , VAR_1 ) ; } catch ( Exception e ) { log . error ( STRING_1 , e ) ; } return writer . toString ( ) ; }
",,,"public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( ""Error while constructing new ObjectMapper"" , e ) ; } return writer . toString ( ) ; }
",,,"public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( ""Error while constructing new ObjectMapper"" , e ) ; } return writer . toString ( ) ; }
",,,"public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( ""Error while constructing new ObjectMapper"" , e ) ; } return writer . toString ( ) ; }
",,
189,"public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
","public < TYPE_1 > TYPE_2 < T > METHOD_1 ( TYPE_3 type , TYPE_1 value ) { List < Object > VAR_1 = new ArrayList < > ( parameters . size ( ) + 2 ) ; VAR_1 . addAll ( parameters ) ; VAR_1 . add ( type ) ; VAR_1 . add ( value ) ; return new TYPE_2 < T > ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ; }
","public < TYPE_1 > TYPE_2 < T > METHOD_1 ( TYPE_3 type , TYPE_1 value ) { List < Object > VAR_1 = new ArrayList < > ( parameters . size ( ) ) ; VAR_1 . addAll ( parameters ) ; VAR_1 . add ( type ) ; VAR_1 . add ( value ) ; return new TYPE_2 < T > ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ; }
",,,"public < TYPE_1 > TYPE_2 < T > METHOD_1 ( TYPE_3 type , TYPE_1 value ) { List < Object > VAR_1 = new ArrayList < > ( parameters . size ( ) ) ; VAR_1 . addAll ( parameters ) ; VAR_1 . add ( type ) ; VAR_1 . add ( value ) ; return new TYPE_2 < T > ( VAR_2 , VAR_3 , VAR_4 , VAR_1 ) ; }
",,,"public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
",,,"public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
",,,"public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
",,
190,"private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
","private boolean METHOD_1 ( ) { boolean isEmpty = VAR_1 . METHOD_2 ( ) . isEmpty ( ) || VAR_2 . METHOD_2 ( ) . isEmpty ( ) ; return ! isEmpty && METHOD_3 ( ) && VAR_3 . METHOD_4 ( VAR_4 ) < 0 ; }
","private boolean METHOD_1 ( ) { boolean isEmpty = VAR_1 . METHOD_2 ( ) . isEmpty ( ) || VAR_2 . METHOD_2 ( ) . isEmpty ( ) ; return ! isEmpty && METHOD_3 ( ) && VAR_3 . METHOD_4 ( VAR_4 ) <= 0 ; }
",,,"private boolean METHOD_1 ( ) { boolean isEmpty = VAR_1 . METHOD_2 ( ) . isEmpty ( ) || VAR_2 . METHOD_2 ( ) . isEmpty ( ) ; return ! isEmpty && METHOD_3 ( ) && VAR_3 . METHOD_4 ( VAR_4 ) <= 0 ; }
",,,"private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
",,,"private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
",,,"private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
",,
208,"public CompilationUnit ( ) { this ( null , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; }
","public TYPE_2 ( ) { this ( null , null , new TYPE_1 < > ( ) , new TYPE_1 < > ( ) , null ) ; }
","public TYPE_2 ( ) { this ( null , false , null , new TYPE_1 < > ( ) , null ) ; }
",,,"public TYPE_2 ( ) { this ( null , false , null , new TYPE_1 < > ( ) , new TYPE_1 < > ( ) , null ) ; }
",,,"public CompilationUnit ( ) { this ( null , CompilationMode . DEFAULT , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; } where CompilationMode is an enum with possible values such as DEFAULT , STRICT , etc .
",,,"public CompilationUnit ( ) { this ( null , ExecutionType . DEFAULT , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; }
",,,"public CompilationUnit ( ) { this ( null , false , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; }
",,
214,"public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; // This should be taken from the end of ""middleChunk"" , since that's closer to the smaller neighbor long smallChunk1 = mallocChunks ( 1 ) ; // This should also be taken from the end of the remaining portion of ""middleChunk"" long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( ""The small chunks should have been allocated from space after 'prevChunk'"" , prevChunk < smallChunk2 ) ; assertTrue ( ""The small chunks should have been allocated from the end of the free block"" , smallChunk2 < smallChunk1 ) ; assertTrue ( ""The small chunks should have been allocated from space before 'nextChunk'"" , smallChunk1 < nextChunk ) ; }
","public void METHOD_1 ( ) throws Exception { long VAR_1 = METHOD_2 ( 4 ) ; long VAR_2 = METHOD_2 ( 4 ) ; long VAR_3 = METHOD_2 ( 2 ) ; METHOD_3 ( VAR_2 ) ; long VAR_4 = METHOD_2 ( 1 ) ; long VAR_5 = METHOD_2 ( 1 ) ; assertTrue ( STRING_3 , VAR_1 < VAR_5 ) ; assertTrue ( STRING_1 , VAR_5 < VAR_4 ) ; assertTrue ( STRING_2 , VAR_4 < VAR_3 ) ; }
","public void METHOD_1 ( ) throws Exception { long VAR_1 = METHOD_2 ( 4 ) ; long VAR_2 = METHOD_2 ( 4 ) ; long VAR_3 = METHOD_2 ( 2 ) ; METHOD_3 ( VAR_2 ) ; long VAR_4 = METHOD_2 ( 1 ) ; long VAR_5 = METHOD_2 ( 1 ) ; assertTrue ( STRING_1 , VAR_4 < VAR_5 ) ; assertTrue ( STRING_2 , VAR_4 < VAR_3 ) ; assertTrue ( STRING_3 , VAR_5 > VAR_1 ) ; }
",,,"public void METHOD_1 ( ) throws Exception { long VAR_1 = METHOD_2 ( 4 ) ; long VAR_2 = METHOD_2 ( 4 ) ; long VAR_3 = METHOD_2 ( 2 ) ; METHOD_3 ( VAR_2 ) ; long VAR_4 = METHOD_2 ( 1 ) ; long VAR_5 = METHOD_2 ( 1 ) ; assertTrue ( STRING_1 , VAR_1 < VAR_5 ) ; assertTrue ( STRING_2 , VAR_4 < VAR_3 ) ; assertTrue ( STRING_3 , VAR_5 > VAR_1 ) ; }
",,,"public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; long smallChunk1 = mallocChunks ( 1 ) ; long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( prevChunk < smallChunk2 ) ; assertTrue ( smallChunk2 < smallChunk1 ) ; assertTrue ( smallChunk1 < nextChunk ) ; }
",,,"public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; long smallChunk1 = mallocChunks ( 1 ) ; long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( prevChunk < smallChunk2 ) ; assertTrue ( smallChunk2 < smallChunk1 ) ; assertTrue ( smallChunk1 < nextChunk ) ; }
",,,"public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; // This should be taken from the end of ""middleChunk"" , since that's closer to the smaller neighbor long smallChunk1 = mallocChunks ( 1 ) ; // This should also be taken from the end of the remaining portion of ""middleChunk"" long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( ""The small chunks should have been allocated from the end of the free block"" , smallChunk1 > smallChunk2 ) ; assertTrue ( ""The small chunks should have been allocated from space before 'nextChunk'"" , smallChunk1 < nextChunk ) ; assertTrue ( ""The small chunks should have been allocated from space after 'prevChunk'"" , smallChunk2 > prevChunk ) ; }
",,
220,"public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 user , TYPE_3 VAR_2 , boolean VAR_3 ) { String VAR_4 = METHOD_2 ( ) ; String VAR_5 = METHOD_3 ( ) ; TYPE_4 < Object > VAR_6 = VAR_7 . get ( VAR_4 . METHOD_4 ( ) ) ; if ( VAR_6 != null ) { METHOD_7 ( VAR_6 , user , VAR_5 ) ; } else { user . VAR_9 ( VAR_4 , Arrays . asList ( VAR_5 ) ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 user , TYPE_3 VAR_2 , boolean VAR_3 ) { String VAR_4 = METHOD_2 ( ) ; String VAR_5 = METHOD_3 ( ) ; TYPE_4 < Object > VAR_6 = VAR_7 . get ( VAR_4 . METHOD_4 ( ) ) ; if ( VAR_6 != null ) { METHOD_5 ( VAR_4 , VAR_5 , VAR_2 , VAR_8 . METHOD_6 ( ) , user ) ; } else { user . VAR_9 ( VAR_4 , Arrays . asList ( VAR_5 ) ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 user , TYPE_3 VAR_2 , boolean VAR_3 ) { String VAR_4 = METHOD_2 ( ) ; String VAR_5 = METHOD_3 ( ) ; TYPE_4 < Object > VAR_6 = VAR_7 . get ( VAR_4 . METHOD_4 ( ) ) ; if ( VAR_6 != null ) { METHOD_5 ( VAR_4 , VAR_5 , VAR_2 , VAR_8 . METHOD_6 ( ) , user ) ; user . VAR_9 ( VAR_4 , Arrays . asList ( VAR_5 ) ) ; } }
",,,"public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
",,,"protected void next ( String email ) { if ( ! NetworkUtils . checkConnection ( getActivity ( ) ) ) { return ; } if ( isValidEmail ( email ) ) { clearEmailError ( ) ; startProgress ( ) ; mRequestedEmail = email ; mDispatcher . dispatch ( AccountActionBuilder . newIsAvailableEmailAction ( email ) ) ; } else { showEmailError ( R . string . email_invalid ) ; } } public ListBoxBaseDefinition getDefaultField ( ) { return new StringListBoxFieldDefinition ( ) ; } public Collection < RepositoryMapping > find ( IProgressMonitor m , boolean searchLinkedFolders ) throws CoreException { find ( m , proj , searchLinkedFolders ) ; return results ; } public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
",,,"public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
",,
222,"public static void startServerInstance ( File dataDir , ServerCnxnFactory factory , String hostPort ) throws IOException , InterruptedException { final int port = getPort ( hostPort ) ; LOG . info ( ""STARTING server instance 127 . 0 . 0 . 1 : { } "" , port ) ; ZooKeeperServer zks = new ZooKeeperServer ( dataDir , dataDir , 3000 ) ; factory . startup ( zks ) ; Assert . assertTrue ( ""waiting for server up"" , ClientBase . waitForServerUp ( ""127 . 0 . 0 . 1 : "" + port , CONNECTION_TIMEOUT , factory . isSecure ( ) ) ) ; }
","public static void METHOD_1 ( File VAR_1 , TYPE_1 factory , String VAR_2 ) throws IOException , InterruptedException { final int VAR_3 = METHOD_2 ( VAR_2 ) ; LOG . info ( STRING_1 , VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , VAR_1 , INT_1 ) ; factory . VAR_5 ( VAR_4 ) ; Assert . assertTrue ( STRING_2 , TYPE_4 . METHOD_3 ( STRING_3 + VAR_3 , VAR_6 , factory . VAR_7 ( ) ) ) ; }
","public static void METHOD_1 ( File VAR_1 , TYPE_1 factory , String VAR_2 ) throws IOException , TYPE_5 . TYPE_6 { final int VAR_3 = METHOD_2 ( VAR_2 ) ; LOG . info ( STRING_1 , VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , VAR_1 , INT_1 ) ; factory . VAR_5 ( VAR_4 ) ; Assert . assertTrue ( STRING_2 , TYPE_4 . METHOD_3 ( STRING_3 + VAR_3 , VAR_6 , factory . VAR_7 ( ) ) ) ; }
",,,"public static void METHOD_1 ( File VAR_1 , TYPE_1 factory , String VAR_2 ) throws IOException , InterruptedException , TYPE_5 . TYPE_6 { final int VAR_3 = METHOD_2 ( VAR_2 ) ; LOG . info ( STRING_1 , VAR_3 ) ; TYPE_3 VAR_4 = new TYPE_3 ( VAR_1 , VAR_1 , INT_1 ) ; factory . VAR_5 ( VAR_4 ) ; Assert . assertTrue ( STRING_2 , TYPE_4 . METHOD_3 ( STRING_3 + VAR_3 , VAR_6 , factory . VAR_7 ( ) ) ) ; }
",,,"The Review without comments doesn't provide enough information to determine what changes need to be made to the code . Please provide more context or information .
",,,"public static void startServerInstance ( File dataDir , ServerCnxnFactory factory , String hostPort ) throws IOException , InterruptedException , KeeperException . NoNodeException { final int port = getPort ( hostPort ) ; LOG . info ( ""Starting server instance 127 . 0 . 0 . 1 : { } "" , port ) ; ZooKeeperServer zks = new ZooKeeperServer ( dataDir , dataDir , 3000 ) ; factory . startup ( zks ) ; Assert . assertTrue ( ""waiting for server up"" , ClientBase . waitForServerUp ( ""127 . 0 . 0 . 1 : "" + port , CONNECTION_TIMEOUT , factory . isSecure ( ) ) ) ; }
",,,"public static void startServerInstance ( File dataDir , ServerCnxnFactory factory , String hostPort ) throws IOException , InterruptedException , KeeperException . NoNodeException { final int port = getPort ( hostPort ) ; LOG . info ( "" ING server instance 127 . 0 . 0 . 1 : { } "" , port ) ; ZooKeeperServer zks = new ZooKeeperServer ( dataDir , dataDir , 3000 ) ; factory . startup ( zks ) ; Assert . assertTrue ( ""waiting for server up"" , ClientBase . waitForServerUp ( ""127 . 0 . 0 . 1 : "" + port , CONNECTION_TIMEOUT , factory . isSecure ( ) ) ) ; }
",,
244,"public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , ""uri"" ) ; return this ; }
","public TYPE_1 METHOD_1 ( String uri ) { this . uri = TYPE_2 . METHOD_2 ( uri , STRING_1 ) ; return this ; }
","public TYPE_1 METHOD_1 ( String uri ) { this . uri = TYPE_2 . METHOD_2 ( uri , STRING_1 ) ; return this ; }
",,,"public TYPE_1 METHOD_1 ( String uri ) { this . uri = TYPE_2 . METHOD_2 ( uri , STRING_1 ) ; return this ; }
",,,"public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , ""uri"" ) ; return this ; }
",,,"public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , ""uri"" ) ; return this ; }
",,,"public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , ""uri"" ) ; return this ; }
",,
250,"public void setHttpService ( HttpService httpService ) { logger . debug ( ""setHttpService called"" ) ; this . httpService = httpService ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { logger . debug ( STRING_1 ) ; this . VAR_1 = VAR_1 ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { logger . debug ( STRING_1 ) ; this . VAR_1 = VAR_1 ; }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { logger . debug ( STRING_1 ) ; this . VAR_1 = VAR_1 ; }
",,,"public void setHttpService ( HttpService httpService ) { logger . debug ( ""setHttpService called"" ) ; this . httpService = httpService ; }
",,,"private CMISSessionFacade getSessionFacade ( ) throws Exception { if ( sessionFacade == null ) { sessionFacade = sessionFacadeFactory . create ( ) ; sessionFacade . initSession ( ) ; } return sessionFacade ; } public void start ( Boolean isLeader ) throws IOException { super . start ( isLeader ) ; mGlobalStorageTierAssoc = new MasterStorageTierAssoc ( ) ; if ( isLeader ) { mLostWorkerDetectionService = getExecutorService ( ) . submit ( new HeartbeatThread ( HeartbeatContext . MASTER_LOST_WORKER_DETECTION , new LostWorkerDetectionHeartbeatExecutor ( ) , ( int ) Configuration . getMs ( PropertyKey . MASTER_HEARTBEAT_INTERVAL_MS ) ) ) ; } } private int getCurrValidWorkers ( Collection < ImmutableWorkerInfo > workers ) { final Predicate < ImmutableWorkerInfo > isValidWorker = ProvisioningUtil . createValidWorkerPredicate ( config ) ; final int currValidWorkers = Collections2 . filter ( workers , isValidWorker ) . size ( ) ; log . debug ( ""Current valid workers : { } "" , currValidWorkers ) ; return currValidWorkers ; } public void setHttpService ( HttpService httpService ) { logger . debug ( ""setHttpService called"" ) ; this . httpService = httpService ; }
",,,"public void setHttpService ( HttpService httpService ) { logger . debug ( ""setHttpService called"" ) ; this . httpService = httpService ; }
",,
258,"public boolean isLoggedIn ( ) { return token != null && user != null ; }
","public boolean METHOD_1 ( ) { return token != null && user != null ; }
","boolean METHOD_1 ( ) { return token != null && VAR_1 != null ; }
",,,"boolean METHOD_1 ( ) { return token != null && VAR_1 != null ; }
",,,"public boolean isLoggedIn ( ) { return token != null && hub != null ; }
",,,"static Set < Guid > mapDisks ( DiskAttachments diskAttachments ) { Set < Guid > diskIds = null ; if ( diskAttachments . isSetDiskAttachments ( ) ) { diskIds = mapDisksToSetOfGuids ( diskAttachments . getDiskAttachments ( ) . stream ( ) . map ( DiskAttachment : : getDisk ) ) ; } return diskIds ; } public AddCinderStorageDomainCommand ( Guid commandId ) { super ( commandId ) ; } private BootstrapContextCoordinator ( ) { this . bootstrapContexts = new ConcurrentHashMap < String , CloneableBootstrapContext > ( ) ; this . defaultBootstrapContext = null ; this . workManagerCoordinator = null ; this . activeBootstrapContexts = new HashMap < String , CloneableBootstrapContext > ( ) ; this . refCountBootstrapContexts = new HashMap < String , Integer > ( ) ; } public boolean isLoggedIn ( ) { return token != null && hub != null ; }
",,,"boolean isLoggedIn ( ) { return token != null && hub != null ; }
",,
259,"public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
","public void METHOD_1 ( String VAR_1 ) { try { this . VAR_1 = TYPE_1 . valueOf ( VAR_1 ) ; } catch ( Exception e ) { } }
","public void METHOD_1 ( String VAR_1 ) { try { this . VAR_1 = TYPE_1 . valueOf ( VAR_1 ) ; } catch ( Exception e ) { } }
",,,"public void METHOD_1 ( String VAR_1 ) { try { this . VAR_1 = TYPE_1 . valueOf ( VAR_1 ) ; } catch ( Exception e ) { } }
",,,"public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
",,,"public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
",,,"public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
",,
273,"protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
","protected int METHOD_1 ( ) { return Integer . parseInt ( TYPE_1 . getProperty ( VAR_1 , VAR_2 ) ) ; }
","protected int METHOD_1 ( ) { return Integer . parseInt ( TYPE_1 . getProperty ( VAR_1 , VAR_2 ) ) ; }
",,,"protected int METHOD_1 ( ) { return Integer . parseInt ( TYPE_1 . getProperty ( VAR_1 , VAR_2 ) ) ; }
",,,"protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
",,,"protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
",,,"protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
",,
275,"public void closeTest ( ) { // request is keep - alive by default . HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; // drain the channel of content . while ( channel . readOutbound ( ) != null ) { } assertFalse ( ""Channel should be closed"" , channel . isOpen ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 request = METHOD_2 ( TYPE_6 . VAR_2 , TYPE_4 . TYPE_5 . toString ( ) ) ; TYPE_3 channel = METHOD_3 ( ) ; channel . VAR_3 ( request ) ; while ( channel . VAR_4 ( ) != null ) { } METHOD_4 ( STRING_1 , channel . VAR_5 ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 request = METHOD_2 ( TYPE_6 . VAR_2 , TYPE_4 . TYPE_5 . toString ( ) ) ; TYPE_3 channel = METHOD_3 ( ) ; channel . VAR_3 ( request ) ; try { while ( channel . VAR_4 ( ) != null ) { ; } } finally { METHOD_4 ( STRING_1 , channel . VAR_5 ( ) ) ; } }
",,,"public void METHOD_1 ( ) { TYPE_1 request = METHOD_2 ( TYPE_6 . VAR_2 , TYPE_4 . TYPE_5 . toString ( ) ) ; TYPE_3 channel = METHOD_3 ( ) ; channel . VAR_3 ( request ) ; while ( channel . VAR_4 ( ) != null ) { ; } METHOD_4 ( STRING_1 , channel . VAR_5 ( ) ) ; }
",,,"public void testClose ( ) { HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; while ( channel . readOutbound ( ) != null ) { ; } assertFalse ( ""Channel should be closed"" , channel . isOpen ( ) ) ; assertTrue ( ""Response channel should be closed"" , channel . pipeline ( ) . get ( NettyResponseChannel . class ) . isClosed ( ) ) ; }
",,,"public void closeTest ( ) { HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; while ( channel . readOutbound ( ) != null ) { ; } assertFalse ( ""Channel should be closed"" , channel . isOpen ( ) ) ; }
",,,"public void closeTest ( ) { // request is keep - alive by default . HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; // drain the channel of content . while ( channel . readOutbound ( ) != null ) { ; } assertFalse ( ""Channel should be closed"" , channel . isOpen ( ) ) ; }
",,
276,"public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( ""get_rule_logs_for_vms"" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
","public String METHOD_1 ( ) { final TYPE_1 cmd = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; cmd . add ( STRING_1 ) ; final TYPE_3 . TYPE_4 parser = new TYPE_3 . TYPE_4 ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . VAR_4 ( ) ; } return null ; }
","public String METHOD_1 ( ) { final TYPE_1 cmd = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; cmd . add ( STRING_1 ) ; final TYPE_3 . TYPE_4 parser = new TYPE_3 . TYPE_4 ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . VAR_4 ( ) ; } return null ; }
",,,"public String METHOD_1 ( ) { final TYPE_1 cmd = new TYPE_1 ( VAR_1 , VAR_2 , VAR_3 ) ; cmd . add ( STRING_1 ) ; final TYPE_3 . TYPE_4 parser = new TYPE_3 . TYPE_4 ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . VAR_4 ( ) ; } return null ; }
",,,"public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout . toMillis ( ) , s_logger ) ; cmd . add ( ""get_rule_logs_for_vms"" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
",,,"public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( ""get_rule_logs_for_vms"" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
",,,"public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( ""get_rule_logs_for_vms"" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
",,
277,"private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
","private void METHOD_1 ( Class < ? extends TYPE_1 > r ) { if ( ! VAR_1 . containsKey ( r ) ) { VAR_1 . put ( r , TYPE_2 . METHOD_2 ( r ) ) ; } }
","private void METHOD_1 ( Class < ? extends TYPE_1 > r ) { VAR_1 . put ( r , TYPE_2 . METHOD_2 ( r ) ) ; }
",,,"private void METHOD_1 ( Class < ? extends TYPE_1 > r ) { METHOD_1 ( r , TYPE_2 . METHOD_2 ( r ) ) ; }
",,,"private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
",,,"private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
",,,"private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
",,
278,"public void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
","public void METHOD_1 ( List < ? extends TYPE_1 > VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 ) ; }
","public void METHOD_1 ( List < ? extends TYPE_1 > VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 ) ; }
",,,"public void METHOD_1 ( List < ? extends TYPE_1 > VAR_1 ) { METHOD_1 ( VAR_2 , VAR_1 ) ; }
",,,"public synchronized void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
",,,"public synchronized void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
",,,"public synchronized void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
",,
281,"public void info ( String message ) { info . add ( message ) ; }
","public void info ( String message ) { info . add ( message ) ; }
","public void info ( String message ) { info . add ( message ) ; }
",,,"public void info ( String message ) { info . add ( message ) ; }
",,,"public void info ( String message ) { logger . info ( message ) ; info . add ( message ) ; }
",,,"public void info ( String message ) { log . info ( message ) ; info . add ( message ) ; }
",,,"public void info ( String message ) { log . info ( message ) ; info . add ( message ) ; }
",,
291,"protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 , null ) ; return TYPE_5 . METHOD_4 ( VAR_2 , METHOD_5 ( ) ) ; }
","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( METHOD_3 ( ) , null ) ; return TYPE_5 . METHOD_4 ( VAR_1 , METHOD_5 ( ) ) ; }
",,,"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { final TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_1 , METHOD_3 ( ) ) ; return TYPE_5 . METHOD_4 ( VAR_2 , METHOD_5 ( ) ) ; }
",,,"protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
",,,"protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
",,,"protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
",,
294,"private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; }
","private boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) || METHOD_3 ( ) ) || METHOD_4 ( ) ; }
","private boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) || METHOD_3 ( ) ) || METHOD_4 ( ) ; }
",,,"private boolean METHOD_1 ( ) { return ! ( METHOD_2 ( ) || METHOD_3 ( ) ) || METHOD_4 ( ) ; }
",,,"private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; }
",,,"private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; }
",,,"private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; } }
",,
299,"private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
","private static String METHOD_1 ( String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) + VAR_1 . substring ( 1 ) ; }
","private static String METHOD_1 ( String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) + VAR_1 . substring ( 1 ) ; }
",,,"private static String METHOD_1 ( String VAR_1 ) { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) + VAR_1 . substring ( 1 ) ; }
",,,"private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
",,,"private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
",,,"private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
",,
314,"public String getDescription ( ) { return ""Transform files representing a structured table under an Alluxio directory . "" + ""\n\n"" + ""Files are coalesced and converted to parquet format . "" + ""\n\n"" + ""Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , "" + ""currently , the only modification you can do to the example definition is "" + ""the number of files in the option . "" ; }
","public String VAR_1 ( ) { return STRING_1 + STRING_2 + STRING_3 + STRING_2 + STRING_4 + STRING_5 + STRING_6 ; }
","public String VAR_1 ( ) { return STRING_1 + STRING_2 + STRING_3 + STRING_2 + STRING_4 + STRING_5 + STRING_6 ; }
",,,"public String VAR_1 ( ) { return STRING_1 + STRING_2 + STRING_3 + STRING_2 + STRING_4 + STRING_5 ; }
",,,"public String getDescription ( ) { return ""Transform files representing a structured table under an Alluxio directory . \n\n"" + ""Files are coalesced and converted to parquet format . \n\n"" + ""Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , "" + ""currently , the only modification you can do to the example definition is "" + ""the number of files in the option . "" ; }
",,,"public String getDescription ( ) { return ""Transform files representing a structured table under an Alluxio directory . "" + ""\n\n"" + ""Files are coalesced and converted to parquet format . "" + ""\n\n"" + ""Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , "" + ""currently , the only modification you can do to the example definition is "" + ""the number of files in the option . "" ; }
",,,"public String getDescription ( ) { return ""Transform files representing a structured table under an Alluxio directory . "" + ""\n\n"" + ""Files are coalesced and converted to parquet format . "" + ""\n\n"" + ""Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , "" + ""currently , the only modification you can do to the example definition is "" + ""the number of files in the option . "" }
",,
324,"public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < ProxiedPlayer > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( partialName . equalsIgnoreCase ( iterPlayerName ) ) { matched . add ( iPlayer ) ; break ; } if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
","public List < TYPE_1 > METHOD_1 ( String VAR_1 ) { List < TYPE_1 > VAR_2 = new ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : this . METHOD_2 ( ) ) { String VAR_4 = VAR_3 . getName ( ) ; if ( VAR_1 . equalsIgnoreCase ( VAR_4 ) ) { VAR_2 . add ( VAR_3 ) ; break ; } if ( VAR_4 . METHOD_3 ( ) . startsWith ( VAR_1 . METHOD_3 ( ) ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }
","public List < TYPE_1 > METHOD_1 ( String VAR_1 ) { List < TYPE_1 > VAR_2 = new ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : this . METHOD_2 ( ) ) { String VAR_4 = VAR_3 . getName ( ) ; if ( VAR_1 . equalsIgnoreCase ( VAR_4 ) ) { VAR_2 . add ( VAR_3 ) ; break ; } if ( VAR_4 . METHOD_3 ( ) . contains ( VAR_1 . METHOD_3 ( ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }
",,,"public List < TYPE_1 > METHOD_1 ( String VAR_1 ) { List < TYPE_1 > VAR_2 = new ArrayList < TYPE_1 > ( ) ; for ( TYPE_1 VAR_3 : this . METHOD_2 ( ) ) { String VAR_4 = VAR_3 . getName ( ) ; if ( VAR_1 . equalsIgnoreCase ( VAR_4 ) ) { VAR_2 . add ( VAR_3 ) ; break ; } if ( VAR_4 . METHOD_3 ( ) . contains ( VAR_1 ) ) { VAR_2 . add ( VAR_3 ) ; } } return VAR_2 ; }
",,,"public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < ProxiedPlayer > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
",,,"public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( partialName . equalsIgnoreCase ( iterPlayerName ) ) { matched . add ( iPlayer ) ; break ; } if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
",,,"public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < ProxiedPlayer > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( partialName . equalsIgnoreCase ( iterPlayerName ) ) { matched . add ( iPlayer ) ; break ; } if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
",,
326,"public void testEqualsCondition ( ) { doTest ( ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( TYPE_1 . VAR_2 ) ; }
",,,"public void METHOD_1 ( ) { METHOD_2 ( TYPE_1 . VAR_2 ) ; }
",,,"public void testEqualsCondition ( ) { doTest ( GoStringIndexIsByteQuickFix . NAME ) ; } private void doTest ( String name ) { // test code here } private void doTestNoFix ( ) { // test code here without applying any fix }
",,,"public void testEqualsCondition ( ) { doTest ( GoStringIndexIsByteQuickFix . NAME ) ; } private void doTest ( ) { doTest ( GoStringIndexIsByteQuickFix . NAME ) ; } private void doTestNoFix ( ) { // method implementation }
",,,"public void testEqualsCondition ( ) { doTest ( ) ; }
",,
335,"public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
","public boolean METHOD_1 ( ) { final String VAR_1 = super . VAR_2 . getProperty ( VAR_3 ) ; return VAR_1 == null ? false : Boolean . valueOf ( VAR_1 ) ; }
","public boolean METHOD_1 ( ) { final String VAR_1 = super . VAR_2 . getProperty ( VAR_3 ) ; return VAR_1 == null ? false : Boolean . valueOf ( VAR_1 ) ; }
",,,"public boolean METHOD_1 ( ) { final String VAR_1 = super . VAR_2 . getProperty ( VAR_3 ) ; return VAR_1 != null && Boolean . valueOf ( VAR_1 ) ; }
",,,"public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
",,,"public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
",,,"public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
",,
341,"public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; assertThat ( allergy . hasSameValues ( allergy ( ) ) , is ( true ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; assertThat ( VAR_1 . METHOD_3 ( METHOD_2 ( ) ) , is ( true ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( ) ; VAR_1 . METHOD_3 ( METHOD_2 ( ) ) ; }
",,,"public void METHOD_1 ( ) { METHOD_2 ( ) . METHOD_3 ( METHOD_2 ( ) ) ; }
",,,"public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; assertTrue ( allergy . hasSameValues ( allergy ( ) ) ) ; }
",,,"public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; assertTrue ( allergy . hasSameValues ( allergy ( ) ) ) ; }
",,,"public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; AssertTrue ( allergy . hasSameValues ( allergy ( ) ) ) ; }
",,
348,"private boolean waitForScanState ( ScanStates state ) { try { do { scanState . wait ( ) ; } while ( ! getScanState ( ) . equals ( state ) ) ; return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( ""problem waiting for scanLock whilst in state "" + state . name ( ) , e ) ; return false ; } }
","private boolean METHOD_1 ( TYPE_1 state ) { try { do { VAR_1 . METHOD_3 ( ) ; } while ( ! METHOD_2 ( ) . equals ( state ) ) ; return true ; } catch ( InterruptedException e ) { VAR_2 . logger . warn ( STRING_1 + state . name ( ) , e ) ; return false ; } }
","private boolean METHOD_1 ( TYPE_1 state ) { try { while ( ! METHOD_2 ( ) . equals ( state ) ) { VAR_1 . METHOD_3 ( ) ; } return true ; } catch ( InterruptedException e ) { VAR_2 . logger . warn ( STRING_1 + state . name ( ) , e ) ; return false ; } }
",,,"private boolean METHOD_1 ( TYPE_1 state ) { try { while ( METHOD_2 ( ) . equals ( state ) ) { VAR_1 . METHOD_3 ( ) ; } return true ; } catch ( InterruptedException e ) { VAR_2 . logger . warn ( STRING_1 + state . name ( ) , e ) ; return false ; } }
",,,"private boolean waitForScanState ( ScanStates state ) { try { while ( getScanState ( ) != state ) { scanState . wait ( ) ; } return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( ""problem waiting for scanLock whilst in state "" + state . name ( ) , e ) ; return false ; } }
",,,"private boolean waitForScanState ( ScanStates state ) { try { while ( ! getScanState ( ) . equals ( state ) ) { scanState . wait ( ) ; } return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( ""problem waiting for scanLock whilst in state "" + state . name ( ) , e ) ; return false ; } }
",,,"private boolean waitForScanState ( ScanStates state ) { try { do { scanState . wait ( ) ; } while ( ! getScanState ( ) . equals ( state ) ) ; return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( ""problem waiting for scanLock whilst in state "" + state . name ( ) , e ) ; return false ; } }
",,
358,"public int hashCode ( ) { return ~~name . hashCode ( ) ; }
","public int METHOD_1 ( ) { return ~ ~ name . VAR_1 ( ) ; }
","public int METHOD_1 ( ) { return name . VAR_1 ( ) ; }
",,,"public int METHOD_1 ( ) { return name . VAR_1 ( ) ; }
",,,"public int hashCode ( ) { return ~~name . hashCode ( ) ; }
",,,"public int hashCode ( ) { return this . delegate . hashCode ( ) ; } public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime + ( ( name == null ) ? 0 : name . hashCode ( ) ) ; return result ; } public int hashCode ( ) { return this . path . hashCode ( ) ; } public int hashCode ( ) { return ~~name . hashCode ( ) ; }
",,,"public int hashCode ( ) { return ~~name . hashCode ( ) ; }
",,
363,"public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
","public void METHOD_1 ( ) { TYPE_1 config = new TYPE_1 ( ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; config . VAR_2 ( true ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_3 ( ) ; config . VAR_2 ( Boolean . VAR_3 ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_4 ( ) ; config . VAR_2 ( null ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; }
","public void METHOD_1 ( ) { TYPE_1 config = new TYPE_1 ( ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; config . VAR_2 ( true ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_3 ( ) ; config . VAR_2 ( Boolean . VAR_3 ) ; assertThat ( ( boolean ) config . VAR_1 ( ) ) . METHOD_4 ( ) ; config . VAR_2 ( null ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; }
",,,"public void METHOD_1 ( ) { TYPE_1 config = new TYPE_1 ( ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; config . VAR_2 ( true ) ; config . VAR_2 ( Boolean . VAR_3 ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_4 ( ) ; config . VAR_2 ( null ) ; assertThat ( config . VAR_1 ( ) ) . METHOD_2 ( ) ; }
",,,"public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
",,,"public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
",,,"public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
",,
370,"public Map < String , Object > getExtraInformation ( ) { return extraInformation ; }
","public Map < String , Object > METHOD_1 ( ) { return VAR_1 ; }
","public Map < String , Object > METHOD_1 ( ) { return VAR_1 ; }
",,,"public Map < String , Object > METHOD_1 ( ) { return VAR_1 ; }
",,,"public Map < String , Object > getExtraInformation ( ) { return extraInformation ; } @Deprecated protected Map < String , Object > getExtraInformationDeprecated ( ) { return extraInformation ; }
",,,"private Map < String , Object > getExtraInformation ( ) { return extraInformation ; }
",,,"public Map < String , Object > getExtraInformation ( ) { return extraInformation ; }
",,
371,"public int hashCode ( ) { return Objects . hash ( pointer , ownerName ) ; }
","public int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_1 , VAR_2 ) ; }
","public int METHOD_1 ( ) { return METHOD_2 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; }
",,,"public int METHOD_1 ( ) { return TYPE_1 . METHOD_2 ( VAR_2 , VAR_1 , VAR_3 , VAR_4 , VAR_5 ) ; }
",,,"public int hashCode ( ) { return Objects . hash ( pointer , ownerName , owner , readers , writers ) ; }
",,,"public int hashCode ( ) { return Objects . hash ( pointer , ownerName , owner , readers , writers ) ; }
",,,"public int hashCode ( ) { return Objects . hash ( pointer , ownerName , owner , readers , writers ) ; }
",,
387,"public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
","public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_4 ( ) ; return new TYPE_1 ( VAR_2 ) ; } finally { METHOD_5 ( ) ; } }
","public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 ) ; VAR_1 . METHOD_4 ( ) ; return new TYPE_1 ( VAR_2 ) ; } finally { METHOD_5 ( ) ; } }
",,,"public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; try { METHOD_3 ( VAR_1 ) ; return new TYPE_1 ( VAR_2 ) ; } finally { METHOD_5 ( ) ; } }
",,,"public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
",,,"public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
",,,"public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
",,
394,"public void setSetPath ( String path ) { requireNonNull ( path , ""path is null"" ) ; setPath . set ( path ) ; }
","public void METHOD_1 ( String path ) { METHOD_2 ( path , STRING_1 ) ; VAR_1 . set ( path ) ; }
","public void METHOD_1 ( String path ) { METHOD_2 ( path , STRING_1 ) ; VAR_1 . set ( path ) ; }
",,,"public void METHOD_1 ( String path ) { METHOD_2 ( path , STRING_1 ) ; VAR_1 . set ( path ) ; }
",,,"public void setSetPath ( String path ) { Objects . requireNonNull ( path , ""path is null"" ) ; setPath . set ( path ) ; }
",,,"public void setSetPath ( String path ) { requireNonNull ( path , ""path is null"" ) ; setPath . set ( path ) ; }
",,,"public void setSetPath ( String path ) { requireNonNull ( path , ""path is null"" ) ; setPath . set ( path ) ; }
",,
395,"public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
","public TYPE_1 METHOD_1 ( ) throws IOException , InterruptedException { TYPE_1 VAR_1 = this . VAR_1 ; if ( VAR_1 != null ) { return VAR_1 ; } VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; this . VAR_1 = VAR_1 ; return VAR_1 ; }
","public TYPE_1 METHOD_1 ( ) throws IOException , InterruptedException { TYPE_1 VAR_1 = VAR_1 ; if ( VAR_1 != null ) { return VAR_1 ; } VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; return VAR_1 ; }
",,,"public TYPE_1 METHOD_1 ( ) throws IOException , InterruptedException { TYPE_1 VAR_1 = VAR_1 ; if ( VAR_1 != null ) { return VAR_1 ; } VAR_1 = TYPE_1 . METHOD_2 ( METHOD_3 ( ) ) ; }
",,,"public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
",,,"public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
",,,"public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; // all non - null values should be equivalent so in a race it doesn't matter who wins this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
",,
397,"public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
","public void METHOD_1 ( ) { List < TYPE_1 > result = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
","public void METHOD_1 ( ) { List < TYPE_1 > result = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
",,,"public void METHOD_1 ( ) { List < TYPE_1 > result = VAR_1 . METHOD_2 ( VAR_2 . METHOD_3 ( ) , VAR_3 , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
",,,"public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
",,,"public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
",,,"public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
",,
403,"private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; } } return comparedExpression ; }
","private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_3 . TYPE_4 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_3 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_4 ( VAR_1 , VAR_2 ) ; } } return VAR_3 ; }
","private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_3 . TYPE_4 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_3 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_4 ( VAR_1 , VAR_2 ) ; } } return VAR_3 ; }
",,,"private static TYPE_1 METHOD_1 ( TYPE_1 VAR_1 , TYPE_3 . TYPE_4 VAR_2 ) { TYPE_1 VAR_3 = METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_3 ( VAR_1 , VAR_2 ) ; if ( VAR_3 == null ) { VAR_3 = METHOD_4 ( VAR_1 , VAR_2 ) ; } } return VAR_3 ; }
",,,"private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; if ( comparedExpression == null ) { return null ; } } } return comparedExpression ; }
",,,"private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; return comparedExpression ; } } return comparedExpression ; }
",,,"private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; return comparedExpression ; } } return comparedExpression ; }
",,
408,"private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
","private String METHOD_1 ( TYPE_1 request ) { String token = null ; String VAR_1 = request . VAR_2 ( TYPE_3 . VAR_4 ) ; if ( VAR_1 != null && VAR_1 . startsWith ( TYPE_2 ) ) { token = VAR_1 . substring ( TYPE_2 . length ( ) ) . trim ( ) ; } return token ; }
","private String METHOD_1 ( TYPE_1 request ) { String token = null ; String VAR_1 = request . VAR_2 ( TYPE_3 . VAR_4 ) ; if ( VAR_1 != null && VAR_1 . startsWith ( TYPE_2 ) ) { token = VAR_1 . substring ( TYPE_2 . length ( ) ) . trim ( ) ; } return token ; }
",,,"private String METHOD_1 ( TYPE_1 request ) { String VAR_1 = request . VAR_2 ( TYPE_3 . VAR_4 ) ; if ( VAR_1 != null && VAR_1 . startsWith ( STRING_1 ) ) { return VAR_1 . substring ( TYPE_2 . length ( ) ) . trim ( ) ; } return null ; }
",,,"private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
",,,"private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
",,,"private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
",,
416,"public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , ""method"" ) ; return this ; }
","public TYPE_1 METHOD_1 ( TYPE_2 method ) { this . method = TYPE_3 . METHOD_2 ( method , STRING_1 ) ; return this ; }
","public TYPE_1 METHOD_1 ( TYPE_2 method ) { this . method = TYPE_3 . METHOD_2 ( method , STRING_1 ) ; return this ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 method ) { this . method = TYPE_3 . METHOD_2 ( method , STRING_1 ) ; return this ; }
",,,"public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , ""method"" ) ; return this ; }
",,,"public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , ""method"" ) ; return this ; }
",,,"public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , ""method"" ) ; return this ; }
",,
423,"public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( ""ALTER SESSION SET `exec . errors . verbose` = true"" ) ; }
","public static void METHOD_1 ( ) throws Exception { config = TYPE_1 . create ( METHOD_2 ( ) ) ; VAR_1 = TYPE_2 . METHOD_3 ( config ) ; METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; }
","public static void METHOD_1 ( ) throws Exception { VAR_1 = TYPE_2 . METHOD_3 ( config ) ; METHOD_4 ( ) ; METHOD_5 ( STRING_1 ) ; }
",,,"public static void METHOD_1 ( ) throws Exception { config = TYPE_1 . create ( METHOD_2 ( ) ) ; VAR_1 = TYPE_2 . METHOD_3 ( config ) ; }
",,,"public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( ""ALTER SESSION SET `exec . errors . verbose` = true"" ) ; } public static void setupTestClusterWithEmptyDir ( ) throws Exception { setupDefaultTestCluster ( ) ; emptyDirCreating ( ) ; }
",,,"public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; test ( ""ALTER SESSION SET `exec . errors . verbose` = true"" ) ; emptyDirCreating ( ) ; }
",,,"public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( ""ALTER SESSION SET `exec . errors . verbose` = true"" ) ; }
",,
443,"private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , ""values is null"" ) ; for ( long value : values ) { digest . add ( value ) ; } }
","private static void addAll ( TYPE_1 VAR_1 , long ... values ) { METHOD_1 ( values , STRING_1 ) ; for ( long value : values ) { VAR_1 . add ( value ) ; } }
","private static void addAll ( TYPE_1 VAR_1 , long ... values ) { METHOD_1 ( values , STRING_1 ) ; for ( long value : values ) { VAR_1 . add ( value ) ; } }
",,,"private static void addAll ( TYPE_1 VAR_1 , long ... values ) { METHOD_1 ( values , STRING_1 ) ; for ( long value : values ) { VAR_1 . add ( value ) ; } }
",,,"private static void addAll ( QuantileDigest digest , long . . . values ) { Objects . requireNonNull ( values , ""values is null"" ) ; for ( long value : values ) { digest . add ( value ) ; } }
",,,"private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , ""values is null"" ) ; for ( long value : values ) { digest . add ( value ) ; } }
",,,"private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , ""values is null"" ) ; for ( long value : values ) { digest . add ( value ) ; } }
",,
459,"public List < String > getSuggestions ( String input ) { return getWorlds ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; }
","public List < String > METHOD_1 ( String input ) { return METHOD_4 ( ) . map ( TYPE_2 : : getId ) . filter ( VAR_3 - > VAR_3 . startsWith ( input ) ) . collect ( Collectors . VAR_4 ( ) ) ; }
","public List < String > METHOD_1 ( String input ) { return TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . VAR_2 ) . METHOD_4 ( ) . stream ( ) . map ( TYPE_2 : : getId ) . filter ( VAR_3 - > VAR_3 . startsWith ( input ) ) . collect ( Collectors . VAR_4 ( ) ) ; }
",,,"public List < String > METHOD_1 ( String input ) { return TYPE_1 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( TYPE_3 . VAR_2 ) . METHOD_4 ( ) . stream ( ) . map ( TYPE_2 : : getId ) . filter ( VAR_3 - > VAR_3 . startsWith ( input ) ) . collect ( Collectors . VAR_4 ( ) ) ; }
",,,"public List < String > getSuggestions ( String input ) { return extractWorlds ( ) . stream ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; } private List < World > extractWorlds ( ) { return WorldEdit . getInstance ( ) . getPlatformManager ( ) . queryCapability ( Capability . GAME_HOOKS ) . getWorlds ( ) ; }
",,,"public List < String > getSuggestions ( String input ) { return extractWorlds ( ) . stream ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; } private List < World > extractWorlds ( ) { return WorldEdit . getInstance ( ) . getPlatformManager ( ) . queryCapability ( Capability . GAME_HOOKS ) . getWorlds ( ) ; }
",,,"public List < String > getSuggestions ( String input ) { return getWorlds ( ) . stream ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; }
",,
460,"protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; } setSucceeded ( true ) ; } }
","protected void METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; if ( VAR_1 ) { String VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( StringUtils . VAR_3 ( VAR_2 ) ) { METHOD_5 ( ) . METHOD_6 ( ) . remove ( VAR_2 ) ; } METHOD_7 ( true ) ; } }
","protected void METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; if ( VAR_1 ) { String VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( StringUtils . VAR_3 ( VAR_2 ) ) { METHOD_5 ( ) . METHOD_6 ( ) . remove ( VAR_2 ) ; METHOD_7 ( true ) ; } } }
",,,"protected void METHOD_1 ( ) { boolean VAR_1 = METHOD_2 ( ) ; if ( ! VAR_1 ) { return ; } String VAR_2 = METHOD_3 ( ) . METHOD_4 ( ) ; if ( StringUtils . VAR_3 ( VAR_2 ) ) { METHOD_5 ( ) . METHOD_6 ( ) . remove ( VAR_2 ) ; METHOD_7 ( true ) ; } }
",,,"protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; setSucceeded ( true ) ; } // set the connection to null to avoid issues with other hosts setConnection ( null ) ; } }
",,,"protected void executeCommand ( ) { boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; setSucceeded ( true ) ; } } }
",,,"protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; setSucceeded ( true ) ; } } }
",,
469,"public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = """" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( ""Unexpected output log"" , expected , systemOut . getLog ( ) ) ; assertEquals ( ""Unexpected system error log"" , """" , systemErr . getLog ( ) ) ; } ) ; Main . main ( "" - c"" , getPath ( ""InputMainConfig - empty . xml"" ) , "" -- generate - xpath - suppression"" , getPath ( ""InputMainComplexityOverflow . java"" ) ) ; }
","public void METHOD_1 ( ) throws Exception { final String VAR_1 = """" ; VAR_2 . METHOD_2 ( ( ) - > { assertEquals ( STRING_8 , VAR_1 , VAR_3 . METHOD_3 ( ) ) ; assertEquals ( STRING_9 , """" , VAR_4 . METHOD_3 ( ) ) ; } ) ; TYPE_1 . METHOD_4 ( STRING_10 , getPath ( STRING_11 ) , STRING_12 , getPath ( STRING_13 ) ) ; }
","public void METHOD_1 ( ) throws Exception { final String VAR_1 = STRING_1 + STRING_2 + STRING_4 + STRING_5 + STRING_6 + STRING_7 ; VAR_2 . METHOD_2 ( ( ) - > { assertEquals ( STRING_8 , VAR_1 , VAR_3 . METHOD_3 ( ) ) ; assertEquals ( STRING_9 , """" , VAR_4 . METHOD_3 ( ) ) ; } ) ; TYPE_1 . METHOD_4 ( STRING_10 , getPath ( STRING_11 ) , STRING_12 , getPath ( STRING_13 ) ) ; }
",,,"public void METHOD_1 ( ) throws Exception { final String VAR_1 = STRING_1 + STRING_2 + STRING_3 + STRING_4 + STRING_5 + STRING_6 + STRING_7 ; VAR_2 . METHOD_2 ( ( ) - > { assertEquals ( STRING_8 , VAR_1 , VAR_3 . METHOD_3 ( ) ) ; assertEquals ( STRING_9 , """" , VAR_4 . METHOD_3 ( ) ) ; } ) ; TYPE_1 . METHOD_4 ( STRING_10 , getPath ( STRING_11 ) , STRING_12 , getPath ( STRING_13 ) ) ; }
",,,"public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = "" < ? xml version = \""1 . 0\"" encoding = \""UTF - 8\"" ? > \n"" + "" < ! DOCTYPE suppressions PUBLIC\n"" + "" \"" -/ / Puppy Crawl // DTD Suppressions Xpath Experimental 1 . 2 // EN\""\n"" + "" \""http :/ / checkstyle . sourceforge . net / dtds / suppressions_1_2_xpath_experimental . dtd\"" > \n"" + "" < suppressions > \n"" + "" </ suppressions > \n"" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( ""Unexpected output log"" , expected , systemOut . getLog ( ) ) ; assertEquals ( ""Unexpected system error log"" , """" , systemErr . getLog ( ) ) ; } ) ; Main . main ( "" - c"" , getPath ( ""InputMainConfig - empty . xml"" ) , "" -- generate - xpath - suppression"" , getPath ( ""InputMainComplexityOverflow . java"" ) ) ; }
",,,"public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = "" < ? xml version = \""1 . 0\"" encoding = \""UTF - 8\"" ? > \n"" + "" < ! DOCTYPE suppressions PUBLIC\n"" + "" \"" -/ / Puppy Crawl // DTD Suppressions Xpath Experimental 1 . 2 // EN\""\n"" + "" \""http :/ / checkstyle . sourceforge . net / dtds / suppressions_1_2_xpath_experimental . dtd\"" > \n"" + "" < suppressions > \n"" + "" </ suppressions > \n"" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( ""Unexpected output log"" , expected , systemOut . getLog ( ) ) ; assertEquals ( ""Unexpected system error log"" , """" , systemErr . getLog ( ) ) ; } ) ; Main . main ( "" - c"" , getPath ( ""InputMainConfig - empty . xml"" ) , "" -- generate - xpath - suppression"" , getPath ( ""InputMainComplexityOverflow . java"" ) ) ; }
",,,"public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = "" < ? xml version = \""1 . 0\"" encoding = \""UTF - 8\"" ? > \n"" + "" < ! DOCTYPE suppressions PUBLIC\n"" + "" \"" -/ / Puppy Crawl // DTD Suppressions Xpath Experimental 1 . 2 // EN\""\n"" + "" \""http :/ / checkstyle . sourceforge . net / dtds / "" + ""suppressions_1_2_xpath_experimental . dtd\"" > \n"" + "" < suppressions > \n"" + "" </ suppressions > \n"" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( ""Unexpected output log"" , expected , systemOut . getLog ( ) ) ; assertEquals ( ""Unexpected system error log"" , """" , systemErr . getLog ( ) ) ; } ) ; Main . main ( "" - c"" , getPath ( ""InputMainConfig - empty . xml"" ) , "" -- generate - xpath - suppression"" , getPath ( ""InputMainComplexityOverflow . java"" ) ) ; }
",,
472,"public Map < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
","public Map < TYPE_2 , TYPE_3 > METHOD_1 ( final TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_1 . Builder builder = TYPE_1 . builder ( ) ; for ( TYPE_2 key : VAR_1 ) { TYPE_3 value = METHOD_2 ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
","public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( final TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_1 . Builder builder = TYPE_1 . builder ( ) ; for ( TYPE_2 key : VAR_1 ) { TYPE_3 value = METHOD_2 ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
",,,"public TYPE_1 < TYPE_2 , TYPE_3 > METHOD_1 ( final TYPE_4 < TYPE_2 > VAR_1 ) { TYPE_1 . Builder builder = TYPE_1 . builder ( ) ; for ( TYPE_2 key : VAR_1 ) { TYPE_3 value = METHOD_2 ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
",,,"public ImmutableMap < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
",,,"public ImmutableMap < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder < K , V > builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
",,,"public ImmutableMap < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
",,
477,"public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , isRejoinTest , env ) ; }
","public TYPE_3 ( String VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , TYPE_1 target , TYPE_2 VAR_7 , boolean debug , boolean VAR_8 , Map < String , String > VAR_9 ) { this ( null , null , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , target , VAR_7 , debug , VAR_8 , VAR_9 ) ; }
","public TYPE_3 ( String VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , TYPE_1 target , TYPE_2 VAR_7 , boolean debug , boolean VAR_8 , Map < String , String > VAR_9 ) { this ( null , null , VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , target , VAR_7 , debug , VAR_9 ) ; }
",,,"public TYPE_3 ( String VAR_2 , int VAR_3 , int VAR_4 , int VAR_5 , int VAR_6 , TYPE_1 target , TYPE_2 VAR_7 , boolean debug , boolean VAR_8 , Map < String , String > VAR_9 ) { this ( VAR_2 , VAR_3 , VAR_4 , VAR_5 , VAR_6 , target , VAR_7 , debug , VAR_8 , VAR_9 , null ) ; }
",,,"public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , Map < String , String > env ) { this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ; }
",,,"private long determineSizesSerial ( long recordsToReadInThisPass ) throws IOException { int recordsReadInCurrentPass = 0 ; top : do { for ( VarLengthColumn < ? > columnReader : columns ) { if ( columnReader . determineSize ( recordsReadInCurrentPass ) ) { break top ; } } for ( VarLengthColumn < ? > columnReader : columns ) { columnReader . updateReadyToReadPosition ( ) ; columnReader . currDefLevel = - 1 ; } recordsReadInCurrentPass ++ ; } while ( recordsReadInCurrentPass < recordsToReadInThisPass ) ; return recordsReadInCurrentPass ; } public EventDefinition ( IEventDeclaration declaration , StreamInputReader streamInputReader ) { fDeclaration = declaration ; fStreamInputReader = streamInputReader ; } public IOStructGen ( CommonTree tree , CTFTrace trace ) { fTrace = trace ; fTree = tree ; } public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ; }
",,,"public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { // NOTE : isRejoinTest is unused this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ; } // NOTE : isRejoinTest is unused this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , env ) ;
",,
481,"public void disableWireframe ( ) { if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; removeDesiredStateChange ( wireframeStateChange ) ; worldRenderer . requestTaskListRefresh ( ) ; } }
","public void METHOD_1 ( ) { if ( METHOD_2 ( ) . contains ( VAR_3 ) ) { METHOD_3 ( VAR_2 ) ; METHOD_4 ( VAR_3 ) ; VAR_4 . METHOD_5 ( ) ; } }
","public void METHOD_1 ( ) { boolean VAR_1 = false ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( METHOD_2 ( ) . contains ( VAR_2 ) ) { METHOD_3 ( VAR_2 ) ; VAR_1 = true ; } if ( METHOD_2 ( ) . contains ( VAR_3 ) ) { METHOD_4 ( VAR_3 ) ; VAR_1 = true ; } if ( VAR_1 ) { VAR_4 . METHOD_5 ( ) ; } }
",,,"public void METHOD_1 ( ) { boolean VAR_1 = false ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; if ( ! METHOD_2 ( ) . contains ( VAR_2 ) ) { METHOD_3 ( VAR_2 ) ; VAR_1 = true ; } if ( METHOD_2 ( ) . contains ( VAR_3 ) ) { METHOD_4 ( VAR_3 ) ; VAR_1 = true ; } if ( VAR_1 ) { VAR_4 . METHOD_5 ( ) ; } }
",,,"public void disableWireframe ( ) { boolean refreshTaskList = false ; EnableFaceCulling faceCullingStateChange = new EnableFaceCulling ( ) ; if ( ! getDesiredStateChanges ( ) . contains ( faceCullingStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; refreshTaskList = true ; } EnableWireframe wireframeStateChange = new EnableWireframe ( ) ; if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { removeDesiredStateChange ( wireframeStateChange ) ; refreshTaskList = true ; } if ( refreshTaskList ) { worldRenderer . requestTaskListRefresh ( ) ; } OpaqueObjectsNode . java also needs the same treatment . }
",,,"public void disableWireframe ( ) { boolean refreshTaskList = false ; EnableFaceCulling faceCullingStateChange = new EnableFaceCulling ( ) ; if ( ! getDesiredStateChanges ( ) . contains ( faceCullingStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; refreshTaskList = true ; } if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { removeDesiredStateChange ( wireframeStateChange ) ; refreshTaskList = true ; } if ( refreshTaskList ) { worldRenderer . requestTaskListRefresh ( ) ; } }
",,,"public void disableWireframe ( ) { boolean refreshTaskList = false ; EnableFaceCulling faceCullingStateChange = new EnableFaceCulling ( ) ; if ( ! getDesiredStateChanges ( ) . contains ( faceCullingStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; refreshTaskList = true ; } if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { removeDesiredStateChange ( wireframeStateChange ) ; refreshTaskList = true ; } if ( refreshTaskList ) { worldRenderer . requestTaskListRefresh ( ) ; } }
",,
498,"public boolean equals ( Object o ) { return this == o || o instanceof TaskPropertyType ; }
","public boolean equals ( Object o ) { return this == o || o instanceof TYPE_1 ; }
","public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TYPE_1 ) ) { return false ; } TYPE_1 that = ( TYPE_1 ) o ; if ( ! name . equals ( that . name ) ) { return false ; } return true ; }
",,,"public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TYPE_1 ) ) { return false ; } TYPE_1 that = ( TYPE_1 ) o ; return name . equals ( that . name ) ; }
",,,"public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TaskPropertyType ) ) { return false ; } TaskPropertyType that = ( TaskPropertyType ) o ; return name . equals ( that . name ) ; }
",,,"public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TaskPropertyType ) ) { return false ; } TaskPropertyType that = ( TaskPropertyType ) o ; return name . equals ( that . name ) ; }
",,,"public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof TaskPropertyType ) ) { return false ; } TaskPropertyType that = ( TaskPropertyType ) o ; if ( ! name . equals ( that . name ) ) { return false ; } return true ; }
",,
502,"public void setUp ( ) { passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
","public void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( true ) ; VAR_3 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( true ) ; VAR_3 . METHOD_6 ( true ) ; VAR_3 . METHOD_7 ( true ) ; VAR_3 . METHOD_8 ( 10 ) ; VAR_3 . METHOD_9 ( 10 ) ; }
","public void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( true ) ; VAR_3 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( true ) ; VAR_3 . METHOD_6 ( true ) ; VAR_3 . METHOD_7 ( true ) ; VAR_3 . METHOD_8 ( 10 ) ; VAR_3 . METHOD_9 ( 10 ) ; }
",,,"public void METHOD_1 ( ) { VAR_2 = new TYPE_2 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( true ) ; VAR_3 . METHOD_3 ( true ) ; VAR_3 . METHOD_4 ( true ) ; VAR_3 . METHOD_5 ( true ) ; VAR_3 . METHOD_6 ( true ) ; VAR_3 . METHOD_7 ( true ) ; VAR_3 . METHOD_8 ( 10 ) ; VAR_3 . METHOD_9 ( 10 ) ; }
",,,"public void setUp ( ) { passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
",,,"public void setUp ( ) { deviceHandler = new EventHandlerTest ( ) ; passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
",,,"public void setUp ( ) { deviceHandler = new EventHandler ( ) ; passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
",,
525,"public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; }
","public void METHOD_1 ( ) { assertNotNull ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; assertNotNull ( VAR_3 ) ; ( ( TYPE_1 ) VAR_2 ) . METHOD_2 ( VAR_3 ) ; }
","public void METHOD_1 ( ) { assertNotNull ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; assertNotNull ( VAR_3 ) ; ( ( TYPE_1 ) VAR_2 ) . METHOD_2 ( VAR_3 ) ; }
",,,"public void METHOD_1 ( ) { assertNotNull ( VAR_1 ) ; assertNotNull ( VAR_2 ) ; assertNotNull ( VAR_3 ) ; ( ( TYPE_1 ) VAR_2 ) . METHOD_2 ( VAR_3 ) ; assertEquals ( VAR_2 . METHOD_3 ( ) , VAR_1 . METHOD_3 ( ) ) ; }
",,,"public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; // The following assertion is unreachable and should be removed // assertEquals ( Collections . singletonList ( fHiFixture ) , f42Fixture . getChildren ( ) ) ; }
",,,"public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; assertEquals ( Collections . singletonList ( fHiFixture ) , f42Fixture . getChildren ( ) ) ; }
",,,"public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; assertEquals ( Collections . singletonList ( fHiFixture ) , f42Fixture . getChildren ( ) ) ; }
",,
526,"private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
","private char METHOD_1 ( final String VAR_1 ) { if ( VAR_1 . length ( ) > 1 && TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) && TYPE_1 . METHOD_4 ( VAR_1 . METHOD_3 ( 1 ) ) ) { return VAR_1 . METHOD_3 ( 0 ) ; } else { return TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( 0 ) ) ; } }
","private char METHOD_1 ( final String VAR_1 ) { if ( TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) && TYPE_1 . METHOD_4 ( VAR_1 . METHOD_3 ( 1 ) ) ) { return VAR_1 . METHOD_3 ( 0 ) ; } else { return TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( 0 ) ) ; } }
",,,"private char METHOD_1 ( final String VAR_1 ) { if ( VAR_1 . length ( ) > 1 && TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( 0 ) ) && TYPE_1 . METHOD_4 ( VAR_1 . METHOD_3 ( 1 ) ) ) { return VAR_1 . METHOD_3 ( 0 ) ; } else { return TYPE_1 . METHOD_5 ( VAR_1 . METHOD_3 ( 0 ) ) ; } }
",,,"private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
",,,"private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
",,,"private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
",,
536,"public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , initData != null && InitData . canBeCached ( absoluteUri ) ? initData : null ) ; }
","public TYPE_2 ( final String VAR_2 , final String VAR_3 , final TYPE_1 VAR_4 ) { METHOD_1 ( VAR_2 , VAR_3 , VAR_4 != null && TYPE_1 . METHOD_2 ( VAR_2 ) ? VAR_4 : null ) ; }
","public TYPE_2 ( final String VAR_2 , final String VAR_3 , final TYPE_1 VAR_4 ) { METHOD_1 ( VAR_2 , VAR_3 , VAR_4 != null && TYPE_1 . METHOD_2 ( VAR_2 ) ? VAR_4 : null ) ; }
",,,"public TYPE_2 ( final String VAR_2 , final String VAR_3 , final TYPE_1 VAR_4 ) { METHOD_1 ( VAR_2 , VAR_3 , TYPE_1 . METHOD_2 ( VAR_2 ) ? VAR_4 : null ) ; }
",,,"public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , ( initData != null && InitData . canBeCached ( absoluteUri ) ) ? initData : null ) ; }
",,,"public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , ( initData != null && InitData . canBeCached ( absoluteUri ) ) ? initData : null ) ; }
",,,"public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , ( initData != null && InitData . canBeCached ( absoluteUri ) ) ? initData : null ) ; }
",,
537,"private void buildUnaryExpression ( UnaryExpressionTree tree ) { currentBlock . elements . add ( tree ) ; build ( tree . expression ( ) ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { VAR_6 . VAR_7 . add ( VAR_1 ) ; build ( VAR_1 . METHOD_2 ( ) ) ; }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . is ( TYPE_3 . TYPE_2 . VAR_4 , TYPE_3 . TYPE_2 . VAR_5 ) ) { build ( VAR_1 . METHOD_2 ( ) ) ; VAR_6 . VAR_7 . add ( VAR_1 ) ; } else { VAR_6 . VAR_7 . add ( VAR_1 ) ; build ( VAR_1 . METHOD_2 ( ) ) ; } }
",,,"private void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . is ( TYPE_3 . TYPE_2 . VAR_4 , TYPE_3 . TYPE_2 . VAR_5 ) ) { build ( VAR_1 . METHOD_2 ( ) ) ; } else { VAR_6 . VAR_7 . add ( VAR_1 ) ; } }
",,,"private void buildUnaryExpression ( UnaryExpressionTree tree ) { if ( tree . is ( Tree . Kind . PREFIX_DECREMENT , Tree . Kind . PREFIX_INCREMENT ) ) { build ( tree . expression ( ) ) ; } currentBlock . elements . add ( tree ) ; if ( tree . is ( Tree . Kind . POSTFIX_DECREMENT , Tree . Kind . POSTFIX_INCREMENT ) ) { build ( tree . expression ( ) ) ; } }
",,,"private void buildUnaryExpression ( UnaryExpressionTree tree ) { if ( tree . is ( Tree . Kind . PREFIX_DECREMENT , Tree . Kind . PREFIX_INCREMENT ) ) { build ( tree . expression ( ) ) ; currentBlock . elements . add ( tree ) ; } else { currentBlock . elements . add ( tree ) ; build ( tree . expression ( ) ) ; } }
",,,"private void buildUnaryExpression ( UnaryExpressionTree tree ) { if ( tree . is ( Tree . Kind . PREFIX_DECREMENT , Tree . Kind . PREFIX_INCREMENT ) ) { build ( tree . expression ( ) ) ; currentBlock . elements . add ( tree ) ; } else { currentBlock . elements . add ( tree ) ; } }
",,
541,"public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
","public int METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }
","public int METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
",,,"public int METHOD_1 ( ) { return this . VAR_1 . METHOD_1 ( ) ; }
",,,"public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
",,,"public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
",,,"public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
",,
543,"private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) { return ; } for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
","private static void METHOD_1 ( ANNOTATION_1 TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } for ( TYPE_2 VAR_2 : VAR_1 . VAR_3 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }
","private static void METHOD_1 ( ANNOTATION_1 TYPE_1 VAR_1 ) { if ( VAR_1 == null ) return ; for ( TYPE_2 VAR_2 : VAR_1 . VAR_3 ) VAR_2 . METHOD_2 ( VAR_1 ) ; }
",,,"private static void METHOD_1 ( ANNOTATION_1 TYPE_1 VAR_1 ) { if ( VAR_1 == null ) { return ; } for ( TYPE_2 VAR_2 : VAR_1 . VAR_3 ) VAR_2 . METHOD_2 ( VAR_1 ) ; }
",,,"private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) { return ; } for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
",,,"private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) { return ; } for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
",,,"private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) return ; for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
",,
545,"private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) log . trace ( ""Refreshed file listing view"" ) ; return fileList ; }
","private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_2 = ( TYPE_1 ) cache . get ( VAR_3 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( ) ; TYPE_1 VAR_4 = ( TYPE_1 ) cache . VAR_5 ( VAR_3 , VAR_2 ) ; if ( VAR_4 != null ) { VAR_2 = VAR_4 ; } } if ( trace ) log . trace ( STRING_1 ) ; return VAR_2 ; }
","private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_2 = ( TYPE_1 ) cache . get ( VAR_3 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( ) ; TYPE_1 VAR_4 = ( TYPE_1 ) cache . VAR_5 ( VAR_3 , VAR_2 ) ; if ( VAR_4 != null ) { VAR_2 = VAR_4 ; } } if ( trace ) log . trace ( STRING_1 ) ; return VAR_2 ; }
",,,"private TYPE_1 METHOD_1 ( ) { TYPE_1 VAR_2 = null ; try { VAR_2 = ( TYPE_1 ) cache . get ( VAR_3 ) ; if ( VAR_2 == null ) { VAR_2 = new TYPE_1 ( ) ; TYPE_1 VAR_4 = ( TYPE_1 ) cache . VAR_5 ( VAR_3 , VAR_2 ) ; if ( VAR_4 != null ) { VAR_2 = VAR_4 ; } } if ( trace ) log . trace ( STRING_1 ) ; return VAR_2 ; } finally { VAR_1 . METHOD_3 ( ) ; } }
",,,"private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) log . trace ( ""Refreshed file listing view"" ) ; return fileList ; }
",,,"private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) { log . trace ( ""Refreshed file listing view"" ) ; } return fileList ; }
",,,"private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) log . trace ( ""Refreshed file listing view"" ) ; return fileList ; }
",,
548,"public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { return getFoundViewHolder ( idRef , viewClass , null ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { return METHOD_1 ( VAR_1 , VAR_2 , null ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { String VAR_3 = VAR_1 . name ( ) ; TYPE_1 VAR_4 = ( TYPE_1 ) VAR_5 . get ( VAR_3 ) ; if ( VAR_4 == null ) { VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . put ( VAR_3 , VAR_4 ) ; } return VAR_4 ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { String VAR_3 = VAR_1 . name ( ) ; TYPE_1 VAR_4 = ( TYPE_1 ) VAR_5 . get ( VAR_3 ) ; if ( VAR_4 == null ) { VAR_4 = METHOD_2 ( VAR_1 , VAR_2 ) ; VAR_5 . put ( VAR_3 , VAR_4 ) ; } return VAR_4 ; }
",,,"public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { String idRefString = idRef . name ( ) ; FoundViewHolder foundViewHolder = ( FoundViewHolder ) foundHolders . get ( idRefString ) ; if ( foundViewHolder == null ) { foundViewHolder = createFoundViewAndIfNotNullBlock ( idRef , viewClass ) ; foundHolders . put ( idRefString , foundViewHolder ) ; } return foundViewHolder ; }
",,,"public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { String idRefString = idRef . name ( ) ; FoundViewHolder foundViewHolder = ( FoundViewHolder ) foundHolders . get ( idRefString ) ; if ( foundViewHolder == null ) { foundViewHolder = createFoundViewAndIfNotNullBlock ( idRef , viewClass ) ; foundHolders . put ( idRefString , foundViewHolder ) ; } return foundViewHolder ; }
",,,"public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { String idRefString = idRef . name ( ) ; FoundViewHolder foundViewHolder = ( FoundViewHolder ) foundHolders . get ( idRefString ) ; if ( foundViewHolder == null ) { foundViewHolder = createFoundViewAndIfNotNullBlock ( idRef , viewClass ) ; foundHolders . put ( idRefString , foundViewHolder ) ; } return foundViewHolder ; }
",,
549,"public void tearDown ( ) { queryRunner . close ( ) ; }
","public void METHOD_1 ( ) { VAR_1 . close ( ) ; }
","public void METHOD_1 ( ) { try { VAR_1 . close ( ) ; } finally { VAR_1 = null ; } }
",,,"public void METHOD_1 ( ) throws Exception { if ( VAR_1 != null ) { VAR_1 . close ( ) ; VAR_1 = null ; } }
",,,"public void tearDown ( ) { queryRunner . close ( ) ; queryRunner = null ; }
",,,"public void tearDown ( ) { try { queryRunner . close ( ) ; } finally { queryRunner = null ; } }
",,,"public void tearDown ( ) { try { queryRunner . close ( ) ; } finally { queryRunner = null ; } }
",,
556,"public int hashCode ( ) { return ( ( startCommit . hashCode ( ) + numbers . length ) * 31 ) + getNumber ( ) ; }
","public int METHOD_1 ( ) { return ( ( VAR_1 . METHOD_1 ( ) + VAR_2 . length ) * INT_1 ) + METHOD_2 ( ) ; }
","public int METHOD_1 ( ) { return ( ( VAR_1 . METHOD_1 ( ) * INT_1 ) + VAR_2 . length ) * INT_1 ) + METHOD_2 ( ) ; }
",,,"public int METHOD_1 ( ) { return ( VAR_1 . METHOD_1 ( ) * INT_1 ) + METHOD_2 ( ) ; }
",,,"public int hashCode ( ) { return ( ( startCommit . hashCode ( ) ^ numbers . length ) * 31 ) + getNumber ( ) ; }
",,,"public int hashCode ( ) { return ( startCommit . hashCode ( ) + numbers . length ) * 31 + getNumber ( ) ; }
",,,"public int hashCode ( ) { return ( ( ( startCommit . hashCode ( ) ^ numbers . length ) * 31 ) + getNumber ( ) ; }
",,
589,"public Context getContext ( ) { return new Context ( ""Sdk - Name"" , sdkName ) . addData ( ""Sdk - Version"" , SDK_VERSION ) ; }
","public Context METHOD_1 ( ) { return new Context ( STRING_1 , VAR_1 ) . METHOD_3 ( STRING_2 , VAR_2 ) ; }
","public Context METHOD_1 ( ) { if ( VAR_1 == null ) { VAR_1 = this . getClass ( ) . METHOD_2 ( ) . getName ( ) ; } return new Context ( STRING_1 , VAR_1 ) ; }
",,,"public Context METHOD_1 ( ) { if ( VAR_1 == null ) { VAR_1 = getClass ( ) . METHOD_2 ( ) . getName ( ) ; } return new Context ( STRING_1 , VAR_1 , version ) ; }
",,,"public Context getContext ( ) { if ( sdkName == null ) { sdkName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } return new Context ( ""Sdk - Name"" , sdkName ) . addData ( ""Sdk - Version"" , BuildConfig . SDK_VERSION ) ; }
",,,"public Context getContext ( ) { if ( sdkName == null ) { sdkName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } return new Context ( ""Sdk - Name"" , sdkName ) . addData ( ""Sdk - Version"" , SDK_VERSION ) ; }
",,,"public Context getContext ( ) { if ( sdkName == null ) { sdkName = this . getClass ( ) . getPackage ( ) . getName ( ) ; } return new Context ( ""Sdk - Name"" , sdkName ) . addData ( ""Sdk - Version"" , SDK_VERSION ) ; }
",,
596,"public String getExtendedLabelForVSM ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return getExtendedLabelForVSM ( configurationElement ) ; } } return ""Unknown URI"" ; // $NON - NLS - 1$ }
","public String METHOD_1 ( String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { String VAR_4 = ( ( TYPE_2 ) VAR_2 . METHOD_2 ( ) ) . METHOD_3 ( ) ; if ( VAR_4 != null && VAR_4 . equals ( VAR_1 ) ) { return METHOD_1 ( VAR_2 ) ; } } return STRING_2 ; }
","public String METHOD_1 ( String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { String VAR_4 = ( ( TYPE_2 ) VAR_2 . METHOD_2 ( ) ) . METHOD_3 ( ) ; if ( VAR_4 != null && VAR_4 . equals ( VAR_1 ) ) { return VAR_2 . METHOD_4 ( VAR_5 ) + STRING_1 + VAR_2 . METHOD_5 ( ) ; } } return STRING_2 ; }
",,,"public String METHOD_1 ( String VAR_1 ) { for ( TYPE_1 VAR_2 : VAR_3 ) { String VAR_4 = ( ( TYPE_2 ) VAR_2 . METHOD_2 ( ) ) . METHOD_3 ( ) ; if ( VAR_4 != null && VAR_4 . equals ( VAR_1 ) ) { return VAR_2 . METHOD_4 ( VAR_5 ) + STRING_1 + VAR_2 . METHOD_5 ( ) ; } } return STRING_2 ; }
",,,"public String getExtendedLabelForVSM ( String providedShapeURI ) { IConfigurationElement element = getConfigurationElement ( providedShapeURI ) ; if ( element != null ) { return getExtendedLabelsForVSM ( element ) ; } return ""Unknown URI"" ; // $NON - NLS - 1$ } private IConfigurationElement getConfigurationElement ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return configurationElement ; } } return null ; } private String getExtendedLabelsForVSM ( IConfigurationElement configurationElement ) { return configurationElement . getAttribute ( LABEL_ATTRIBUTE ) + "" - "" + configurationElement . getNamespaceIdentifier ( ) ; // $NON - NLS - 1$ }
",,,"private long extractLongKey ( QueryableEntry entry ) { Object key = entry . getAttributeValue ( keyAttribute ) ; if ( key == null ) { throw new NullPointerException ( ""non - null unique key value is required"" ) ; } if ( ! Numbers . isLongRepresentable ( key . getClass ( ) ) ) { throw new NullPointerException ( ""integer - valued unique key value is required"" ) ; } return ( ( Number ) key ) . longValue ( ) ; } protected ChangeLogSet ( Run < ? , ? > run , RepositoryBrowser < ? > browser ) { this ( run , browser , null ) ; } public MqttConnectOptions getConnectionInfo ( ) { MqttConnectOptions options = this . clientFactory . getConnectionOptions ( ) ; if ( options . getServerURIs ( ) == null ) { String url = getUrl ( ) ; if ( url != null ) { options = MqttUtils . cloneConnectOptions ( options ) ; options . setServerURIs ( new String [ ] { url } ) ; } } return options ; } public String getExtendedLabelForVSM ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return configurationElement . getAttribute ( LABEL_ATTRIBUTE ) + "" - "" + configurationElement . getNamespaceIdentifier ( ) ; } } return ""Unknown URI"" ; }
",,,"public String getExtendedLabelForVSM ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return getExtendedLabelsForVSM ( configurationElement ) ; } } return ""Unknown URI"" ; // $NON - NLS - 1$ }
",,
597,"public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . setCleanIdleConnections ( true ) ; } server . stop ( ) ; }
","public void METHOD_1 ( ) { if ( server instanceof TYPE_1 ) { ( ( TYPE_1 ) server ) . METHOD_2 ( true ) ; } server . VAR_1 ( ) ; }
","public void METHOD_1 ( ) { server . VAR_1 ( ) ; }
",,,"public void METHOD_1 ( ) { server . VAR_1 ( ) ; }
",,,"public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . cleanIdleConnections ( true ) ; } server . stop ( ) ; }
",,,"public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . setCleanIdleConnections ( true ) ; } server . stop ( ) ; }
",,,"public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . setCleanIdleConnections ( true ) ; } server . stop ( ) ; }
",,
606,"public EList < Diff > getDifferences ( ) { return this . diffs ; }
","public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return this . VAR_1 ; }
","public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return this . VAR_1 ; }
",,,"public TYPE_1 < TYPE_2 > METHOD_1 ( ) { return new TYPE_3 < TYPE_2 > ( this . VAR_1 ) ; }
",,,"public EList < Diff > getDifferences ( ) { if ( this . diffsList == null ) { this . diffsList = new BasicEList < Diff > ( this . diffs ) ; } return ECollections . unmodifiableEList ( this . diffsList ) ; }
",,,"public EList < Diff > getDifferences ( ) { if ( diffs == null ) { diffs = new BasicEList < Diff > ( ) ; } return diffs ; }
",,,"public EList < Diff > getDifferences ( ) { return this . diffs ; }
",,
622,"public boolean isSuggestionListDisplayed ( ) { try { if ( searchSuggestions . size ( ) > 0 ) { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . isDisplayed ( ) ; } } catch ( NoSuchElementException e ) { } return false ; }
","public boolean METHOD_1 ( ) { try { if ( VAR_1 . size ( ) > 0 ) { METHOD_2 ( VAR_1 . get ( 0 ) ) ; return VAR_1 . get ( 0 ) . METHOD_3 ( ) ; } } catch ( TYPE_1 e ) { } return false ; }
","public boolean METHOD_1 ( ) { try { return VAR_1 . get ( 0 ) . METHOD_3 ( ) ; } catch ( TYPE_1 | TYPE_2 e ) { } return false ; }
",,,"public boolean METHOD_1 ( ) { try { METHOD_2 ( VAR_1 . get ( 0 ) ) ; return VAR_1 . get ( 0 ) . METHOD_3 ( ) ; } catch ( TYPE_1 | TYPE_2 e ) { } return false ; }
",,,"public boolean isSuggestionListDisplayed ( ) { try { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . getSize ( ) . getHeight ( ) > 0 ; } catch ( NoSuchElementException | IndexOutOfBoundsException e ) { return false ; } }
",,,"public boolean isSuggestionListDisplayed ( ) { try { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . isDisplayed ( ) ; } catch ( NoSuchElementException | IndexOutOfBoundsException e ) { return false ; } }
",,,"public boolean isSuggestionListDisplayed ( ) { try { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . getSize ( ) . getHeight ( ) > 0 ; } catch ( NoSuchElementException|IndexOutOfBoundsException e ) { } return false ; }
",,
624,"public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
","public TYPE_2 ( String message ) { super ( METHOD_1 ( message ) ) ; }
","public TYPE_2 ( String message ) { super ( METHOD_1 ( message ) ) ; }
",,,"public TYPE_2 ( String message ) { super ( METHOD_1 ( message ) ) ; }
",,,"import static org . apache . logging . log4j . message . I18nMessageFactory . createStaticMessage ; public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
",,,"import static org . apache . logging . log4j . message . I18nMessageFactory . createStaticMessage ; public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
",,,"public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
",,
627,"public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( ""ALL"" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( ""NONE"" ) ) { return QueryGranularity . NONE ; } else if ( CALENDRIC_GRANULARITIES . containsKey ( name ) ) { return CALENDRIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
","public static TYPE_1 METHOD_1 ( String VAR_1 ) { String name = VAR_1 . METHOD_2 ( ) ; if ( name . equals ( STRING_1 ) ) { return TYPE_1 . VAR_2 ; } else if ( name . equals ( STRING_2 ) ) { return TYPE_1 . NONE ; } else if ( TYPE_2 . containsKey ( name ) ) { return TYPE_2 . get ( name ) ; } return new TYPE_4 ( METHOD_3 ( VAR_1 ) , 0 ) ; }
","public static TYPE_1 METHOD_1 ( String VAR_1 ) { String name = VAR_1 . METHOD_2 ( ) ; if ( name . equals ( STRING_1 ) ) { return TYPE_1 . VAR_2 ; } else if ( name . equals ( STRING_2 ) ) { return TYPE_1 . NONE ; } else if ( TYPE_2 . containsKey ( name ) ) { return new TYPE_3 ( name , null , null ) ; } return new TYPE_4 ( METHOD_3 ( VAR_1 ) , 0 ) ; }
",,,"public static TYPE_1 METHOD_1 ( String VAR_1 ) { String name = VAR_1 . trim ( ) . METHOD_2 ( ) ; if ( name . equals ( STRING_1 ) ) { return TYPE_1 . VAR_2 ; } else if ( name . equals ( STRING_2 ) ) { return TYPE_1 . NONE ; } else if ( TYPE_2 . containsKey ( name ) ) { return new TYPE_3 ( TYPE_2 . get ( name ) , null , null ) ; } return new TYPE_4 ( METHOD_3 ( VAR_1 ) , 0 ) ; }
",,,"public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( ""ALL"" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( ""NONE"" ) ) { return QueryGranularity . NONE ; } else if ( PREDEFINED_GRANULARITIES . containsKey ( name ) ) { return PREDEFINED_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
",,,"public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( ""ALL"" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( ""NONE"" ) ) { return QueryGranularity . NONE ; } else if ( CALRIC_GRANULARITIES . containsKey ( name ) ) { return CALRIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
",,,"public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( ""ALL"" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( ""NONE"" ) ) { return QueryGranularity . NONE ; } else if ( CAL RIC_GRANULARITIES . containsKey ( name ) ) { return CAL RIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
",,
645,"private boolean shouldBeDistributed ( PlanNode planNode ) { if ( planNode instanceof JoinNode ) { return true ; } if ( planNode instanceof AggregationNode ) { // TODO : differentiate aggregation with empty grouping set return true ; } if ( planNode instanceof TopNNode ) { return ( ( TopNNode ) planNode ) . getStep ( ) == TopNNode . Step . PARTIAL ; } return false ; }
","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_3 ) { return true ; } if ( VAR_1 instanceof TYPE_2 ) { return true ; } if ( VAR_1 instanceof TYPE_4 ) { return ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) == TYPE_4 . TYPE_5 . VAR_3 ; } return false ; }
","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 instanceof TYPE_2 || VAR_1 instanceof TYPE_3 || ( VAR_1 instanceof TYPE_4 && ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) != TYPE_4 . TYPE_5 . VAR_3 ) ; }
",,,"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 instanceof TYPE_2 ) { return true ; } if ( VAR_1 instanceof TYPE_4 ) { return ( ( TYPE_4 ) VAR_1 ) . METHOD_2 ( ) != TYPE_4 . TYPE_5 . VAR_3 ; } return false ; }
",,,"private boolean shouldBeDistributed ( PlanNode planNode ) { if ( planNode instanceof JoinNode ) { return true ; } if ( planNode instanceof AggregationNode ) { return true ; // here you could differentiate between partial / . . . } if ( planNode instanceof TopNNode ) { return ( ( TopNNode ) planNode ) . getStep ( ) != TopNNode . Step . FINAL ; } return false ; }
",,,"private boolean shouldBeDistributed ( PlanNode planNode ) { if ( planNode instanceof JoinNode ) { return true ; } if ( planNode instanceof AggregationNode ) { return true ; } if ( planNode instanceof TopNNode ) { return ( ( TopNNode ) planNode ) . getStep ( ) != TopNNode . Step . FINAL ; } return false ; }
",,,"private boolean shouldBeDistributed ( PlanNode planNode ) { return planNode instanceof AggregationNode || planNode instanceof JoinNode || ( planNode instanceof TopNNode && ( ( TopNNode ) planNode ) . getStep ( ) != TopNNode . Step . FINAL ) ; }
",,
646,"public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( ""application / xml"" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( ""application / xml"" , serverTemplate ) ; assertNotNull ( response ) ; }
","public void METHOD_1 ( ) { final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( STRING_1 , VAR_1 ) ; Thread VAR_4 = new Thread ( ( ) - > METHOD_4 ( ) ) ; VAR_4 . start ( ) ; String response = METHOD_3 ( STRING_1 , VAR_1 ) ; assertNotNull ( response ) ; }
","public void METHOD_1 ( ) { final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( STRING_1 , VAR_1 ) ; Thread VAR_4 = new Thread ( ( ) - > METHOD_4 ( ) ) ; VAR_4 . start ( ) ; String response = METHOD_3 ( STRING_1 , VAR_1 ) ; LOGGER .CODE ( response ) ; }
",,,"public void METHOD_1 ( ) { final TYPE_1 VAR_1 = VAR_2 . METHOD_2 ( VAR_3 ) ; METHOD_3 ( STRING_1 , VAR_1 ) ; Thread VAR_4 = new Thread ( ( ) - > METHOD_4 ( ) ) ; VAR_4 . start ( ) ; String response = METHOD_3 ( STRING_1 , VAR_1 ) ; LOGGER . info ( response ) ; }
",,,"public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( ""application / xml"" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( ""application / xml"" , serverTemplate ) ; assertNotNull ( response ) ; LOGGER . info ( response ) ; }
",,,"public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( ""application / xml"" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( ""application / xml"" , serverTemplate ) ; assertNotNull ( response ) ; }
",,,"public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( ""application / xml"" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( ""application / xml"" , serverTemplate ) ; assertNotNull ( response ) ; }
",,
649,"public QueryWrapper ( @JsonProperty ( ""query"" ) String query , @JsonProperty ( ""queryType"" ) String queryType ) { this ( query , queryType , null ) ; }
","public TYPE_1 ( ANNOTATION_1 ( STRING_1 ) String query , ANNOTATION_1 ( STRING_2 ) String VAR_2 ) { this ( query , VAR_2 , null ) ; }
","public TYPE_1 ( ANNOTATION_1 ( STRING_1 ) String query , ANNOTATION_1 ( STRING_2 ) String VAR_2 ) { this ( query , VAR_2 , null ) ; }
",,,"public TYPE_1 ( ANNOTATION_1 ( STRING_1 ) String query , ANNOTATION_1 ( STRING_2 ) String VAR_2 ) { this ( query , VAR_2 , null ) ; }
",,,"public QueryWrapper ( @JsonProperty ( ""query"" ) String query , @JsonProperty ( ""queryType"" ) String queryType ) { this ( query , queryType , null ) ; }
",,,"public QueryWrapper ( @JsonProperty ( ""query"" ) String query , @JsonProperty ( ""queryType"" ) String queryType ) { this ( query , queryType , null ) ; } public QueryType getType ( ) { return QueryType . valueOf ( queryType ) ; } public void enableStats ( boolean statsEnabled ) { if ( statsEnabled ) { this . countsEnabled = true ; } this . statsEnabled = statsEnabled ; this . channelMetrics . setFullStatsEnabled ( statsEnabled ) ; } protected void syncSearch ( ) { if ( getEntity ( ) != null ) { GlusterVolumeEntity glusterVolumeEntity = ( GlusterVolumeEntity ) getEntity ( ) ; if ( getItems ( ) == glusterVolumeEntity . getBricks ( ) ) { getItemsChangedEvent ( ) . raise ( this , EventArgs . Empty ) ; } else { setItems ( glusterVolumeEntity . getBricks ( ) ) ; } } else { setItems ( null ) ; } }
",,,"public QueryWrapper ( @JsonProperty ( ""query"" ) String query , @JsonProperty ( ""queryType"" ) String queryType ) { this ( query , queryType , null ) ; }
",,
659,"private boolean isFileEntryPackageable ( ZipEntry entry ) { return ApkBuilder . checkFileForPackaging ( entry . getName ( ) ) && isValidMetaInfEntry ( entry . getName ( ) ) ; }
","private boolean METHOD_1 ( TYPE_1 entry ) { return TYPE_2 . METHOD_2 ( entry . getName ( ) ) && METHOD_3 ( entry . getName ( ) ) ; }
","private boolean METHOD_1 ( TYPE_1 entry ) { String VAR_1 = entry . getName ( ) ; return TYPE_2 . METHOD_2 ( VAR_1 ) && METHOD_3 ( VAR_1 ) ; }
",,,"private boolean METHOD_1 ( TYPE_1 entry ) { return TYPE_2 . METHOD_2 ( entry ) && METHOD_3 ( entry . getName ( ) ) ; }
",,,"private boolean isFileEntryPackageable ( ZipEntry entry ) { String entryName = entry . getName ( ) ; return ApkBuilder . checkFileForPackaging ( entryName ) && isValidMetaInfEntry ( entryName ) ; }
",,,"private boolean isFileEntryPackageable ( ZipEntry entry ) { String entryName = entry . getName ( ) ; return ApkBuilder . checkFileForPackaging ( entryName ) && isValidMetaInfEntry ( entryName ) ; }
",,,"private boolean isFileEntryPackageable ( ZipEntry entry ) { return ApkBuilder . checkFileForPackaging ( entry . getName ( ) ) && isValidMetaInfEntry ( entry . getName ( ) ) ; }
",,
660,"public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; VirtualMachine vm = api ( ) . get ( getName ( ) ) ; assertTrue ( list . contains ( vm ) ) ; }
","public void METHOD_1 ( ) { List < TYPE_1 > list = METHOD_2 ( ) . list ( ) ; TYPE_1 vm = METHOD_2 ( ) . get ( getName ( ) ) ; assertTrue ( list . contains ( vm ) ) ; }
","public void METHOD_1 ( ) { List < TYPE_1 > list = METHOD_2 ( ) . list ( ) ; for ( TYPE_1 VAR_1 : list ) { assertTrue ( ! VAR_1 . name ( ) . isEmpty ( ) ) ; } }
",,,"public void METHOD_1 ( ) { List < TYPE_1 > list = METHOD_2 ( ) . list ( ) ; for ( TYPE_1 vm : list ) { assertTrue ( ! vm . name ( ) . isEmpty ( ) ) ; } }
",,,"public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; assertTrue ( ! list . isEmpty ( ) ) ; }
",,,"public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; assertTrue ( list . contains ( createdVM ) ) ; }
",,,"public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; for ( VirtualMachine machine : list ) { assertTrue ( ! machine . name ( ) . isEmpty ( ) ) ; } }
",,
665,"public static final boolean setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null || id == null ) { fgPreferenceNodeId = id ; return true ; } return false ; }
","public static final boolean METHOD_1 ( String id ) { if ( VAR_1 == null || id == null ) { VAR_1 = id ; return true ; } return false ; }
","public static final void METHOD_1 ( String id ) { VAR_1 = id ; }
",,,"public static final void METHOD_1 ( String id ) { if ( VAR_1 == null ) { VAR_1 = id ; } }
",,,"public static final void setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null ) { fgPreferenceNodeId = id ; } }
",,,"public static final void setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null ) { fgPreferenceNodeId = id ; } }
",,,"public static final void setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null ) { fgPreferenceNodeId = id ; } }
",,
680,"public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { Assert . notNull ( connectionFactory , ""'connectionFactory' must not be null . "" ) ; this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; }
","public TYPE_3 ( TYPE_1 VAR_2 ) { Assert . VAR_3 ( VAR_2 , STRING_1 ) ; this . VAR_4 = new TYPE_2 ( VAR_2 ) ; }
","public TYPE_3 ( TYPE_1 VAR_2 ) { Assert . VAR_3 ( VAR_2 , STRING_1 ) ; this . VAR_4 = new TYPE_2 ( VAR_2 ) ; }
",,,"public TYPE_3 ( TYPE_1 VAR_2 ) { Assert . VAR_3 ( VAR_2 , STRING_1 ) ; this . VAR_4 = new TYPE_2 ( VAR_2 ) ; }
",,,"public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; }
",,,"public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { Assert . notNull ( connectionFactory , ""'connectionFactory' must not be null . "" ) ; this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; this . redisTemplate . afterPropertiesSet ( ) ; }
",,,"public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { Assert . notNull ( connectionFactory , ""'connectionFactory' must not be null . "" ) ; this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; this . redisTemplate . afterPropertiesSet ( ) ; }
",,
683,"private static EchoTagStatementTree newEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl < > ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 < TYPE_2 > VAR_3 = new TYPE_5 < > ( Collections . VAR_4 ( VAR_1 ) , Collections . VAR_5 ( ) ) ; return METHOD_1 ( VAR_3 , VAR_2 ) ; }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 < TYPE_2 > VAR_3 = new TYPE_5 ( Collections . VAR_4 ( VAR_1 ) , Collections . VAR_5 ( ) ) ; return METHOD_1 ( VAR_3 , VAR_2 ) ; }
",,,"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 < TYPE_2 > VAR_3 = new TYPE_5 ( Collections . VAR_4 ( VAR_1 ) , Collections . VAR_5 ( ) ) ; return METHOD_1 ( VAR_3 , VAR_2 ) ; }
",,,"private static EchoTagStatementTree createEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
",,,"private static EchoTagStatementTree newEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
",,,"private static EchoTagStatementTree newEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
",,
685,"public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( ""Media Node is still on the page"" ) ; } else { PageObjectLogging . log ( ""verifyNoVideo"" , ""Verified no video is on page"" , true , driver ) ; } }
","public void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } else { TYPE_2 . log ( STRING_2 , STRING_3 , true , VAR_2 ) ; } }
","public void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } else { TYPE_2 . log ( STRING_2 , STRING_3 , true , VAR_2 ) ; } }
",,,"public void METHOD_1 ( ) { if ( METHOD_2 ( VAR_1 ) ) { throw new TYPE_1 ( STRING_1 ) ; } else { TYPE_2 . log ( STRING_2 , STRING_3 , true , VAR_2 ) ; } }
",,,"public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( ""Media Node is still on the page"" ) ; } else { PageObjectLogging . log ( ""verifyNoVideo"" , ""Verified no video is on page"" , true , driver ) ; } }
",,,"public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( ""Media Node is still on the page"" ) ; } else { PageObjectLogging . log ( ""verifyNoVideo"" , ""Verified no video is on page"" , true , driver ) ; } }
",,,"public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( ""Media Node is still on the page"" ) ; } else PageObjectLogging . log ( ""verifyNoVideo"" , ""Verified no video is on page"" , true , driver ) ; }
",,
688,"private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ArchitectureType . ppc == cluster . getArchitecture ( ) . getFamily ( ) ; }
","private boolean METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) . METHOD_3 ( ) ; return cluster != null && cluster . VAR_1 ( ) != null && TYPE_2 . VAR_3 == cluster . VAR_1 ( ) . METHOD_4 ( ) ; }
","private boolean METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) . METHOD_3 ( ) ; return cluster != null && cluster . VAR_1 ( ) != null && TYPE_2 . VAR_3 . METHOD_4 ( ) == cluster . VAR_1 ( ) . METHOD_4 ( ) ; }
",,,"private boolean METHOD_1 ( ) { TYPE_1 cluster = METHOD_2 ( ) . METHOD_3 ( ) ; return cluster != null && cluster . VAR_1 ( ) != null && TYPE_2 . VAR_3 . METHOD_4 ( ) == cluster . VAR_1 ( ) . METHOD_4 ( ) ; }
",,,"private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ( ArchitectureType . ppc . getFamily ( ) . equals ( cluster . getArchitecture ( ) . getFamily ( ) ) || ArchitectureType . ppc64 . getFamily ( ) . equals ( cluster . getArchitecture ( ) . getFamily ( ) ) || ArchitectureType . ppcle . getFamily ( ) . equals ( cluster . getArchitecture ( ) . getFamily ( ) ) || ArchitectureType . ppc64le . getFamily ( ) . equals ( cluster . getArchitecture ( ) . getFamily ( ) ) ) ; }
",,,"private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ArchitectureType . ppc . getFamily ( ) . equals ( cluster . getArchitecture ( ) . getFamily ( ) ) ; }
",,,"private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ArchitectureType . ppc . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppc64 . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppcle . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) || ArchitectureType . ppc64le . getFamily ( ) == cluster . getArchitecture ( ) . getFamily ( ) ; }
",,
690,"public Object getValue ( ) { return value ; }
","public Object getValue ( ) { return value ; }
","public Object getValue ( ) { return value ; }
",,,"public Object getValue ( ) { return value ; }
",,,"public Object getValue ( ) { return value ; }
",,,"public Object getValue ( ) { return value ; }
",,,"public Object getValue ( ) { return value ; }
",,
691,"private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } // If there is a complexGroupby at his point , it means that // display columns contain all the order by columns and // does not require another projection node on top of sort node . // If there is a complex aggregation case , the projection plan node is already added // right above the group by plan node . In future , we may inline that projection node . if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { // Top aggregate has been removed , its schema is exactly the same to // its local aggregate node . return false ; } return true ; }
","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( ! VAR_1 . METHOD_2 ( ) ) { return false ; } if ( VAR_2 . METHOD_3 ( ) || VAR_2 . METHOD_4 ( ) ) { return false ; } if ( VAR_1 instanceof TYPE_2 && VAR_2 . METHOD_5 ( ) ) { return false ; } return true ; }
","private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) || VAR_2 . METHOD_4 ( ) ) { return false ; } if ( VAR_1 instanceof TYPE_2 && VAR_2 . METHOD_5 ( ) ) { return false ; } return true ; }
",,,"private boolean METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 . METHOD_3 ( ) || VAR_2 . METHOD_4 ( ) ) { return false ; } if ( VAR_1 instanceof TYPE_2 && VAR_2 . METHOD_5 ( ) ) { return false ; } return true ; }
",,,"private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { return false ; } return true ; }
",,,"private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { return false ; } return true ; }
",,,"private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } // If there is a complexGroupby at his point , it means that // display columns contain all the order by columns and // does not require another projection node on top of sort node . // If there is a complex aggregation case , the projection plan node is already added // right above the group by plan node . In future , we may inline that projection node . if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { // Top aggregate has been removed , its schema is exactly the same to // its local aggregate node . return false ; } return true ; }
",,
696,"private static void cleanShutdown ( ) { log . info ( ""CleanShutdown : Starting Cleanup . "" ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { current . close ( ) ; } } catch ( Throwable th ) { log . error ( ""cleanShutdown : failed during shutdown"" , th ) ; } // Flush the async appender before exiting to prevent the loss of logs LoggerContext loggerContext = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; loggerContext . stop ( ) ; }
","private static void METHOD_1 ( ) { log . info ( STRING_1 ) ; VAR_1 = true ; try { TYPE_1 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_2 . close ( ) ; } } catch ( Throwable VAR_4 ) { log . error ( STRING_2 , VAR_4 ) ; } TYPE_2 VAR_5 = ( TYPE_2 ) TYPE_3 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( ) ; }
","private static void METHOD_1 ( ) { log . info ( STRING_1 ) ; VAR_1 = true ; try { TYPE_1 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_3 . close ( ) ; } } catch ( Throwable VAR_4 ) { log . error ( STRING_2 , VAR_4 ) ; } TYPE_3 . METHOD_2 ( ) . METHOD_3 ( ) ; }
",,,"private static void METHOD_1 ( ) { log . info ( STRING_1 ) ; VAR_1 = true ; try { TYPE_1 VAR_2 = VAR_3 ; if ( VAR_2 != null ) { VAR_3 . close ( ) ; } } catch ( Throwable VAR_4 ) { log . error ( STRING_2 , VAR_4 ) ; } TYPE_2 VAR_5 = ( TYPE_2 ) TYPE_3 . METHOD_2 ( ) ; VAR_5 . METHOD_3 ( ) ; }
",,,"private static void cleanShutdown ( ) { log . info ( ""CleanShutdown : Starting Cleanup . "" ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { activeServer . close ( ) ; } } catch ( Throwable th ) { log . error ( ""cleanShutdown : failed during shutdown"" , th ) ; } // Flush the async appender before exiting to prevent the loss of logs ( ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ) . stop ( ) ; }
",,,"private static void cleanShutdown ( ) { log . info ( ""CleanShutdown : Starting Cleanup . "" ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { activeServer . close ( ) ; } } catch ( Throwable th ) { log . error ( ""cleanShutdown : failed during shutdown"" , th ) ; } // Flush the async appender before exiting to prevent the loss of logs LoggerContext loggerContext = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; loggerContext . stop ( ) ; } java public String getDetail ( String name ) { return details . get ( name ) ; } java public boolean getBindToAllInterfaces ( ) { // Bind to all interfaces only if a network interface or host address hasn't been specified return ! ( getNetworkInterface ( ) != null || getHostAddress ( ) != null ) ; } java public void onActivityCreated ( Bundle savedInstanceState ) { super . onActivityCreated ( savedInstanceState ) ; mContext = getActivity ( ) . getApplicationContext ( ) ; mDataBaseAdapter = new DataBaseAdapter ( getActivity ( ) ) ; mDataBaseAdapter . createDatabase ( ) ; mDataBaseAdapter . open ( ) ; mItemAdapter = new ATMItemListAdapter ( mContext , ( ( MainActivity ) getActivity ( ) ) . getLocationTracker ( ) ) ; setListAdapter ( mItemAdapter ) ; getLoaderManager ( ) . initLoader ( 0 , null , this ) ; // Already set in xml // getListView ( ) . setChoiceMode ( ListView . CHOICE_MODE_MULTIPLE ) ; }
",,,"private static void cleanShutdown ( ) { log . info ( ""CleanShutdown : Starting Cleanup . "" ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { activeServer . close ( ) ; } } catch ( Throwable th ) { log . error ( ""cleanShutdown : failed during shutdown"" , th ) ; } }
",,
697,"public void preInit ( FMLPreInitializationEvent event ) { configDir = new File ( event . getModConfigurationDirectory ( ) , ""antiqueatlas"" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , ""tileids . json"" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
","public void METHOD_1 ( TYPE_1 event ) { VAR_3 = new File ( event . VAR_4 ( ) , STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_5 = TYPE_2 . instance ( ) ; VAR_6 = new TYPE_3 ( new File ( VAR_3 , STRING_2 ) ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
","public void METHOD_1 ( TYPE_1 event ) { VAR_3 = new File ( event . VAR_4 ( ) , STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_5 = TYPE_2 . instance ( ) ; VAR_6 = new TYPE_3 ( new File ( VAR_3 , STRING_2 ) ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
",,,"public void METHOD_1 ( TYPE_1 event ) { VAR_3 = new File ( event . VAR_4 ( ) , STRING_1 ) ; VAR_3 . METHOD_2 ( ) ; VAR_5 = TYPE_2 . instance ( ) ; VAR_6 = new TYPE_3 ( new File ( VAR_3 , STRING_2 ) ) ; VAR_6 . METHOD_3 ( VAR_5 ) ; METHOD_4 ( ) ; METHOD_5 ( ) ; }
",,,"public void preInit ( FMLPreInitializationEvent event ) { Log . setModLog ( LogManager . getLogger ( AntiqueAtlasMod . ID ) ) ; configDir = new File ( event . getModConfigurationDirectory ( ) , ""antiqueatlas"" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , ""tileids . json"" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
",,,"public void preInit ( FMLPreInitializationEvent event ) { Log . setModLog ( event . getModLog ( ) ) ; configDir = new File ( event . getModConfigurationDirectory ( ) , ""antiqueatlas"" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , ""tileids . json"" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
",,,"public void preInit ( FMLPreInitializationEvent event ) { Log . setModLog ( LogManager . getLogger ( ID ) ) ; configDir = new File ( event . getModConfigurationDirectory ( ) , ""antiqueatlas"" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , ""tileids . json"" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
",,
698,"public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( ""Finalize on readRaw ( ) returned false for "" + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; } this . client . disconnect ( ) ; } catch ( Exception e ) { LOGGER . warn ( ""failed to disconnect FTPClient"" , e ) ; } }
","public void close ( ) { try { if ( this . VAR_1 . get ( ) && ! METHOD_1 ( ) && LOGGER . VAR_2 ( ) ) { LOGGER . warn ( STRING_1 + this ) ; } if ( this . client . VAR_3 ( ) ) { this . client . VAR_4 ( ) ; } this . client . VAR_5 ( ) ; } catch ( Exception e ) { LOGGER . warn ( STRING_2 , e ) ; } }
","public void close ( ) { try { if ( this . VAR_1 . get ( ) && ! METHOD_1 ( ) && LOGGER . VAR_2 ( ) ) { LOGGER . warn ( STRING_1 + this ) ; } this . client . VAR_4 ( ) ; this . client . VAR_5 ( ) ; } catch ( Exception e ) { LOGGER . warn ( STRING_2 , e ) ; } }
",,,"public void close ( ) { try { if ( this . VAR_1 . get ( ) && ! METHOD_1 ( ) && LOGGER . VAR_2 ( ) ) { LOGGER . warn ( STRING_1 + this ) ; } if ( this . client . VAR_3 ( ) ) { this . client . VAR_4 ( ) ; this . client . VAR_5 ( ) ; } } catch ( Exception e ) { LOGGER . warn ( STRING_2 , e ) ; } }
",,,"public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( ""Finalize on readRaw ( ) returned false for "" + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; this . client . disconnect ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""failed to disconnect FTPClient"" , e ) ; } }
",,,"public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( ""Finalize on readRaw ( ) returned false for "" + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; this . client . disconnect ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""failed to disconnect FTPClient"" , e ) ; } }
",,,"public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( ""Finalize on readRaw ( ) returned false for "" + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; this . client . disconnect ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""failed to disconnect FTPClient"" , e ) ; } }
",,
702,"public static String sanitizeKey ( final Contentlet vanityUrl ) throws DotDataException , DotSecurityException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
","public static String METHOD_1 ( final TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_4 { TYPE_5 host = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_4 ) , TYPE_6 . METHOD_4 ( ) , false ) ; return METHOD_1 ( host . VAR_5 ( ) , METHOD_5 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_6 ) ) , VAR_1 . METHOD_6 ( ) ) ; }
","public static String METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_5 host = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_4 ) , TYPE_6 . METHOD_4 ( ) , false ) ; return METHOD_1 ( host . VAR_5 ( ) , METHOD_5 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_6 ) ) , VAR_1 . METHOD_6 ( ) ) ; }
",,,"public static String METHOD_1 ( final TYPE_1 VAR_1 ) { TYPE_5 host = VAR_2 . METHOD_2 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_4 ) , TYPE_6 . METHOD_4 ( ) , false ) ; return METHOD_1 ( host . VAR_5 ( ) , METHOD_5 ( VAR_1 . METHOD_3 ( TYPE_7 . VAR_6 ) ) , VAR_1 . METHOD_6 ( ) ) ; }
",,,"public static String sanitizeKey ( final Contentlet vanityUrl ) { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
",,,"public static String sanitizeKey ( final Contentlet vanityUrl ) throws DotDataException , DotRuntimeException , DotSecurityException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
",,,"public static String sanitizeKey ( final Contentlet vanityUrl ) throws DotDataException , DotRuntimeException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
",,
703,"protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator ) ; } }
","protected void METHOD_1 ( Object data , TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) throws IOException { if ( VAR_3 ) { TYPE_3 VAR_4 = new TYPE_4 ( VAR_1 , VAR_2 ) ; TYPE_5 . METHOD_2 ( data , VAR_4 ) ; } else { METHOD_3 ( data , VAR_2 ) ; } }
","protected void METHOD_1 ( Object data , TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) throws IOException { if ( VAR_3 ) { TYPE_3 VAR_4 = new TYPE_4 ( VAR_1 , VAR_2 ) ; TYPE_5 . METHOD_2 ( data , VAR_4 ) ; } else { METHOD_3 ( data , VAR_2 , false ) ; } }
",,,"protected void METHOD_1 ( Object data , TYPE_1 VAR_1 , TYPE_2 VAR_2 , boolean VAR_3 ) throws IOException { if ( VAR_3 ) { TYPE_3 VAR_4 = new TYPE_4 ( VAR_1 , VAR_2 ) ; TYPE_5 . METHOD_2 ( data , VAR_4 ) ; } else { METHOD_3 ( data , VAR_2 ) ; } }
",,,"protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator , false ) ; } }
",,,"protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator , false ) ; } }
",,,"protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator , false ) ; } }
",,
713,"protected String toString ( Operator operator ) { if ( Operator . STARTSWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
","protected String toString ( TYPE_1 VAR_1 ) { if ( TYPE_1 . TYPE_3 . equals ( VAR_1 ) ) { return VAR_2 ; } return VAR_1 . toString ( ) ; }
","protected String toString ( TYPE_1 VAR_1 ) { if ( TYPE_1 . TYPE_3 . equals ( VAR_1 ) ) { return VAR_2 ; } return VAR_1 . toString ( ) ; }
",,,"protected String toString ( TYPE_1 VAR_1 ) { if ( TYPE_1 . TYPE_3 . equals ( VAR_1 ) ) { return VAR_2 ; } return VAR_1 . toString ( ) ; }
",,,"protected String toString ( Operator operator ) { if ( Operator . SWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
",,,"protected String toString ( Operator operator ) { if ( Operator . SWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
",,,"protected String toString ( Operator operator ) { if ( Operator . SWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
",,
715,"private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
","private TYPE_1 ( String VAR_2 ) { this . VAR_2 = VAR_2 ; }
","private TYPE_1 ( String VAR_2 ) { this . VAR_2 = VAR_2 ; }
",,,"private TYPE_1 ( String VAR_2 ) { this . VAR_2 = VAR_2 ; }
",,,"private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
",,,"protected LateralJoinPrel ( RelOptCluster cluster , RelTraitSet traits , RelNode left , RelNode right , boolean excludeCorrelateCol , CorrelationId correlationId , ImmutableBitSet requiredColumns , SemiJoinType semiJoinType ) { super ( cluster , traits , left , right , excludeCorrelateCol , correlationId , requiredColumns , semiJoinType ) ; } public LatLon getWorkPointLatLon ( ) { LatLon workPointLatLon ; if ( hasWorkPoint ( ) ) { workPointLatLon = new LatLon ( getWorkPoint ( ) . getLatitude ( ) , getWorkPoint ( ) . getLongitude ( ) ) ; } else { workPointLatLon = null ; } return workPointLatLon ; } private Entry ( int coreId , AffinityLock lock ) { this . coreId = coreId ; this . lock = lock ; } private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
",,,"private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
",,
720,"public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( ""$status % 1$s"" , domainIsoMap . getStatus ( ) ) ) ; } } return ValidationResult . VALID ; }
","public TYPE_1 METHOD_1 ( ) { List < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( VAR_3 . getStatus ( ) != null && VAR_3 . getStatus ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( TYPE_4 . VAR_5 , String . format ( STRING_1 , VAR_3 . getStatus ( ) ) ) ; } } return TYPE_1 . VAR_8 ; }
","public TYPE_1 METHOD_1 ( ) { List < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( VAR_3 . getStatus ( ) != null && VAR_3 . getStatus ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( TYPE_4 . VAR_5 , String . format ( STRING_1 , TYPE_5 . TYPE_3 ) ) ; } } return TYPE_1 . VAR_8 ; }
",,,"public TYPE_1 METHOD_1 ( ) { List < TYPE_2 > VAR_1 = METHOD_2 ( ) . METHOD_3 ( VAR_2 . getId ( ) ) ; for ( TYPE_2 VAR_3 : VAR_1 ) { if ( VAR_3 . getStatus ( ) != null && VAR_3 . getStatus ( ) . METHOD_4 ( ) ) { return new TYPE_1 ( TYPE_4 . VAR_5 , String . format ( STRING_1 , TYPE_5 . TYPE_3 ) ) ; } } return TYPE_1 . VAR_8 ; }
",,,"public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( ""$status % 1$s"" , StorageDomainStatus . Active ) ) ; } } return ValidationResult . VALID ; }
",,,"public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( ""$status % 1$s"" , domainIsoMap . getStatus ( ) ) ) ; } } return ValidationResult . VALID ; }
",,,"public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( ""$status % 1$s"" , domainIsoMap . getStatus ( ) ) ) ; } } return ValidationResult . VALID ; }
",,
727,"public void cleanup ( ) { myNavigationHelper . cleanup ( ) ; }
","public void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; }
","public void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; }
",,,"public void METHOD_1 ( ) { VAR_2 . METHOD_1 ( ) ; VAR_2 = null ; VAR_3 = null ; VAR_4 = null ; }
",,,"public void cleanup ( ) { myNavigationHelper . cleanup ( ) ; myNavigationHelper = null ; myStateComponent = null ; myTaskContext = null ; }
",,,"public void cleanup ( ) { myIdeFrame = null ; myNavigationHelper . cleanup ( ) ; myNavigationHelper = null ; myStateComponent = null ; myTaskContext = null ; }
",,,"public void cleanup ( ) { myIdeFrame = null ; myNavigationHelper . cleanup ( ) ; myNavigationHelper = null ; }
",,
734,"public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) && provider . isClosed ( ) && cursors . isEmpty ( ) ) { releaseResources ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""Exception was found trying to release cursor resources . Execution will continue"" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; if ( VAR_2 . remove ( VAR_1 ) && VAR_3 . METHOD_3 ( ) && VAR_2 . isEmpty ( ) ) { METHOD_4 ( ) ; } } catch ( Exception e ) { LOGGER . warn ( STRING_1 , e ) ; } finally { VAR_4 . METHOD_5 ( ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; if ( VAR_2 . remove ( VAR_1 ) ) { if ( VAR_3 . METHOD_3 ( ) && VAR_2 . isEmpty ( ) ) { METHOD_4 ( ) ; } } } catch ( Exception e ) { LOGGER . warn ( STRING_1 , e ) ; } finally { VAR_4 . METHOD_5 ( ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { try { VAR_1 . METHOD_2 ( ) ; if ( VAR_2 . remove ( VAR_1 ) ) { if ( VAR_3 . METHOD_3 ( ) ) { METHOD_4 ( ) ; } } } catch ( Exception e ) { LOGGER . warn ( STRING_1 , e ) ; } finally { VAR_4 . METHOD_5 ( ) ; } }
",,,"public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) && provider . isClosed ( ) && cursors . isEmpty ( ) ) { releaseResources ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""Exception was found trying to release cursor resources . Execution will continue"" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
",,,"public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) && provider . isClosed ( ) && cursors . isEmpty ( ) ) { releaseResources ( ) ; } } catch ( Exception e ) { LOGGER . warn ( ""Exception was found trying to release cursor resources . Execution will continue"" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
",,,"public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) ) { if ( provider . isClosed ( ) ) { releaseResources ( ) ; } } } catch ( Exception e ) { LOGGER . warn ( ""Exception was found trying to release cursor resources . Execution will continue"" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
",,
738,"private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . add ( errataDetailFormPanel ) ; }
","private void METHOD_1 ( ) { VAR_1 . clear ( ) ; VAR_2 = new TYPE_1 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_2 ( VAR_4 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_3 ) ; VAR_1 . add ( VAR_5 ) ; VAR_1 . add ( VAR_2 ) ; }
","private void METHOD_1 ( ) { VAR_1 . clear ( ) ; VAR_2 = new TYPE_1 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_2 ( VAR_4 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_3 ) ; VAR_1 . add ( VAR_5 ) ; VAR_4 . METHOD_2 ( STRING_1 ) ; VAR_1 . add ( VAR_2 ) ; }
",,,"private void METHOD_1 ( ) { VAR_1 . clear ( ) ; VAR_2 = new TYPE_1 ( ) ; VAR_3 = new TYPE_2 ( ) ; VAR_3 . METHOD_2 ( VAR_4 . METHOD_3 ( ) ) ; TYPE_3 VAR_5 = new TYPE_3 ( ) ; VAR_5 . METHOD_2 ( VAR_4 . METHOD_4 ( ) ) ; VAR_5 . add ( VAR_3 ) ; VAR_1 . add ( VAR_5 ) ; VAR_1 . METHOD_2 ( STRING_1 ) ; }
",,,"private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . setStyleName ( style . testtest ( ) ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . add ( errataDetailFormPanel ) ; }
",,,"private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . setStyleName ( style . testtest ( ) ) ; errataDetailPanel . add ( errataDetailFormPanel ) ; }
",,,"private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . setStyleName ( style . errataDetailPanel ( ) ) ; // $NON - NLS - 1$ errataDetailPanel . add ( errataDetailFormPanel ) ; }
",,
741,"public static void setup ( ) throws Exception { startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
","public static void METHOD_1 ( ) throws Exception { METHOD_4 ( TYPE_2 . class . METHOD_5 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( true ) ; METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( new HashMap < > ( ) ) ; METHOD_13 ( ) ; }
","public static void METHOD_1 ( ) throws Exception { METHOD_4 ( TYPE_2 . class . METHOD_5 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( true ) ; METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( new HashMap < > ( ) ) ; METHOD_13 ( ) ; }
",,,"public static void METHOD_1 ( ) throws Exception { METHOD_2 ( STRING_1 , TYPE_1 . METHOD_3 ( ) ) ; METHOD_6 ( ) ; METHOD_7 ( ) ; METHOD_8 ( ) ; METHOD_9 ( true ) ; METHOD_10 ( METHOD_11 ( ) ) ; METHOD_12 ( new HashMap < > ( ) ) ; METHOD_13 ( ) ; }
",,,"public static void setup ( ) throws Exception { startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
",,,"public static void setup ( ) throws Exception { assumeTrue ( ""Skipping tests since Hive supports only JDK 8 . "" , HiveTestUtilities . supportedJavaVersion ( ) ) ; startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
",,,"public static void setup ( ) throws Exception { assumeTrue ( ""Skipping tests since Hive supports only JDK 8 . "" , HiveTestUtilities . supportedJavaVersion ( ) ) ; startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
",,
744,"public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { // Would prefer to accept zoom levels here ( less concepts in our API ) // If we accept zoom levels we may be able to reduce , and return a list of FeatureTypeStyles // ( with the understanding that the list may be empty if the MBLayer does not contribute any content // at a specific zoom level range ) FeatureTypeStyle style = transform ( styleContext ) ; if ( style == null ) { return null ; } for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , Double VAR_2 , Double VAR_3 ) { TYPE_1 VAR_4 = METHOD_1 ( VAR_1 ) ; if ( VAR_4 == null ) { return null ; } for ( TYPE_3 VAR_5 : VAR_4 . METHOD_2 ( ) ) { if ( VAR_2 != null ) { VAR_5 . METHOD_3 ( VAR_2 ) ; } if ( VAR_3 != null ) { VAR_5 . METHOD_4 ( VAR_3 ) ; } } return VAR_4 ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , Double VAR_2 , Double VAR_3 ) { TYPE_1 VAR_4 = METHOD_1 ( VAR_1 ) ; if ( VAR_4 == null ) { return null ; } for ( TYPE_3 VAR_5 : VAR_4 . METHOD_2 ( ) ) { if ( VAR_2 != null ) { VAR_5 . METHOD_3 ( VAR_2 ) ; } if ( VAR_3 != null ) { VAR_5 . METHOD_4 ( VAR_3 ) ; } } return VAR_4 ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , Double VAR_2 , Double VAR_3 ) { TYPE_1 VAR_4 = METHOD_1 ( VAR_1 ) ; if ( VAR_2 == null ) { return null ; } for ( TYPE_3 VAR_5 : VAR_4 . METHOD_2 ( ) ) { if ( VAR_2 != null ) { VAR_5 . METHOD_3 ( VAR_2 ) ; } if ( VAR_3 != null ) { VAR_5 . METHOD_4 ( VAR_3 ) ; } } return VAR_4 ; }
",,,"public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { FeatureTypeStyle style = transform ( styleContext ) ; if ( style == null ) { return null ; } for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; }
",,,"public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { FeatureTypeStyle style = transform ( styleContext ) ; for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; }
",,,"public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { // Would prefer to accept zoom levels here ( less concepts in our API ) // If we accept zoom levels we may be able to reduce , and return a list of FeatureTypeStyles // ( with the understanding that the list may be empty if the MBLayer does not contribute any content // at a specific zoom level range ) FeatureTypeStyle style = transform ( styleContext ) ; for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; } Review : This may return null if layer visibility = false
",,
754,"CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
","TYPE_1 < TYPE_2 > values ( TYPE_3 < TYPE_4 > VAR_1 , TYPE_5 VAR_2 ) { return new TYPE_6 < > ( this , METHOD_1 ( VAR_1 , VAR_2 ) ) ; }
","TYPE_1 < TYPE_2 > values ( TYPE_3 < TYPE_4 > VAR_1 , TYPE_5 VAR_2 ) { return new TYPE_6 < > ( this , METHOD_1 ( VAR_1 , VAR_2 ) ) ; }
",,,"TYPE_1 < TYPE_2 > values ( TYPE_3 < TYPE_4 > VAR_1 , TYPE_5 VAR_2 ) { return new TYPE_6 < > ( this , METHOD_1 ( VAR_1 , VAR_2 ) ) ; }
",,,"private CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
",,,"private CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
",,,"CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
",,
755,"public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 200f ) { percent = 200f ; } brightness = percent / 100f ; refreshTextures ( true ) ; }
","public synchronized void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < FLOAT_1 ) { VAR_1 = FLOAT_1 ; } else if ( VAR_1 > FLOAT_2 ) { VAR_1 = FLOAT_2 ; } VAR_2 = VAR_1 / FLOAT_3 ; METHOD_2 ( true ) ; }
","public synchronized void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < FLOAT_1 ) { VAR_1 = FLOAT_1 ; } else if ( VAR_1 > FLOAT_2 ) { VAR_1 = FLOAT_2 ; } VAR_2 = VAR_1 / FLOAT_3 ; METHOD_2 ( ) ; }
",,,"public synchronized void METHOD_1 ( float VAR_1 ) { if ( VAR_1 < FLOAT_1 ) { VAR_1 = FLOAT_1 ; } else if ( VAR_1 > FLOAT_2 ) { VAR_1 = FLOAT_2 ; } VAR_2 = VAR_1 / FLOAT_3 ; METHOD_2 ( ) ; VAR_3 = true ; }
",,,"public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 100f ) { percent = 100f ; } brightness = percent / 100f ; changeShader = true ; refreshTextures ( ) ; }
",,,"public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 200f ) { percent = 200f ; } brightness = percent / 100f ; changeShader = true ; refreshTextures ( ) ; }
",,,"public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 200f ) { percent = 200f ; } brightness = percent / 100f ; changeShader = true ; refreshTextures ( ) ; }
",,
762,"public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { try { return projectControl . controlFor ( change . getProject ( ) , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 user ) throws TYPE_4 { try { return VAR_4 . METHOD_1 ( VAR_1 . METHOD_2 ( ) , user ) . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( VAR_1 . getId ( ) , e ) ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 user ) throws TYPE_4 { final TYPE_8 VAR_2 = VAR_3 . get ( VAR_1 . METHOD_2 ( ) ) . METHOD_2 ( ) . METHOD_3 ( ) ; try { return VAR_4 . METHOD_1 ( VAR_2 , user ) . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( VAR_1 . getId ( ) , e ) ; } }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 user ) throws TYPE_4 { try { return VAR_4 . METHOD_1 ( VAR_1 . getId ( ) , user ) . METHOD_1 ( VAR_1 ) ; } catch ( TYPE_6 e ) { throw new TYPE_4 ( VAR_1 . getId ( ) , e ) ; } }
",,,"public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { try { Project . Id projectId = projectCache . get ( change . getProject ( ) ) . getProject ( ) . getId ( ) ; return projectControl . controlFor ( projectId , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
",,,"public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { Project . Id projectId = projectCache . get ( change . getProject ( ) ) . getProject ( ) . getId ( ) ; try { return projectControl . controlFor ( projectId , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
",,,"public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { final Project . NameKey projectKey = projectCache . get ( change . getProject ( ) ) . getProject ( ) . getNameKey ( ) ; try { return projectControl . controlFor ( projectKey , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
",,
767,"private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) && ( ( MemberSelectExpressionTree ) parent ) . expression ( ) . is ( Kind . MEMBER_SELECT ) ) { reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; } } }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_3 parent = VAR_2 . parent ( ) ; if ( parent . is ( TYPE_5 . VAR_4 ) && ( ( TYPE_4 ) parent ) . METHOD_3 ( ) . is ( TYPE_5 . VAR_4 ) ) { METHOD_4 ( parent , String . format ( VAR_5 , VAR_1 . name ( ) ) ) ; } } }
","private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_3 parent = VAR_2 . parent ( ) ; if ( parent . is ( TYPE_5 . VAR_4 ) && ( ( TYPE_4 ) parent ) . METHOD_3 ( ) . is ( TYPE_5 . VAR_4 ) ) { METHOD_4 ( parent , String . format ( VAR_5 , VAR_1 . name ( ) ) ) ; VAR_6 . add ( parent ) ; } } }
",,,"private void METHOD_1 ( TYPE_1 VAR_1 ) { for ( TYPE_2 VAR_2 : VAR_1 . METHOD_2 ( ) ) { TYPE_3 parent = VAR_2 . parent ( ) ; if ( parent . is ( TYPE_5 . VAR_4 ) && ! ( ( TYPE_4 ) parent ) . METHOD_3 ( ) . identifier ( ) . VAR_1 ( ) ) { return ; } METHOD_4 ( parent , String . format ( VAR_5 , VAR_1 . name ( ) ) ) ; VAR_6 . add ( parent ) ; } }
",,,"private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) ) { ExpressionTree expression = ( ( MemberSelectExpressionTree ) parent ) . expression ( ) ; if ( expression . is ( Kind . MEMBER_SELECT ) && ! ( ( MemberSelectExpressionTree ) expression ) . identifier ( ) . symbol ( ) . isTypeSymbol ( ) ) { return ; } reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; hasIssue . add ( parent ) ; } } }
",,,"private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) ) { ExpressionTree expression = ( ( MemberSelectExpressionTree ) parent ) . expression ( ) ; if ( expression . is ( Kind . MEMBER_SELECT ) && ! ( ( MemberSelectExpressionTree ) expression ) . identifier ( ) . symbol ( ) . isTypeSymbol ( ) ) { return ; } reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; hasIssue . add ( parent ) ; } } }
",,,"private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) ) { ExpressionTree expression = ( ( MemberSelectExpressionTree ) parent ) . expression ( ) ; if ( expression . is ( Kind . MEMBER_SELECT ) && ! ( ( MemberSelectExpressionTree ) expression ) . identifier ( ) . symbol ( ) . isTypeSymbol ( ) ) { return ; } reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; hasIssue . add ( parent ) ; } } }
",,
768,"public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , ""jms - json"" , 60000 ) ; assertNotNull ( serviceWithId ) ; }
","public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . class , STRING_3 , INT_1 ) ; assertNotNull ( VAR_2 ) ; }
","public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . class , STRING_3 , INT_1 ) ; assertNotNull ( VAR_2 ) ; }
",,,"public void METHOD_1 ( ) throws Exception { TYPE_1 VAR_2 = TYPE_2 . METHOD_5 ( ) . METHOD_6 ( TYPE_1 . class , STRING_3 , INT_1 ) ; assertNotNull ( VAR_2 ) ; }
",,,"@Before public void setUp ( ) throws Exception { if ( ! featuresService . isInstalled ( featuresService . getFeature ( ""openengsb - ports - ws"" ) ) ) { featuresService . installFeature ( ""openengsb - ports - jms"" ) ; } } @Test public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { setUp ( ) ; OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , ""jms - json"" , 60000 ) ; assertNotNull ( serviceWithId ) ; }
",,,"public void setUp ( ) throws Exception { assumeTrue ( testTrace . exists ( ) ) ; fixture = new Metadata ( testTrace . getTrace ( ) ) ; } public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { if ( ! featuresService . isInstalled ( featuresService . getFeature ( ""openengsb - ports - ws"" ) ) ) { featuresService . installFeature ( ""openengsb - ports - jms"" ) ; } OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , ""jms - json"" , 60000 ) ; assertNotNull ( serviceWithId ) ; } public void close ( ) throws Exception { if ( in != null ) { in . close ( ) ; in = null ; } } public void emptyMapCausesException ( ) { Map < Class < ? extends AuthenticationException > , Class < ? extends AbstractAuthenticationFailureEvent > > mappings = new HashMap < > ( ) ; publisher = new DefaultAuthenticationEventPublisher ( ) ; publisher . setAdditionalExceptionMappings ( mappings ) ; }
",,,"public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { if ( ! featuresService . isInstalled ( featuresService . getFeature ( ""openengsb - ports - jms"" ) ) ) { featuresService . installFeature ( ""openengsb - ports - jms"" ) ; } OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , ""jms - json"" , 60000 ) ; assertNotNull ( serviceWithId ) ; }
",,
770,"public AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; }
","public TYPE_3 ( ANNOTATION_1 TYPE_1 VAR_2 , ANNOTATION_1 TYPE_2 in ) { super ( VAR_2 , in ) ; }
","public TYPE_3 ( ANNOTATION_1 TYPE_1 VAR_2 , ANNOTATION_1 TYPE_2 in ) { this . VAR_2 = VAR_2 ; this . in = in ; }
",,,"public TYPE_3 ( ANNOTATION_1 TYPE_1 VAR_2 , ANNOTATION_1 TYPE_2 in ) { super ( VAR_2 , in ) ; }
",,,"public AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; } protected DexBuffer getDexBuffer ( ) { return dex ; }
",,,"protected AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; }
",,,"public AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; }
",,
773,"static void runScript ( String filename , Connection cx ) throws SQLException { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { throw new SQLException ( e ) ; } }
","static void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { try { TYPE_3 . METHOD_1 ( new TYPE_4 ( ) . getClass ( ) . METHOD_2 ( VAR_1 ) , VAR_2 ) ; } catch ( IOException e ) { throw new TYPE_2 ( e ) ; } }
","static void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { TYPE_3 . METHOD_1 ( new TYPE_4 ( ) . getClass ( ) . METHOD_2 ( VAR_1 ) , VAR_2 ) ; }
",,,"static void METHOD_1 ( String VAR_1 , TYPE_1 VAR_2 ) throws TYPE_2 { try { TYPE_3 . METHOD_1 ( new TYPE_4 ( ) . getClass ( ) . METHOD_2 ( VAR_1 ) , VAR_2 ) ; } catch ( IOException e ) { throw new TYPE_2 ( e ) ; } }
",,,"static void runScript ( String filename , Connection cx ) throws SQLException { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { throw new RuntimeException ( ""Error running script : "" + filename , e ) ; } }
",,,"static void runScript ( String filename , Connection cx ) { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { // handle exception } }
",,,"static void runScript ( String filename , Connection cx ) throws SQLException { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
",,
775,"public boolean hasNext ( ) { // If we have the next element pipelined , go ahead and return true . if ( next != null ) { return true ; } // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there is no more elements to consume , we should release the resources . iterator . close ( ) ; } return next != null ; }
","public boolean hasNext ( ) { if ( next != null ) { return true ; } METHOD_1 ( ) ; if ( iterator . VAR_1 ( ) ) { next = new TYPE_3 . TYPE_4 ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . key ( ) ) , VAR_3 ) , VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . value ( ) ) , VAR_3 ) ) ; iterator . next ( ) ; } else { iterator . close ( ) ; } return next != null ; }
","public boolean hasNext ( ) { if ( next == null ) { METHOD_1 ( ) ; if ( iterator . VAR_1 ( ) ) { next = new TYPE_3 . TYPE_4 ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . key ( ) ) , VAR_3 ) , VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . value ( ) ) , VAR_3 ) ) ; iterator . next ( ) ; } else { iterator . close ( ) ; } } return next != null ; }
",,,"public boolean hasNext ( ) { if ( next == null && iterator . VAR_1 ( ) ) { next = new TYPE_3 . TYPE_4 ( VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . key ( ) ) , VAR_3 ) , VAR_2 . METHOD_2 ( TYPE_2 . METHOD_3 ( iterator . value ( ) ) , VAR_3 ) ) ; iterator . next ( ) ; } else { iterator . close ( ) ; } }
",,,"public boolean hasNext ( ) { if ( next != null ) { return true ; } // If we do not have the next element pipelined , go ahead and fetch it . // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there is no more elements to consume , we should release the resources . iterator . close ( ) ; } return next != null ; }
",,,"public boolean hasNext ( ) { // If we do not have the next element pipelined , go ahead and fetch it . if ( next != null ) { // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there are no more elements to consume , we should release the resources . iterator . close ( ) ; } } return next != null ; }
",,,"public boolean hasNext ( ) { // If we do not have the next element pipelined , go ahead and fetch it . if ( next != null ) { // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there is no more elements to consume , we should release the resources . iterator . close ( ) ; } } return next != null ; }
",,
776,"public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
","public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
","public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) out . write ( b ) ; in . close ( ) ; } out . close ( ) ; return - 1 ; }
",,,"public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) out . write ( b ) ; in . close ( ) ; } return - 1 ; }
",,,"public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
",,,"public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
",,,"public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
",,
779,"public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
","public long METHOD_1 ( ) { long VAR_1 = 0 ; for ( int i = 0 ; i < VAR_4 . length ; i ++ ) { VAR_1 += VAR_4 [ i ] . METHOD_1 ( ) ; } return VAR_1 ; }
","public long METHOD_1 ( ) { long VAR_1 = 0 ; for ( int i = 0 ; i < VAR_4 . length ; i ++ ) { VAR_1 += VAR_4 [ i ] . METHOD_1 ( ) ; } return VAR_1 ; }
",,,"public long METHOD_1 ( ) { long VAR_1 = 0 ; for ( int i = 0 ; i < VAR_4 . length ; i ++ ) { VAR_1 += VAR_4 [ i ] . METHOD_1 ( ) ; } return VAR_1 ; }
",,,"public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
",,,"public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
",,,"public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
",,
783,"public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
","public TYPE_5 ( TYPE_1 VAR_2 , int VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; this . VAR_5 = VAR_5 ; TYPE_4 . VAR_8 . put ( VAR_5 , this ) ; }
","public TYPE_5 ( TYPE_1 VAR_2 , int VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { super ( VAR_2 , VAR_3 , VAR_4 ) ; METHOD_1 ( true ) ; this . VAR_6 = INT_1 ; this . VAR_5 = VAR_5 ; TYPE_4 . VAR_8 . put ( VAR_5 , this ) ; }
",,,"public TYPE_5 ( TYPE_1 VAR_2 , int VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 ) { super ( VAR_2 , VAR_3 , VAR_4 , VAR_5 ) ; TYPE_4 . VAR_8 . put ( VAR_5 , this ) ; }
",,,"public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; setHasSubtypes ( true ) ; this . maxStackSize = 1 ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
",,,"protected static String commentFormat ( String comment ) { if ( comment == null || comment . length ( ) == 0 ) return """" ; while ( comment . getBytes ( ENCODING ) . length > 255 ) { comment = comment . substring ( 0 , comment . length ( ) - 1 ) ; } return comment ; } public PageTitle ( final String namespace , final String text ) { this . namespace = namespace ; this . text = text ; } public void onCatch ( Throwable caught ) { if ( caught instanceof IOException ) { Utils . crossFade ( loadProgress , networkError ) ; } } public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; setHasSubtypes ( true ) ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
",,,"public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; setHasSubtypes ( true ) ; this . maxStackSize = 1 ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
",,
791,"protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; }
","protected TYPE_2 ( String VAR_2 , TYPE_1 VAR_3 ) { super ( ) ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }
","protected TYPE_2 ( String VAR_2 , TYPE_1 VAR_3 ) { super ( ) ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }
",,,"protected TYPE_2 ( String VAR_2 , TYPE_1 VAR_3 ) { super ( ) ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; }
",,,"public abstract class ApplicationFetchException extends Exception { protected String apiKey ; protected ErrorCode errorCode ; protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; } }
",,,"protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; }
",,,"protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; }
",,
793,"public boolean isEmpty ( ) { return listeners . isEmpty ( ) ; }
","public boolean isEmpty ( ) { return VAR_1 . isEmpty ( ) ; }
","public boolean isEmpty ( ) { return VAR_1 . size ( ) == 0 ; }
",,,"public boolean isEmpty ( ) { return VAR_1 . size ( ) == 0 ; }
",,,"public boolean isEmpty ( ) { synchronized ( listeners ) { return listeners . isEmpty ( ) ; } }
",,,"public boolean isEmpty ( ) { synchronized ( listeners ) { return listeners . size ( ) == 0 ; } }
",,,"public boolean isEmpty ( ) { return listeners . size ( ) == 0 ; }
",,
795,"public void dispose ( ) { }
","public void METHOD_1 ( ) { }
","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; }
",,,"public void METHOD_1 ( ) { }
",,,"public void dispose ( ) { this . mHandler . removeCallbacksAndMessages ( null ) ; this . mHandler = null ; this . mPhone = null ; }
",,,"public void dispose ( ) { this . mHandler . removeCallbacksAndMessages ( null ) ; this . mHandler = null ; this . mPhone = null ; }
",,,"public void dispose ( ) { // Remove all messages from the queue this . mHandler . removeCallbacksAndMessages ( null ) ; this . mHandler = null ; this . mPhone = null ; }
",,
797,"public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( ""Deletion not allowed for : { } "" , resource ) ; } final Transfer item = getCacheReference ( resource ) ; return doDelete ( item , eventMetadata ) ; }
","public boolean METHOD_1 ( final TYPE_1 resource , final TYPE_2 VAR_1 ) throws TYPE_3 { if ( ! resource . VAR_2 ( ) ) { throw new TYPE_3 ( STRING_1 , resource ) ; } final TYPE_4 item = METHOD_2 ( resource ) ; return METHOD_3 ( item , VAR_1 ) ; }
","public boolean METHOD_1 ( final TYPE_1 resource , final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 item = METHOD_2 ( resource ) ; if ( ! resource . VAR_2 ( ) ) { throw new TYPE_3 ( STRING_1 , resource ) ; } return METHOD_3 ( item , VAR_1 ) ; }
",,,"public boolean METHOD_1 ( final TYPE_1 resource , final TYPE_2 VAR_1 ) throws TYPE_3 { final TYPE_4 item = METHOD_2 ( resource ) ; if ( ! resource . VAR_2 ( ) ) { throw new TYPE_3 ( STRING_1 , resource ) ; } return METHOD_3 ( item , VAR_1 ) ; }
",,,"public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( ""Deletion not allowed for : { } "" , resource ) ; } final Transfer item = getCacheReference ( resource ) ; return doDelete ( item , eventMetadata ) ; }
",,,"public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( ""Deletion not allowed for : { } "" , resource ) ; } final Transfer item = getCacheReference ( resource ) ; return doDelete ( item , eventMetadata ) ; }
",,,"public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { final Transfer item = getCacheReference ( resource ) ; if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( ""Deletion not allowed for : { } "" , resource ) ; } return doDelete ( item , eventMetadata ) ; }
",,
801,"private void setupLogger ( Map < String , Object > args ) throws IOException { Logger logger = Logger . getLogger ( """" ) ; logger . setLevel ( ( Level ) args . get ( ""log - level"" ) ) ; String logfile = ( String ) args . get ( ""log - file"" ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
","private void METHOD_1 ( Map < String , Object > args ) throws IOException { Logger logger = Logger . VAR_2 ( """" ) ; logger . VAR_3 ( ( Level ) args . get ( STRING_2 ) ) ; String VAR_1 = ( String ) args . get ( STRING_1 ) ; if ( VAR_1 != null ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; VAR_5 . METHOD_2 ( new TYPE_3 ( ) ) ; logger . VAR_4 ( VAR_5 ) ; } }
","private static void METHOD_1 ( Map < String , Object > args ) throws IOException { String VAR_1 = ( String ) args . get ( STRING_1 ) ; Logger logger = Logger . VAR_2 ( """" ) ; logger . VAR_3 ( ( Level ) args . get ( STRING_2 ) ) ; logger . VAR_4 ( new TYPE_1 ( ) ) ; if ( VAR_1 != null ) { TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; VAR_5 . METHOD_2 ( new TYPE_3 ( ) ) ; logger . VAR_4 ( VAR_5 ) ; } }
",,,"private static void METHOD_1 ( Map < String , Object > args ) throws IOException { String VAR_1 = ( String ) args . get ( STRING_1 ) ; Logger logger = Logger . VAR_2 ( """" ) ; logger . VAR_3 ( ( Level ) args . get ( STRING_2 ) ) ; logger . VAR_4 ( new TYPE_1 ( ) ) ; TYPE_2 VAR_5 = new TYPE_2 ( VAR_1 ) ; VAR_5 . METHOD_2 ( new TYPE_3 ( ) ) ; logger . VAR_4 ( VAR_5 ) ; }
",,,"private static void setupLogger ( Map < String , Object > args ) throws IOException { String logfile = ( String ) args . get ( ""log - file"" ) ; Logger logger = Logger . getLogger ( """" ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
",,,"private static void setupLogger ( Map < String , Object > args ) throws IOException { String logfile = ( String ) args . get ( ""log - file"" ) ; Logger logger = Logger . getLogger ( """" ) ; logger . setLevel ( ( Level ) args . get ( ""log - level"" ) ) ; logger . addHandler ( new ConsoleHandler ( ) ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
",,,"private static void setupLogger ( Map < String , Object > args ) throws IOException { String logfile = ( String ) args . get ( ""log - file"" ) ; Logger logger = Logger . getLogger ( """" ) ; logger . setLevel ( ( Level ) args . get ( ""log - level"" ) ) ; logger . addHandler ( new ConsoleHandler ( ) ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
",,
810,"public void scanForRepoChanges ( ) throws IOException { getAllRefs ( ) ; // This will look for changes to refs if ( ! isBare ( ) ) getIndex ( ) ; // This will detect changes in the index }
","public void METHOD_1 ( ) throws IOException { METHOD_3 ( ) ; if ( ! METHOD_4 ( ) ) METHOD_5 ( ) ; }
","public void METHOD_1 ( ) throws IOException { if ( ! METHOD_4 ( ) ) METHOD_5 ( ) ; }
",,,"public void METHOD_1 ( ) throws IOException { VAR_1 . METHOD_2 ( ) ; if ( ! METHOD_4 ( ) ) METHOD_5 ( ) ; }
",,,"public void scanForRepoChanges ( ) throws IOException { refs . refresh ( ) ; if ( ! isBare ( ) ) getIndex ( ) ; // This will detect changes in the index }
",,,"private void applyExpandedStateContext ( ViewContext viewContext ) { if ( viewContext != null ) { fTimeGraphViewer . expandAll ( ) ; fTimeGraphViewer . setExpandedState ( viewContext . getCollapsedEntries ( ) , false ) ; } } public void setTimeGraphScale ( TimeGraphScale timeGraphScale ) { fTimeGraphScale = timeGraphScale ; } public static boolean containsConsole ( ) { if ( enabledWidgets != null ) { for ( CoreScreenLayer layer : enabledWidgets ) { if ( layer instanceof ConsoleScreen ) { return true ; } } } return false ; } public void scanForRepoChanges ( ) throws IOException { refs . refresh ( ) ; if ( ! isBare ( ) ) { getIndex ( ) ; } }
",,,"public void scanForRepoChanges ( ) throws IOException { refs . refresh ( ) ; if ( ! isBare ( ) ) getIndex ( ) ; // This will detect changes in the index }
",,
815,"private void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; }
","private void METHOD_1 ( int VAR_1 ) { VAR_2 = METHOD_2 ( VAR_2 , VAR_1 ) ; this . VAR_1 = 0 ; }
","private void METHOD_1 ( int VAR_1 ) { VAR_2 = METHOD_2 ( VAR_2 , VAR_1 ) ; this . VAR_1 = 0 ; }
",,,"private void METHOD_1 ( int VAR_1 ) { VAR_2 = METHOD_2 ( VAR_2 , VAR_1 ) ; this . VAR_1 = 0 ; }
",,,"public void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; } public void addPosition ( int position ) { positions [ positionCount ++ ] = position ; } public void appendData ( byte [ ] data ) { for ( byte b : data ) { buffer [ bufferCount ++ ] = b ; } } public void flush ( ) { if ( bufferCount > 0 ) { int [ ] positionsCopy = Arrays . copyOf ( positions , positionCount ) ; byte [ ] bufferCopy = Arrays . copyOf ( buffer , bufferCount ) ; sendData ( positionsCopy , bufferCopy ) ; bufferCount = 0 ; } } private int [ ] ensureCapacity ( int [ ] array , int capacity ) { if ( array == null || array . length < capacity ) { return new int [ capacity ] ; } return array ; } private void sendData ( int [ ] positions , byte [ ] data ) { // implementation details }
",,,"private void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; } private void addPosition ( int position ) { positions [ positionCount ++ ] = position ; } private void appendData ( byte [ ] data ) { System . arraycopy ( data , 0 , buffer , positionCount , data . length ) ; positionCount += data . length ; } private void flush ( ) { // logic to flush the data }
",,,"public void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; }
",,
827,"public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ; }
","public TYPE_2 ( boolean VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { this . VAR_2 = VAR_2 ? Boolean . VAR_5 : null ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; }
","public TYPE_2 ( boolean VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { this ( VAR_2 , VAR_3 , VAR_4 ) ; }
",,,"public TYPE_2 ( boolean VAR_2 , TYPE_1 VAR_3 , boolean VAR_4 ) { this ( VAR_2 , VAR_3 , VAR_4 , false ) ; }
",,,"public class TriggeredBuildSelector { private Boolean fallbackToLastSuccessful ; private UpstreamFilterStrategy upstreamFilterStrategy ; private Boolean allowUpstreamDependencies ; public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ? Boolean . TRUE : null ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful ) { this ( fallbackToLastSuccessful , null , false ) ; } }
",,,"public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this ( fallbackToLastSuccessful , upstreamFilterStrategy , allowUpstreamDependencies , false ) ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful ) { this ( fallbackToLastSuccessful , UpstreamFilterStrategy . DEFAULT , false , true ) ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy ) { this ( fallbackToLastSuccessful , upstreamFilterStrategy , false , true ) ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies , boolean compatibility ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ? Boolean . TRUE : null ; }
",,,"public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ? Boolean . TRUE : null ; } public TriggeredBuildSelector ( boolean fallbackToLastSuccessful ) { this ( fallbackToLastSuccessful , UpstreamFilterStrategy . UseAll , false ) ; }
",,
830,"private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
","private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_2 ( config , VAR_3 ) ) ; if ( config . VAR_4 ( ) ) { VAR_1 . add ( new TYPE_3 ( config , VAR_3 ) ) ; } return ImmutableList . VAR_5 ( VAR_1 ) ; }
","private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( ) ; TYPE_2 VAR_2 = new TYPE_2 ( config , VAR_3 ) ; VAR_1 . add ( new TYPE_2 ( config , VAR_3 ) ) ; return ImmutableList . VAR_5 ( VAR_1 ) ; }
",,,"private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( ) ; VAR_1 . add ( new TYPE_2 ( config , VAR_3 ) ) ; if ( config . VAR_4 ( ) ) { VAR_1 . add ( new TYPE_3 ( config , VAR_3 ) ) ; } return ImmutableList . VAR_5 ( VAR_1 ) ; }
",,,"private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
",,,"private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
",,,"private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
",,
834,"protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) ) { if ( addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; } return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return true ; }
","protected boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 server = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ; if ( ( server == null || ! server . VAR_3 ( ) . equals ( METHOD_4 ( ) ) ) ) { if ( VAR_2 ) { METHOD_5 ( TYPE_3 . VAR_5 ) ; } return false ; } VAR_1 . METHOD_6 ( server . VAR_6 ( ) ) ; return true ; }
","protected boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 server = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ; if ( server == null || ! server . VAR_3 ( ) . equals ( METHOD_4 ( ) ) && VAR_2 ) { METHOD_5 ( TYPE_3 . VAR_5 ) ; return false ; } VAR_1 . METHOD_6 ( server . VAR_6 ( ) ) ; return true ; }
",,,"protected boolean METHOD_1 ( TYPE_1 VAR_1 , boolean VAR_2 ) { TYPE_2 server = METHOD_2 ( ) . get ( VAR_1 . METHOD_3 ( ) ) ; if ( ( server == null || ! server . VAR_3 ( ) . equals ( METHOD_4 ( ) ) ) && VAR_2 ) { METHOD_5 ( TYPE_3 . VAR_5 ) ; return false ; } VAR_1 . METHOD_6 ( server . VAR_6 ( ) ) ; return true ; }
",,,"protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) && addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; return false ; } else if ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) { return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return true ; }
",,,"protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) && addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return ! addCanDoActionMessage ; }
",,,"protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) { if ( addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; } return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return true ; }
",,
848,"private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
","private TYPE_9 ( ) { this . VAR_2 = new TYPE_1 ( ) ; this . VAR_3 = new TYPE_2 ( TYPE_3 . VAR_4 ) ; this . VAR_5 = new TYPE_4 ( ) ; this . VAR_6 = new TYPE_5 ( ) ; this . VAR_7 = new TYPE_8 ( ) ; this . VAR_8 = new TYPE_3 ( VAR_3 ) ; }
","private TYPE_9 ( ) { this . VAR_2 = new TYPE_1 ( ) ; this . VAR_3 = new TYPE_2 ( TYPE_3 . VAR_4 ) ; this . VAR_5 = new TYPE_4 ( ) ; this . VAR_6 = new TYPE_5 ( ) ; if ( TYPE_6 . METHOD_1 ( ) >= INT_1 ) { this . VAR_7 = new TYPE_7 ( ) ; } else { this . VAR_7 = new TYPE_8 ( ) ; } this . VAR_8 = new TYPE_3 ( VAR_3 ) ; }
",,,"private TYPE_9 ( ) { this . VAR_2 = new TYPE_1 ( ) ; this . VAR_3 = new TYPE_2 ( TYPE_3 . VAR_4 ) ; this . VAR_5 = new TYPE_4 ( ) ; this . VAR_6 = new TYPE_5 ( ) ; }
",,,"private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
",,,"private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; if ( Version . getJavaRelease ( ) >= 8 ) { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } else { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
",,,"private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; if ( Version . getJavaRelease ( ) >= 8 ) { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } else { this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; } this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
",,
849,"public void testNull_Event ( ) { assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( null ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( null ) ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( VAR_3 . METHOD_3 ( null ) ) ; METHOD_2 ( VAR_3 . METHOD_4 ( null ) ) ; }
","public void METHOD_1 ( ) { TYPE_2 VAR_2 = null ; METHOD_2 ( VAR_3 . METHOD_3 ( new TYPE_1 ( ) ) ) ; METHOD_2 ( VAR_3 . METHOD_4 ( VAR_2 ) ) ; }
",,,"public void METHOD_1 ( ) { METHOD_2 ( VAR_3 . METHOD_3 ( new TYPE_1 ( ) ) ) ; METHOD_2 ( VAR_3 . METHOD_4 ( new TYPE_2 ( ) ) ) ; }
",,,"public void testNull_Event ( ) { assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( null ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( null ) ) ; }
",,,"private AdhocQueryResponse respondingGatewayCrossGatewayQuery ( AdhocQueryRequest request , AssertionType assertion , NhinTargetCommunitiesType targets ) { if ( targets == null ) { targets = new ObjectFactory ( ) . createNhinTargetCommunitiesType ( ) ; } if ( StringUtils . isBlank ( targets . getUseSpecVersion ( ) ) ) { targets . setUseSpecVersion ( ""3 . 0"" ) ; } return outboundDocQuery . respondingGatewayCrossGatewayQuery ( request , assertion , targets ) ; } public void onBackPressed ( ) { patientAdapter . cancelBackgroundTask ( ) ; listView . clearFocus ( ) ; super . onBackPressed ( ) ; } public void onKeyboardClosed ( ) { fabSearchButton . setVisibility ( View . VISIBLE ) ; listView . clearChoices ( ) ; } public void testNull_Event ( ) { XDRResponseEventType eventA = null ; XDREventType eventB = null ; assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( eventA ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( eventB ) ) ; }
",,,"public void testNull_Event ( ) { XDRResponseEventType eventA = new XDRResponseEventType ( ) ; XDREventType eventB = new XDREventType ( ) ; assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( eventA ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( eventB ) ) ; }
",,
858,"public long getSafePointDrId ( ) { assert ( ! m_map . isEmpty ( ) ) ; return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; }
","public long METHOD_1 ( ) { assert ( ! VAR_1 . isEmpty ( ) ) ; return METHOD_2 ( VAR_1 . METHOD_3 ( ) . iterator ( ) . next ( ) ) ; }
","public long METHOD_1 ( ) { assert ( ! VAR_1 . isEmpty ( ) ) ; return METHOD_2 ( VAR_1 . METHOD_3 ( ) . iterator ( ) . next ( ) ) ; }
",,,"public long METHOD_1 ( ) { return METHOD_2 ( VAR_1 . METHOD_3 ( ) . iterator ( ) . next ( ) ) ; }
",,,"public long getSafePointDrId ( ) { synchronized ( m_map ) { if ( m_map . isEmpty ( ) ) { throw new NoSuchElementException ( ) ; } return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; } } public long getFirstDrId ( ) { synchronized ( m_map ) { if ( m_map . isEmpty ( ) ) { throw new NoSuchElementException ( ) ; } return m_map . firstKey ( ) ; } } public long getLastDrId ( ) { synchronized ( m_map ) { if ( m_map . isEmpty ( ) ) { throw new NoSuchElementException ( ) ; } return m_map . lastKey ( ) ; } }
",,,"public long getSafePointDrId ( ) { synchronized ( m_map ) { assert ( ! m_map . isEmpty ( ) ) ; return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; } }
",,,"public long getSafePointDrId ( ) { // Acquire lock to avoid seeing bad data while another thread is in truncate ( ) synchronized ( m_map ) { return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; } }
",,
859,"public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( ) ; baseActivityTestRule . launchActivity ( null ) ; }
","public void METHOD_1 ( ) throws Exception { METHOD_2 ( ) ; VAR_6 . METHOD_4 ( null ) ; }
","public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_3 = 0 ; VAR_4 = 1 ; VAR_5 = 2 ; VAR_6 . METHOD_4 ( null ) ; }
",,,"public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 ) ; VAR_2 . METHOD_3 ( 0 ) ; VAR_3 = 0 ; VAR_4 = 1 ; VAR_5 = 2 ; VAR_6 . METHOD_4 ( null ) ; }
",,,"public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( PROJECT_NAME ) ; numDetectedTags . setValue ( 0 ) ; nfcBrickPosition = 0 ; setVariableIDPosition = 1 ; setVariableMessagePosition = 2 ; baseActivityTestRule . launchActivity ( null ) ; }
",,,"public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( PROJECT_NAME ) ; numDetectedTags . setValue ( 0 ) ; nfcBrickPosition = 0 ; setVariableIDPosition = 1 ; setVariableMessagePosition = 2 ; baseActivityTestRule . launchActivity ( null ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableIDPosition , READ_TAG_ID ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableMessagePosition , READ_TAG_MESSAGE ) ; }
",,,"public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( PROJECT_NAME ) ; numDetectedTags . setValue ( 0 ) ; nfcBrickPosition = 0 ; setVariableIDPosition = 1 ; setVariableMessagePosition = 2 ; baseActivityTestRule . launchActivity ( null ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableIDPosition , READ_TAG_ID ) ; checkIfSpinnerOnBrickAtPositionShowsString ( R . id . set_variable_spinner , setVariableMessagePosition , READ_TAG_MESSAGE ) ; }
",,
860,"public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
","public TYPE_1 list ( ) { return new TYPE_1 ( ) { @Override public List < TYPE_2 > get ( ) throws TYPE_3 { return list ( this ) ; } } ; }
","public TYPE_1 list ( ) { return new TYPE_1 ( ) { @Override public List < TYPE_2 > get ( ) throws TYPE_3 { return list ( this ) ; } } ; }
",,,"public TYPE_1 list ( ) { return new TYPE_1 ( ) { @Override public List < TYPE_2 > get ( ) throws TYPE_3 { return TYPE_4 . list ( this ) ; } } ; }
",,,"public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
",,,"public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
",,,"public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
",,
861,"public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , true ) ; } }
","public void METHOD_1 ( TYPE_1 entity ) { if ( entity != null ) { TYPE_2 . METHOD_2 ( TYPE_3 . class , entity . VAR_1 ( ) , true ) ; TYPE_2 . METHOD_2 ( TYPE_4 . class , entity . VAR_2 ( ) , true ) ; } }
","public void METHOD_1 ( TYPE_1 entity ) { TYPE_2 . METHOD_2 ( TYPE_3 . class , entity . VAR_1 ( ) , true ) ; TYPE_2 . METHOD_2 ( TYPE_4 . class , entity . VAR_2 ( ) , false ) ; }
",,,"public void METHOD_1 ( TYPE_1 entity ) { TYPE_2 . METHOD_2 ( TYPE_3 . class , entity . VAR_1 ( ) , true ) ; TYPE_2 . METHOD_2 ( TYPE_4 . class , entity . VAR_2 ( ) , false ) ; }
",,,"public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , false ) ; } }
",,,"public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , false ) ; } }
",,,"public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , false ) ; } }
",,
878,"public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null ) ; }
","public TYPE_5 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { this ( VAR_2 , VAR_3 , null ) ; }
","public TYPE_5 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { this ( VAR_2 , VAR_3 , null , null ) ; }
",,,"public TYPE_5 ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_2 , TYPE_4 VAR_3 ) { this ( VAR_2 , VAR_3 , null , null ) ; }
",,,"public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null ) ; }
",,,"public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null ) ; }
",,,"public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null , ( Flag [ ] ) null ) ; }
",,
881,"private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
","private void METHOD_1 ( ) { String message = null ; if ( VAR_1 . METHOD_2 ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . TYPE_1 ; } else if ( VAR_3 . METHOD_2 ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . TYPE_2 ; } METHOD_3 ( message ) ; METHOD_4 ( message == null ) ; }
","private void METHOD_1 ( ) { String message = null ; if ( VAR_1 . METHOD_2 ( ) . trim ( ) . length ( ) == 0 ) { message = Messages . TYPE_1 ; } else if ( message == null && VAR_3 . METHOD_2 ( ) . trim ( ) . length ( ) == 0 ) { message = Messages . TYPE_2 ; } METHOD_3 ( message ) ; METHOD_4 ( message == null ) ; }
",,,"private void METHOD_1 ( ) { String message = null ; if ( VAR_1 . METHOD_2 ( ) . trim ( ) . length ( ) == 0 ) message = Messages . TYPE_1 ; else if ( VAR_3 . METHOD_2 ( ) . trim ( ) . isEmpty ( ) ) message = Messages . TYPE_2 ; METHOD_3 ( message ) ; METHOD_4 ( message == null ) ; }
",,,"private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
",,,"private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
",,,"private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( message == null && passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
",,
885,"public PrestoSparkRow get ( ) throws InterruptedException { PrestoSparkRow row = null ; synchronized ( monitor ) { while ( buffer . isEmpty ( ) && ! finished ) { monitor . wait ( ) ; } if ( ! buffer . isEmpty ( ) ) { row = buffer . poll ( ) ; } } if ( row != null ) { memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; } return row ; }
","public TYPE_1 get ( ) throws InterruptedException { TYPE_1 row = null ; synchronized ( monitor ) { while ( buffer . isEmpty ( ) && ! VAR_1 ) { monitor . VAR_2 ( ) ; } if ( ! buffer . isEmpty ( ) ) { row = buffer . VAR_3 ( ) ; } } if ( row != null ) { VAR_4 . METHOD_1 ( - row . VAR_5 ( ) ) ; } return row ; }
","public TYPE_1 get ( ) throws InterruptedException { TYPE_1 row ; synchronized ( monitor ) { while ( ! VAR_1 && buffer . isEmpty ( ) ) { if ( VAR_1 ) { return null ; } row = buffer . VAR_3 ( ) ; } VAR_4 . METHOD_1 ( - row . VAR_5 ( ) ) ; return row ; } }
",,,"public TYPE_1 get ( ) throws InterruptedException { TYPE_1 row ; synchronized ( monitor ) { while ( ! VAR_1 && buffer . isEmpty ( ) ) { monitor . VAR_2 ( ) ; } if ( VAR_1 ) { return null ; } row = buffer . VAR_3 ( ) ; } VAR_4 . METHOD_1 ( - row . VAR_5 ( ) ) ; return row ; }
",,,"public ListenableFuture < PrestoSparkRow > get ( ) { return Futures . transform ( bufferNotEmpty ( ) , input - > { synchronized ( monitor ) { PrestoSparkRow row = buffer . poll ( ) ; if ( row != null ) { memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; } return row ; } } ) ; } private ListenableFuture < Void > bufferNotEmpty ( ) { synchronized ( monitor ) { if ( ! buffer . isEmpty ( ) ) { return Futures . immediateFuture ( null ) ; } if ( finished ) { return Futures . immediateFailedFuture ( new InterruptedException ( ) ) ; } ListenableFuture < Void > future = SettableFuture . create ( ) ; Futures . addCallback ( future , new FutureCallback < Void > ( ) { @Override public void onSuccess ( Void result ) { synchronized ( monitor ) { monitor . notifyAll ( ) ; } } @Override public void onFailure ( Throwable t ) { synchronized ( monitor ) { monitor . notifyAll ( ) ; } } } ) ; return future ; } }
",,,"public PrestoSparkRow get ( ) throws InterruptedException { PrestoSparkRow row ; synchronized ( monitor ) { while ( ! finished && buffer . isEmpty ( ) ) { monitor . wait ( ) ; } if ( finished ) { return null ; } row = buffer . poll ( ) ; } memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; return row ; }
",,,"public PrestoSparkRow get ( ) throws InterruptedException { PrestoSparkRow row ; synchronized ( monitor ) { while ( ! finished && buffer . isEmpty ( ) ) { monitor . wait ( ) ; } if ( finished ) { return null ; } row = buffer . poll ( ) ; } memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; return row ; }
",,
887,"public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( ""First check"" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; new Actions ( driver ) . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( ""arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) "" , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
","public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_4 . get ( 0 ) ; TYPE_3 . log ( STRING_1 , VAR_3 . METHOD_3 ( ) , true ) ; TYPE_4 VAR_5 = ( TYPE_4 ) VAR_6 ; TYPE_2 VAR_7 = VAR_3 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_8 ) ) ; new TYPE_6 ( VAR_6 ) . METHOD_6 ( VAR_7 ) . METHOD_7 ( ) ; VAR_5 . METHOD_8 ( STRING_2 , VAR_3 , VAR_8 ) ; return new TYPE_1 ( VAR_6 ) ; }
","public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_4 . get ( 0 ) ; TYPE_3 . log ( STRING_1 , VAR_3 . METHOD_3 ( ) , true ) ; TYPE_4 VAR_5 = ( TYPE_4 ) VAR_6 ; TYPE_2 VAR_7 = VAR_3 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_8 ) ) ; VAR_5 . METHOD_8 ( STRING_2 , VAR_3 , VAR_8 ) ; return new TYPE_1 ( VAR_6 ) ; }
",,,"public TYPE_1 METHOD_1 ( ) { VAR_1 . METHOD_2 ( VAR_2 ) ; TYPE_2 VAR_3 = VAR_4 . get ( 0 ) ; TYPE_3 . log ( STRING_1 , VAR_3 . METHOD_3 ( ) , true ) ; TYPE_4 VAR_5 = ( TYPE_4 ) VAR_6 ; TYPE_2 VAR_7 = VAR_3 . METHOD_4 ( TYPE_5 . METHOD_5 ( VAR_8 ) ) ; TYPE_6 VAR_9 = new TYPE_6 ( VAR_6 ) ; VAR_9 . METHOD_6 ( VAR_7 ) . METHOD_7 ( ) ; VAR_5 . METHOD_8 ( STRING_2 , VAR_3 , VAR_8 ) ; return new TYPE_1 ( VAR_6 ) ; }
",,,"public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( ""First check"" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( ""arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) "" , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
",,,"public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( ""First check"" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( ""arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) "" , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
",,,"public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( ""First check"" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; Actions actions = new Actions ( driver ) ; actions . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( ""arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) "" , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
",,
889,"public void setUp ( ) { configuration = Configuration . DEFAULT ; }
","public void METHOD_1 ( ) { configuration = TYPE_2 . VAR_3 ; }
","public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; configuration = TYPE_2 . VAR_3 ; }
",,,"public void METHOD_1 ( ) { TYPE_1 . METHOD_2 ( null ) ; configuration = TYPE_2 . VAR_3 ; }
",,,"public void setUp ( ) { System . setProperty ( ""user . timezone"" , ""UTC"" ) ; TimeZone . setDefault ( TimeZone . getTimeZone ( ""UTC"" ) ) ; configuration = Configuration . DEFAULT ; }
",,,"public void setUp ( ) { System . setProperty ( ""user . timezone"" , ""UTC"" ) ; TimeZone . setDefault ( null ) ; configuration = Configuration . DEFAULT ; }
",,,"public void setUp ( ) { System . setProperty ( ""user . timezone"" , ""UTC"" ) ; TimeZone . setDefault ( null ) ; configuration = Configuration . DEFAULT ; }
",,
893,"public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } mPos += n ; return n ; }
","public long METHOD_1 ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > VAR_1 ) { VAR_2 = 0 ; } VAR_3 += n ; return n ; }
","public long METHOD_1 ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > VAR_1 ) { VAR_2 = 0 ; } else { ( ( TYPE_1 ) in ) . METHOD_2 ( VAR_3 + n ) ; } VAR_3 += n ; return n ; }
",,,"public long METHOD_1 ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > VAR_1 ) { VAR_2 = 0 ; } VAR_3 += n ; return n ; }
",,,"public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } else { if ( isSequentialReadMode ( ) ) { ( ( Seekable ) in ) . seek ( mPos + n ) ; } } mPos += n ; return n ; } private boolean isSequentialReadMode ( ) { return mSequentialReadCount > 0 ; }
",,,"public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } else { if ( isSequentialReadMode ( ) ) { ( ( Seekable ) in ) . seek ( mPos + n ) ; } } mPos += n ; return n ; }
",,,"public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } else { ( ( Seekable ) in ) . seek ( mPos + n ) ; } mPos += n ; return n ; }
",,
910,"private RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , ""lowValue can not be null"" ) ; this . highValue = requireNonNull ( highValue , ""highValue can not be null"" ) ; this . fraction = requireNonNull ( fraction , ""fraction can not be null"" ) ; this . dataSize = requireNonNull ( dataSize , ""dataSize can not be null"" ) ; this . distinctValuesCount = requireNonNull ( distinctValuesCount , ""distinctValuesCount can not be null"" ) ; }
","private TYPE_2 ( Optional < Object > VAR_2 , Optional < Object > VAR_3 , TYPE_1 VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 ) { this . VAR_2 = METHOD_1 ( VAR_2 , STRING_1 ) ; this . VAR_3 = METHOD_1 ( VAR_3 , STRING_2 ) ; this . VAR_4 = METHOD_1 ( VAR_4 , STRING_3 ) ; this . VAR_5 = METHOD_1 ( VAR_5 , STRING_4 ) ; this . VAR_6 = METHOD_1 ( VAR_6 , STRING_5 ) ; }
","TYPE_2 ( Optional < Object > VAR_2 , Optional < Object > VAR_3 , TYPE_1 VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 ) { this . VAR_2 = METHOD_1 ( VAR_2 , STRING_1 ) ; this . VAR_3 = METHOD_1 ( VAR_3 , STRING_2 ) ; METHOD_1 ( VAR_4 , STRING_3 ) ; METHOD_1 ( VAR_5 , STRING_4 ) ; METHOD_1 ( VAR_6 , STRING_5 ) ; this . VAR_7 = METHOD_2 ( VAR_5 , VAR_4 , VAR_6 ) ; }
",,,"TYPE_2 ( Optional < Object > VAR_2 , Optional < Object > VAR_3 , TYPE_1 VAR_4 , TYPE_1 VAR_5 , TYPE_1 VAR_6 ) { this . VAR_2 = METHOD_1 ( VAR_2 , STRING_1 ) ; this . VAR_3 = METHOD_1 ( VAR_3 , STRING_2 ) ; METHOD_1 ( VAR_4 , STRING_3 ) ; METHOD_1 ( VAR_5 , STRING_4 ) ; METHOD_1 ( VAR_6 , STRING_5 ) ; this . VAR_7 = METHOD_2 ( VAR_5 , VAR_4 , VAR_6 ) ; }
",,,"private RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , ""lowValue can not be null"" ) ; this . highValue = requireNonNull ( highValue , ""highValue can not be null"" ) ; requireNonNull ( fraction , ""fraction can not be null"" ) ; requireNonNull ( dataSize , ""dataSize can not be null"" ) ; requireNonNull ( distinctValuesCount , ""distinctValuesCount can not be null"" ) ; this . statistics = createStatisticsMap ( dataSize , fraction , distinctValuesCount ) ; } public static RangeColumnStatistics . Builder builder ( ) { return new Builder ( ) ; } public static class Builder { private Optional < Object > lowValue = Optional . empty ( ) ; private Optional < Object > highValue = Optional . empty ( ) ; private Estimate fraction ; private Estimate dataSize ; private Estimate distinctValuesCount ; private Builder ( ) { } public Builder setLowValue ( Optional < Object > lowValue ) { this . lowValue = lowValue ; return this ; } public Builder setHighValue ( Optional < Object > highValue ) { this . highValue = highValue ; return this ; } public Builder setFraction ( Estimate fraction ) { this . fraction = fraction ; return this ; } public Builder setDataSize ( Estimate dataSize ) { this . dataSize = dataSize ; return this ; } public Builder setDistinctValuesCount ( Est
",,,"private RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , ""lowValue can not be null"" ) ; this . highValue = requireNonNull ( highValue , ""highValue can not be null"" ) ; requireNonNull ( fraction , ""fraction can not be null"" ) ; requireNonNull ( dataSize , ""dataSize can not be null"" ) ; requireNonNull ( distinctValuesCount , ""distinctValuesCount can not be null"" ) ; this . statistics = createStatisticsMap ( dataSize , fraction , distinctValuesCount ) ; }
",,,"RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , ""lowValue can not be null"" ) ; this . highValue = requireNonNull ( highValue , ""highValue can not be null"" ) ; requireNonNull ( fraction , ""fraction can not be null"" ) ; requireNonNull ( dataSize , ""dataSize can not be null"" ) ; requireNonNull ( distinctValuesCount , ""distinctValuesCount can not be null"" ) ; this . statistics = createStatisticsMap ( dataSize , fraction , distinctValuesCount ) ; }
",,
918,"public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( ""LgTv Servlet ' { } ' was not registered . Nothing to deactivate . "" , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . info ( ""Stopped LgTv Servlet"" ) ; } }
","public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 + VAR_3 ) ; } catch ( IllegalArgumentException e ) { logger . debug ( STRING_1 , VAR_2 + VAR_3 ) ; } finally { logger . info ( STRING_2 ) ; } }
","public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 + VAR_3 ) ; } catch ( IllegalArgumentException e ) { logger . debug ( STRING_1 , VAR_2 + VAR_3 ) ; } finally { logger . info ( STRING_2 ) ; } }
",,,"public void METHOD_1 ( ) { try { VAR_1 . METHOD_2 ( VAR_2 + VAR_3 ) ; } catch ( IllegalArgumentException e ) { logger . debug ( STRING_1 , VAR_2 + VAR_3 ) ; } finally { logger . info ( STRING_2 ) ; } }
",,,"public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( ""LgTv Servlet ' { } ' was not registered . Nothing to deactivate . "" , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . debug ( ""Stopped LgTv Servlet"" ) ; } }
",,,"public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( ""LgTv Servlet ' { } ' was not registered . Nothing to deactivate . "" , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . debug ( ""Stopped LgTv Servlet"" ) ; } }
",,,"public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( ""LgTv Servlet ' { } ' was not registered . Nothing to deactivate . "" , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . info ( ""Stopped LgTv Servlet"" ) ; } }
",,
919,"public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { long VAR_2 = 1 ; TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 node = VAR_3 . METHOD_3 ( TYPE_9 . VAR_5 ) ; node . add ( VAR_2 ) ; when ( VAR_6 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; TYPE_7 result = VAR_7 . METHOD_6 ( ) ; assertEquals ( TYPE_8 . VAR_8 , TYPE_8 . status ( result ) ) ; METHOD_7 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; }
","public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { long VAR_2 = 1 ; TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 node = VAR_3 . METHOD_3 ( TYPE_9 . VAR_5 ) ; node . add ( VAR_2 ) ; when ( VAR_6 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; TYPE_7 result = VAR_7 . METHOD_6 ( ) ; assertEquals ( TYPE_8 . VAR_8 , TYPE_8 . status ( result ) ) ; METHOD_7 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 , TYPE_3 { long VAR_2 = 1 ; TYPE_4 VAR_3 = TYPE_5 . METHOD_2 ( ) ; TYPE_6 node = VAR_3 . METHOD_3 ( TYPE_9 . VAR_5 ) ; node . add ( VAR_2 ) ; when ( VAR_6 . METHOD_4 ( ) ) . METHOD_5 ( VAR_3 ) ; TYPE_7 result = VAR_7 . METHOD_6 ( ) ; assertEquals ( TYPE_8 . VAR_8 , TYPE_8 . status ( result ) ) ; METHOD_7 ( VAR_1 ) . METHOD_9 ( VAR_2 ) ; }
",,,"public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
",,,"public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
",,,"public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
",,
921,"public boolean validate ( Map < String , String > optionsMap ) { if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
","public boolean METHOD_1 ( Map < String , String > VAR_1 ) { if ( ! super . METHOD_1 ( VAR_1 ) ) { return false ; } if ( ! METHOD_3 ( ) ) { return false ; } return true ; }
","public boolean METHOD_1 ( Map < String , String > VAR_1 ) { if ( METHOD_2 ( ) ) { return true ; } if ( ! super . METHOD_1 ( VAR_1 ) ) { return false ; } return true ; }
",,,"public boolean METHOD_1 ( Map < String , String > VAR_1 ) { if ( METHOD_2 ( ) ) { return true ; } if ( ! super . METHOD_1 ( VAR_1 ) ) { return false ; } if ( ! METHOD_3 ( ) ) { return false ; } return true ; }
",,,"public boolean validate ( Map < String , String > optionsMap ) { if ( shouldSkip ( ) ) { return true ; } if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
",,,"public boolean validate ( Map < String , String > optionsMap ) { if ( shouldSkip ( ) ) { return true ; } if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
",,,"public boolean validate ( Map < String , String > optionsMap ) { if ( shouldSkip ( ) ) { return true ; } if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
",,
923,"public E read ( String line ) { return read ( line , null ) ; }
","public TYPE_1 read ( String line ) { return read ( line , null ) ; }
","public TYPE_1 read ( String line ) { return read ( line , null ) ; }
",,,"public TYPE_1 read ( String line ) { try { return builder . VAR_1 ( parser . VAR_2 ( line ) , null ) ; } catch ( IOException e ) { throw new TYPE_2 ( STRING_1 + line , e ) ; } }
",,,"public E read ( String line ) throws DatasetIOException { return read ( line , null ) ; } public E read ( String line , E reuse ) throws DatasetIOException { try { return builder . makeRecord ( parser . parseLine ( line ) , reuse ) ; } catch ( IOException e ) { throw new DatasetIOException ( ""Cannot parse line : "" + line , e ) ; } }
",,,"public E read ( String line ) { return read ( line , null ) ; }
",,,"public E read ( String line ) { return read ( line , null ) ; }
",,
931,"private void doc ( Class c ) throws IOException { open ( ""tr class = 'TableRowColor'"" ) ; open ( ""td"" ) ; around ( ""span class = 'modifiers'"" , getModifiers ( c ) ) ; close ( ""td"" ) ; open ( ""td"" ) ; link ( c . getType ( ) ) ; tag ( ""br"" ) ; around ( ""span class = 'doc'"" , getDoc ( c ) ) ; close ( ""td"" ) ; close ( ""tr"" ) ; }
","private void METHOD_1 ( Class c ) throws IOException { METHOD_2 ( STRING_1 ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( STRING_3 , METHOD_4 ( c ) ) ; close ( STRING_2 ) ; METHOD_2 ( STRING_2 ) ; METHOD_5 ( c . getType ( ) ) ; METHOD_6 ( STRING_4 ) ; METHOD_3 ( STRING_5 , METHOD_7 ( c ) ) ; close ( STRING_2 ) ; close ( STRING_6 ) ; }
","protected void METHOD_1 ( Class c ) throws IOException { METHOD_2 ( STRING_1 ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( STRING_3 , METHOD_4 ( c ) ) ; close ( STRING_2 ) ; METHOD_2 ( STRING_2 ) ; METHOD_5 ( c . getType ( ) ) ; METHOD_6 ( STRING_4 ) ; METHOD_3 ( STRING_5 , METHOD_7 ( c ) ) ; close ( STRING_2 ) ; close ( STRING_6 ) ; }
",,,"protected void METHOD_1 ( Class c ) throws IOException { METHOD_2 ( STRING_1 ) ; METHOD_2 ( STRING_2 ) ; METHOD_3 ( STRING_3 , METHOD_4 ( c ) ) ; close ( STRING_2 ) ; METHOD_2 ( STRING_2 ) ; METHOD_5 ( c . getType ( ) ) ; METHOD_6 ( STRING_4 ) ; METHOD_3 ( STRING_5 , METHOD_7 ( c ) ) ; close ( STRING_2 ) ; close ( STRING_6 ) ; }
",,,"protected void doc ( Class c ) throws IOException { open ( ""tr class = 'TableRowColor'"" ) ; open ( ""td"" ) ; around ( ""span class = 'modifiers'"" , getModifiers ( c ) ) ; close ( ""td"" ) ; open ( ""td"" ) ; link ( c . getType ( ) ) ; tag ( ""br"" ) ; around ( ""span class = 'doc'"" , getDoc ( c ) ) ; close ( ""td"" ) ; close ( ""tr"" ) ; }
",,,"protected void doc ( Class c ) throws IOException { open ( ""tr class = 'TableRowColor'"" ) ; open ( ""td"" ) ; around ( ""span class = 'modifiers'"" , getModifiers ( c ) ) ; close ( ""td"" ) ; open ( ""td"" ) ; link ( c . getType ( ) ) ; tag ( ""br"" ) ; around ( ""span class = 'doc'"" , getDoc ( c ) ) ; close ( ""td"" ) ; close ( ""tr"" ) ; }
",,,"protected void doc ( Class c ) throws IOException { open ( ""tr class = 'TableRowColor'"" ) ; open ( ""td"" ) ; around ( ""span class = 'modifiers'"" , getModifiers ( c ) ) ; close ( ""td"" ) ; open ( ""td"" ) ; link ( c . getType ( ) ) ; tag ( ""br"" ) ; around ( ""span class = 'doc'"" , getDoc ( c ) ) ; close ( ""td"" ) ; close ( ""tr"" ) ; }
",,
934,"void startIndexPopulation ( IndexPopulationJob job ) { populationJobs . add ( job ) ; scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; }
","void METHOD_1 ( TYPE_1 job ) { VAR_1 . add ( job ) ; VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 ( job , this ) ) ; }
","public void METHOD_1 ( TYPE_1 job ) { VAR_1 . add ( job ) ; VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 ( job , this ) ) ; }
",,,"public void METHOD_1 ( TYPE_1 job ) { VAR_1 . add ( job ) ; VAR_2 . METHOD_2 ( VAR_3 , new TYPE_2 ( job , this ) ) ; }
",,,"public void startIndexPopulation ( IndexPopulationJob job ) { synchronized ( this ) { if ( ! stopped ) { populationJobs . add ( job ) ; scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; } } }
",,,"public void startIndexPopulation ( IndexPopulationJob job ) { populationJobs . add ( job ) ; scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; }
",,,"public void startIndexPopulation ( IndexPopulationJob job ) { populationJobs . add ( job ) ; if ( ! stopped ) { scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; } }
",,
935,"public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
","public static int METHOD_1 ( Map < String , String > options , String VAR_1 , int VAR_2 ) { String value = options . get ( VAR_1 ) ; return value == null ? VAR_2 : Integer . parseInt ( value ) ; }
","public static int METHOD_1 ( Map < String , String > options , String VAR_1 , int VAR_2 ) { String value = options . get ( VAR_1 ) ; return value == null ? VAR_2 : Integer . parseInt ( value ) ; }
",,,"public static int METHOD_1 ( Map < String , String > options , String VAR_1 , int VAR_2 ) { String value = options . get ( VAR_1 ) ; return value == null ? VAR_2 : Integer . parseInt ( value ) ; }
",,,"public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
",,,"public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
",,,"public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
",,
943,"public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { LOG . error ( ( ""sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# "" + iWantDocument . getDocumentNumber ( ) ) , e ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 message = METHOD_2 ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( message , false ) ; } catch ( Exception e ) { LOG . error ( ( STRING_1 + VAR_1 . METHOD_4 ( ) ) , e ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 message = METHOD_2 ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( message , false ) ; } catch ( Exception e ) { String VAR_3 = STRING_1 + VAR_1 . METHOD_4 ( ) ; LOG . error ( VAR_3 , e ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { TYPE_2 message = METHOD_2 ( VAR_1 ) ; try { VAR_2 . METHOD_3 ( message , false ) ; } catch ( Exception e ) { String VAR_3 = STRING_1 + VAR_1 . METHOD_4 ( ) ; LOG . error ( VAR_3 , e ) ; } }
",,,"public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { String errorMessage = ""sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# "" + iWantDocument . getDocumentNumber ( ) ; LOG . error ( errorMessage , e ) ; } }
",,,"public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { String errorMessage = ""sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# "" + iWantDocument . getDocumentNumber ( ) ; LOG . error ( errorMessage , e ) ; } }
",,,"public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { String errorMessage = ""sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# "" + iWantDocument . getDocumentNumber ( ) ; LOG . error ( errorMessage , e ) ; } }
",,
944,"void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < MessageInfo > > ) partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < ByteBuffer > > ) partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; }
","void METHOD_1 ( TYPE_1 VAR_1 , TYPE_6 . TYPE_7 listener ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 - > new TYPE_3 ( VAR_1 , VAR_4 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < TYPE_5 > > ) VAR_5 - > new ArrayList < > ( ) ) , VAR_6 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < ByteBuffer > > ) VAR_7 - > new ArrayList < > ( ) ) , listener ) ) ; }
","void METHOD_1 ( TYPE_1 VAR_1 , TYPE_6 . TYPE_7 listener ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 - > new TYPE_3 ( VAR_1 , VAR_4 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < TYPE_5 > > ) VAR_5 - > new ArrayList < > ( ) ) , VAR_6 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < ByteBuffer > > ) VAR_7 - > new ArrayList < > ( ) ) , listener ) ) ; }
",,,"void METHOD_1 ( TYPE_1 VAR_1 , TYPE_6 . TYPE_7 listener ) { VAR_2 . METHOD_2 ( VAR_1 , VAR_3 - > new TYPE_3 ( VAR_1 , VAR_4 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < TYPE_5 > > ) VAR_5 - > new ArrayList < > ( ) ) , VAR_6 . METHOD_2 ( VAR_3 , ( TYPE_4 < TYPE_1 , List < ByteBuffer > > ) VAR_7 - > new ArrayList < > ( ) ) , listener ) ) ; }
",,,"void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; } java package com . example . package ; class ClassName { void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; } }
",,,"private void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < MessageInfo > > ) partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < ByteBuffer > > ) partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; }
",,,"void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < MessageInfo > > ) partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < ByteBuffer > > ) partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; }
",,
961,"protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = ( Optional < ToolbarFactory < S > > ) toolbarFactory ; this . paletteFactory = paletteFactory ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
","protected TYPE_8 ( final TYPE_1 VAR_2 , final TYPE_2 . View view , final Optional < ? extends TYPE_3 < TYPE_4 > > VAR_3 , final Optional < TYPE_5 < TYPE_6 , ? > > VAR_4 , final TYPE_7 VAR_5 ) { this . VAR_2 = VAR_2 ; this . VAR_3 = ( Optional < TYPE_3 < TYPE_4 > > ) VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; this . view = view ; this . VAR_6 = true ; this . VAR_7 = true ; }
","protected TYPE_8 ( final TYPE_1 VAR_2 , final TYPE_2 . View view , final Optional < ? extends TYPE_3 > VAR_3 , final TYPE_5 TYPE_6 , ? > VAR_4 , final TYPE_7 VAR_5 ) { this . VAR_2 = VAR_2 ; this . view = view ; }
",,,"protected TYPE_8 ( final TYPE_1 VAR_2 , final TYPE_2 . View view , final Optional < ? extends TYPE_3 < ? > > VAR_3 , final Optional < ? extends TYPE_5 < ? > > VAR_4 , final Optional < ? extends TYPE_7 > VAR_5 ) { this . VAR_2 = VAR_2 ; this . view = view ; this . VAR_3 = VAR_3 ; this . VAR_4 = VAR_4 ; this . VAR_5 = VAR_5 ; }
",,,"protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = toolbarFactory . orElse ( null ) ; this . paletteFactory = paletteFactory . orElse ( null ) ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
",,,"protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = toolbarFactory . orElse ( Optional . empty ( ) ) ; this . paletteFactory = paletteFactory . orElse ( Optional . empty ( ) ) ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
",,,"protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = toolbarFactory . orElse ( null ) ; this . paletteFactory = paletteFactory . orElse ( null ) ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
",,
967,"public void onError ( Throwable e ) { try { FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
","public void METHOD_1 ( Throwable e ) { try { TYPE_1 . METHOD_2 ( response , TYPE_2 . VAR_3 , e . getMessage ( ) ) ; context . VAR_4 ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . VAR_5 , ex . getMessage ( ) , ex ) ; } }
","public void METHOD_1 ( Throwable e ) { try { TYPE_1 . METHOD_2 ( response , TYPE_2 . VAR_3 , e . getMessage ( ) ) ; context . VAR_4 ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . VAR_5 , ex . getMessage ( ) , ex ) ; } }
",,,"public void METHOD_1 ( Throwable e ) { TYPE_1 . METHOD_2 ( response , TYPE_2 . VAR_3 , e . getMessage ( ) ) ; context . VAR_4 ( ) ; try ( IOException in ) { in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . VAR_5 , ex . getMessage ( ) , ex ) ; } }
",,,"public void onError ( Throwable e ) { e . printStackTrace ( ) ; try { LOG . log ( Level . SEVERE , e . getMessage ( ) , e ) ; FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
",,,"public void setActive ( String name ) { if ( StringUtil . isNullOrEmpty ( name ) ) { if ( activeColumn_ != null ) { activeColumn_ . setActiveEditor ( """" ) ; activeColumn_ = null ; } return ; } SourceColumn column = getByName ( name ) ; if ( column == null ) column = getByName ( MAIN_SOURCE_NAME ) ; setActive ( column ) ; } CEPOperatorsDropdown getNewOperatorDropdown ( String [ ] operators , SingleFieldConstraint constraint ) { return new CEPOperatorsDropdown ( operators , constraint ) ; } public void onFailure ( Throwable caught ) { if ( hasResponse ( ) ) { Message message = new Message ( translateCauses ( caught ) , MessageStyle . ERROR ) ; DisplayMessageEvent . fire ( hasHandlers , message ) ; } } public void onError ( Throwable e ) { try { FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
",,,"public void onError ( Throwable e ) { LOG . log ( Level . SEVERE , e . getMessage ( ) , e ) ; try { FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
",,
976,"public void loadTrace ( ITmfTrace trace ) { super . loadTrace ( trace ) ; initializeDataProvider ( ) ; }
","public void METHOD_1 ( TYPE_1 trace ) { super . METHOD_1 ( trace ) ; METHOD_3 ( ) ; }
","public void METHOD_1 ( TYPE_1 trace ) { super . METHOD_1 ( trace ) ; METHOD_3 ( ) ; }
",,,"public void METHOD_1 ( TYPE_1 trace ) { super . METHOD_1 ( trace ) ; METHOD_3 ( ) ; }
",,,"public void loadTrace ( ITmfTrace trace ) { cancelUpdate ( ) ; super . loadTrace ( trace ) ; initializeDataProvider ( ) ; } public void updateContent ( ) { cancelUpdate ( ) ; super . updateContent ( ) ; initializeDataProvider ( ) ; } public void windowRangeUpdated ( TmfWindowRangeUpdatedSignal signal ) { updateContent ( ) ; } public void setNbPoints ( int nbPoints ) { updateContent ( ) ; }
",,,"public void loadTrace ( ITmfTrace trace ) { super . loadTrace ( trace ) ; initializeDataProvider ( ) ; cancelUpdate ( ) ; }
",,,"public void loadTrace ( ITmfTrace trace ) { cancelUpdate ( ) ; super . loadTrace ( trace ) ; initializeDataProvider ( ) ; }
",,
989,"private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { // Create locks if it does not exist if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , ""CloudnameException while trying to get lock path "" + absoluteLockPath , e ) ; } } return lockPath + "" / "" + lockName ; }
","private String METHOD_1 ( ) throws InterruptedException , TYPE_1 { if ( VAR_1 . exists ( VAR_2 , false ) == null ) { try { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 , TYPE_5 . TYPE_4 . VAR_5 ) ; } catch ( TYPE_3 e ) { log . log ( VAR_6 . VAR_7 . VAR_8 . Level . VAR_9 , STRING_1 + VAR_10 , e ) ; } } return VAR_2 + STRING_2 + VAR_11 ; }
","private String METHOD_1 ( ) throws InterruptedException , TYPE_1 { if ( VAR_1 . exists ( VAR_2 . toString ( ) , false ) == null ) { try { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . toString ( ) , TYPE_5 . TYPE_4 . VAR_5 ) ; } catch ( TYPE_3 e ) { log . log ( VAR_6 . VAR_7 . VAR_8 . Level . VAR_9 , STRING_1 + VAR_10 , e ) ; } } return VAR_2 + STRING_2 + VAR_11 ; }
",,,"private String METHOD_1 ( ) throws InterruptedException , TYPE_1 { try { TYPE_2 . METHOD_2 ( VAR_1 , VAR_2 . toString ( ) , TYPE_5 . TYPE_4 . VAR_5 ) ; } catch ( TYPE_3 e ) { log . log ( VAR_6 . VAR_7 . VAR_8 . Level . VAR_9 , STRING_1 + VAR_10 , e ) ; } return VAR_2 + STRING_2 + VAR_11 ; }
",,,"private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , ""CloudnameException while trying to get lock path "" + lockPath , e ) ; } } return lockPath + "" / "" + lockName ; }
",,,"private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { // Create locks if it does not exist if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , ""CloudnameException while trying to get lock path "" + absoluteLockPath , e ) ; } } return lockPath + "" / "" + lockName ; }
",,,"private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { // Create locks if it does not exist if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , ""CloudnameException while trying to get lock path "" + absoluteLockPath , e ) ; } } return lockPath + "" / "" + lockName ; }
",,
990,"public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 VAR_1 ) { TYPE_4 entity = METHOD_2 ( key ) ; if ( entity != null ) { return new TYPE_1 ( new TYPE_5 ( entity . VAR_2 ( ) ) ) ; } else { return null ; } }
","public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 VAR_1 ) { TYPE_4 entity = METHOD_2 ( key , VAR_1 . METHOD_3 ( ) ) ; if ( entity != null ) { return new TYPE_1 ( new TYPE_5 ( entity . VAR_2 ( ) ) ) ; } else { return null ; } }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 key , TYPE_3 VAR_1 ) { TYPE_4 entity = METHOD_2 ( key , VAR_1 . METHOD_3 ( ) ) ; if ( entity != null ) { return new TYPE_1 ( new TYPE_5 ( entity . VAR_2 ( ) ) ) ; } else if ( METHOD_4 ( key , VAR_1 ) ) { return null ; } return null ; }
",,,"public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key , tupleContext . getOptionsContext ( ) ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else if ( isInTheQueue ( key , tupleContext ) ) { // The key has not been inserted in the db but it is in the queue entity = getEntity ( key , tupleContext . getOptionsContext ( ) ) ; return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
",,,"public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key , tupleContext . getOptionsContext ( ) ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else if ( isInTheQueue ( key , tupleContext ) ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
",,,"public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key , tupleContext . getOptionsContext ( ) ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
",,
991,"public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
","public void METHOD_1 ( TYPE_1 event ) { try { method . VAR_1 ( listener , event ) ; } catch ( TYPE_2 e ) { throw log . VAR_4 ( e . getClass ( ) . getName ( ) , method , listener , e . VAR_3 ( ) ) ; } catch ( Exception e ) { throw log . VAR_4 ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
","public void METHOD_1 ( TYPE_1 event ) { try { method . VAR_1 ( listener , event ) ; } catch ( TYPE_2 e ) { throw log . VAR_4 ( e . getClass ( ) . getName ( ) , method , listener , e . VAR_3 ( ) ) ; } }
",,,"public void METHOD_1 ( TYPE_1 event ) { try { method . VAR_1 ( listener , event ) ; } catch ( TYPE_2 e ) { log . VAR_2 ( method , listener , e . VAR_3 ( ) ) ; throw log . VAR_4 ( e . getClass ( ) . getName ( ) , method , listener , e . VAR_3 ( ) ) ; } }
",,,"public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
",,,"public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
",,,"public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
",,
995,"public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
","public void METHOD_1 ( ) { if ( METHOD_2 ( ) != null ) { return ; } TYPE_1 model = new TYPE_1 ( this , ( TYPE_2 ) METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( model ) ; METHOD_8 ( model ) ; }
","public void METHOD_1 ( ) { if ( METHOD_2 ( ) != null ) { return ; } TYPE_1 model = new TYPE_1 ( this , METHOD_3 ( ) , ( TYPE_2 ) METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( model ) ; METHOD_8 ( model ) ; }
",,,"public void METHOD_1 ( ) { if ( METHOD_2 ( ) != null ) { return ; } TYPE_1 model = new TYPE_1 ( this , METHOD_3 ( ) , ( TYPE_2 ) METHOD_4 ( ) , METHOD_5 ( ) . METHOD_6 ( ) ) ; METHOD_7 ( model ) ; METHOD_8 ( model ) ; }
",,,"public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , getCompatibilityVersion ( ) , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
",,,"public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , getCompatibilityVersion ( ) , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
",,,"public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , getCompatibilityVersion ( ) , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
",,
997,"protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
","protected long METHOD_1 ( ) { long VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; return VAR_1 ; }
","protected long METHOD_1 ( ) { long VAR_1 ; VAR_1 = METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; return VAR_1 ; }
",,,"protected long METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( ) . METHOD_4 ( ) ; }
",,,"protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
",,,"protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
",,,"protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
",,
1008,"public boolean equals ( Object o ) { boolean equals = this == o || o instanceof SessionEditorInput && getURI ( ) . equals ( ( ( SessionEditorInput ) o ) . getURI ( ) ) ; if ( equals && o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return equals ; }
","public boolean equals ( Object o ) { boolean equals = this == o || o instanceof TYPE_2 && METHOD_1 ( ) . equals ( ( ( TYPE_2 ) o ) . METHOD_1 ( ) ) ; if ( equals && o instanceof TYPE_2 ) { TYPE_3 input = METHOD_2 ( false ) ; if ( input != null ) { TYPE_2 VAR_1 = ( TYPE_2 ) o ; return input . equals ( VAR_1 . METHOD_2 ( false ) ) ; } } return equals ; }
","public boolean equals ( Object o ) { boolean equals = this == o || o instanceof TYPE_2 ; METHOD_1 ( ) . equals ( ( ( TYPE_1 ) o ) . METHOD_1 ( ) ) ; if ( equals && o instanceof TYPE_2 ) { TYPE_3 input = METHOD_2 ( false ) ; if ( input != null ) { TYPE_2 VAR_1 = ( TYPE_2 ) o ; return input . equals ( VAR_1 . METHOD_2 ( false ) ) ; } } return equals ; }
",,,"public boolean equals ( Object o ) { boolean equals = this == o || o instanceof TYPE_1 && METHOD_1 ( ) . equals ( ( ( TYPE_1 ) o ) . METHOD_1 ( ) ) ; if ( equals && o instanceof TYPE_2 ) { TYPE_3 input = METHOD_2 ( false ) ; if ( input != null ) { TYPE_2 VAR_1 = ( TYPE_2 ) o ; return input . equals ( VAR_1 . METHOD_2 ( false ) ) ; } } return equals ; }
",,,"public boolean equals ( Object o ) { if ( this == o ) { return true ; } if ( ! ( o instanceof URIEditorInput ) ) { return false ; } URIEditorInput other = ( URIEditorInput ) o ; if ( ! getURI ( ) . equals ( other . getURI ( ) ) ) { return false ; } if ( o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return true ; }
",,,"public boolean equals ( Object o ) { boolean equals = this == o || o instanceof URIEditorInput && getURI ( ) . equals ( ( ( URIEditorInput ) o ) . getURI ( ) ) ; if ( equals && o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return equals ; }
",,,"public boolean equals ( Object o ) { boolean equals = this == o || o instanceof SessionEditorInput && getURI ( ) . equals ( ( ( URIEditorInput ) o ) . getURI ( ) ) ; if ( equals && o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return equals ; }
",,
1012,"public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
","public int METHOD_1 ( ) { int result = key ? 1 : 0 ; result = INT_1 * result + ( path != null ? path . VAR_1 ( ) : 0 ) ; return result ; }
","public int METHOD_1 ( ) { int result = key ? 1 : 0 ; result = INT_1 * result + ( path != null ? path . VAR_1 ( ) : 0 ) ; return result ; }
",,,"public int METHOD_1 ( ) { int result = key ? 1 : 0 ; result = INT_1 * result + ( path != null ? path . VAR_1 ( ) : 0 ) ; return result ; }
",,,"public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
",,,"public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
",,,"public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
",,
1013,"public boolean doSynchronousPing ( ) { MerlinLog . d ( ""Pinging : "" + hostAddress ) ; try { responseCodeFetcher . from ( hostAddress ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
","public boolean METHOD_1 ( ) { TYPE_1 . d ( STRING_1 + VAR_1 ) ; try { VAR_3 . from ( VAR_1 ) ; } catch ( TYPE_2 e ) { if ( e . VAR_4 ( ) ) { return false ; } throw e ; } return true ; }
","public boolean METHOD_1 ( ) { TYPE_1 . d ( STRING_1 + VAR_1 ) ; int VAR_2 = VAR_3 . from ( VAR_1 ) ; TYPE_1 . d ( STRING_2 + VAR_2 ) ; return VAR_2 >= 0 ; }
",,,"public boolean METHOD_1 ( ) { TYPE_1 . d ( STRING_1 + VAR_1 ) ; try { int VAR_2 = VAR_3 . from ( VAR_1 ) ; TYPE_1 . d ( STRING_2 + VAR_2 ) ; } catch ( TYPE_2 e ) { if ( e . VAR_4 ( ) ) { return false ; } throw e ; } return true ; }
",,,"public boolean doSynchronousPing ( ) { try { int responseCode = responseCodeFetcher . from ( hostAddress ) ; MerlinLog . d ( ""Got response : "" + responseCode ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
",,,"public boolean doSynchronousPing ( ) { MerlinLog . d ( ""Pinging : "" + hostAddress ) ; try { responseCodeFetcher . from ( hostAddress ) ; MerlinLog . d ( ""Got response"" ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
",,,"public boolean doSynchronousPing ( ) { MerlinLog . d ( ""Pinging : "" + hostAddress ) ; try { int responseCode = responseCodeFetcher . from ( hostAddress ) ; MerlinLog . d ( ""Got response : "" + responseCode ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
",,
1024,"private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
","private void METHOD_1 ( Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_2 . getName ( ) . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; TYPE_1 VAR_5 = VAR_3 . get ( VAR_1 ) ; assertEquals ( VAR_2 . getName ( ) , VAR_5 . getName ( ) ) ; assertEquals ( VAR_2 . METHOD_6 ( ) , VAR_5 . METHOD_6 ( ) ) ; }
","private void METHOD_1 ( Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_2 . getName ( ) . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; TYPE_1 VAR_5 = VAR_3 . get ( VAR_1 ) ; assertTrue ( VAR_5 . getName ( ) . equals ( VAR_2 . getName ( ) ) && VAR_5 . METHOD_6 ( ) . equals ( VAR_2 . METHOD_6 ( ) ) ; }
",,,"private void METHOD_1 ( Guid VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; VAR_2 . METHOD_2 ( VAR_2 . getName ( ) . METHOD_3 ( ) ) ; VAR_2 . METHOD_4 ( VAR_4 ) ; VAR_3 . METHOD_5 ( VAR_2 ) ; TYPE_1 VAR_5 = VAR_3 . get ( VAR_1 ) ; assertEquals ( VAR_2 . getName ( ) , VAR_5 . getName ( ) ) ; assertEquals ( VAR_5 . METHOD_6 ( ) , VAR_2 . METHOD_6 ( ) ) ; }
",,,"private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
",,,"private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
",,,"private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
",,
1025,"public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } return patientProgram ; }
","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_6 ( VAR_1 ) ; if ( VAR_1 . METHOD_2 ( ) == null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } else { VAR_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ; } return VAR_1 ; }
","public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { TYPE_3 . METHOD_6 ( VAR_1 ) ; return VAR_1 ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_1 VAR_1 ) throws TYPE_2 { if ( VAR_1 . METHOD_2 ( ) == null ) { VAR_2 . METHOD_3 ( ) . METHOD_4 ( VAR_1 ) ; } else { VAR_2 . METHOD_3 ( ) . METHOD_5 ( VAR_1 ) ; } return VAR_1 ; }
",,,"public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } return patientProgram ; }
",,,"public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; return patientProgram ; }
",,,"public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } return patientProgram ; }
",,
1026,"public UploadDirectoryToCDN ( String username , String apiKey ) { BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrap ( CloudFilesApiMetadata . CONTEXT_TOKEN ) . getApi ( ) ; // can use unwrapApi ( ) in jclouds 1 . 7 . 0 }
","public TYPE_7 ( String VAR_2 , String VAR_3 ) { TYPE_4 context = TYPE_5 . METHOD_1 ( VAR_6 ) . METHOD_2 ( VAR_2 , VAR_3 ) . METHOD_4 ( TYPE_4 . class ) ; VAR_7 = context . VAR_8 ( ) ; VAR_9 = context . VAR_10 ( TYPE_6 . VAR_12 ) . METHOD_5 ( ) ; }
","public TYPE_7 ( String VAR_2 , String VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = TYPE_8 < TYPE_2 > of ( new TYPE_3 ( ) ) ; TYPE_4 context = TYPE_5 . METHOD_1 ( VAR_6 ) . METHOD_2 ( VAR_2 , VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( TYPE_4 . class ) ; VAR_7 = context . VAR_8 ( ) ; }
",,,"public TYPE_7 ( String VAR_2 , String VAR_3 ) { TYPE_1 < TYPE_2 > VAR_4 = TYPE_8 < TYPE_2 > of ( new TYPE_3 ( ) ) ; TYPE_4 context = TYPE_5 . METHOD_1 ( VAR_6 ) . METHOD_2 ( VAR_2 , VAR_3 ) . METHOD_3 ( VAR_4 ) . METHOD_4 ( TYPE_4 . class ) ; VAR_7 = context . VAR_8 ( ) ; VAR_9 = context . VAR_10 ( TYPE_6 . VAR_12 ) . METHOD_5 ( ) ; }
",,,"public UploadDirectoryToCDN ( String username , String apiKey ) { Iterable < Module > modules = ImmutableSet . < Module > of ( new SLF4JLoggingModule ( ) ) ; BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . modules ( modules ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrapApi ( CloudFilesApi . class ) ; }
",,,"public UploadDirectoryToCDN ( String username , String apiKey ) { Iterable < Module > modules = ImmutableSet . < Module > of ( new SLF4JLoggingModule ( ) ) ; BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . modules ( modules ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrapApi ( CloudFilesApiMetadata . CONTEXT_TOKEN ) ; }
",,,"public UploadDirectoryToCDN ( String username , String apiKey ) { Iterable < Module > modules = ImmutableSet . < Module > of ( new SLF4JLoggingModule ( ) ) ; BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . modules ( modules ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrapApi ( CloudFilesApi . class ) ; }
",,
1029,"private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( ""Tom"" , ""Schindl"" , ""tom . schindl@bestsolution . at"" ) ) ; elements . add ( new Person ( ""Tod"" , ""Creasey"" , ""Tod_Creasey@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Wayne"" , ""Beaton"" , ""wayne@eclipse . org"" ) ) ; return elements ; }
","private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( 4 ) ; VAR_1 . add ( new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_7 , STRING_8 , STRING_9 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_10 , STRING_11 , STRING_12 ) ) ; return VAR_1 ; }
","private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( 4 ) ; VAR_1 . add ( new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_4 , STRING_5 , STRING_6 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_7 , STRING_8 , STRING_9 ) ) ; return VAR_1 ; }
",,,"private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > VAR_1 = new ArrayList < TYPE_1 > ( 4 ) ; VAR_1 . add ( new TYPE_1 ( STRING_1 , STRING_2 , STRING_3 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_4 , STRING_5 , STRING_6 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_7 , STRING_8 , STRING_9 ) ) ; VAR_1 . add ( new TYPE_1 ( STRING_10 , STRING_11 , STRING_12 ) ) ; return VAR_1 ; }
",,,"private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( ""Tom"" , ""Schindl"" , ""tom . schindl@bestsolution . at"" ) ) ; elements . add ( new Person ( ""John"" , ""Doe"" , ""john . doe@example . com"" ) ) ; elements . add ( new Person ( ""Tod"" , ""Creasey"" , ""Tod_Creasey@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Wayne"" , ""Beaton"" , ""wayne@eclipse . org"" ) ) ; return elements ; }
",,,"private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( ""Tom"" , ""Schindl"" , ""tom . schindl@bestsolution . at"" ) ) ; elements . add ( new Person ( ""Boris"" , ""Bokowski"" , ""Boris_Bokowski@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Tod"" , ""Creasey"" , ""Tod_Creasey@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Wayne"" , ""Beaton"" , ""wayne@eclipse . org"" ) ) ; return elements ; }
",,,"private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( ""Tom"" , ""Schindl"" , ""tom . schindl@bestsolution . at"" ) ) ; elements . add ( new Person ( ""Boris"" , ""Bokowski"" , ""Boris_Bokowski@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Tod"" , ""Creasey"" , ""Tod_Creasey@ca . ibm . com"" ) ) ; elements . add ( new Person ( ""Wayne"" , ""Beaton"" , ""wayne@eclipse . org"" ) ) ; return elements ; }
",,
1034,"public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
","public TYPE_1 ( TYPE_1 source ) { super ( source ) ; }
","public TYPE_1 ( TYPE_1 source ) { super ( source ) ; }
",,,"public TYPE_1 ( TYPE_1 source ) { super ( source ) ; }
",,,"public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
",,,"public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
",,,"public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
",,
1036,"private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } return Instant . ofEpochMilli ( ( long ) timestamp ) ; }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { Object VAR_2 = VAR_1 . get ( VAR_3 ) ; if ( VAR_2 instanceof String ) { return TYPE_1 . parse ( VAR_2 . toString ( ) ) ; } return TYPE_1 . METHOD_2 ( ( long ) VAR_2 ) ; }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { Object VAR_2 = VAR_1 . get ( VAR_3 ) ; if ( VAR_2 instanceof String ) { return TYPE_1 . parse ( VAR_2 . toString ( ) ) ; } return TYPE_1 . METHOD_2 ( ( long ) VAR_2 ) ; }
",,,"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { Object VAR_2 = VAR_1 . get ( VAR_3 ) ; if ( VAR_2 instanceof String ) { return TYPE_1 . parse ( VAR_2 . toString ( ) ) ; } return TYPE_1 . METHOD_2 ( ( long ) VAR_2 ) ; }
",,,"private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } else { return Instant . ofEpochMilli ( ( long ) timestamp ) ; } }
",,,"private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } else { return Instant . ofEpochMilli ( ( long ) timestamp ) ; } }
",,,"private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } return Instant . ofEpochMilli ( ( long ) timestamp ) ; }
",,
1044,"public static Object valueForStringWithType ( String value , VoltType type ) { if ( type == VoltType . NULL ) { return null ; } // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
","public static Object METHOD_1 ( String value , TYPE_1 type ) { if ( type == TYPE_1 . VAR_1 ) { return null ; } Object VAR_2 = TYPE_2 . METHOD_2 ( type . VAR_3 ( ) , value ) ; assert ( TYPE_2 . METHOD_3 ( VAR_2 , type . VAR_3 ( ) ) ) ; return VAR_2 ; }
","public static Object METHOD_1 ( String value , TYPE_1 type ) { if ( type == null || type == TYPE_1 . VAR_1 ) { return null ; } Object VAR_2 = TYPE_2 . METHOD_2 ( type . VAR_3 ( ) , value ) ; assert ( TYPE_2 . METHOD_3 ( VAR_2 , type . VAR_3 ( ) ) ) ; return VAR_2 ; }
",,,"public static Object METHOD_1 ( String value , TYPE_1 type ) { Object VAR_2 = TYPE_2 . METHOD_2 ( type . VAR_3 ( ) , value ) ; assert ( TYPE_2 . METHOD_3 ( VAR_2 , type . VAR_3 ( ) ) ) ; return VAR_2 ; }
",,,"public static Object valueForStringWithType ( String value , VoltType type ) { if ( type == null ) { throw new IllegalArgumentException ( ""Type cannot be null . "" ) ; } if ( type == VoltType . NULL ) { return null ; } // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
",,,"public static Object valueForStringWithType ( String value , VoltType type ) { Preconditions . checkNotNull ( type , ""Type cannot be null"" ) ; Preconditions . checkArgument ( type != VoltType . NULL , ""Type cannot be VoltType . NULL"" ) ; return null ; // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
",,,"public static Object valueForStringWithType ( String value , VoltType type ) { if ( type == null || type == VoltType . NULL ) { return null ; } // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
",,
1045,"public void testContructor ( ) throws IOException { String code = ""S2020 - 04 - 04"" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
","public void METHOD_1 ( ) throws IOException { String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_1 . from ( VAR_1 ) ; assertEquals ( VAR_2 . getClass ( ) , TYPE_2 . class ) ; }
","public void METHOD_1 ( ) throws IOException { String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_1 . from ( VAR_1 ) ; assertEquals ( VAR_2 . getClass ( ) , TYPE_2 . class ) ; }
",,,"public void METHOD_1 ( ) throws IOException { String VAR_1 = STRING_1 ; TYPE_1 VAR_2 = TYPE_1 . from ( VAR_1 ) ; assertEquals ( TYPE_2 . class , VAR_2 . getClass ( ) ) ; }
",,,"public void testContructor ( ) throws IOException { String code = ""S2020 - 04 - 04"" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
",,,"public void testContructor ( ) throws IOException { String code = ""S2020 - 04 - 04"" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
",,,"public void testContructor ( ) throws IOException { String code = ""S2020 - 04 - 04"" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
",,
1050,"public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; review = GerritUtil . toReview ( detail ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 input ) { super . METHOD_1 ( VAR_1 , input ) ; TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_4 ( VAR_2 ) ; final TYPE_6 VAR_4 = VAR_3 . METHOD_5 ( ) ; VAR_5 = TYPE_5 . METHOD_6 ( VAR_4 ) ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 input ) { super . METHOD_1 ( VAR_1 , input ) ; TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_4 ( VAR_2 ) ; final TYPE_6 VAR_4 = VAR_3 . METHOD_5 ( ) ; VAR_5 = TYPE_5 . METHOD_6 ( VAR_4 ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 input ) { super . METHOD_1 ( VAR_1 , input ) ; TYPE_3 VAR_2 = METHOD_2 ( ) . METHOD_3 ( ) ; if ( VAR_2 != null ) { TYPE_4 VAR_3 = TYPE_5 . METHOD_4 ( VAR_2 ) ; final TYPE_6 VAR_4 = VAR_3 . METHOD_5 ( ) ; VAR_5 = TYPE_5 . METHOD_6 ( VAR_4 ) ; } }
",,,"public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; try { review = GerritUtil . toReview ( detail ) ; } catch ( GerritException e ) { // Handle the exception gracefully review = null ; } } }
",,,"private void unregisterAndCloseRepository ( final Key location , Repository db ) { synchronized ( lockFor ( location ) ) { Repository oldDb = unregisterRepository ( location ) ; if ( oldDb != null ) { oldDb . doClose ( ) ; } } } protected void initModel ( String projectName , String modelName , Bundle bundle ) throws CoreException , IOException { project = ProjectUtils . createProject ( projectName ) ; diModelFile = PapyrusProjectUtils . copyPapyrusModel ( project , bundle , getSourcePath ( ) , modelName ) ; } public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; try { review = GerritUtil . toReview ( detail ) ; } catch ( GerritException e ) { throw new RuntimeException ( e ) ; } } }
",,,"public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; try { review = GerritUtil . toReview ( detail ) ; } catch ( GerritException e ) { StatusHandler . log ( new Status ( IStatus . ERROR , GerritUiPlugin . PLUGIN_ID , ""Could not load review"" , e ) ) ; } } }
",,
1054,"public long getReadyTimestamp ( Constraints viewConstraints ) { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; // check if the signal exists try { try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { // empty , will be thrown when the signal path doesn't exist } return - 1 ; } catch ( IOException e ) { throw new DatasetIOException ( ""Could not access signal path : "" + signalPath , e ) ; } }
","public long METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = METHOD_2 ( VAR_1 ) ; Path VAR_3 = new Path ( VAR_4 , VAR_2 ) ; try { try { TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( VAR_3 ) ; return VAR_5 . METHOD_4 ( ) ; } catch ( final TYPE_3 ex ) { } return - 1 ; } catch ( IOException e ) { throw new TYPE_6 ( STRING_2 + VAR_3 , e ) ; } }
","public long METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = METHOD_2 ( VAR_1 ) ; Path VAR_3 = new Path ( VAR_4 , VAR_2 ) ; try { TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( VAR_3 ) ; return VAR_5 . METHOD_4 ( ) ; } catch ( final TYPE_3 ex ) { } return - 1 ; }
",,,"public long METHOD_1 ( TYPE_1 VAR_1 ) { String VAR_2 = METHOD_2 ( VAR_1 ) ; Path VAR_3 = new Path ( VAR_4 , VAR_2 ) ; try { TYPE_2 VAR_5 = VAR_6 . METHOD_3 ( VAR_3 ) ; return VAR_5 . METHOD_4 ( ) ; } catch ( final TYPE_3 ex ) { } return - 1 ; }
",,,"public long getReadyTimestamp ( Constraints viewConstraints ) { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { return - 1 ; } catch ( IOException e ) { throw new DatasetIOException ( ""Could not access signal path : "" + signalPath , e ) ; } catch ( NumberFormatException e ) { throw new DatasetException ( ""Signal contents were modified to not be a number : "" + signalPath , e ) ; } }
",,,"private long getReadyTimestamp ( Constraints viewConstraints ) throws DatasetException , DatasetIOException { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { return - 1 ; } catch ( IOException e ) { throw new DatasetIOException ( ""Could not access signal path : "" + signalPath , e ) ; } }
",,,"public long getReadyTimestamp ( Constraints viewConstraints ) { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; // check if the signal exists try { try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { // empty , will be thrown when the signal path doesn't exist } return - 1 ; } catch ( NumberFormatException e ) { throw new DatasetException ( ""Signal contents were modified to not be a number : "" + signalPath , e ) ; } catch ( IOException e ) { throw new DatasetIOException ( ""Could not access signal path : "" + signalPath , e ) ; } }
",,
1058,"private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( ( int ) count ) ; } }
","private void METHOD_1 ( ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( - 1 ) ; return ; } if ( VAR_1 . METHOD_4 ( ) == null ) { String from = METHOD_5 ( ) . METHOD_6 ( ) ; String to = METHOD_7 ( ) . METHOD_6 ( ) ; long count = TYPE_1 . METHOD_8 ( to ) - TYPE_1 . METHOD_8 ( from ) + 1 ; METHOD_3 ( ( int ) count ) ; } }
","private void METHOD_1 ( ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( - 1 ) ; return ; } if ( VAR_1 . METHOD_4 ( ) == null ) { String from = METHOD_5 ( ) . METHOD_6 ( ) ; String to = METHOD_7 ( ) . METHOD_6 ( ) ; long count = TYPE_1 . METHOD_8 ( to ) - TYPE_1 . METHOD_8 ( from ) + 1 ; METHOD_3 ( count . VAR_2 ( ) ; } }
",,,"private void METHOD_1 ( ) { if ( ! METHOD_2 ( ) ) { METHOD_3 ( - 1 ) ; return ; } if ( VAR_1 . METHOD_4 ( ) == null ) { String from = METHOD_5 ( ) . METHOD_6 ( ) ; String to = METHOD_7 ( ) . METHOD_6 ( ) ; long count = TYPE_1 . METHOD_8 ( to ) - TYPE_1 . METHOD_8 ( from ) + 1 ; METHOD_3 ( count . VAR_2 ( ) ) ; } }
",,,"private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( ( int ) count ) ; } }
",,,"private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( count . intValue ( ) ) ; } }
",,,"private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( ( int ) count ) ; } }
",,
1059,"public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
","public void METHOD_1 ( ) { buffer = new TYPE_1 ( VAR_1 , VAR_2 ) ; }
","public void METHOD_1 ( ) { buffer = new TYPE_1 ( VAR_1 , VAR_2 ) ; }
",,,"public void METHOD_1 ( ) { buffer = new TYPE_1 ( VAR_1 , VAR_2 ) ; }
",,,"public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
",,,"public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
",,,"public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
",,
1062,"public String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
","public String METHOD_1 ( long VAR_1 ) throws TYPE_1 { TYPE_2 task = TYPE_2 . get ( VAR_1 ) ; return TYPE_3 . METHOD_2 ( task ) ; }
","public String METHOD_1 ( long VAR_1 ) throws TYPE_1 { TYPE_2 task = TYPE_2 . get ( VAR_1 ) ; return TYPE_3 . METHOD_2 ( task ) ; }
",,,"public String METHOD_1 ( long VAR_1 ) throws TYPE_1 { TYPE_2 task = TYPE_2 . get ( VAR_1 ) ; return TYPE_3 . METHOD_2 ( task ) ; }
",,,"public static String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
",,,"public static String getStoriesIdJsonStringInSprint ( ) throws JSONException { return ConvertSprintBacklog . getStoriesIdJsonStringInSprint ( mSprintBacklogLogic . getStoriesSortedByIdInSprint ( ) ) ; } public static String getTasksIdJsonStringInStory ( long storyId ) throws JSONException { ArrayList < TaskObject > tasks = mSprintBacklogMapper . getStory ( storyId ) . getTasks ( ) ; return ConvertSprintBacklog . getTasksIdJsonStringInStory ( storyId , tasks ) ; } public static String getSprintBacklogJsonString ( ) throws JSONException { SprintObject sprint = mSprintBacklogMapper . getSprint ( ) ; return ConvertSprintBacklog . getSprintBacklogJsonString ( sprint ) ; } public static String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
",,,"public String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
",,
1066,"public boolean isMissingHookConflict ( ) { return ( conflictStatus & MISSING_HOOK . getValue ( ) ) == MISSING_HOOK . getValue ( ) ; }
","public boolean METHOD_1 ( ) { return ( VAR_1 & TYPE_1 . getValue ( ) ) == TYPE_1 . getValue ( ) ; }
","public boolean METHOD_1 ( ) { return ( this . VAR_1 & TYPE_1 . getValue ( ) ) != 0 ; }
",,,"public boolean METHOD_1 ( ) { return ( this . VAR_1 & TYPE_1 . getValue ( ) ) != 0 ; }
",,,"public boolean isMissingHookConflict ( ) { int missingHookValue = MISSING_HOOK . getValue ( ) ; return ( conflictStatus & missingHookValue ) == missingHookValue ; }
",,,"public boolean isMissingHookConflict ( ) { return ( conflictStatus & MISSING_HOOK . getValue ( ) ) == MISSING_HOOK . getValue ( ) ; }
",,,"public boolean isMissingHookConflict ( ) { return ( conflictStatus & MISSING_HOOK . getValue ( ) ) == MISSING_HOOK . getValue ( ) ; }
",,
1068,"public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value = parser . getBooleanValue ( ) ; clearPeek ( ) ; return value ; }
","public boolean METHOD_1 ( ) throws IOException { METHOD_2 ( ) ; boolean value = parser . VAR_1 ( ) ; METHOD_3 ( ) ; return value ; }
","public boolean METHOD_1 ( ) throws IOException { METHOD_2 ( ) ; boolean value ; try { value = parser . VAR_3 ( ) ; } catch ( TYPE_1 e ) { value = false ; } METHOD_3 ( ) ; return value ; }
",,,"public boolean METHOD_1 ( ) throws IOException { METHOD_2 ( ) ; try { value = parser . VAR_1 ( ) ; } catch ( TYPE_1 e ) { value = Boolean . VAR_2 ( parser . VAR_3 ( ) ) ; } METHOD_3 ( ) ; return value ; }
",,,"public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value ; try { if ( parser . getCurrentToken ( ) == JsonToken . VALUE_TRUE || parser . getCurrentToken ( ) == JsonToken . VALUE_FALSE ) { value = parser . getBooleanValue ( ) ; } else { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } } catch ( JsonParseException e ) { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } clearPeek ( ) ; return value ; }
",,,"public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value ; try { if ( parser . getCurrentToken ( ) == JsonToken . VALUE_TRUE || parser . getCurrentToken ( ) == JsonToken . VALUE_FALSE ) { value = parser . getBooleanValue ( ) ; } else { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } } catch ( JsonParseException e ) { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } clearPeek ( ) ; return value ; }
",,,"public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value ; try { value = parser . getBooleanValue ( ) ; } catch ( JsonParseException e ) { value = Boolean . parseBoolean ( parser . getValueAsString ( ) ) ; } clearPeek ( ) ; return value ; }
",,
1080,"public FBOConfig getFboConfig ( ResourceUrn fboName ) { FBOConfig fboConfig = fboConfigs . get ( fboName ) ; if ( fboConfig == null ) { logger . warn ( ""Failed to retrieve FBOConfig '"" + fboName + ""' ! "" ) ; } return fboConfig ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { logger . warn ( STRING_1 + VAR_1 + STRING_2 ) ; } return VAR_2 ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { logger . warn ( STRING_1 + VAR_1 + STRING_2 ) ; } return VAR_2 ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 == null ) { logger . warn ( STRING_1 + VAR_1 + STRING_2 ) ; VAR_2 = VAR_3 . get ( VAR_1 ) ; } return VAR_2 ; }
",,,"public FBOConfig getFboConfig ( ResourceUrn fboName ) { FBOConfig fboConfig = fboConfigs . get ( fboName ) ; if ( fboConfig == null ) { logger . warning ( ""Failed to retrieve FBOConfig '"" + fboName + ""' ! "" ) ; } return fboConfig ; }
",,,"public FBOConfig getFboConfig ( ResourceUrn fboName ) { FBOConfig fboConfig = fboConfigs . get ( fboName ) ; if ( fboConfig == null ) { logger . warning ( ""Failed to retrieve FBOConfig '"" + fboName + ""' ! "" ) ; } return fboConfig ; }
",,,"public FBOConfig getFboConfig ( ResourceUrn fboName ) { FBOConfig fboConfig = fboConfigs . get ( fboName ) ; if ( fboConfig == null ) { logger . warning ( ""Failed to retrieve FBOConfig '"" + fboName + ""' ! "" ) ; } return fboConfig ; }
",,
1090,"public WorkspaceItem build ( ) { return workspaceItem ; }
","public TYPE_1 build ( ) { return VAR_1 ; }
","public TYPE_1 build ( ) { return VAR_1 ; }
",,,"public TYPE_1 build ( ) { return VAR_1 ; }
",,,"public WorkspaceItem build ( ) { return workspaceItem ; }
",,,"public WorkspaceItem build ( ) { return workspaceItem ; }
",,,"public WorkspaceItem build ( ) { return workspaceItem ; }
",,
1095,"public void setActionConfirmationMessage ( String message ) { boolean isNonEmptyMessage = message != null ; if ( isNonEmptyMessage ) { actionConfirmationMessage . setText ( message ) ; } }
","public void METHOD_1 ( String message ) { boolean VAR_1 = message != null ; if ( VAR_1 ) { VAR_2 . setText ( message ) ; } }
","public void METHOD_1 ( String message ) { boolean VAR_1 = message != null ; VAR_2 . setText ( message ) ; if ( VAR_1 ) { VAR_2 . METHOD_2 ( VAR_1 ) ; } }
",,,"public void METHOD_1 ( String message ) { boolean VAR_1 = message != null ; VAR_2 . setText ( VAR_1 ? message : """" ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; }
",,,"public void setActionConfirmationMessage ( String message ) { boolean isNonEmptyMessage = message != null ; if ( isNonEmptyMessage ) { actionConfirmationMessage . setText ( message ) ; } actionConfirmationMessage . setVisible ( isNonEmptyMessage ) ; }
",,,"public void setActionConfirmationMessage ( String message ) { boolean isNonEmptyMessage = message != null ; if ( isNonEmptyMessage ) { actionConfirmationMessage . setText ( message ) ; } actionConfirmationMessage . setVisible ( isNonEmptyMessage ) ; } Review : The condition ""isNonEmptyMessage"" will be false when the ""message"" parameter is null .
",,,"public void setActionConfirmationMessage ( String message ) { boolean isNonEmptyMessage = message != null ; if ( isNonEmptyMessage ) { actionConfirmationMessage . setText ( message ) ; } actionConfirmationMessage . setVisible ( isNonEmptyMessage ) ; }
",,
1096,"public void close ( ) throws InterruptedException { close ( false ) ; }
","public void close ( ) throws InterruptedException { close ( false ) ; }
","public void close ( ) throws InterruptedException { close ( false ) ; }
",,,"public void close ( ) throws InterruptedException { close ( false , false ) ; }
",,,"public void close ( ) throws InterruptedException { close ( false ) ; }
",,,"private String buildMessage ( int from , int to , int total ) { if ( total > 0 ) { return messages . fromIndexToIndexOfTotalCount ( from , to , total ) ; } else { return messages . fromIndexToIndex ( from , to ) ; } } public void claimTaskCmdExecutorTest ( ) { ClaimTaskCmd claimTaskCmd = new ClaimTaskCmd ( ""taskId"" , ""assignee"" ) ; assertThat ( claimTaskCmdExecutor . getHandledType ( ) ) . isEqualTo ( ClaimTaskCmd . class ) ; claimTaskCmdExecutor . execute ( claimTaskCmd ) ; verify ( processEngine ) . claimTask ( claimTaskCmd ) ; verify ( commandResults ) . send ( ArgumentMatchers . < Message < ClaimTaskResults > > any ( ) ) ; } public Jackson2Annotator ( GenerationConfig generationConfig ) { super ( generationConfig ) ; } public void close ( ) throws InterruptedException { close ( false ) ; }
",,,"public void close ( ) throws InterruptedException { close ( false ) ; }
",,
1098,"public void update ( int inputIndex ) { status . setTargetOutputRowCount ( super . update ( inputIndex , status . getOutPosition ( ) ) ) ; logger . debug ( ""BATCH_STATS , incoming { } : { } "" , inputIndex == 0 ? ""left"" : ""right"" , getRecordBatchSizer ( inputIndex ) ) ; }
","public void update ( int VAR_1 ) { status . VAR_2 ( super . update ( VAR_1 , status . VAR_3 ( ) ) ) ; logger . debug ( STRING_1 , VAR_1 == 0 ? STRING_2 : STRING_3 , METHOD_1 ( VAR_1 ) ) ; }
","public void update ( int VAR_1 ) { status . VAR_2 ( super . update ( VAR_1 , status . VAR_3 ( ) ) ) ; logger . debug ( STRING_1 , VAR_1 == 0 ? STRING_2 : STRING_3 , METHOD_1 ( VAR_1 ) ) ; }
",,,"public void update ( int VAR_1 ) { status . VAR_2 ( super . update ( VAR_1 , status . VAR_3 ( ) ) ) ; logger . debug ( STRING_1 , VAR_1 == 0 ? STRING_2 : STRING_3 , METHOD_1 ( VAR_1 ) ) ; }
",,,"public void update ( int inputIndex ) { status . setTargetOutputRowCount ( super . update ( inputIndex , status . getOutPosition ( ) ) ) ; logger . debug ( ""BATCH_STATS , incoming { } : { } "" , inputIndex == 0 ? ""left"" : ""right"" , getRecordBatchSizer ( inputIndex ) ) ; }
",,,"public void update ( int inputIndex ) { status . setTargetOutputRowCount ( super . update ( inputIndex , status . getOutPosition ( ) ) ) ; logger . debug ( ""BATCH_STATS , incoming { } : { } "" , inputIndex == 0 ? ""left"" : ""right"" , getRecordBatchSizer ( inputIndex ) ) ; }
",,,"public void update ( int inputIndex ) { status . setTargetOutputRowCount ( super . update ( inputIndex , status . getOutPosition ( ) ) ) ; logger . debug ( ""BATCH_STATS , incoming { } : { } "" , inputIndex == 0 ? ""left"" : ""right"" , getRecordBatchSizer ( inputIndex ) ) ; }
",,
1099,"private int getNextPosition ( ) throws CoreException { if ( nextMemberPosition < 0 ) { nextMemberPosition = 0 ; while ( nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord ( nextMemberPosition ) != 0 ) { nextMemberPosition ++ ; } } return nextMemberPosition ; }
","private int METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 < 0 ) { VAR_1 = 0 ; while ( VAR_1 < VAR_2 && METHOD_2 ( VAR_1 ) != 0 ) { VAR_1 ++ ; } } return VAR_1 ; }
","private int METHOD_1 ( ) throws TYPE_1 { while ( VAR_1 < VAR_2 && METHOD_2 ( VAR_1 ) != 0 ) { VAR_1 ++ ; } return VAR_1 ; }
",,,"private int METHOD_1 ( ) throws TYPE_1 { if ( VAR_1 == - 1 ) { VAR_1 = 0 ; while ( VAR_1 < VAR_2 && METHOD_2 ( VAR_1 ) != 0 ) { VAR_1 ++ ; } } return VAR_1 ; }
",,,"private int getNextPosition ( ) throws CoreException { if ( nextMemberPosition < 0 ) { nextMemberPosition = 0 ; while ( nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord ( nextMemberPosition ) != 0 ) { nextMemberPosition ++ ; } } return nextMemberPosition ; }
",,,"private int getNextPosition ( ) throws CoreException { if ( nextMemberPosition < 0 ) { nextMemberPosition = 0 ; while ( nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord ( nextMemberPosition ) != 0 ) { nextMemberPosition ++ ; } } return nextMemberPosition ; }
",,,"private int getNextPosition ( ) throws CoreException { if ( nextMemberPosition < 0 ) { nextMemberPosition = 0 ; while ( nextMemberPosition < MAX_MEMBER_COUNT && getMemberRecord ( nextMemberPosition ) != 0 ) { nextMemberPosition ++ ; } } return nextMemberPosition ; }
",,
1101,"public int size ( ) { int size = 0 ; // We have to loop through to make sure to remove expired entries for ( Iterator < InternalCacheEntry < K , V > > iter = iterator ( ) ; iter . hasNext ( ) ; ) { iter . next ( ) ; if ( ++ size == Integer . MAX_VALUE ) return Integer . MAX_VALUE ; } return size ; }
","public int size ( ) { int size = 0 ; for ( Iterator < TYPE_1 < TYPE_2 , TYPE_3 > > VAR_1 = iterator ( ) ; VAR_1 . hasNext ( ) ; ) { VAR_1 . next ( ) ; if ( ++ size == Integer . VAR_2 ) return Integer . VAR_2 ; } return size ; }
","public int size ( ) { int size = 0 ; for ( TYPE_1 < TYPE_2 , TYPE_3 > VAR_1 = iterator ( ) ; VAR_1 . hasNext ( ) ; ) { if ( VAR_1 . next ( ) . getValue ( ) == null ) continue ; if ( ++ size == Integer . VAR_2 ) return Integer . VAR_2 ; } return size ; }
",,,"public int size ( ) { int size = 0 ; for ( Iterator < TYPE_1 < TYPE_2 , TYPE_3 > > VAR_1 = iterator ( ) ; VAR_1 . hasNext ( ) ; ) { if ( VAR_1 . next ( ) . getValue ( ) == null ) continue ; if ( ++ size == Integer . VAR_2 ) return Integer . VAR_2 ; } return size ; }
",,,"public int size ( ) { int size = 0 ; for ( InternalCacheEntry < K , V > entry : this ) { if ( entry . getValue ( ) != null ) { size ++ ; } if ( size == Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } } return size ; }
",,,"public int size ( ) { int size = 0 ; for ( InternalCacheEntry < K , V > entry : this ) { if ( entry . getValue ( ) == null ) { continue ; } if ( ++ size == Integer . MAX_VALUE ) { return Integer . MAX_VALUE ; } } return size ; }
",,,"public int size ( ) { int size = 0 ; // We have to loop through to make sure to remove expired entries for ( Iterator < InternalCacheEntry < K , V > > iter = iterator ( ) ; iter . hasNext ( ) ; ) { if ( iter . next ( ) . getValue ( ) == null ) continue ; if ( ++ size == Integer . MAX_VALUE ) return Integer . MAX_VALUE ; } return size ; }
",,
1102,"public static File getDiskCacheDir ( Context context , String uniqueName ) { // Check if media is mounted or storage is built - in , if so , try and use external cache dir // otherwise use internal cache dir . final String cachePath ; if ( Environment . MEDIA_MOUNTED . equals ( Environment . getExternalStorageState ( ) ) && context . getExternalCacheDir ( ) != null ) { cachePath = context . getExternalCacheDir ( ) . getPath ( ) ; } else { cachePath = context . getCacheDir ( ) . getPath ( ) ; } return new File ( cachePath + File . separator + uniqueName ) ; }
","public static File METHOD_1 ( Context context , String VAR_1 ) { final String VAR_2 ; if ( TYPE_1 . TYPE_3 . equals ( TYPE_1 . METHOD_2 ( ) ) && context . VAR_3 ( ) != null ) { VAR_2 = context . VAR_3 ( ) . getPath ( ) ; } else { VAR_2 = context . VAR_4 ( ) . getPath ( ) ; } return new File ( VAR_2 + File . VAR_5 + VAR_1 ) ; }
","public static File METHOD_1 ( Context context , String VAR_1 ) { final String VAR_2 ; if ( TYPE_1 . TYPE_3 . equals ( TYPE_1 . TYPE_3 ) && context . VAR_3 ( ) != null ) { VAR_2 = context . VAR_3 ( ) . getPath ( ) ; } else { VAR_2 = context . VAR_4 ( ) . getPath ( ) ; } return new File ( VAR_2 + File . VAR_5 + VAR_1 ) ; }
",,,"public static File METHOD_1 ( Context context , String VAR_1 ) { final String VAR_2 ; if ( TYPE_1 . TYPE_3 . equals ( context . VAR_4 ( ) ) ) { VAR_2 = context . VAR_3 ( ) . getPath ( ) ; } else { VAR_2 = context . VAR_4 ( ) . getPath ( ) ; } return new File ( VAR_2 + File . VAR_5 + VAR_1 ) ; }
",,,"public static File getDiskCacheDir ( Context context , String uniqueName ) { final String cachePath ; if ( context . getExternalCacheDir ( ) != null && Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ) { cachePath = context . getExternalCacheDir ( ) . getPath ( ) ; } else { cachePath = context . getCacheDir ( ) . getPath ( ) ; } return new File ( cachePath + File . separator + uniqueName ) ; }
",,,"public static File getDiskCacheDir ( Context context , String uniqueName ) { final String cachePath ; if ( context . getExternalCacheDir ( ) != null && Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ) { cachePath = context . getExternalCacheDir ( ) . getPath ( ) ; } else { cachePath = context . getCacheDir ( ) . getPath ( ) ; } return new File ( cachePath + File . separator + uniqueName ) ; }
",,,"public static File getDiskCacheDir ( Context context , String uniqueName ) { // Check if media is mounted or storage is built - in , if so , try and use external cache dir // otherwise use internal cache dir . final String cachePath ; if ( context . getExternalCacheDir ( ) != null && Environment . getExternalStorageState ( ) . equals ( Environment . MEDIA_MOUNTED ) ) { cachePath = context . getExternalCacheDir ( ) . getPath ( ) ; } else { cachePath = context . getCacheDir ( ) . getPath ( ) ; } return new File ( cachePath + File . separator + uniqueName ) ; }
",,
1103,"public static String getBucketName ( URI uri ) { if ( uri . getHost ( ) != null ) { return uri . getHost ( ) ; } if ( uri . getUserInfo ( ) == null ) { return uri . getAuthority ( ) ; } throw new IllegalArgumentException ( ""Unable to determine S3 bucket from URI . "" ) ; }
","public static String METHOD_1 ( TYPE_1 uri ) { if ( uri . VAR_1 ( ) != null ) { return uri . VAR_1 ( ) ; } if ( uri . VAR_2 ( ) == null ) { return uri . VAR_3 ( ) ; } throw new IllegalArgumentException ( STRING_1 ) ; }
","private String METHOD_1 ( TYPE_1 uri ) { if ( uri . VAR_1 ( ) != null ) { return uri . VAR_1 ( ) ; } else if ( uri . VAR_2 ( ) == null ) { return uri . VAR_3 ( ) ; } throw new IllegalArgumentException ( STRING_1 ) ; }
",,,"private String METHOD_1 ( TYPE_1 uri ) { if ( uri . VAR_1 ( ) != null ) { return uri . VAR_1 ( ) ; } else if ( uri . VAR_2 ( ) == null ) { return uri . VAR_3 ( ) ; } throw new IllegalArgumentException ( STRING_1 ) ; }
",,,"private String getBucketName ( URI uri ) { if ( uri . getHost ( ) != null ) { return uri . getHost ( ) ; } else if ( uri . getUserInfo ( ) == null ) { return uri . getAuthority ( ) ; } throw new IllegalArgumentException ( ""Unable to determine S3 bucket from URI . "" ) ; }
",,,"private String getBucketName ( URI uri ) { if ( uri . getHost ( ) != null ) { return uri . getHost ( ) ; } else if ( uri . getUserInfo ( ) == null ) { return uri . getAuthority ( ) ; } throw new IllegalArgumentException ( ""Unable to determine S3 bucket from URI . "" ) ; }
",,,"private String getBucketName ( URI uri ) { if ( uri . getHost ( ) != null ) { return uri . getHost ( ) ; } else if ( uri . getUserInfo ( ) == null ) { return uri . getAuthority ( ) ; } throw new IllegalArgumentException ( ""Unable to determine S3 bucket from URI . "" ) ; }
",,
1115,"private String getThemePrefixedPath ( String path ) { String prefix = themeProperties != null ? themeProperties . get ( IntroTheme . ATT_ID ) : null ; prefix = prefix == null ? """" : prefix . trim ( ) ; // $NON - NLS - 1$ if ( prefix . length ( ) == 0 ) { return null ; } return prefix + Path . SEPARATOR + path ; }
","private String METHOD_1 ( String path ) { String VAR_1 = VAR_2 != null ? VAR_2 . get ( TYPE_1 . VAR_4 ) : null ; VAR_1 = VAR_1 == null ? """" : VAR_1 . trim ( ) ; if ( VAR_1 . length ( ) == 0 ) { return null ; } return VAR_1 + Path . VAR_5 + path ; }
","private String METHOD_1 ( String path ) { String VAR_1 = VAR_2 != null ? VAR_2 . get ( TYPE_1 . VAR_4 ) : null ; VAR_1 = VAR_1 == null ? """" : VAR_1 . trim ( ) ; if ( VAR_1 . length ( ) == 0 ) { return null ; } return VAR_1 + path == Path . VAR_5 ? VAR_1 + path : VAR_1 + Path . VAR_5 + path ; }
",,,"private String METHOD_1 ( String path ) { String VAR_1 = VAR_2 != null ? VAR_2 . get ( TYPE_1 . VAR_4 ) : null ; VAR_1 = VAR_1 == null ? """" : VAR_1 . trim ( ) ; if ( VAR_1 . length ( ) == 0 ) { return null ; } return VAR_1 . METHOD_2 ( VAR_1 . length ( ) - 1 ) == Path . VAR_5 ? VAR_1 + path : VAR_1 + Path . VAR_5 + path ; }
",,,"private String getThemePrefixedPath ( String path ) { String prefix = themeProperties != null ? themeProperties . get ( IntroTheme . ATT_ID ) : null ; prefix = prefix == null ? """" : prefix . trim ( ) ; if ( prefix . isEmpty ( ) ) { return null ; } return prefix + ( prefix . charAt ( prefix . length ( ) - 1 ) == Path . SEPARATOR ? """" : Path . SEPARATOR ) + path ; }
",,,"private String getThemePrefixedPath ( String path ) { String prefix = themeProperties != null ? themeProperties . get ( IntroTheme . ATT_ID ) : null ; prefix = prefix == null ? """" : prefix . trim ( ) ; if ( prefix . length ( ) == 0 ) { return null ; } return prefix + Path . SEPARATOR + path ; }
",,,"private String getThemePrefixedPath ( String path ) { String prefix = themeProperties != null ? themeProperties . get ( IntroTheme . ATT_ID ) : null ; prefix = prefix == null ? """" : prefix . trim ( ) ; // $NON - NLS - 1$ if ( prefix . length ( ) == 0 ) { return null ; } return prefix + Path . SEPARATOR + path ; }
",,
1118,"private static void merge ( AggregatedCalledFunction destination , AggregatedCalledFunction source ) { long sourceDuration = source . getDuration ( ) ; long sourceSelfTime = source . getSelfTime ( ) ; destination . addToDuration ( sourceDuration ) ; destination . addToSelfTime ( sourceSelfTime ) ; destination . fStatistics . update ( source . fStatistics . getMaxSegment ( ) , source . fStatistics . getMinSegment ( ) , sourceDuration , sourceSelfTime ) ; // merge the children callees . mergeChildren ( destination , source ) ; }
","private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 source ) { long VAR_2 = source . VAR_3 ( ) ; long VAR_4 = source . VAR_5 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_1 . VAR_6 . update ( source . VAR_6 . METHOD_4 ( ) , source . VAR_6 . METHOD_5 ( ) , VAR_2 , VAR_4 ) ; METHOD_6 ( VAR_1 , source ) ; }
","private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 source ) { long VAR_2 = source . VAR_3 ( ) ; long VAR_4 = source . VAR_5 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; METHOD_6 ( VAR_1 , source ) ; }
",,,"private static void METHOD_1 ( TYPE_1 VAR_1 , TYPE_1 source ) { long VAR_2 = source . VAR_3 ( ) ; long VAR_4 = source . VAR_5 ( ) ; VAR_1 . METHOD_2 ( VAR_2 ) ; VAR_1 . METHOD_3 ( VAR_4 ) ; VAR_1 . VAR_6 . update ( source . VAR_6 . METHOD_4 ( ) , source . VAR_6 . METHOD_5 ( ) ) ; METHOD_6 ( VAR_1 , source ) ; }
",,,"private static void merge ( AggregatedCalledFunction destination , AggregatedCalledFunction source ) { long sourceDuration = source . getDuration ( ) ; long sourceSelfTime = source . getSelfTime ( ) ; destination . addToDuration ( sourceDuration ) ; destination . addToSelfTime ( sourceSelfTime ) ; destination . fStatistics . update ( source . fStatistics . getMaxSegment ( ) , source . fStatistics . getMinSegment ( ) , sourceDuration , sourceSelfTime ) ; mergeChildren ( destination , source ) ; }
",,,"private static void merge ( AggregatedCalledFunction destination , AggregatedCalledFunction source ) { long sourceDuration = source . getDuration ( ) ; long sourceSelfTime = source . getSelfTime ( ) ; destination . addToDuration ( sourceDuration ) ; destination . addToSelfTime ( sourceSelfTime ) ; destination . fStatistics . update ( source . fStatistics . getMaxSegment ( ) , source . fStatistics . getMinSegment ( ) , sourceDuration , sourceSelfTime ) ; mergeChildren ( destination , source ) ; }
",,,"private static void merge ( AggregatedCalledFunction destination , AggregatedCalledFunction source ) { long sourceDuration = source . getDuration ( ) ; long sourceSelfTime = source . getSelfTime ( ) ; destination . addToDuration ( sourceDuration ) ; destination . addToSelfTime ( sourceSelfTime ) ; destination . fStatistics . update ( source . fStatistics . getMaxSegment ( ) , source . fStatistics . getMinSegment ( ) , sourceDuration , sourceSelfTime ) ; // merge the children callees . mergeChildren ( destination , source ) ; }
",,
1120,"public SpiTransaction createServerTransaction ( boolean isExplicit , int isolationLevel ) { SpiTransaction t = transactionManager . createTransaction ( isExplicit , isolationLevel ) ; if ( isExplicit ) { try { transactionScopeManager . set ( t ) ; } catch ( PersistenceException existingTransactionError ) { t . end ( ) ; throw existingTransactionError ; } } return t ; }
","public TYPE_1 METHOD_1 ( boolean VAR_1 , int VAR_2 ) { TYPE_1 t = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( VAR_1 ) { try { VAR_4 . set ( t ) ; } catch ( TYPE_2 VAR_5 ) { t . VAR_6 ( ) ; throw VAR_5 ; } } return t ; }
","public TYPE_1 METHOD_1 ( boolean VAR_1 , int VAR_2 ) { TYPE_1 t = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ! VAR_1 ) { VAR_4 . set ( t ) ; } return t ; }
",,,"public TYPE_1 METHOD_1 ( boolean VAR_1 , int VAR_2 ) { TYPE_1 t = VAR_3 . METHOD_2 ( VAR_1 , VAR_2 ) ; if ( ! VAR_1 ) { try { VAR_4 . set ( t ) ; } catch ( TYPE_2 VAR_5 ) { t . VAR_6 ( ) ; throw VAR_5 ; } return t ; }
",,,"public SpiTransaction createServerTransaction ( boolean isExplicit , int isolationLevel ) { SpiTransaction t = transactionManager . createTransaction ( isExplicit , isolationLevel ) ; if ( ! isExplicit ) { try { transactionScopeManager . set ( t ) ; } catch ( PersistenceException existingTransactionError ) { t . end ( ) ; throw existingTransactionError ; } } return t ; }
",,,"public SpiTransaction createServerTransaction ( boolean isExplicit , int isolationLevel ) { SpiTransaction t = transactionManager . createTransaction ( isExplicit , isolationLevel ) ; if ( ! isExplicit ) { try { transactionScopeManager . set ( t ) ; } catch ( PersistenceException existingTransactionError ) { t . end ( ) ; throw existingTransactionError ; } } return t ; }
",,,"public SpiTransaction createServerTransaction ( boolean isExplicit , int isolationLevel ) { SpiTransaction t = transactionManager . createTransaction ( isExplicit , isolationLevel ) ; if ( ! isExplicit ) { try { transactionScopeManager . set ( t ) ; } catch ( PersistenceException existingTransactionError ) { t . end ( ) ; throw existingTransactionError ; } } return t ; }
",,
1136,"public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; if ( build ) { this . build = build ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , Integer VAR_3 , Boolean build ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; if ( build ) { this . build = build ; } }
","public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , Integer VAR_3 , Boolean build ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; this . VAR_4 = build ; }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 , TYPE_2 VAR_2 , Integer VAR_3 , Boolean build ) { this . VAR_1 = VAR_1 ; this . VAR_2 = VAR_2 ; this . VAR_3 = VAR_3 ; if ( build ) { this . build = build ; } else { this . VAR_4 = null ; } }
",,,"public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; this . build = build ; }
",,,"public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; this . build = build ; }
",,,"public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; // ? ? ? if ( build ) { this . build = build ; } else { this . building = build ; } }
",,
1140,"private Menu fillMenu ( Menu m ) { for ( IContributionItem item : getActions ( ) ) { item . fill ( m , - 1 ) ; } return m ; }
","private TYPE_1 METHOD_1 ( TYPE_1 m ) { for ( TYPE_3 item : METHOD_2 ( ) ) { item . VAR_3 ( m , - 1 ) ; } return m ; }
","private TYPE_1 METHOD_1 ( TYPE_1 m ) { for ( TYPE_2 action : METHOD_2 ( ) ) { TYPE_3 item = action . VAR_2 ( ) ; if ( VAR_1 == null || VAR_1 . isEmpty ( ) ) { item = new TYPE_4 ( ) ; } else { item = new TYPE_5 ( action ) ; } item . VAR_3 ( m , - 1 ) ; } return m ; }
",,,"private TYPE_1 METHOD_1 ( TYPE_1 m ) { for ( TYPE_2 action : METHOD_2 ( ) ) { TYPE_3 item ; String VAR_1 = action . VAR_2 ( ) ; if ( VAR_1 == null || VAR_1 . isEmpty ( ) ) { item = new TYPE_4 ( ) ; } else { item = new TYPE_5 ( action ) ; } item . VAR_3 ( m , - 1 ) ; } return m ; }
",,,"private Menu fillMenu ( Menu m ) { for ( ContributionItem item : getActions ( ) ) { if ( item instanceof ActionContributionItem ) { ActionContributionItem actionItem = ( ActionContributionItem ) item ; String actionText = actionItem . getAction ( ) . getText ( ) ; if ( actionText == null || actionText . isEmpty ( ) ) { item = new Separator ( ) ; } } item . fill ( m , - 1 ) ; } return m ; }
",,,"public Menu fillMenu ( Menu m ) { for ( IAction action : getActions ( ) ) { IContributionItem item ; String actionText = action . getText ( ) ; if ( actionText == null || actionText . isEmpty ( ) ) { item = new Separator ( ) ; } else { item = new ActionContributionItem ( action ) ; } item . fill ( m , - 1 ) ; } return m ; }
",,,"private Menu fillMenu ( Menu m ) { for ( IAction action : getActions ( ) ) { IContributionItem item ; String actionText = action . getText ( ) ; if ( actionText == null || actionText . isEmpty ( ) ) { item = new Separator ( ) ; } else { item = new ActionContributionItem ( action ) ; } item . fill ( m , - 1 ) ; } return m ; }
",,
1145,"public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; }
","public TYPE_1 METHOD_1 ( ) { return VAR_1 . start ( ) ; }
","public TYPE_1 METHOD_1 ( ) { return VAR_1 . start ( ) ; }
",,,"public TYPE_1 METHOD_1 ( ) { return VAR_1 . start ( ) ; }
",,,"@Override public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; }
",,,"public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; }
",,,"@Override public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; }
",,
1149,"public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; return this ; }
","public TYPE_1 METHOD_1 ( Boolean VAR_1 ) { set ( VAR_2 , VAR_1 ) ; return this ; }
","public TYPE_1 METHOD_1 ( Boolean VAR_1 ) { set ( VAR_2 , VAR_1 ) ; METHOD_2 ( true ) ; return this ; }
",,,"public TYPE_1 METHOD_1 ( Boolean VAR_1 ) { set ( VAR_2 , VAR_1 ) ; return this ; }
",,,"public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; return this ; } // In the calling if ( isLabelAttr != null && isLabelAttr ) { attribute . setNillable ( false ) ; } attribute . setLabelAttribute ( isLabelAttr ) ;
",,,"public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; if ( isLabelAttr != null && isLabelAttr ) { setNillable ( false ) ; } return this ; } Review : We usually don't put the logic in the entity class .
",,,"public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; if ( isLabelAttr != null && isLabelAttr ) { setNillable ( false ) ; } return this ; }
",,
1151,"public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; try { return callback . withHandle ( h ) ; } finally { JdbiUtil . closeIfNeeded ( h ) ; } }
","public < R , TYPE_1 extends Exception > R METHOD_1 ( TYPE_2 < R , TYPE_1 > VAR_1 ) throws TYPE_1 { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; try { return VAR_1 . METHOD_1 ( VAR_2 ) ; } finally { TYPE_4 . METHOD_3 ( VAR_2 ) ; } }
","public < R , TYPE_1 extends Exception > R METHOD_1 ( TYPE_2 < R , TYPE_1 > VAR_1 ) throws TYPE_1 { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; R result = VAR_1 . METHOD_1 ( VAR_2 ) ; return result ; }
",,,"public < R , TYPE_1 extends Exception > R METHOD_1 ( TYPE_2 < R , TYPE_1 > VAR_1 ) throws TYPE_1 { TYPE_3 VAR_2 = TYPE_4 . METHOD_2 ( VAR_3 ) ; try { return VAR_1 . METHOD_1 ( VAR_2 ) ; } finally { TYPE_4 . METHOD_3 ( VAR_2 ) ; } }
",,,"public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; R result = callback . withHandle ( h ) ; return result ; }
",,,"public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; R result = callback . withHandle ( h ) ; return result ; }
",,,"public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; R result = callback . withHandle ( h ) ; return result ; }
",,
1152,"private LanguageServerWrapper ( @Nullable IProject project , @NonNull LanguageServerDefinition serverDefinition , @Nullable IPath initialPath ) { this . initialProject = project ; this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }
","private TYPE_4 ( ANNOTATION_1 TYPE_1 project , ANNOTATION_2 TYPE_2 VAR_2 , ANNOTATION_1 TYPE_3 VAR_3 ) { this . VAR_4 = project ; this . VAR_3 = VAR_3 ; this . VAR_5 = new HashSet < > ( ) ; this . VAR_2 = VAR_2 ; this . VAR_6 = new HashMap < > ( ) ; }
","public TYPE_4 ( ANNOTATION_1 TYPE_1 project , ANNOTATION_2 TYPE_2 VAR_2 , ANNOTATION_1 TYPE_3 VAR_3 ) { this . VAR_4 = project ; this . VAR_3 = VAR_3 ; this . VAR_5 = new HashSet < > ( ) ; this . VAR_2 = VAR_2 ; this . VAR_6 = new HashMap < > ( ) ; }
",,,"public TYPE_4 ( ANNOTATION_1 TYPE_1 project , ANNOTATION_2 TYPE_2 VAR_2 , ANNOTATION_1 TYPE_3 VAR_3 ) { this . VAR_4 = project ; this . VAR_3 = VAR_3 ; this . VAR_5 = new HashSet < > ( ) ; this . VAR_2 = VAR_2 ; this . VAR_6 = new HashMap < > ( ) ; }
",,,"public LanguageServerWrapper ( @NonNull LanguageServerDefinition serverDefinition , @Nullable IPath initialPath ) { this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }
",,,"public LanguageServerWrapper ( @Nullable IPath initialPath , @NonNull LanguageServerDefinition serverDefinition ) { this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }
",,,"public LanguageServerWrapper ( @NonNull LanguageServerDefinition serverDefinition , @Nullable IPath initialPath ) { this . initialProject = project ; this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }
",,
1157,"public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , ""onReceiveHangUpFromUser userId = "" + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , ""setAnotherUserToFullScreen call userId = "" + userId ) ; setAnotherUserToFullScreen ( ) ; } } }
","public void METHOD_1 ( TYPE_1 session , Integer VAR_1 ) { METHOD_2 ( VAR_1 , getString ( R . string . VAR_2 ) ) ; Log . d ( TAG , STRING_1 + VAR_1 ) ; if ( ! VAR_3 ) { if ( VAR_1 == VAR_4 ) { Log . d ( TAG , STRING_2 + VAR_1 ) ; METHOD_3 ( ) ; } } }
","public void METHOD_1 ( TYPE_1 session , Integer VAR_1 ) { METHOD_2 ( VAR_1 , getString ( R . string . VAR_2 ) ) ; Log . d ( TAG , STRING_1 + VAR_1 ) ; if ( ! VAR_3 ) { if ( VAR_1 == VAR_4 ) { Log . d ( TAG , STRING_2 + VAR_1 ) ; METHOD_3 ( ) ; } } }
",,,"public void METHOD_1 ( TYPE_1 session , Integer VAR_1 ) { METHOD_2 ( VAR_1 , getString ( R . string . VAR_2 ) ) ; Log . d ( TAG , STRING_1 + VAR_1 ) ; if ( ! VAR_3 ) { if ( VAR_1 == VAR_4 ) { Log . d ( TAG , STRING_2 + VAR_1 ) ; METHOD_3 ( ) ; } } }
",,,"public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , ""onReceiveHangUpFromUser userId = "" + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , ""setAnotherUserToFullScreen call userId = "" + userId ) ; setAnotherUserToFullScreen ( ) ; } if ( videoTrackMap != null && videoTrackMap . containsKey ( userId ) ) { Log . d ( TAG , ""onReceiveHangUpFromUser videoTrackMap . remove ( userId ) = "" + userId ) ; videoTrackMap . remove ( userId ) ; } } }
",,,"public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , ""onReceiveHangUpFromUser userId = "" + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , ""setAnotherUserToFullScreen call userId = "" + userId ) ; setAnotherUserToFullScreen ( ) ; } if ( videoTrackMap != null && videoTrackMap . containsKey ( userId ) ) { Log . d ( TAG , ""onReceiveHangUpFromUser videoTrackMap . remove ( userId ) = "" + userId ) ; videoTrackMap . remove ( userId ) ; } } }
",,,"public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , ""onReceiveHangUpFromUser userId = "" + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , ""setAnotherUserToFullScreen call userId = "" + userId ) ; setAnotherUserToFullScreen ( ) ; } } }
",,
1168,"private boolean isHostedEngineDirectLunDisk ( ) { return disk . getDiskStorageType ( ) == DiskStorageType . LUN && StorageConstants . HOSTED_ENGINE_LUN_DISK_ALIAS . equals ( disk . getDiskAlias ( ) ) ; }
","private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) == TYPE_4 . VAR_3 && TYPE_2 . TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ; }
","private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) == TYPE_4 . VAR_3 && TYPE_2 . TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ; }
",,,"private boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) == TYPE_4 . VAR_3 && TYPE_2 . TYPE_3 . equals ( VAR_1 . METHOD_3 ( ) ) ; }
",,,"private boolean isHostedEngineDirectLunDisk ( ) { return disk . getDiskStorageType ( ) == DiskStorageType . LUN && StorageConstants . HOSTED_ENGINE_LUN_DISK_ALIAS . equals ( disk . getDiskAlias ( ) ) ; }
",,,"private boolean isHostedEngineDirectLunDisk ( ) { return disk . getDiskStorageType ( ) == DiskStorageType . LUN && StorageConstants . HOSTED_ENGINE_LUN_DISK_ALIAS . equals ( disk . getDiskAlias ( ) ) ; }
",,,"private boolean isHostedEngineDirectLunDisk ( ) { return disk . getDiskStorageType ( ) == DiskStorageType . LUN && StorageConstants . HOSTED_ENGINE_LUN_DISK_ALIAS . equals ( disk . getDiskAlias ( ) ) ; }
",,
1174,"protected void executeQueryCommand ( ) { List < Disk > diskList = DbFacade . getInstance ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getVmId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) ) ; if ( CollectionUtils . isEmpty ( diskList ) ) { setReturnValue ( diskList ) ; return ; } setReturnValue ( filterDisks ( diskList ) ) ; }
","protected void METHOD_1 ( ) { List < TYPE_1 > VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) ; if ( TYPE_3 . isEmpty ( VAR_1 ) ) { METHOD_8 ( VAR_1 ) ; return ; } METHOD_8 ( METHOD_9 ( VAR_1 ) ) ; }
","protected void METHOD_1 ( ) { List < TYPE_1 > VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) ; METHOD_8 ( METHOD_9 ( VAR_1 ) ) ; }
",,,"protected void METHOD_1 ( ) { List < TYPE_1 > VAR_1 = TYPE_2 . getInstance ( ) . METHOD_2 ( ) . METHOD_3 ( getParameters ( ) . METHOD_4 ( ) , getParameters ( ) . METHOD_5 ( ) , METHOD_6 ( ) , getParameters ( ) . METHOD_7 ( ) ) ; METHOD_8 ( METHOD_9 ( VAR_1 ) ) ; }
",,,"protected void executeQueryCommand ( ) { List < Disk > diskList = DbFacade . getInstance ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getVmId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) ) ; if ( CollectionUtils . isEmpty ( diskList ) ) { setReturnValue ( diskList ) ; return ; } setReturnValue ( filterDisks ( diskList ) ) ; }
",,,"private List < Disk > executeQueryCommand ( ) { List < Disk > diskList = DbFacade . getInstance ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getVmId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) ) ; if ( CollectionUtils . isEmpty ( diskList ) ) { return new ArrayList < > ( ) ; } return filterDisks ( diskList ) ; }
",,,"protected void executeQueryCommand ( ) { List < Disk > diskList = DbFacade . getInstance ( ) . getDiskDao ( ) . getAllAttachableDisksByPoolId ( getParameters ( ) . getStoragePoolId ( ) , getParameters ( ) . getVmId ( ) , getUserID ( ) , getParameters ( ) . isFiltered ( ) ) ; if ( CollectionUtils . isEmpty ( diskList ) ) { return diskList ; return ; } setReturnValue ( filterDisks ( diskList ) ) ; }
",,
1175,"public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent ( Filter filter , List < JoinableClause > clauses , VirtualColumns virtualColumns ) { JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey ( filter , clauses , virtualColumns ) ; return analyses . computeIfAbsent ( key , ( groupKey ) - > { return JoinFilterAnalyzer . computeJoinFilterPreAnalysis ( JoinableClauses . fromList ( clauses ) , virtualColumns , filter , joinFilterRewriteConfig ) ; } ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 filter , List < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 key = new TYPE_5 ( filter , VAR_1 , VAR_2 ) ; return VAR_3 . METHOD_2 ( key , ( VAR_5 ) - > { return TYPE_6 . METHOD_3 ( TYPE_7 . METHOD_4 ( VAR_1 ) , VAR_2 , filter , VAR_6 ) ; } ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 filter , List < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 key = new TYPE_5 ( filter , VAR_1 , VAR_2 ) ; return VAR_3 . METHOD_2 ( key , ( VAR_5 ) - > { return TYPE_6 . METHOD_3 ( TYPE_7 . METHOD_4 ( VAR_1 ) , VAR_2 , filter , VAR_6 ) ; } ) ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 filter , List < TYPE_3 > VAR_1 , TYPE_4 VAR_2 ) { TYPE_5 key = new TYPE_5 ( filter , VAR_1 , VAR_2 ) ; return VAR_3 . METHOD_2 ( key , ( VAR_5 ) - > { return TYPE_6 . METHOD_3 ( TYPE_7 . METHOD_4 ( VAR_1 ) , VAR_2 , filter , VAR_6 ) ; } ) ; }
",,,"public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent ( Filter filter , List < JoinableClause > clauses , VirtualColumns virtualColumns ) { synchronized ( analyses ) { if ( filter != null ) { filter . hashCode ( ) ; } } JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey ( filter , clauses , virtualColumns ) ; return analyses . computeIfAbsent ( key , ( groupKey ) - > JoinFilterAnalyzer . computeJoinFilterPreAnalysis ( JoinableClauses . fromList ( clauses ) , virtualColumns , filter , joinFilterRewriteConfig ) ) ; }
",,,"public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent ( Filter filter , List < JoinableClause > clauses , VirtualColumns virtualColumns ) { synchronized ( analyses ) { if ( filter != null ) { filter . hashCode ( ) ; } } JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey ( filter , clauses , virtualColumns ) ; return analyses . computeIfAbsent ( key , ( groupKey ) - > { return JoinFilterAnalyzer . computeJoinFilterPreAnalysis ( JoinableClauses . fromList ( clauses ) , virtualColumns , filter , joinFilterRewriteConfig ) ; } ) ; }
",,,"public JoinFilterPreAnalysis computeJoinFilterPreAnalysisIfAbsent ( Filter filter , List < JoinableClause > clauses , VirtualColumns virtualColumns ) { // Some filters have potentially expensive hash codes that are lazily computed and cached . // We call hashCode ( ) here in a synchronized block before we attempt to use the Filter in the analyses map , // to ensure that the hashCode is only computed once per Filter since the Filter interface is not thread - safe . synchronized ( analyses ) { if ( filter != null ) { filter . hashCode ( ) ; } } JoinFilterPreAnalysisGroupKey key = new JoinFilterPreAnalysisGroupKey ( filter , clauses , virtualColumns ) ; return analyses . computeIfAbsent ( key , ( groupKey ) - > { return JoinFilterAnalyzer . computeJoinFilterPreAnalysis ( JoinableClauses . fromList ( clauses ) , virtualColumns , filter , joinFilterRewriteConfig ) ; } ) ; }
",,
1184,"private void rematchAllNetworksAndRequests ( ) { // TODO : This may be slow , and should be optimized . final long now = SystemClock . elapsedRealtime ( ) ; final NetworkReassignment changes = computeNetworkReassignment ( ) ; if ( VDBG || DDBG ) log ( changes . toString ( ) ) ; applyNetworkReassignment ( changes , now ) ; }
","private void METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( VAR_3 || VAR_4 ) log ( VAR_2 . toString ( ) ) ; METHOD_4 ( VAR_2 , VAR_1 ) ; }
","private void METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( VAR_3 || VAR_4 ) log ( VAR_2 . toString ( ) ) ; METHOD_4 ( VAR_2 , VAR_5 , VAR_1 ) ; }
",,,"private void METHOD_1 ( ) { final long VAR_1 = TYPE_1 . METHOD_2 ( ) ; final TYPE_2 VAR_2 = METHOD_3 ( ) ; if ( VAR_3 || VAR_4 ) log ( VAR_2 . toString ( ) ) ; METHOD_4 ( VAR_2 , VAR_5 , VAR_1 ) ; }
",,,"private void rematchAllNetworksAndRequests ( ) { final long now = SystemClock . elapsedRealtime ( ) ; final NetworkReassignment changes = computeNetworkReassignment ( ) ; applyNetworkReassignment ( changes , oldDefaultNetwork , now ) ; }
",,,"private void rematchAllNetworksAndRequests ( ) { final long now = SystemClock . elapsedRealtime ( ) ; final NetworkReassignment changes = computeNetworkReassignment ( ) ; log ( changes . toString ( ) ) ; applyNetworkReassignment ( changes , oldDefaultNetwork , now ) ; }
",,,"private void rematchAllNetworksAndRequests ( ) { // TODO : This may be slow , and should be optimized . final long now = SystemClock . elapsedRealtime ( ) ; final NetworkReassignment changes = computeNetworkReassignment ( ) ; if ( VDBG || DDBG ) log ( changes . toString ( ) ) ; applyNetworkReassignment ( changes , oldDefaultNetwork , now ) ; }
",,
1198,"public void unbind ( final String eventName , final SubscriptionEventListener listener ) { validateArguments ( eventName , listener ) ; synchronized ( lock ) { final Set < SubscriptionEventListener > listeners = eventNameToListenerMap . get ( eventName ) ; if ( listeners != null ) { listeners . remove ( listener ) ; if ( listeners . isEmpty ( ) ) { eventNameToListenerMap . remove ( eventName ) ; } } } }
","public void METHOD_1 ( final String VAR_1 , final TYPE_1 listener ) { METHOD_2 ( VAR_1 , listener ) ; synchronized ( VAR_4 ) { final Set < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . remove ( listener ) ; if ( VAR_2 . isEmpty ( ) ) { VAR_3 . remove ( VAR_1 ) ; } } } }
","public void METHOD_1 ( final String VAR_1 , final TYPE_1 listener ) { METHOD_2 ( VAR_1 , listener ) ; synchronized ( VAR_4 ) { if ( VAR_2 != null ) { VAR_2 . remove ( listener ) ; if ( VAR_2 . isEmpty ( ) ) { VAR_3 . remove ( VAR_1 ) ; } } } }
",,,"public void METHOD_1 ( final String VAR_1 , final TYPE_1 listener ) { METHOD_2 ( VAR_1 , listener ) ; synchronized ( VAR_4 ) { final Set < TYPE_1 > VAR_2 = VAR_3 . get ( VAR_1 ) ; if ( VAR_2 != null ) { VAR_2 . remove ( listener ) ; if ( VAR_2 . isEmpty ( ) ) { VAR_3 . remove ( VAR_1 ) ; } } } }
",,,"public void unbind ( final String eventName , final SubscriptionEventListener listener ) { synchronized ( lock ) { validateArguments ( eventName , listener ) ; final Set < SubscriptionEventListener > listeners = eventNameToListenerMap . get ( eventName ) ; if ( listeners != null ) { listeners . remove ( listener ) ; if ( listeners . isEmpty ( ) ) { eventNameToListenerMap . remove ( eventName ) ; } } } }
",,,"public void unbind ( final String eventName , final SubscriptionEventListener listener ) { validateArguments ( eventName , listener ) ; synchronized ( lock ) { final Set < SubscriptionEventListener > listeners = eventNameToListenerMap . get ( eventName ) ; if ( listeners != null ) { listeners . remove ( listener ) ; if ( listeners . isEmpty ( ) ) { eventNameToListenerMap . remove ( eventName ) ; } } } }
",,,"public void unbind ( final String eventName , final SubscriptionEventListener listener ) { validateArguments ( eventName , listener ) ; synchronized ( lock ) { final Set < SubscriptionEventListener > listeners = eventNameToListenerMap . get ( eventName ) ; if ( listeners != null ) { listeners . remove ( listener ) ; if ( listeners . isEmpty ( ) ) { eventNameToListenerMap . remove ( eventName ) ; } } } }
",,
1201,"public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; // No reason for this to happen , but checking just to make sure if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; setSucceeded ( true ) ; }
","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( getParameters ( ) . METHOD_2 ( ) ) { Guid VAR_1 = METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_4 ( VAR_1 ) ; } } METHOD_5 ( TYPE_1 . VAR_3 ) ; METHOD_7 ( true ) ; }
","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( getParameters ( ) . METHOD_2 ( ) ) { Guid VAR_1 = METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_4 ( VAR_1 ) ; } } METHOD_5 ( TYPE_1 . VAR_3 ) ; METHOD_6 ( ) . METHOD_7 ( true ) ; }
",,,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( getParameters ( ) . METHOD_2 ( ) ) { Guid VAR_1 = METHOD_3 ( ) ; if ( VAR_1 != null ) { METHOD_4 ( VAR_1 ) ; } } METHOD_5 ( TYPE_1 . VAR_3 ) ; }
",,,"public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; getReturnValue ( ) . setSucceeded ( true ) ; } public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; getReturnValue ( ) . setSucceeded ( ) ; // changed setSucceeded ( true ) to setSucceeded ( ) }
",,,"protected void executeCommand ( ) { VDSReturnValue vdsReturnValue = runVdsCommand ( VDSCommandType . StopRebalanceGlusterVolume , new GlusterVolumeVDSParameters ( upServer . getId ( ) , getGlusterVolumeName ( ) ) ) ; if ( ! vdsReturnValue . getSucceeded ( ) ) { handleVdsError ( AuditLogType . GLUSTER_VOLUME_REBALANCE_STOP_FAILED , vdsReturnValue . getVdsError ( ) . getMessage ( ) ) ; setSucceeded ( false ) ; return ; } endStepJob ( ) ; releaseVolumeLock ( ) ; setSucceeded ( vdsReturnValue . getSucceeded ( ) ) ; } protected void executeCommand ( ) { Cluster cluster = clusterDao . get ( getParameters ( ) . getClusterId ( ) ) ; if ( cluster . supportsGlusterService ( ) ) { try { glusterSyncJob . refreshSelfHealData ( cluster ) ; } catch ( Exception e ) { log . error ( ""Error while refreshing Gluster self heal data of cluster ' { } ' : { } "" , cluster . getName ( ) , e . getMessage ( ) ) ; log . debug ( ""Exception"" , e ) ; setSucceeded ( false ) ; return ; } setSucceeded ( true ) ; } } protected void executeCommand ( ) { List < VmDevice > watchdogs = getWatchdogs ( ) ; VmDevice watchdogDevice = watchdogs . get ( 0 ) ; watchdogDevice . setSpecParams ( getSpecParams ( ) ) ; getVmDeviceDao ( ) . update ( watchdogDevice ) ; setSucceeded ( true ) ; } public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; setSucceeded ( true ) ; }
",,,"public void endSuccessfully ( ) { super . endSuccessfully ( ) ; if ( getParameters ( ) . getImportAsTemplate ( ) ) { Guid newTemplateId = createTemplate ( ) ; // No reason for this to happen , but checking just to make sure if ( newTemplateId != null ) { attachDiskToTemplate ( newTemplateId ) ; } } updateDiskStatus ( ImageStatus . OK ) ; setSucceeded ( true ) ; }
",,
1207,"private static File getDefaultFile ( ) { File home = new File ( System . getProperty ( ""user . home"" ) ) ; // $NON - NLS - 1$ File netrc = new File ( home , "" . netrc"" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; netrc = new File ( home , ""_netrc"" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; return null ; }
","private static File METHOD_1 ( ) { File VAR_2 = new File ( System . getProperty ( STRING_1 ) ) ; File VAR_1 = new File ( VAR_2 , STRING_2 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; VAR_1 = new File ( VAR_2 , STRING_3 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; return null ; }
","private static File METHOD_1 ( ) { File VAR_2 = new File ( System . getProperty ( STRING_1 ) ) ; File VAR_1 = new File ( VAR_2 , STRING_2 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; VAR_1 = new File ( VAR_2 , STRING_3 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; return null ; }
",,,"private static File METHOD_1 ( ) { File VAR_2 = new File ( System . getProperty ( STRING_1 ) ) ; File VAR_1 = new File ( VAR_2 , STRING_2 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; VAR_1 = new File ( VAR_2 , STRING_3 ) ; if ( VAR_1 . exists ( ) ) return VAR_1 ; return null ; }
",,,"private static File getDefaultFile ( ) { File home = new File ( System . getProperty ( ""user . home"" ) ) ; File netrc = new File ( home , "" . netrc"" ) ; if ( netrc . exists ( ) ) { return netrc ; } netrc = new File ( home , ""_netrc"" ) ; if ( netrc . exists ( ) ) { return netrc ; } return null ; }
",,,"private static File getDefaultFile ( ) { File netrc ; File home = new File ( System . getProperty ( ""user . home"" ) ) ; netrc = new File ( home , "" . netrc"" ) ; if ( netrc . exists ( ) ) return netrc ; netrc = new File ( home , ""_netrc"" ) ; if ( netrc . exists ( ) ) return netrc ; return null ; }
",,,"private static File getDefaultFile ( ) { File home = new File ( System . getProperty ( ""user . home"" ) ) ; // $NON - NLS - 1$ File netrc = new File ( home , "" . netrc"" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; netrc = new File ( home , ""_netrc"" ) ; // $NON - NLS - 1$ if ( netrc . exists ( ) ) return netrc ; return null ; }
",,
1222,"private StorageDomain recoverStorageDomain ( String sdUUID ) { log . warn ( ""about to recover SD { } "" , sdUUID ) ; StorageDomain storageDomain = new StorageDomain ( ) ; storageDomain . setId ( sdUUID ) ; updateStorageDomain ( storageDomain ) ; return storageDomain ; }
","private TYPE_1 METHOD_1 ( String VAR_1 ) { log . warn ( STRING_1 , VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; return VAR_2 ; }
","private TYPE_1 METHOD_1 ( String VAR_1 ) { log . debug ( STRING_1 , VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; return VAR_2 ; }
",,,"private TYPE_1 METHOD_1 ( String VAR_1 ) { log . debug ( STRING_1 , VAR_1 ) ; TYPE_1 VAR_2 = new TYPE_1 ( ) ; VAR_2 . METHOD_2 ( VAR_1 ) ; METHOD_3 ( VAR_2 ) ; return VAR_2 ; }
",,,"private StorageDomain recoverStorageDomain ( String sdUUID ) { log . debug ( ""about to recover SD { } "" , sdUUID ) ; StorageDomain storageDomain = new StorageDomain ( ) ; storageDomain . setId ( sdUUID ) ; updateStorageDomain ( storageDomain ) ; return storageDomain ; }
",,,"private StorageDomain recoverStorageDomain ( String sdUUID ) { log . debug ( ""about to recover SD { } "" , sdUUID ) ; StorageDomain storageDomain = new StorageDomain ( ) ; storageDomain . setId ( sdUUID ) ; updateStorageDomain ( storageDomain ) ; return storageDomain ; }
",,,"private StorageDomain recoverStorageDomain ( String sdUUID ) { log . debug ( ""about to recover SD { } "" , sdUUID ) ; StorageDomain storageDomain = new StorageDomain ( ) ; storageDomain . setId ( sdUUID ) ; updateStorageDomain ( storageDomain ) ; return storageDomain ; }
",,
1224,"public static String toHexString ( byte [ ] digest ) { StringBuilder buf = new StringBuilder ( ) ; for ( byte element : digest ) { if ( ( element & 0xFF ) < 0x10 ) buf . append ( '0' ) ; buf . append ( Integer . toHexString ( element & 0xFF ) ) ; } return buf . toString ( ) ; }
","public static String METHOD_1 ( byte [ ] VAR_1 ) { StringBuilder buf = new StringBuilder ( ) ; for ( byte element : VAR_1 ) { if ( ( element & INT_1 ) < INT_2 ) buf . append ( CHAR_1 ) ; buf . append ( Integer . VAR_2 ( element & INT_1 ) ) ; } return buf . toString ( ) ; }
","public static String METHOD_1 ( byte [ ] VAR_1 ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { if ( ( VAR_1 [ i ] & INT_1 ) < INT_2 ) buf . append ( CHAR_1 ) ; buf . append ( Integer . VAR_2 ( VAR_1 [ i ] & INT_1 ) ) ; } return buf . toString ( ) ; }
",,,"public static String METHOD_1 ( byte [ ] VAR_1 ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < VAR_1 . length ; i ++ ) { if ( ( VAR_1 [ i ] & INT_1 ) < INT_2 ) buf . append ( CHAR_1 ) ; buf . append ( Integer . VAR_2 ( VAR_1 [ i ] & INT_1 ) ) ; } return buf . toString ( ) ; }
",,,"public static String toHexString ( byte [ ] digest ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < digest . length ; i ++ ) { if ( ( digest [ i ] & 0xFF ) < 0x10 ) { buf . append ( '0' ) ; } buf . append ( Integer . toHexString ( digest [ i ] & 0xFF ) ) ; } return buf . toString ( ) ; }
",,,"public static String toHexString ( byte [ ] digest ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = 0 ; i < digest . length ; i ++ ) { if ( ( digest [ i ] & 0xFF ) < 0x10 ) builder . append ( '0' ) ; builder . append ( Integer . toHexString ( digest [ i ] & 0xFF ) ) ; } return builder . toString ( ) ; }
",,,"public static String toHexString ( byte [ ] digest ) { StringBuilder buf = new StringBuilder ( ) ; for ( int i = 0 ; i < digest . length ; i ++ ) { if ( ( digest [ i ] & 0xFF ) < 0x10 ) buf . append ( '0' ) ; buf . append ( Integer . toHexString ( digest [ i ] & 0xFF ) ) ; } return buf . toString ( ) ; }
",,
1230,"public void updateEditorPages ( int activatedPage ) { updateEditorPages ( ) ; }
","public void METHOD_1 ( int VAR_1 ) { METHOD_1 ( ) ; }
","public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_2 > 0 && VAR_1 < this . METHOD_4 ( ) ) { METHOD_5 ( VAR_2 ) ; } else { METHOD_5 ( 0 ) ; } METHOD_6 ( METHOD_7 ( ) ) ; }
",,,"public void METHOD_1 ( int VAR_1 ) { METHOD_2 ( ) ; METHOD_3 ( ) ; if ( VAR_1 > 0 && VAR_1 < this . METHOD_4 ( ) ) { METHOD_5 ( VAR_1 ) ; } else { METHOD_5 ( 0 ) ; } METHOD_6 ( METHOD_7 ( ) ) ; }
",,,"public void updateEditorPages ( ) { removeAllPages ( ) ; addPages ( ) ; if ( backToActivePage > 0 && backToActivePage < this . getPageCount ( ) ) { setActivePage ( backToActivePage ) ; } else { setActivePage ( 0 ) ; } setPartName ( getPartName ( ) ) ; }
",,,"public void updateEditorPages ( ) { removeAllPages ( ) ; addPages ( ) ; if ( backToActivePage > 0 && backToActivePage < this . getPageCount ( ) ) { setActivePage ( backToActivePage ) ; } else { setActivePage ( 0 ) ; } setPartName ( getPartName ( ) ) ; }
",,,"public void updateEditorPages ( ) { removeAllPages ( ) ; addPages ( ) ; if ( backToActivePage > 0 && backToActivePage < this . getPageCount ( ) ) { setActivePage ( backToActivePage ) ; } else { // Set active page if the backToActivePage is out of the range setActivePage ( 0 ) ; } setPartName ( getPartName ( ) ) ; }
",,
1232,"public void setUntypedNullArgument ( Argument untypedNullArgument ) { if ( untypedNullArgument == null ) { throw new IllegalArgumentException ( ""the Argument itself may not be null"" ) ; } this . untypedNullArgument = untypedNullArgument ; }
","public void METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new IllegalArgumentException ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { this . VAR_1 = VAR_1 ; return this ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { if ( VAR_1 == null ) { throw new IllegalArgumentException ( STRING_1 ) ; } this . VAR_1 = VAR_1 ; return this ; }
",,,"public Arguments setUntypedNullArgument ( Argument untypedNullArgument ) { if ( untypedNullArgument == null ) { throw new IllegalArgumentException ( ""the Argument itself may not be null"" ) ; } this . untypedNullArgument = untypedNullArgument ; return this ; }
",,,"public Arguments setUntypedNullArgument ( Argument untypedNullArgument ) { if ( untypedNullArgument == null ) { throw new IllegalArgumentException ( ""the Argument itself may not be null"" ) ; } this . untypedNullArgument = untypedNullArgument ; return this ; }
",,,"public Arguments setUntypedNullArgument ( Argument untypedNullArgument ) { if ( untypedNullArgument == null ) { throw new IllegalArgumentException ( ""the Argument itself may not be null"" ) ; } this . untypedNullArgument = untypedNullArgument ; return this ; }
",,
1240,"public void logout ( final IProgressMonitor monitor ) throws XmlRpcException { ( new BugzillaXmlRpcOperation < Integer > ( this ) { @SuppressWarnings ( ""serial"" ) @Override public Integer execute ( ) throws XmlRpcException { Object response = call ( monitor , XML_USER_LOGOUT , null ) ; return - 1 ; } } ) . execute ( ) ; userID = - 1 ; token = null ; return ; }
","public void METHOD_1 ( final TYPE_1 monitor ) throws TYPE_2 { ( new TYPE_3 < Integer > ( this ) { ANNOTATION_1 ( STRING_1 ) @Override public Integer execute ( ) throws TYPE_2 { Object response = call ( monitor , VAR_4 , null ) ; return - 1 ; } } ) . execute ( ) ; VAR_1 = - 1 ; token = null ; return ; }
","public void METHOD_1 ( final TYPE_1 monitor ) throws TYPE_2 { VAR_1 = - 1 ; token = null ; ( new TYPE_3 < Integer > ( this ) { ANNOTATION_1 ( STRING_1 ) @Override public Integer execute ( ) throws TYPE_2 { Object response = call ( monitor , VAR_4 , null ) ; return - 1 ; } } ) . execute ( ) ; return ; }
",,,"public void METHOD_1 ( final TYPE_1 monitor ) throws TYPE_2 { VAR_1 = - 1 ; token = null ; ( new TYPE_3 < Integer > ( this ) { ANNOTATION_1 ( STRING_1 ) @Override public Integer execute ( ) throws TYPE_2 { try { VAR_2 . METHOD_2 ( monitor ) ; } catch ( TYPE_4 e ) { e . VAR_3 ( ) ; } Object response = call ( monitor , VAR_4 , null ) ; return - 1 ; } } ) . execute ( ) ; return ; }
",,,"public void logout ( final IProgressMonitor monitor ) throws XmlRpcException { userID = - 1 ; token = null ; Object response = call ( monitor , XML_USER_LOGOUT , null ) ; return ; }
",,,"public void logout ( final IProgressMonitor monitor ) throws XmlRpcException { userID = - 1 ; token = null ; ( new BugzillaXmlRpcOperation < Integer > ( this ) { @SuppressWarnings ( ""serial"" ) @Override public Integer execute ( ) throws XmlRpcException { try { bugzillaClient . logout ( monitor ) ; } catch ( CoreException e ) { e . printStackTrace ( ) ; } Object response = call ( monitor , XML_USER_LOGOUT , null ) ; return - 1 ; } } ) . execute ( ) ; return ; }
",,,"public void logout ( final IProgressMonitor monitor ) throws XmlRpcException { userID = - 1 ; token = null ; ( new BugzillaXmlRpcOperation < Integer > ( this ) { @SuppressWarnings ( ""serial"" ) @Override public Integer execute ( ) throws XmlRpcException { try { bugzillaClient . authenticate ( monitor ) ; } catch ( CoreException e ) { // TODO Auto - generated catch block e . printStackTrace ( ) ; } Object response = call ( monitor , XML_USER_LOGOUT , null ) ; return - 1 ; } } ) . execute ( ) ; return ; }
",,
1248,"public void close ( ) { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; }
","public void close ( ) { VAR_1 . add ( TYPE_1 . VAR_3 ) ; VAR_4 . METHOD_1 ( ) ; }
","public void close ( ) { VAR_1 . add ( TYPE_1 . VAR_3 ) ; VAR_4 . METHOD_1 ( ) ; }
",,,"public void close ( ) { VAR_1 . add ( TYPE_1 . VAR_3 ) ; VAR_4 . METHOD_1 ( ) ; }
",,,"public class MyClass implements AutoCloseable { private final BlockingQueue < WriteOperation > writeQueue = new LinkedBlockingQueue < > ( ) ; private final ExecutorService writerService = Executors . newSingleThreadExecutor ( ) ; @Override public void close ( ) throws Exception { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; } }
",,,"void close ( ) { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; } public class MyClass implements AutoCloseable { // other code @Override public void close ( ) { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; } }
",,,"void close ( ) throws IOException { writeQueue . add ( WriteOperation . SHUTDOWN ) ; writerService . shutdown ( ) ; }
",,
1249,"private void completeInner ( ) { // A group is removed , so check if we need to call `unsubscribe` if ( WIP_FOR_UNSUBSCRIBE_UPDATER . decrementAndGet ( this ) == 0 ) { // It means `groups . isEmpty ( ) && child . isUnsubscribed ( ) ` is true unsubscribe ( ) ; } else if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_COMPLETED ) { // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer // completionEmitted ensures we only emit onCompleted once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { child . onCompleted ( ) ; } } }
","private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this ) == 0 ) { METHOD_3 ( ) ; } else if ( VAR_1 . isEmpty ( ) && VAR_2 == VAR_3 ) { if ( TYPE_2 . METHOD_4 ( this , 0 , 1 ) ) { child . VAR_5 ( ) ; } } }
","private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this ) == 0 ) { METHOD_3 ( ) ; } else if ( VAR_1 . isEmpty ( ) && VAR_2 == VAR_3 ) { if ( TYPE_2 . METHOD_4 ( this , 0 , 1 ) ) { child . VAR_5 ( ) ; } } else { METHOD_3 ( ) ; } }
",,,"private void METHOD_1 ( ) { if ( TYPE_1 . METHOD_2 ( this ) == 0 ) { METHOD_3 ( ) ; } else if ( VAR_1 . isEmpty ( ) && VAR_2 == VAR_3 ) { if ( ! child . VAR_4 ( ) ) { child . VAR_5 ( ) ; } } }
",,,"private void completeInner ( ) { if ( WIP_FOR_UNSUBSCRIBE_UPDATER . decrementAndGet ( this ) == 0 ) { unsubscribe ( ) ; } else if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_COMPLETED ) { if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onCompleted ( ) ; } } } }
",,,"private void completeInner ( ) { // A group is removed , so check if we need to call `unsubscribe` if ( WIP_FOR_UNSUBSCRIBE_UPDATER . decrementAndGet ( this ) == 0 ) { // It means `groups . isEmpty ( ) && child . isUnsubscribed ( ) ` is true unsubscribe ( ) ; } // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_COMPLETED ) { // completionEmitted ensures we only emit onCompleted once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onCompleted ( ) ; } } } }
",,,"private void completeInner ( ) { // A group is removed , so check if we need to call `unsubscribe` if ( WIP_FOR_UNSUBSCRIBE_UPDATER . decrementAndGet ( this ) == 0 ) { // It means `groups . isEmpty ( ) && child . isUnsubscribed ( ) ` is true unsubscribe ( ) ; } // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_COMPLETED ) { // completionEmitted ensures we only emit onCompleted once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onCompleted ( ) ; } } } else { // if we have no outstanding groups ( all completed or unsubscribe ) and terminated on outer if ( groups . isEmpty ( ) && terminated == TERMINATED_WITH_ERROR ) { // completionEmitted ensures we only emit onError once if ( COMPLETION_EMITTED_UPDATER . compareAndSet ( this , 0 , 1 ) ) { if ( ! child . isUnsubscribed ( ) ) { child . onError ( error ) ; } } } } }
",,
1265,"protected EapAkaAttributeFactory ( ) { }
","protected TYPE_1 ( ) { }
","protected TYPE_1 ( ) { }
",,,"protected TYPE_1 ( ) { }
",,,"protected EapAkaAttributeFactory ( ) { }
",,,"protected EapAkaAttributeFactory ( ) { }
",,,"EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( ) { EapAkaAttributeFactory ( )
",,
1286,"public void setDefaultProperties ( Map < String , Object > defaultProperties ) { this . defaultProperties = new HashMap < > ( defaultProperties ) ; }
","public void METHOD_1 ( Map < String , Object > VAR_1 ) { this . VAR_1 = new HashMap < > ( VAR_1 ) ; }
","public void METHOD_1 ( Map < String , Object > VAR_1 ) { VAR_1 = new HashMap < > ( VAR_1 ) ; for ( Object key : Collections . list ( VAR_1 . METHOD_2 ( ) ) ) { this . VAR_1 . put ( ( String ) key , VAR_1 . get ( key ) ) ; } }
",,,"public void METHOD_1 ( Map < String , Object > VAR_1 ) { this . VAR_1 = new HashMap < > ( VAR_1 ) ; }
",,,"public void setDefaultProperties ( Map < String , Object > defaultProperties ) { this . defaultProperties = new HashMap < > ( defaultProperties ) ; }
",,,"public void setDefaultProperties ( Map < String , Object > defaultProperties ) { this . defaultProperties = new HashMap < > ( defaultProperties ) ; }
",,,"public void setDefaultProperties ( Map < String , Object > defaultProperties ) { this . defaultProperties = new HashMap < > ( defaultProperties ) ; }
",,
1287,"private MapSqlParameterSource createVnodeToPnodeParametersMapper ( Integer pinnedIndex , Guid vNodeId ) { return getCustomMapSqlParameterSource ( ) . addValue ( ""id"" , Guid . newGuid ( ) ) . addValue ( ""vm_numa_node_id"" , vNodeId ) . addValue ( ""vds_numa_node_index"" , pinnedIndex ) ; }
","private TYPE_1 METHOD_1 ( Integer VAR_1 , Guid VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , Guid . VAR_3 ( ) ) . METHOD_3 ( STRING_2 , VAR_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; }
","private TYPE_1 METHOD_1 ( Integer VAR_1 , Guid VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , Guid . VAR_3 ( ) ) . METHOD_3 ( STRING_2 , VAR_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; }
",,,"private TYPE_1 METHOD_1 ( Integer VAR_1 , Guid VAR_2 ) { return METHOD_2 ( ) . METHOD_3 ( STRING_1 , Guid . VAR_3 ( ) ) . METHOD_3 ( STRING_2 , VAR_2 ) . METHOD_3 ( STRING_3 , VAR_1 ) ; }
",,,"private MapSqlParameterSource createVnodeToPnodeParametersMapper ( Integer pinnedIndex , Guid vNodeId ) { return getCustomMapSqlParameterSource ( ) . addValue ( ""id"" , Guid . newGuid ( ) ) . addValue ( ""vm_numa_node_id"" , vNodeId ) . addValue ( ""vds_numa_node_index"" , pinnedIndex ) ; }
",,,"private MapSqlParameterSource createVnodeToPnodeParametersMapper ( Integer pinnedIndex , Guid vNodeId ) { return getCustomMapSqlParameterSource ( ) . addValue ( ""id"" , Guid . newGuid ( ) ) . addValue ( ""vm_numa_node_id"" , vNodeId ) . addValue ( ""vds_numa_node_index"" , pinnedIndex ) ; }
",,,"private MapSqlParameterSource createVnodeToPnodeParametersMapper ( Integer pinnedIndex , Guid vNodeId ) { return getCustomMapSqlParameterSource ( ) . addValue ( ""id"" , Guid . newGuid ( ) ) . addValue ( ""vm_numa_node_id"" , vNodeId ) . addValue ( ""vds_numa_node_index"" , pinnedIndex ) ; }
",,
1290,"public S indexNullAs ( F indexNullAs ) { indexNullAsValue = indexNullAs ; return thisAsS ( ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = VAR_1 ; return METHOD_2 ( ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { return VAR_1 != null ? VAR_1 : null ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { VAR_2 = null ; }
",,,"public S indexNullAs ( F indexNullAs ) { if ( indexNullAs == null ) { throw new IllegalArgumentException ( ""indexNullAs cannot be null"" ) ; } indexNullAsValue = indexNullAs ; return thisAsS ( ) ; }
",,,"public S indexNullAs ( F indexNullAs ) { indexNullAsValue = indexNullAs ; return thisAsS ( ) ; }
",,,"public S indexNullAs ( F indexNullAs ) { indexNullAsValue = indexNullAs ; return thisAsS ( ) ; }
",,
1291,"public void testGenericImageExtraction ( ) { org . atlasapi . media . entity . Series extractedGenericImage = extractor . extract ( seriesWithGenericImage ( ) ) ; Image genericImage = Iterables . getOnlyElement ( extractedGenericImage . getImages ( ) ) ; assertEquals ( ""http :/ / ichef . bbci . co . uk / images / ic / 1024x576 / p028s846 . png"" , extractedGenericImage . getImage ( ) ) ; assertEquals ( ImageType . GENERIC_IMAGE_CONTENT_ORIGINATOR , genericImage . getType ( ) ) ; }
","public void METHOD_1 ( ) { org . VAR_1 . VAR_2 . entity . TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_6 = TYPE_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; assertEquals ( STRING_1 , VAR_4 . METHOD_6 ( ) ) ; assertEquals ( TYPE_4 . VAR_8 , VAR_6 . getType ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_6 = TYPE_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; assertEquals ( STRING_1 , VAR_4 . METHOD_6 ( ) ) ; assertEquals ( TYPE_4 . VAR_8 , VAR_6 . getType ( ) ) ; }
",,,"public void METHOD_1 ( ) { org . VAR_1 . VAR_2 . entity . TYPE_3 VAR_4 = VAR_5 . METHOD_2 ( METHOD_3 ( ) ) ; TYPE_1 VAR_6 = TYPE_2 . METHOD_4 ( VAR_4 . METHOD_5 ( ) ) ; assertEquals ( STRING_1 , VAR_4 . METHOD_6 ( ) ) ; assertEquals ( TYPE_4 . VAR_8 , VAR_6 . getType ( ) ) ; }
",,,"public void testGenericImageExtraction ( ) { org . atlasapi . media . entity . Series extractedGenericImage = extractor . extract ( seriesWithGenericImage ( ) ) ; Image genericImage = Iterables . getOnlyElement ( extractedGenericImage . getImages ( ) ) ; assertEquals ( ""http :/ / ichef . bbci . co . uk / images / ic / 1024x576 / p028s846 . png"" , extractedGenericImage . getImage ( ) ) ; assertEquals ( ImageType . GENERIC_IMAGE_CONTENT_ORIGINATOR , genericImage . getType ( ) ) ; }
",,,"import static org . junit . Assert . assertEquals ; public void testGenericImageExtraction ( ) { org . atlasapi . media . entity . Series extractedGenericImage = extractor . extract ( seriesWithGenericImage ( ) ) ; Image genericImage = Iterables . getOnlyElement ( extractedGenericImage . getImages ( ) ) ; assertEquals ( ""http :/ / ichef . bbci . co . uk / images / ic / 1024x576 / p028s846 . png"" , extractedGenericImage . getImage ( ) ) ; assertEquals ( ImageType . GENERIC_IMAGE_CONTENT_ORIGINATOR , genericImage . getType ( ) ) ; }
",,,"public void testGenericImageExtraction ( ) { org . atlasapi . media . entity . Series extractedGenericImage = extractor . extract ( seriesWithGenericImage ( ) ) ; Image genericImage = Iterables . getOnlyElement ( extractedGenericImage . getImages ( ) ) ; assertEquals ( ""http :/ / ichef . bbci . co . uk / images / ic / 1024x576 / p028s846 . png"" , extractedGenericImage . getImage ( ) ) ; Assert . assertEquals ( ImageType . GENERIC_IMAGE_CONTENT_ORIGINATOR , genericImage . getType ( ) ) ; }
",,
1299,"public void processOnVmStop ( Collection < Guid > vmIds ) { for ( final Guid vmId : vmIds ) { ThreadPoolUtil . execute ( new Runnable ( ) { @Override public void run ( ) { Backend . getInstance ( ) . runInternalAction ( VdcActionType . ProcessDownVm , new IdParameters ( vmId ) ) ; } } ) ; } }
","public void METHOD_1 ( Collection < Guid > VAR_1 ) { for ( final Guid VAR_2 : VAR_1 ) { TYPE_1 . execute ( new TYPE_2 ( ) { @Override public void run ( ) { TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_7 . TYPE_6 , new TYPE_4 ( VAR_2 ) ) ; } } ) ; } }
","public void METHOD_1 ( Collection < Guid > VAR_1 ) { for ( final Guid VAR_2 : VAR_1 ) { TYPE_1 . execute ( new TYPE_2 ( ) { @Override public void run ( ) { TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_7 . TYPE_6 , new TYPE_4 ( VAR_2 ) , TYPE_5 . METHOD_3 ( ) ) ; } } ) ; } }
",,,"public void METHOD_1 ( Collection < Guid > VAR_1 ) { for ( final Guid VAR_2 : VAR_1 ) { TYPE_1 . execute ( new TYPE_2 ( ) { @Override public void run ( ) { TYPE_3 . getInstance ( ) . METHOD_2 ( TYPE_7 . TYPE_6 , new TYPE_4 ( VAR_2 ) , TYPE_5 . METHOD_3 ( ) ) ; } } ) ; } }
",,,"public void processOnVmStop ( Collection < Guid > vmIds ) { for ( final Guid vmId : vmIds ) { log . infoFormat ( ""Running command to process VM { 0 } that went down"" , vmId ) ; ThreadPoolUtil . execute ( new Runnable ( ) { @Override public void run ( ) { Backend . getInstance ( ) . runInternalAction ( VdcActionType . ProcessDownVm , new IdParameters ( vmId ) , ExecutionHandler . createInternalJobContext ( ) ) ; } } ) ; } }
",,,"private void updateActionAvailability ( ) { boolean hasSelectedItems = getSelectedItems ( ) != null && getSelectedItems ( ) . size ( ) > 0 ; getEditCommand ( ) . setIsExecutionAllowed ( hasSelectedItems && getSelectedItems ( ) . size ( ) == 1 ) ; getRemoveCommand ( ) . setIsExecutionAllowed ( hasSelectedItems ) ; } public void start ( ) { if ( ! enabled || started . getAndSet ( true ) ) { return ; } startDiscovery ( ) ; } public List < ContentType > findContentTypesForScheme ( final WorkflowScheme workflowScheme ) { if ( ! SYSTEM_WORKFLOW_ID . equals ( workflowScheme . getId ( ) ) ) { if ( ! hasValidLicense ( ) && ! this . getFriendClass ( ) . isFriend ( ) ) { throw new InvalidLicenseException ( ""Workflow - Schemes - License - required"" ) ; } } try { return workFlowFactory . findContentTypesByScheme ( workflowScheme ) ; } catch ( Exception e ) { Logger . debug ( this , e . getMessage ( ) , e ) ; throw new DoesNotExistException ( e ) ; } } public void processOnVmStop ( Collection < Guid > vmIds ) { for ( final Guid vmId : vmIds ) { ThreadPoolUtil . execute ( new Runnable ( ) { @Override public void run ( ) { Backend . getInstance ( ) . runInternalAction ( VdcActionType . ProcessDownVm , new IdParameters ( vmId ) , ExecutionHandler . createInternalJobContext ( ) ) ; } } ) ; } }
",,,"public void processOnVmStop ( Collection < Guid > vmIds ) { for ( final Guid vmId : vmIds ) { ThreadPoolUtil . execute ( new Runnable ( ) { @Override public void run ( ) { Backend . getInstance ( ) . runInternalAction ( VdcActionType . ProcessDownVm , new IdParameters ( vmId ) , ExecutionHandler . createInternalJobContext ( ) ) ; } } ) ; } }
",,
1301,"protected void configureEnvironment ( final ClusterEnvironment . Builder builder ) { ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . registerModule ( new CouchbaseJacksonModule ( ) ) ; objectMapper . registerModule ( new JsonValueModule ( ) ) ; builder . jsonSerializer ( JacksonJsonSerializer . create ( objectMapper ) ) ; }
","protected void METHOD_1 ( final TYPE_1 . Builder builder ) { TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_5 . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_5 . METHOD_4 ( new TYPE_4 ( ) ) ; builder . VAR_6 ( TYPE_6 . create ( VAR_5 ) ) ; }
","protected void METHOD_1 ( final TYPE_1 . Builder builder ) { builder . VAR_6 ( TYPE_6 . create ( new TYPE_2 ( ) ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_5 . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_5 . METHOD_4 ( new TYPE_4 ( ) ) ; builder . VAR_6 ( TYPE_6 . create ( VAR_5 ) ) ; }
",,,"protected void METHOD_1 ( final TYPE_1 . Builder builder ) { TYPE_2 VAR_1 = new TYPE_2 ( ) ; VAR_1 . METHOD_2 ( TYPE_7 . TYPE_8 . VAR_4 ) ; VAR_1 . METHOD_3 ( new TYPE_3 ( ) , new TYPE_4 ( ) ) ; TYPE_5 VAR_5 = new TYPE_5 ( ) ; VAR_5 . METHOD_4 ( new TYPE_3 ( ) ) ; VAR_5 . METHOD_4 ( new TYPE_4 ( ) ) ; builder . VAR_6 ( TYPE_6 . create ( VAR_5 ) ) ; }
",,,"protected void configureEnvironment ( final ClusterEnvironment . Builder builder ) { ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . registerModule ( new CouchbaseJacksonModule ( ) ) ; objectMapper . registerModule ( new JsonValueModule ( ) ) ; builder . jsonSerializer ( JacksonJsonSerializer . create ( objectMapper ) ) ; }
",,,"protected void configureEnvironment ( final ClusterEnvironment . Builder builder ) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder ( ) ; jacksonBuilder . serializationInclusion ( JsonInclude . Include . NON_NULL ) ; jacksonBuilder . modules ( new CouchbaseJacksonModule ( ) , new JsonValueModule ( ) ) ; ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . registerModule ( new CouchbaseJacksonModule ( ) ) ; objectMapper . registerModule ( new JsonValueModule ( ) ) ; builder . jsonSerializer ( JacksonJsonSerializer . create ( objectMapper ) ) ; }
",,,"protected void configureEnvironment ( final ClusterEnvironment . Builder builder ) { Jackson2ObjectMapperBuilder jacksonBuilder = new Jackson2ObjectMapperBuilder ( ) ; jacksonBuilder . serializationInclusion ( JsonInclude . Include . NON_NULL ) ; jacksonBuilder . modules ( new CouchbaseJacksonModule ( ) , new JsonValueModule ( ) ) ; ObjectMapper objectMapper = new ObjectMapper ( ) ; objectMapper . registerModule ( new CouchbaseJacksonModule ( ) ) ; objectMapper . registerModule ( new JsonValueModule ( ) ) ; builder . jsonSerializer ( JacksonJsonSerializer . create ( objectMapper ) ) ; }
",,
1303,"public DhcpInfo getDhcpInfo ( ) { enforceAccessPermission ( ) ; if ( mVerboseLoggingEnabled ) { mLog . info ( ""getDhcpInfo uid = % "" ) . c ( Binder . getCallingUid ( ) ) . flush ( ) ; } return mClientModeImpl . syncGetDhcpInfo ( ) ; }
","public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 . info ( STRING_1 ) . c ( TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( ) ; } return VAR_4 . METHOD_5 ( ) ; }
","public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 . info ( STRING_1 ) . c ( TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( ) ; } return VAR_4 . METHOD_5 ( ) ; }
",,,"public TYPE_1 METHOD_1 ( ) { METHOD_2 ( ) ; if ( VAR_1 ) { VAR_2 . info ( STRING_1 ) . c ( TYPE_2 . METHOD_3 ( ) ) . METHOD_4 ( ) ; } return VAR_4 . METHOD_5 ( ) ; }
",,,"public DhcpInfo getDhcpInfo ( ) { enforceAccessPermission ( ) ; if ( mVerboseLoggingEnabled ) { mLog . info ( ""getDhcpInfo uid = % "" ) . c ( Binder . getCallingUid ( ) ) . flush ( ) ; } final DhcpInfo dhcpInfo = mClientModeImpl . getSyncDhcpInfo ( ) ; return dhcpInfo ; }
",,,"private final DhcpInfo getDhcpInfo ( ) { enforceAccessPermission ( ) ; if ( mVerboseLoggingEnabled ) { mLog . info ( ""getDhcpInfo uid = % "" ) . c ( Binder . getCallingUid ( ) ) . flush ( ) ; } return mClientModeImpl . syncGetDhcpInfo ( ) ; }
",,,"public DhcpInfo getDhcpInfo ( ) { enforceAccessPermission ( ) ; if ( mVerboseLoggingEnabled ) { mLog . info ( ""getDhcpInfo uid = % "" ) . c ( Binder . getCallingUid ( ) ) . flush ( ) ; } final DhcpInfo dhcpInfo = mClientModeImpl . syncGetDhcpInfo ( ) ; return dhcpInfo ; }
",,
1308,"public String getServletMapping ( ) { if ( this . path . equals ( """" ) || this . path . equals ( "" / "" ) ) { return "" / "" ; } if ( this . path . endsWith ( "" / "" ) ) { return this . path + "" * "" ; } return this . path + "" /* "" ; }
","public String METHOD_1 ( ) { if ( this . path . equals ( """" ) || this . path . equals ( STRING_1 ) ) { return STRING_1 ; } if ( this . path . VAR_1 ( STRING_1 ) ) { return this . path + STRING_2 ; } return this . path + STRING_3 ; }
","public String METHOD_1 ( ) { if ( this . path . VAR_1 ( STRING_1 ) ) { return this . path + STRING_2 ; } return this . path + STRING_3 ; }
",,,"public String METHOD_1 ( ) { if ( this . path . equals ( """" ) || this . path . equals ( STRING_1 ) ) { return STRING_1 ; } if ( this . path . VAR_1 ( STRING_1 ) ) { return this . path + STRING_2 ; } return this . path + STRING_3 ; }
",,,"public String getServletMapping ( ) { if ( this . path . isEmpty ( ) || this . path . equals ( "" / "" ) ) { return "" / "" ; } if ( this . path . endsWith ( "" / "" ) ) { return this . path + "" * "" ; } return this . path + "" /* "" ; }
",,,"public String getServletMapping ( ) { if ( """" . equals ( path ) || "" / "" . equals ( path ) ) { return "" / "" ; } if ( path . endsWith ( "" / "" ) ) { return path + "" * "" ; } return path + "" /* "" ; }
",,,"public String getServletMapping ( ) { if ( "" / "" . equals ( this . path ) ) { return "" / "" ; } if ( this . path . endsWith ( "" / "" ) ) { return this . path + "" * "" ; } return this . path + "" /* "" ; }
",,
1309,"private static InetAddress toInetAddress ( Slice ipAddress ) { try { return InetAddress . getByAddress ( ipAddress . getBytes ( ) ) ; } catch ( UnknownHostException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , ""Invalid IP address binary : "" + ipAddress . toStringUtf8 ( ) , e ) ; } }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( VAR_3 , STRING_1 + VAR_1 . METHOD_4 ( ) , e ) ; } }
","private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { TYPE_1 VAR_2 ; try { VAR_2 = TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( VAR_3 , STRING_1 + VAR_1 . METHOD_4 ( ) , e ) ; } return VAR_2 ; }
",,,"private static TYPE_1 METHOD_1 ( TYPE_2 VAR_1 ) { try { return TYPE_1 . METHOD_2 ( VAR_1 . METHOD_3 ( ) ) ; } catch ( TYPE_3 e ) { throw new TYPE_4 ( VAR_3 , STRING_1 + VAR_1 . METHOD_4 ( ) , e ) ; } }
",,,"private static InetAddress toInetAddress ( Slice ipAddress ) { try { return InetAddress . getByAddress ( ipAddress . getBytes ( ) ) ; } catch ( UnknownHostException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , ""Invalid IP address binary : "" + ipAddress . toStringUtf8 ( ) , e ) ; } }
",,,"private static InetAddress toInetAddress ( Slice ipAddress ) { try { return InetAddress . getByAddress ( ipAddress . getBytes ( ) ) ; } catch ( UnknownHostException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , ""Invalid IP address binary : "" + ipAddress . toStringUtf8 ( ) , e ) ; } }
",,,"private static InetAddress toInetAddress ( Slice ipAddress ) { try { return InetAddress . getByAddress ( ipAddress . getBytes ( ) ) ; } catch ( UnknownHostException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , ""Invalid IP address binary : "" + ipAddress . toStringUtf8 ( ) , e ) ; } }
",,
1322,"@Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; TextView tv = new TextView ( this ) ; tv . setText ( ""Check logcat ! "" ) ; setContentView ( tv ) ; printArgs ( ""The"" , ""Quick"" , ""Brown"" , ""Fox"" ) ; Log . i ( ""Fibonacci"" , ""fibonacci's 4th number is "" + fibonacci ( 4 ) ) ; Greeter greeter = new Greeter ( ""Jake"" ) ; Log . d ( ""Greeting"" , greeter . sayHello ( ) ) ; startSleepyThread ( ) ; }
","@Override protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . setText ( STRING_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; Log . i ( STRING_6 , STRING_7 + METHOD_4 ( 4 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_8 ) ; Log . d ( STRING_9 , VAR_3 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; }
","@Override protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . setText ( STRING_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; Log . i ( STRING_6 , STRING_7 + METHOD_4 ( 4 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_8 ) ; Log . d ( STRING_9 , VAR_3 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; }
",,,"protected void METHOD_1 ( TYPE_1 VAR_1 ) { super . METHOD_1 ( VAR_1 ) ; TYPE_2 VAR_2 = new TYPE_2 ( this ) ; VAR_2 . setText ( STRING_1 ) ; METHOD_2 ( VAR_2 ) ; METHOD_3 ( STRING_2 , STRING_3 , STRING_4 , STRING_5 ) ; Log . i ( STRING_6 , STRING_7 + METHOD_4 ( 4 ) ) ; TYPE_3 VAR_3 = new TYPE_3 ( STRING_8 ) ; Log . d ( STRING_9 , VAR_3 . METHOD_5 ( ) ) ; METHOD_6 ( ) ; }
",,,"@Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; TextView tv = new TextView ( this ) ; tv . setText ( ""Check logcat ! "" ) ; setContentView ( tv ) ; printArgs ( ""The"" , ""Quick"" , ""Brown"" , ""Fox"" ) ; Log . i ( ""Fibonacci"" , ""fibonacci's 4th number is "" + fibonacci ( 4 ) ) ; Greeter greeter = new Greeter ( ""Jake"" ) ; Log . d ( ""Greeting"" , greeter . sayHello ( ) ) ; startSleepyThread ( ) ; }
",,,"public void testFirstWantValidCapabilityNames ( ) throws PackProtocolException { List < String > validNames = Arrays . asList ( ""c"" , ""cap"" , ""C"" , ""CAP"" , ""1"" , ""1cap"" , ""cap - 64k_test"" , "" - "" , "" - cap"" , ""_"" , ""_cap"" , ""agent = pack . age / Version"" ) ; for ( String capability : validNames ) { FirstWant r = FirstWant . fromLine ( makeFirstWantLine ( capability ) ) ; assertEquals ( r . getCapabilities ( ) . size ( ) , 1 ) ; assertTrue ( r . getCapabilities ( ) . contains ( capability ) ) ; } } static BookKeeper createBookKeeperClient ( ServerConfiguration conf ) throws InterruptedException , IOException { ClientConfiguration clientConfiguration = new ClientConfiguration ( conf ) ; clientConfiguration . setClientRole ( ClientConfiguration . CLIENT_ROLE_SYSTEM ) ; try { return BookKeeper . forConfig ( clientConfiguration ) . build ( ) ; } catch ( BKException e ) { throw new IOException ( ""Failed to create bookkeeper client"" , e ) ; } } public Bundle asBundle ( ) { return bundle ; } @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; TextView tv = new TextView ( this ) ; tv . setText ( ""Check logcat ! "" ) ; setContentView ( tv ) ; printArgs ( ""The"" , ""Quick"" , ""Brown"" , ""Fox"" ) ; Log . i ( ""Fibonacci"" , ""fibonacci's 4th number is "" + fibonacci ( 4 ) ) ; Greeter greeter = new Greeter ( ""Jake"" ) ; Log . d ( ""Greeting"" , greeter . sayHello ( ) ) ; startSleepyThread ( ) ; }
",,,"@Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; TextView tv = new TextView ( this ) ; tv . setText ( ""Check logcat ! "" ) ; setContentView ( tv ) ; printArgs ( ""The"" , ""Quick"" , ""Brown"" , ""Fox"" ) ; Log . i ( ""Fibonacci"" , ""fibonacci's 4th number is "" + fibonacci ( 4 ) ) ; Greeter greeter = new Greeter ( ""Jake"" ) ; Log . d ( ""Greeting"" , greeter . sayHello ( ) ) ; startSleepyThread ( ) ; }
",,
1324,"private Task < ? extends Serializable > createDbTask ( Database dbObj ) { // note that we do not set location - for repl load , we want that auto - created . CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc ( dbObj . getName ( ) , dbObj . getDescription ( ) , null , false , updateDbProps ( dbObj , context . dumpDirectory ) ) ; // If it exists , we want this to be an error condition . Repl Load is not intended to replace a // db . // TODO : we might revisit this in create - drop - recreate cases , needs some thinking on . DDLWork2 work = new DDLWork2 ( new HashSet < > ( ) , new HashSet < > ( ) , createDbDesc ) ; return TaskFactory . get ( work , context . hiveConf ) ; }
","private TYPE_1 < ? extends TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , null , false , METHOD_3 ( VAR_1 , context . VAR_3 ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( new HashSet < > ( ) , new HashSet < > ( ) , VAR_2 ) ; return TYPE_6 . get ( VAR_4 , context . VAR_5 ) ; }
","private TYPE_1 < ? extends TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , null , false , METHOD_3 ( VAR_1 , context . VAR_3 , true ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( new HashSet < > ( ) , new HashSet < > ( ) , VAR_2 ) ; return TYPE_6 . get ( VAR_4 , context . VAR_5 ) ; }
",,,"private TYPE_1 < ? extends TYPE_2 > METHOD_1 ( TYPE_3 VAR_1 ) { TYPE_4 VAR_2 = new TYPE_4 ( VAR_1 . getName ( ) , VAR_1 . METHOD_2 ( ) , null , false , METHOD_3 ( VAR_1 , context . VAR_3 ) ) ; TYPE_5 VAR_4 = new TYPE_5 ( new HashSet < > ( ) , new HashSet < > ( ) , VAR_2 ) ; return TYPE_6 . get ( VAR_4 , context . VAR_5 ) ; }
",,,"private Task < ? extends Serializable > createDbTask ( Database dbObj ) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc ( dbObj . getName ( ) , dbObj . getDescription ( ) , null , false , updateDbProps ( dbObj , context . dumpDirectory , true ) ) ; DDLWork2 work = new DDLWork2 ( new HashSet < > ( ) , new HashSet < > ( ) , createDbDesc ) ; return TaskFactory . get ( work , context . hiveConf ) ; }
",,,"private String buildMessage ( int from , int to , int total ) { if ( total > 0 ) { return messages . fromIndexToIndexOfTotalCount ( from , to , total ) ; } return messages . fromIndexToIndex ( from , to ) ; } public void claimTaskCmdExecutorTest ( ) { ClaimTaskCmd claimTaskCmd = new ClaimTaskCmd ( ""taskId"" , ""assignee"" ) ; assertThat ( claimTaskCmdExecutor . getHandledType ( ) ) . isEqualTo ( ClaimTaskCmd . class ) ; claimTaskCmdExecutor . execute ( claimTaskCmd ) ; verify ( processEngine ) . claimTask ( claimTaskCmd ) ; verify ( commandResults ) . send ( ArgumentMatchers . < Message < ClaimTaskResults > > any ( ) ) ; } public Jackson2Annotator ( GenerationConfig generationConfig ) { super ( generationConfig ) ; } private Task < ? extends Serializable > createDbTask ( Database dbObj ) { CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc ( dbObj . getName ( ) , dbObj . getDescription ( ) , null , false , updateDbProps ( dbObj , context . dumpDirectory , true ) ) ; DDLWork2 work = new DDLWork2 ( new HashSet < > ( ) , new HashSet < > ( ) , createDbDesc ) ; return TaskFactory . get ( work , context . hiveConf ) ; }
",,,"private Task < ? extends Serializable > createDbTask ( Database dbObj ) { // note that we do not set location - for repl load , we want that auto - created . CreateDatabaseDesc createDbDesc = new CreateDatabaseDesc ( dbObj . getName ( ) , dbObj . getDescription ( ) , null , false , updateDbProps ( dbObj , context . dumpDirectory ) ; // If it exists , we want this to be an error condition . Repl Load is not intended to replace a // db . // TODO : we might revisit this in create - drop - recreate cases , needs some thinking on . DDLWork2 work = new DDLWork2 ( new HashSet < > ( ) , new HashSet < > ( ) , createDbDesc ) ; return TaskFactory . get ( work , context . hiveConf ) ; }
",,
1344,"public String toString ( ) { return ""ScopedKey { scope = "" + scope + "" , key = "" + key + "" } "" ; }
","public String toString ( ) { return STRING_1 + VAR_2 + STRING_2 + key + STRING_3 ; }
","public String toString ( ) { Object VAR_1 = VAR_2 ; Object VAR_3 = key ; if ( VAR_1 instanceof TYPE_1 ) VAR_1 = ( ( TYPE_1 ) VAR_1 ) . get ( ) ; if ( VAR_3 instanceof TYPE_1 ) VAR_3 = ( ( TYPE_1 ) VAR_3 ) . get ( ) ; return STRING_1 + VAR_1 + STRING_2 + VAR_3 + STRING_3 ; }
",,,"public String toString ( ) { Object VAR_1 = VAR_2 ; Object VAR_3 = key ; if ( VAR_1 instanceof TYPE_1 ) { VAR_1 = ( ( TYPE_1 ) VAR_1 ) . get ( ) ; } if ( VAR_3 instanceof TYPE_1 ) { VAR_3 = ( ( TYPE_1 ) VAR_3 ) . get ( ) ; } return STRING_1 + VAR_1 + STRING_2 + VAR_3 + STRING_3 ; }
",,,"public String toString ( ) { Object oScope = scope ; Object oKey = key ; return ""ScopedKey { scope = "" + oScope + "" , key = "" + oKey + "" } "" ; }
",,,"Buggy public String toString ( ) { Object oScope = scope ; Object oKey = key ; if ( oScope instanceof MarshalledValue ) { oScope = ( ( MarshalledValue ) oScope ) . get ( ) ; } if ( oKey instanceof MarshalledValue ) { oKey = ( ( MarshalledValue ) oKey ) . get ( ) ; } return ""ScopedKey { scope = "" + oScope + "" , key = "" + oKey + "" } "" ; } public String toString ( ) { return ""ScopedKey { scope = "" + scope + "" , key = "" + key + "" } "" ; }
",,,"public String toString ( ) { Object oScope = scope ; Object oKey = key ; if ( oScope instanceof MarshalledValue ) { oScope = ( ( MarshalledValue ) oScope ) . get ( ) ; } if ( oKey instanceof MarshalledValue ) { oKey = ( ( MarshalledValue ) oKey ) . get ( ) ; } return ""ScopedKey { scope = "" + oScope + "" , key = "" + oKey + "" } "" ; }
",,
1348,"NumaValidator ( VdsNumaNodeDao vdsNumaNodeDao ) { this . vdsNumaNodeDao = Objects . requireNonNull ( vdsNumaNodeDao ) ; }
","TYPE_3 ( TYPE_1 VAR_2 ) { this . VAR_2 = TYPE_2 . METHOD_1 ( VAR_2 ) ; }
","TYPE_3 ( TYPE_1 VAR_2 ) { this . VAR_2 = TYPE_2 . METHOD_1 ( VAR_2 ) ; }
",,,"TYPE_3 ( TYPE_1 VAR_2 ) { this . VAR_2 = TYPE_2 . METHOD_1 ( VAR_2 ) ; }
",,,"NumaValidator ( VdsNumaNodeDao vdsNumaNodeDao ) { this . vdsNumaNodeDao = Objects . requireNonNull ( vdsNumaNodeDao ) ; }
",,,"public NumaValidator ( VdsNumaNodeDao vdsNumaNodeDao ) { this . vdsNumaNodeDao = Objects . requireNonNull ( vdsNumaNodeDao ) ; }
",,,"NumaValidator ( VdsNumaNodeDao vdsNumaNodeDao ) { this . vdsNumaNodeDao = Objects . requireNonNull ( vdsNumaNodeDao ) ; }
",,
1367,"public boolean isOverutilized ( ) { return memoryManager . isOverutilized ( ) ; }
","public boolean METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
","public boolean METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
",,,"public boolean METHOD_1 ( ) { return ! VAR_1 . METHOD_2 ( ) ; }
",,,"public boolean isOverUtilized ( ) { return memoryManager . isOverUtilized ( ) ; }
",,,"public boolean isOverutilized ( ) { return memoryManager . isOverUtilized ( ) ; }
",,,"public boolean isOverutilized ( ) { return memoryManager . isOverutilized ( ) ; }
",,
1368,"public String explain ( ) throws CouchbaseLiteException { synchronized ( getDatabase ( ) . getLock ( ) ) { check ( ) ; return c4query . explain ( ) ; } }
","public String METHOD_1 ( ) throws TYPE_1 { synchronized ( METHOD_3 ( ) . METHOD_4 ( ) ) { METHOD_2 ( ) ; return VAR_1 . METHOD_1 ( ) ; } }
","public String METHOD_1 ( ) throws TYPE_1 { METHOD_2 ( ) ; synchronized ( METHOD_3 ( ) . METHOD_4 ( ) ) { return VAR_1 . METHOD_1 ( ) ; } }
",,,"public String METHOD_1 ( ) throws TYPE_1 { synchronized ( METHOD_3 ( ) . METHOD_4 ( ) ) { return VAR_1 . METHOD_1 ( ) ; } }
",,,"public synchronized String explain ( ) throws CouchbaseLiteException { check ( ) ; synchronized ( c4query ) { return c4query . explain ( ) ; } }
",,,"public String explain ( ) throws CouchbaseLiteException { check ( ) ; synchronized ( getDatabase ( ) . getLock ( ) ) { return c4query . explain ( ) ; } } java private synchronized void addChildrenProducerBatch ( final ProducerBatch batch ) { if ( childrenProducerBatch == null ) { childrenProducerBatch = new ArrayList < > ( ) ; } childrenProducerBatch . add ( batch ) ; } java public static String getUniqueId ( String name ) { return getUniqueId ( name , 256 ) ; }
",,,"public String explain ( ) throws CouchbaseLiteException { check ( ) ; synchronized ( getDatabase ( ) . getLock ( ) ) { return c4query . explain ( ) ; } }
",,
1370,"public StandardRotationPolicy ( DelegatingSessionFactory < ? > factory , List < KeyDirectory > keyDirectories , boolean fair ) { Assert . notNull ( factory , ""factory cannot be null"" ) ; Assert . notNull ( keyDirectories , ""keyDirectories cannot be null"" ) ; Assert . isTrue ( keyDirectories . size ( ) > 0 , ""At least one KeyDirectory is required"" ) ; this . factory = factory ; this . keyDirectories . addAll ( keyDirectories ) ; this . fair = fair ; this . iterator = this . keyDirectories . iterator ( ) ; }
","public TYPE_3 ( TYPE_1 < ? > factory , List < TYPE_2 > VAR_2 , boolean VAR_3 ) { Assert . VAR_4 ( factory , STRING_1 ) ; Assert . VAR_4 ( VAR_2 , STRING_2 ) ; Assert . VAR_5 ( VAR_2 . size ( ) > 0 , STRING_3 ) ; this . factory = factory ; this . VAR_2 . addAll ( VAR_2 ) ; this . VAR_3 = VAR_3 ; this . iterator = this . VAR_2 . iterator ( ) ; }
","public TYPE_3 ( TYPE_1 < ? > factory , List < TYPE_2 > VAR_2 , boolean VAR_3 ) { Assert . VAR_4 ( factory , STRING_1 ) ; Assert . VAR_4 ( VAR_2 , STRING_2 ) ; Assert . VAR_5 ( VAR_2 . size ( ) > 0 , STRING_3 ) ; this . factory = factory ; this . VAR_2 . addAll ( VAR_2 ) ; this . VAR_3 = VAR_3 ; this . iterator = this . VAR_2 . iterator ( ) ; }
",,,"public TYPE_3 ( TYPE_1 < ? > factory , List < TYPE_2 > VAR_2 , boolean VAR_3 ) { Assert . VAR_4 ( factory , STRING_1 ) ; Assert . VAR_4 ( VAR_2 , STRING_2 ) ; Assert . VAR_5 ( VAR_2 . size ( ) > 0 , STRING_3 ) ; this . factory = factory ; this . VAR_2 . addAll ( VAR_2 ) ; this . VAR_3 = VAR_3 ; }
",,,"public StandardRotationPolicy ( DelegatingSessionFactory < ? > factory , List < KeyDirectory > keyDirectories , boolean fair ) { Assert . notNull ( factory , ""factory cannot be null"" ) ; Assert . notNull ( keyDirectories , ""keyDirectories cannot be null"" ) ; Assert . isTrue ( keyDirectories . size ( ) > 0 , ""At least one KeyDirectory is required"" ) ; this . factory = factory ; this . keyDirectories . addAll ( keyDirectories ) ; this . fair = fair ; this . iterator = this . keyDirectories . iterator ( ) ; }
",,,"protected StandardRotationPolicy ( DelegatingSessionFactory < ? > factory , List < KeyDirectory > keyDirectories , boolean fair ) { Assert . notNull ( factory , ""factory cannot be null"" ) ; Assert . notNull ( keyDirectories , ""keyDirectories cannot be null"" ) ; Assert . isTrue ( keyDirectories . size ( ) > 0 , ""At least one KeyDirectory is required"" ) ; this . factory = factory ; this . keyDirectories . addAll ( keyDirectories ) ; this . fair = fair ; this . iterator = this . keyDirectories . iterator ( ) ; }
",,,"public StandardRotationPolicy ( DelegatingSessionFactory < ? > factory , List < KeyDirectory > keyDirectories , boolean fair ) { Assert . notNull ( factory , ""factory cannot be null"" ) ; Assert . notNull ( keyDirectories , ""keyDirectories cannot be null"" ) ; Assert . isTrue ( keyDirectories . size ( ) > 0 , ""At least one KeyDirectory is required"" ) ; this . factory = factory ; this . keyDirectories . addAll ( keyDirectories ) ; this . fair = fair ; this . iterator = this . keyDirectories . iterator ( ) ; }
",,
1371,"public void add ( EntityType entity ) { createAcl ( entity ) ; super . add ( entity ) ; }
","public void add ( TYPE_1 entity ) { METHOD_2 ( entity ) ; super . add ( entity ) ; }
","public void add ( TYPE_1 entity ) { super . add ( entity ) ; }
",,,"public void add ( TYPE_1 entity ) { METHOD_2 ( entity ) ; super . add ( entity ) ; }
",,,"public void add ( EntityType entity ) { if ( hasWriteMetaPermission ( entity ) ) { createAcl ( entity ) ; super . add ( entity ) ; } else { throw new SecurityException ( ""You do not have permission to add this entity . "" ) ; } } private boolean hasWriteMetaPermission ( EntityType entity ) { // logic to check if user has WRITE_META permission on the entity // return true if user has permission , false otherwise }
",,,"public void add ( EntityType entity ) { validateAddAllowed ( entity ) ; createAcl ( entity ) ; super . add ( entity ) ; }
",,,"public void add ( EntityType entity ) { createAcl ( entity ) ; validateAddAllowed ( entity ) ; super . add ( entity ) ; }
",,
1372,"private ArtifactCoordinates getArtifactCoordinates ( Path p ) throws IOException { return RepositoryFiles . readCoordinates ( ( RepositoryPath ) p ) ; }
","private TYPE_1 METHOD_1 ( Path p ) throws IOException { return TYPE_3 . METHOD_3 ( ( TYPE_4 ) p ) ; }
","private TYPE_1 METHOD_1 ( Path p ) throws IOException { return TYPE_2 . METHOD_2 ( TYPE_3 : : METHOD_3 ) . apply ( ( TYPE_4 ) p ) ; }
",,,"private TYPE_1 METHOD_1 ( Path p ) { return TYPE_2 . METHOD_2 ( TYPE_3 : : METHOD_3 ) . apply ( ( TYPE_4 ) p ) ; }
",,,"private ArtifactCoordinates getArtifactCoordinates ( Path p ) throws IOException { return ThrowingFunction . unchecked ( RepositoryFiles : : readCoordinates ) . apply ( ( RepositoryPath ) p ) ; }
",,,"private ArtifactCoordinates getArtifactCoordinates ( Path p ) throws IOException { return ThrowingFunction . unchecked ( RepositoryFiles : : readCoordinates ) . apply ( ( RepositoryPath ) p ) ; }
",,,"private ArtifactCoordinates getArtifactCoordinates ( Path p ) throws IOException { return RepositoryFiles . readCoordinates ( ( RepositoryPath ) p ) ; }
",,
1392,"private static int encode ( int bucketIndex , int value ) { return ( bucketIndex < < VALUE_BITS ) | value ; }
","private static int METHOD_1 ( int VAR_1 , int value ) { return ( VAR_1 < < VAR_2 ) | value ; }
","private static int METHOD_1 ( int VAR_1 , int value ) { return ( VAR_1 < < VAR_2 ) | value ; }
",,,"private static int METHOD_1 ( int VAR_1 , int value ) { return ( VAR_1 < < VAR_2 ) | value ; }
",,,"static int encode ( int bucketIndex , int value ) { return ( bucketIndex < < VALUE_BITS ) | value ; }
",,,"private static int encode ( int bucketIndex , int value ) { return ( bucketIndex < < VALUE_BITS ) | value ; }
",,,"private static int encode ( int bucketIndex , int value ) { return ( bucketIndex < < VALUE_BITS ) | value ; }
",,
1404,"public final < C > Stream < Match > match ( Object object , Captures captures , C context ) { if ( previous . isPresent ( ) ) { return previous . get ( ) . match ( object , captures , context ) . flatMap ( match - > accept ( object , match . captures ( ) , context ) ) ; } else { return accept ( object , captures , context ) ; } }
","public final < TYPE_1 > TYPE_2 < TYPE_3 > METHOD_1 ( Object object , TYPE_4 VAR_1 , TYPE_1 context ) { if ( VAR_2 . isPresent ( ) ) { return VAR_2 . get ( ) . METHOD_1 ( object , VAR_1 , context ) . METHOD_2 ( VAR_3 - > METHOD_3 ( object , VAR_3 . METHOD_4 ( ) , context ) ) ; } else { return METHOD_3 ( object , VAR_1 , context ) ; } }
","public final < TYPE_1 > TYPE_2 < TYPE_3 > METHOD_1 ( Object object , TYPE_4 VAR_1 , TYPE_1 context ) { if ( VAR_2 . isPresent ( ) ) { return VAR_2 . get ( ) . METHOD_1 ( object , VAR_1 , context ) . METHOD_2 ( VAR_3 - > METHOD_3 ( object , VAR_3 . METHOD_4 ( ) , context ) ) ; } else { return METHOD_3 ( object , VAR_1 , context ) ; } }
",,,"public final TYPE_2 < TYPE_3 > METHOD_1 ( Object object , TYPE_4 VAR_1 , TYPE_1 context ) { if ( VAR_2 . isPresent ( ) ) { return VAR_2 . get ( ) . METHOD_1 ( object , VAR_1 , context ) . METHOD_2 ( VAR_3 - > METHOD_3 ( object , VAR_3 . METHOD_4 ( ) , context ) ) ; } else { return METHOD_3 ( object , VAR_1 , context ) ; } }
",,,"public final < C > Stream < Match > match ( Object object , Captures captures , C context ) { if ( previous . isPresent ( ) ) { return previous . get ( ) . match ( object , captures , context ) . flatMap ( match - > accept ( object , match . captures ( ) , context ) ) ; } else { return accept ( object , captures , context ) ; } }
",,,"public final < C > Stream < Match > match ( Object object , Captures captures , C context ) { if ( previous . isPresent ( ) ) { return previous . get ( ) . match ( object , captures , context ) . flatMap ( match - > accept ( object , match . captures ( ) , context ) ) ; } else { return accept ( object , captures , context ) ; } }
",,,"public < C > Stream < Match > match ( Object object , Captures captures , C context ) { if ( previous . isPresent ( ) ) { return previous . get ( ) . match ( object , captures , context ) . flatMap ( match - > accept ( object , match . captures ( ) , context ) ) ; } else { return accept ( object , captures , context ) ; } }
",,
1418,"public void checkIPAdress ( ) { Set < ConstraintViolation < IPAdress > > validate = validator . validate ( new IPAdress ( address ) ) ; assertEquals ( expectedResult , validate . isEmpty ( ) ) ; }
","public void METHOD_1 ( ) { Set < TYPE_1 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_3 ) ) ; assertEquals ( VAR_4 , VAR_1 . isEmpty ( ) ) ; }
","public void METHOD_1 ( ) { Set < TYPE_1 < TYPE_2 > > VAR_1 = VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_3 ) ) ; assertEquals ( VAR_4 , VAR_1 . size ( ) ) ; }
",,,"public void METHOD_1 ( ) { assertEquals ( VAR_4 , VAR_2 . METHOD_2 ( new TYPE_2 ( VAR_3 ) ) ) ; }
",,,"public void checkIPAddress ( ) { Set < ConstraintViolation < IPAddress > > validate = validator . validate ( new IPAddress ( address ) ) ; assertEquals ( expectedResult , validate . isEmpty ( ) ) ; }
",,,"public void checkIPAdress ( ) { Set < ConstraintViolation < IPAdress > > validate = validator . validate ( new IPAdress ( address ) ) ; assertEquals ( expectedResult , validate . isEmpty ( ) ) ; }
",,,"public void checkIPAdress ( ) { Set < ConstraintViolation < IPAdress > > validate = validator . validate ( new IPAdress ( address ) ) ; assertEquals ( expectedResult , validate . isEmpty ( ) ) ; }
",,
1424,"private TreeLayer getTreeLayer ( ) throws Exception { NatTable natTable = ( NatTable ) getTableManager ( ) . getAdapter ( NatTable . class ) ; ILayer layer = natTable . getLayer ( ) ; if ( layer instanceof PapyrusGridLayer ) { PapyrusGridLayer gridLayer = ( PapyrusGridLayer ) layer ; ILayer rowLayer = gridLayer . getRowHeaderLayer ( ) ; if ( rowLayer instanceof RowHeaderHierarchicalLayerStack ) { return ( ( RowHeaderHierarchicalLayerStack ) rowLayer ) . getTreeLayer ( ) ; } } throw new UnknownError ( ""TreeLayer has not been found"" ) ; // $NON - NLS - 1$ }
","private TYPE_1 METHOD_1 ( ) throws Exception { TYPE_2 VAR_1 = ( TYPE_2 ) METHOD_2 ( ) . METHOD_3 ( TYPE_2 . class ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 instanceof TYPE_4 ) { TYPE_4 VAR_3 = ( TYPE_4 ) VAR_2 ; TYPE_3 VAR_4 = VAR_3 . METHOD_5 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { return ( ( TYPE_5 ) VAR_4 ) . METHOD_1 ( ) ; } } throw new TYPE_6 ( STRING_1 ) ; }
","private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( TYPE_2 ) METHOD_2 ( ) . METHOD_3 ( TYPE_2 . class ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 instanceof TYPE_4 ) { TYPE_4 VAR_3 = ( TYPE_4 ) VAR_2 ; TYPE_3 VAR_4 = VAR_3 . METHOD_5 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { return ( ( TYPE_5 ) VAR_4 ) . METHOD_1 ( ) ; } } throw new TYPE_6 ( STRING_1 ) ; }
",,,"private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = ( TYPE_2 ) METHOD_2 ( ) . METHOD_3 ( TYPE_2 . class ) ; TYPE_3 VAR_2 = VAR_1 . METHOD_4 ( ) ; if ( VAR_2 instanceof TYPE_4 ) { TYPE_4 VAR_3 = ( TYPE_4 ) VAR_2 ; TYPE_3 VAR_4 = VAR_3 . METHOD_5 ( ) ; if ( VAR_4 instanceof TYPE_5 ) { return ( ( TYPE_5 ) VAR_4 ) . METHOD_1 ( ) ; } } throw new TYPE_6 ( STRING_1 ) ; }
",,,"private TreeLayer getTreeLayer ( ) throws UnknownError { NatTable natTable = ( NatTable ) getTableManager ( ) . getAdapter ( NatTable . class ) ; ILayer layer = natTable . getLayer ( ) ; if ( layer instanceof PapyrusGridLayer ) { PapyrusGridLayer gridLayer = ( PapyrusGridLayer ) layer ; ILayer rowLayer = gridLayer . getRowHeaderLayer ( ) ; if ( rowLayer instanceof RowHeaderHierarchicalLayerStack ) { return ( ( RowHeaderHierarchicalLayerStack ) rowLayer ) . getTreeLayer ( ) ; } } throw new UnknownError ( ""TreeLayer has not been found"" ) ; // $NON - NLS - 1$ }
",,,"private TreeLayer getTreeLayer ( ) { NatTable natTable = ( NatTable ) getTableManager ( ) . getAdapter ( NatTable . class ) ; ILayer layer = natTable . getLayer ( ) ; if ( layer instanceof PapyrusGridLayer ) { PapyrusGridLayer gridLayer = ( PapyrusGridLayer ) layer ; ILayer rowLayer = gridLayer . getRowHeaderLayer ( ) ; if ( rowLayer instanceof RowHeaderHierarchicalLayerStack ) { return ( ( RowHeaderHierarchicalLayerStack ) rowLayer ) . getTreeLayer ( ) ; } } throw new UnknownError ( ""TreeLayer has not been found"" ) ; }
",,,"private TreeLayer getTreeLayer ( ) throws UnknownError { NatTable natTable = ( NatTable ) getTableManager ( ) . getAdapter ( NatTable . class ) ; ILayer layer = natTable . getLayer ( ) ; if ( layer instanceof PapyrusGridLayer ) { PapyrusGridLayer gridLayer = ( PapyrusGridLayer ) layer ; ILayer rowLayer = gridLayer . getRowHeaderLayer ( ) ; if ( rowLayer instanceof RowHeaderHierarchicalLayerStack ) { return ( ( RowHeaderHierarchicalLayerStack ) rowLayer ) . getTreeLayer ( ) ; } } throw new UnknownError ( ""TreeLayer has not been found"" ) ; // $NON - NLS - 1$ }
",,
1427,"protected String convert ( Blob blob ) { if ( blob . getLength ( ) == 0L ) { return """" ; } try ( InputStream stream = blob . getStream ( ) ) { Xml2TextHandler xml2text = new Xml2TextHandler ( ) ; return xml2text . parse ( stream ) ; } catch ( IOException | SAXException | ParserConfigurationException e ) { throw new ConversionException ( ""Error during XML2Text conversion"" , blob , e ) ; } }
","protected String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) == INT_1 ) { return """" ; } try ( TYPE_2 stream = VAR_1 . METHOD_3 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; return VAR_2 . parse ( stream ) ; } catch ( IOException | TYPE_4 | TYPE_5 e ) { throw new TYPE_6 ( STRING_1 , VAR_1 , e ) ; } }
","private String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) == INT_1 ) { return """" ; } try ( TYPE_2 stream = VAR_1 . METHOD_3 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; return VAR_2 . parse ( stream ) ; } catch ( IOException | TYPE_4 | TYPE_5 e ) { throw new TYPE_6 ( STRING_1 , e ) ; } }
",,,"private String METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_1 . METHOD_2 ( ) == INT_1 ) { return """" ; } try ( TYPE_2 stream = VAR_1 . METHOD_3 ( ) ) { TYPE_3 VAR_2 = new TYPE_3 ( ) ; return VAR_2 . parse ( stream ) ; } catch ( IOException | TYPE_4 | TYPE_5 e ) { throw new TYPE_6 ( STRING_1 , e ) ; } }
",,,"public String convert ( Blob blob ) throws ConversionException { if ( blob . getLength ( ) == 0L ) { return """" ; } try ( InputStream stream = blob . getStream ( ) ) { Xml2TextHandler xml2text = new Xml2TextHandler ( ) ; return xml2text . parse ( stream ) ; } catch ( IOException | SAXException | ParserConfigurationException e ) { throw new ConversionException ( ""Error during XML2Text conversion"" , e ) ; } } I added Javadoc comments to describe the method and its parameters , and added a `throws` clause to indicate that the method may throw a `ConversionException` .
",,,"protected StringBuilder customizeAfterNewLineForDeclaration ( IDocument doc , IASTDeclaration dec , ITypedRegion region ) { return customizeAfterNewLineForDeclaration ( doc , dec , region , null ) ; } public FilteredCheckboxTree ( Composite parent , int treeStyle , PatternFilter filter , boolean useNewLook ) { super ( parent , treeStyle , filter , useNewLook ) ; } @Override public void onReceive ( Context context , Intent intent ) { if ( null == intent ) { return ; } String action = intent . getAction ( ) ; Bundle extras = intent . getExtras ( ) ; if ( ACTION_AIRPLANE_MODE_CHANGED . equals ( action ) ) { dispatchAirplaneModeChange ( extras . getBoolean ( EXTRA_AIRPLANE_STATE , false ) ) ; } else if ( CONNECTIVITY_ACTION . equals ( action ) ) { dispatchNetworkStateChange ( connectivityManager . getActiveNetworkInfo ( ) ) ; } } String convert ( Blob blob ) { if ( blob . getLength ( ) == 0L ) { return """" ; } try ( InputStream stream = blob . getStream ( ) ) { Xml2TextHandler xml2text = new Xml2TextHandler ( ) ; return xml2text . parse ( stream ) ; } catch ( IOException | SAXException | ParserConfigurationException e ) { throw new ConversionException ( ""Error during XML2Text conversion"" , e ) ; } }
",,,"String convert ( Blob blob ) { if ( blob . getLength ( ) == 0L ) { return """" ; } try ( InputStream stream = blob . getStream ( ) ) { Xml2TextHandler xml2text = new Xml2TextHandler ( ) ; return xml2text . parse ( stream ) ; } catch ( IOException | SAXException | ParserConfigurationException e ) { throw new ConversionException ( ""Error during XML2Text conversion"" , e ) ; } }
",,
1440,"private List < DiskImage > manualAggregateSnapshots ( ) { DiskImage diskWithSnaps = diskWithSnapshots ; diskWithSnaps . getSnapshots ( ) . addAll ( snapshotsList ) ; return Arrays . asList ( diskWithSnapshots , diskWithoutSnapshots , ovfImage , cinderDisk ) ; }
","private List < TYPE_3 > METHOD_1 ( ) { TYPE_3 VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( ) . addAll ( VAR_3 ) ; return Arrays . asList ( VAR_2 , VAR_4 , VAR_5 , VAR_6 ) ; }
","private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > TYPE_2 = new ArrayList < > ( ) ; TYPE_3 VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( ) . addAll ( VAR_3 ) ; TYPE_2 . add ( VAR_2 ) ; TYPE_2 . add ( VAR_4 ) ; TYPE_2 . add ( VAR_5 ) ; TYPE_2 . add ( VAR_6 ) ; return TYPE_2 ; }
",,,"private List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > TYPE_2 = new ArrayList < > ( ) ; TYPE_3 VAR_1 = VAR_2 ; VAR_1 . METHOD_2 ( ) . addAll ( VAR_3 ) ; TYPE_2 . add ( VAR_2 ) ; TYPE_2 . add ( VAR_4 ) ; TYPE_2 . add ( VAR_5 ) ; TYPE_2 . add ( VAR_6 ) ; return TYPE_2 ; }
",,,"private List < Disk > manualAggregateSnapshots ( ) { List < Disk > param = new ArrayList < > ( ) ; DiskImage diskWithSnaps = diskWithSnapshots ; diskWithSnaps . getSnapshots ( ) . addAll ( snapshotsList ) ; param . add ( diskWithSnapshots ) ; param . add ( diskWithoutSnapshots ) ; param . add ( ovfImage ) ; param . add ( cinderDisk ) ; return param ; }
",,,"private List < Disk > manualAggregateSnapshots ( ) { List < Disk > param = new ArrayList < > ( ) ; DiskImage diskWithSnaps = diskWithSnapshots ; diskWithSnaps . getSnapshots ( ) . addAll ( snapshotsList ) ; param . add ( diskWithSnapshots ) ; param . add ( diskWithoutSnapshots ) ; param . add ( ovfImage ) ; param . add ( cinderDisk ) ; return param ; }
",,,"private List < Disk > manualAggregateSnapshots ( ) { List < Disk > param = new ArrayList < > ( ) ; DiskImage diskWithSnaps = diskWithSnapshots ; diskWithSnaps . getSnapshots ( ) . addAll ( snapshotsList ) ; param . add ( diskWithSnapshots ) ; param . add ( diskWithoutSnapshots ) ; param . add ( ovfImage ) ; param . add ( cinderDisk ) ; return param ; }
",,
1451,"void thread2 ( ) { int [ ] vs1 ; synchronized ( lock ) { vs1 = values ; state = 1 ; } int s ; do { synchronized ( lock ) { s = state ; } } while ( s != 2 ) ; // Busy loop . int [ ] vs2 = values ; int v1 = vs1 [ 0 ] ; int v2 = vs2 [ 0 ] ; System . out . println ( ""b17689750TestMonitor failed : "" + v1 + "" , "" + v2 ) ; }
","void METHOD_1 ( ) { int [ ] VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = values ; state = 1 ; } int s ; do { synchronized ( VAR_2 ) { s = state ; } } while ( s != 2 ) ; int [ ] VAR_3 = values ; int VAR_4 = VAR_1 [ 0 ] ; int VAR_5 = VAR_3 [ 0 ] ; System . out . println ( STRING_1 + VAR_4 + STRING_2 + VAR_5 ) ; }
","void METHOD_1 ( ) { int [ ] VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = values ; state = 1 ; } int s ; do { synchronized ( VAR_2 ) { s = state ; } } while ( s != 2 ) ; int [ ] VAR_3 ; VAR_3 = values ; int VAR_4 = VAR_1 [ 0 ] ; int VAR_5 = VAR_3 [ 0 ] ; System . out . println ( STRING_1 + VAR_4 + STRING_2 + VAR_5 ) ; }
",,,"void METHOD_1 ( ) { int [ ] VAR_1 ; synchronized ( VAR_2 ) { VAR_1 = values ; state = 1 ; } int s ; do { synchronized ( VAR_2 ) { s = state ; } } while ( s != 2 ) ; int [ ] VAR_3 ; VAR_3 = values ; int VAR_4 = VAR_1 [ 0 ] ; int VAR_5 = VAR_3 [ 0 ] ; System . out . println ( STRING_1 + VAR_4 + STRING_2 + VAR_5 ) ; }
",,,"void thread2 ( ) { int [ ] vs1 = values ; state = 1 ; int s ; do { s = state ; } while ( s != 2 ) ; // Busy loop . int [ ] vs2 = values ; int v1 = vs1 [ 0 ] ; int v2 = vs2 [ 0 ] ; System . out . println ( ""b17689750TestMonitor failed : "" + v1 + "" , "" + v2 ) ; }
",,,"void thread2 ( ) { int [ ] vs1 ; synchronized ( lock ) { vs1 = values ; state = 1 ; } int s ; do { synchronized ( lock ) { s = state ; } } while ( s != 2 ) ; // Busy loop . int [ ] vs2 ; vs2 = values ; int v1 = vs1 [ 0 ] ; int v2 = vs2 [ 0 ] ; System . out . println ( ""b17689750TestMonitor failed : "" + v1 + "" , "" + v2 ) ; }
",,,"void thread2 ( ) { int [ ] vs1 ; synchronized ( lock ) { vs1 = values ; state = 1 ; } int s ; do { synchronized ( lock ) { s = state ; } } while ( s != 2 ) ; // Busy loop . int [ ] vs2 ; synchronized ( lock ) { vs2 = values ; } int v1 = vs1 [ 0 ] ; int v2 = vs2 [ 0 ] ; System . out . println ( ""b17689750TestMonitor failed : "" + v1 + "" , "" + v2 ) ; }
",,
1459,"public void checkSelectFilter ( final String label , final String value ) { selectInputs . computeIfPresent ( label , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && i . getChecked ( ) == false ) { i . setChecked ( true ) ; } } ) ; return values ; } ) ; }
","public void METHOD_1 ( final String VAR_1 , final String value ) { VAR_2 . METHOD_2 ( VAR_1 , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && i . VAR_3 ( ) == false ) { i . VAR_4 ( true ) ; } } ) ; return values ; } ) ; }
","public void METHOD_1 ( final String VAR_1 , final String value ) { VAR_2 . METHOD_2 ( VAR_1 , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) || i . getValue ( ) == value ) { i . VAR_4 ( true ) ; } } ) ; return values ; } ) ; }
",,,"public void METHOD_1 ( final String VAR_1 , final String value ) { VAR_2 . METHOD_2 ( VAR_1 , ( key , values ) - > { values . forEach ( i - > { if ( ( i . getValue ( ) . equals ( value ) || i . getValue ( ) . equals ( value ) ) && i . VAR_3 ( ) == false ) { i . VAR_4 ( true ) ; } } ) ; return values ; } ) ; }
",,,"public void checkSelectFilter ( final String label , final String value ) { selectInputs . computeIfPresent ( label , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && ! i . getChecked ( ) ) { i . setChecked ( true ) ; } } ) ; return values ; } ) ; }
",,,"public void checkSelectFilter ( final String label , final String value ) { selectInputs . computeIfPresent ( label , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && ! i . getChecked ( ) ) { i . setChecked ( true ) ; } } ) ; return values ; } ) ; }
",,,"public void checkSelectFilter ( final String label , final String value ) { selectInputs . computeIfPresent ( label , ( key , values ) - > { values . forEach ( i - > { if ( i . getValue ( ) . equals ( value ) && i . getChecked ( ) == false ) { i . setChecked ( true ) ; } } ) ; return values ; } ) ; }
",,
1464,"public Set < K > keySet ( Predicate predicate ) { checkNotNull ( predicate , ""Predicate cannot be null ! "" ) ; Set < K > resultingSet = new HashSet < K > ( ) ; Set < QueryableEntry > query = indexes . query ( predicate ) ; if ( query != null ) { for ( QueryableEntry entry : query ) { K key = toObject ( entry . getKeyData ( ) ) ; resultingSet . add ( key ) ; } } else { doFullKeyScan ( predicate , resultingSet ) ; } return resultingSet ; }
","public Set < TYPE_1 > keySet ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 ) ; Set < TYPE_1 > VAR_2 = new HashSet < TYPE_1 > ( ) ; Set < TYPE_3 > query = VAR_3 . query ( VAR_1 ) ; if ( query != null ) { for ( TYPE_3 entry : query ) { TYPE_1 key = METHOD_2 ( entry . VAR_5 ( ) ) ; VAR_2 . add ( key ) ; } } else { METHOD_3 ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }
","public Set < TYPE_1 > keySet ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 ) ; Set < TYPE_1 > VAR_2 = new HashSet < TYPE_1 > ( ) ; Set < TYPE_3 > query = VAR_3 . query ( VAR_1 ) ; if ( query != null ) { for ( TYPE_3 entry : query ) { TYPE_1 key = METHOD_2 ( entry . VAR_5 ( ) ) ; VAR_2 . add ( key ) ; } } else { METHOD_3 ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }
",,,"public Set < TYPE_1 > keySet ( TYPE_2 VAR_1 ) { METHOD_1 ( VAR_1 , STRING_1 ) ; Set < TYPE_1 > VAR_2 = new HashSet < TYPE_1 > ( ) ; Set < TYPE_3 > query = VAR_3 . query ( VAR_1 ) ; if ( query != null ) { for ( TYPE_3 entry : query ) { TYPE_1 key = ( TYPE_1 ) entry . VAR_5 ( ) ; VAR_2 . add ( key ) ; } } else { METHOD_3 ( VAR_1 , VAR_2 ) ; } return VAR_2 ; }
",,,"public Set < K > keySet ( Predicate predicate ) { checkNotNull ( predicate , ""Predicate cannot be null ! "" ) ; Set < K > resultingSet = new HashSet < > ( ) ; Set < QueryableEntry > query = indexes . query ( predicate ) ; if ( query != null ) { for ( QueryableEntry entry : query ) { K key = serializationService . toObject ( entry . getKeyData ( ) ) ; resultingSet . add ( key ) ; } } else { doFullKeyScan ( predicate , resultingSet ) ; } return resultingSet ; }
",,,"public Set < K > keySet ( Predicate predicate ) { checkNotNull ( predicate , ""Predicate cannot be null ! "" ) ; Set < K > resultingSet = new HashSet < K > ( ) ; Set < QueryableEntry > query = indexes . query ( predicate ) ; if ( query != null ) { for ( QueryableEntry entry : query ) { K key = serializationService . toObject ( entry . getKeyData ( ) ) ; resultingSet . add ( key ) ; } } else { doFullKeyScan ( predicate , resultingSet ) ; } return resultingSet ; }
",,,"public Set < K > keySet ( Predicate predicate ) { checkNotNull ( predicate , ""Predicate cannot be null ! "" ) ; Set < K > resultingSet = new HashSet < K > ( ) ; Set < QueryableEntry > query = indexes . query ( predicate ) ; if ( query != null ) { for ( QueryableEntry entry : query ) { K key = ( K ) entry . getKey ( ) ; resultingSet . add ( key ) ; } } else { doFullKeyScan ( predicate , resultingSet ) ; } return resultingSet ; }
",,
1472,"public String toString ( ) { return toStringHelper ( this ) . omitNullValues ( ) . add ( ""equiCriteria"" , equiCriteria ) . add ( ""filter"" , filter . orElse ( null ) ) . toString ( ) ; }
","public String toString ( ) { return METHOD_1 ( this ) . METHOD_2 ( ) . add ( STRING_1 , VAR_1 ) . add ( STRING_2 , filter . VAR_2 ( null ) ) . toString ( ) ; }
","public String toString ( ) { return METHOD_1 ( this ) . METHOD_2 ( ) . add ( STRING_2 , filter . VAR_2 ( null ) ) . toString ( ) ; }
",,,"public String toString ( ) { return METHOD_1 ( this ) . METHOD_2 ( ) . add ( STRING_2 , filter . VAR_2 ( null ) ) . toString ( ) ; }
",,,"public String toString ( ) { return toStringHelper ( ) . omitNullValues ( ) . add ( ""equiCriteria"" , equiCriteria ) . add ( ""filter"" , filter . orElse ( null ) ) . toString ( ) ; }
",,,"public String toString ( ) { return toStringHelper ( ) . omitNullValues ( ) . add ( ""equiCriteria"" , equiCriteria ) . add ( ""filter"" , filter . orElse ( null ) ) . toString ( ) ; }
",,,"public String toString ( ) { return toStringHelper ( this ) . omitNullValues ( ) . add ( ""equiCriteria"" , equiCriteria ) . add ( ""filter"" , filter . orElse ( null ) ) . toString ( ) ; }
",,
1477,"ShardRewriter createShardRewriter ( FileSystemContext fileSystemContext , FileSystem fileSystem , long transactionId , OptionalInt bucketNumber , UUID shardUuid , int shardRowCount , Optional < UUID > deltaShardUuid , boolean tableSupportsDeltaDelete , Map < String , Type > columns ) { if ( tableSupportsDeltaDelete ) { return new DeltaShardRewriter ( shardUuid , shardRowCount , deltaShardUuid , deletionExecutor , transactionId , bucketNumber , this , fileSystemContext , fileSystem ) ; } return new InplaceShardRewriter ( shardUuid , columns , deletionExecutor , transactionId , bucketNumber , nodeId , this , fileSystem , storageService , shardRecorder , backupManager ) ; }
","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , long VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , int VAR_6 , Optional < TYPE_5 > VAR_7 , boolean VAR_8 , Map < String , Type > VAR_9 ) { if ( VAR_8 ) { return new TYPE_6 ( VAR_5 , VAR_6 , VAR_7 , VAR_10 , VAR_3 , VAR_4 , this , VAR_1 , VAR_2 ) ; } return new TYPE_7 ( VAR_5 , VAR_9 , VAR_10 , VAR_3 , VAR_4 , VAR_11 , this , VAR_2 , VAR_12 , VAR_13 , VAR_14 ) ; }
","TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , long VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , int VAR_6 , Optional < TYPE_5 > VAR_7 , boolean VAR_8 , Map < String , Type > VAR_9 ) { if ( VAR_8 ) { return new TYPE_6 ( VAR_5 , VAR_6 , VAR_7 , VAR_10 , VAR_3 , VAR_4 , this , VAR_1 , VAR_2 ) ; } return new TYPE_7 ( VAR_5 , VAR_9 , VAR_10 , VAR_3 , VAR_4 , VAR_11 , this , VAR_2 , VAR_12 , VAR_13 , VAR_14 ) ; }
",,,"TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , long VAR_3 , TYPE_4 VAR_4 , TYPE_5 VAR_5 , int VAR_6 , Optional < TYPE_5 > VAR_7 , boolean VAR_8 , Map < String , Type > VAR_9 ) { return new TYPE_6 ( VAR_5 , VAR_6 , VAR_7 , VAR_10 , VAR_3 , VAR_4 , this , VAR_2 , VAR_12 , VAR_13 , VAR_14 ) ; }
",,,"ShardRewriter createShardRewriter ( FileSystemContext fileSystemContext , FileSystem fileSystem , long transactionId , OptionalInt bucketNumber , UUID shardUuid , int shardRowCount , Optional < UUID > deltaShardUuid , boolean tableSupportsDeltaDelete , Map < String , Type > columns ) { if ( tableSupportsDeltaDelete ) { return new DeltaShardRewriter ( shardUuid , shardRowCount , deltaShardUuid , deletionExecutor , transactionId , bucketNumber , this , fileSystemContext , fileSystem ) ; } else { return new InplaceShardRewriter ( shardUuid , columns , deletionExecutor , transactionId , bucketNumber , nodeId , this , fileSystem , storageService , shardRecorder , backupManager ) ; } }
",,,"ShardRewriter createShardRewriter ( FileSystemContext fileSystemContext , FileSystem fileSystem , long transactionId , OptionalInt bucketNumber , UUID shardUuid , int shardRowCount , Optional < UUID > deltaShardUuid , boolean tableSupportsDeltaDelete , Map < String , Type > columns ) { if ( tableSupportsDeltaDelete ) { return new DeltaShardRewriter ( shardUuid , shardRowCount , deltaShardUuid , deletionExecutor , transactionId , bucketNumber , this , fileSystemContext , fileSystem ) ; } else { return new InplaceShardRewriter ( shardUuid , columns , deletionExecutor , transactionId , bucketNumber , nodeId , this , fileSystem , storageService , shardRecorder , backupManager ) ; } }
",,,"ShardRewriter createShardRewriter ( FileSystemContext fileSystemContext , FileSystem fileSystem , long transactionId , OptionalInt bucketNumber , UUID shardUuid , int shardRowCount , Optional < UUID > deltaShardUuid , boolean tableSupportsDeltaDelete , Map < String , Type > columns ) { if ( tableSupportsDeltaDelete ) { return new DeltaShardRewriter ( shardUuid , shardRowCount , deltaShardUuid , deletionExecutor , transactionId , bucketNumber , this , fileSystemContext , fileSystem ) ; } else { return new InplaceShardRewriter ( shardUuid , columns , deletionExecutor , transactionId , bucketNumber , nodeId , this , fileSystem , storageService , shardRecorder , backupManager ) ; } }
",,
1478,"public void init ( ) { setLabel ( ""Plugin"" ) ; addAttribute ( ID , ROLE_ID ) . setLabel ( ""Identifier"" ) ; addAttribute ( LABEL , ROLE_LABEL , ROLE_LOOKUP ) . setNillable ( false ) . setUnique ( true ) . setLabel ( ""Label"" ) ; addAttribute ( DESCRIPTION , ROLE_LOOKUP ) . setLabel ( ""Description"" ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_2 ( STRING_2 ) ; METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_4 ( false ) . METHOD_5 ( true ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( VAR_6 , VAR_5 ) . METHOD_2 ( STRING_4 ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_2 ( STRING_2 ) ; METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_4 ( false ) . METHOD_5 ( true ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( VAR_6 , VAR_5 ) . METHOD_2 ( STRING_4 ) . METHOD_6 ( VAR_7 ) ; }
",,,"public void METHOD_1 ( ) { METHOD_2 ( STRING_1 ) ; METHOD_3 ( VAR_1 , VAR_2 ) . METHOD_2 ( STRING_2 ) ; METHOD_3 ( VAR_3 , VAR_4 , VAR_5 ) . METHOD_4 ( false ) . METHOD_5 ( true ) . METHOD_2 ( STRING_3 ) ; METHOD_3 ( VAR_6 , VAR_5 ) . METHOD_2 ( STRING_4 ) . METHOD_6 ( VAR_7 ) ; }
",,,"public void init ( ) { setLabel ( ""Plugin"" ) ; addAttribute ( ID , ROLE_ID ) . setLabel ( ""Identifier"" ) ; addAttribute ( LABEL , ROLE_LABEL , ROLE_LOOKUP ) . setNillable ( false ) . setUnique ( true ) . setLabel ( ""Label"" ) ; addAttribute ( DESCRIPTION , ROLE_LOOKUP ) . setLabel ( ""Description"" ) . setDataType ( TEXT ) ; }
",,,"public void init ( ) { setLabel ( ""Plugin"" ) ; addAttribute ( ID , ROLE_ID ) . setLabel ( ""Identifier"" ) ; addAttribute ( LABEL , ROLE_LABEL , ROLE_LOOKUP ) . setNillable ( false ) . setUnique ( true ) . setLabel ( ""Label"" ) ; addAttribute ( DESCRIPTION , ROLE_LOOKUP ) . setLabel ( ""Description"" ) . setDataType ( TEXT ) ; }
",,,"public void init ( ) { setLabel ( ""Plugin"" ) ; addAttribute ( ID , ROLE_ID ) . setLabel ( ""Identifier"" ) ; addAttribute ( LABEL , ROLE_LABEL , ROLE_LOOKUP ) . setNillable ( false ) . setUnique ( true ) . setLabel ( ""Label"" ) ; addAttribute ( DESCRIPTION , ROLE_LOOKUP ) . setLabel ( ""Description"" ) . setDataType ( TEXT ) ; }
",,
1483,"public static VoltDBInterface instance ( ) { return singleton ; }
","public static TYPE_1 instance ( ) { return VAR_1 ; }
","public static TYPE_1 instance ( ) { if ( VAR_1 == null ) { VAR_1 = new TYPE_2 ( ) ; } return VAR_1 ; }
",,,"public static TYPE_1 instance ( ) { if ( VAR_1 == null ) { VAR_1 = new TYPE_2 ( ) ; } return VAR_1 ; }
",,,"public static VoltDBInterface instance ( ) { if ( singleton == null ) { synchronized ( VoltDBInterface . class ) { if ( singleton == null ) { singleton = new RealVoltDB ( ) ; } } } return singleton ; }
",,,"public static VoltDBInterface instance ( ) { if ( singleton == null ) { singleton = new RealVoltDB ( ) ; } return singleton ; }
",,,"public static VoltDBInterface instance ( ) { if ( singleton == null ) { singleton = new RealVoltDB ( ) ; } return singleton ; }
",,
1485,"public void ensureSettingsSavedShowsFormIfValidationFails ( ) throws Exception { doAnswer ( invocation - > { Errors errors = invocation . getArgument ( 1 ) ; errors . rejectValue ( ""absenceSettings"" , ""error"" ) ; return null ; } ) . when ( settingsValidator ) . validate ( any ( ) , any ( ) ) ; perform ( post ( "" / web / settings"" ) ) . andExpect ( view ( ) . name ( ""settings / settings_form"" ) ) ; }
","public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 - > { TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( 1 ) ; VAR_2 . METHOD_4 ( STRING_1 , STRING_2 ) ; return null ; } ) . when ( VAR_3 ) . METHOD_5 ( METHOD_6 ( ) , METHOD_6 ( ) ) ; METHOD_7 ( METHOD_8 ( STRING_3 ) ) . METHOD_9 ( view ( ) . name ( STRING_4 ) ) ; }
","public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 - > { TYPE_1 VAR_2 = VAR_1 . METHOD_3 ( 1 ) ; VAR_2 . METHOD_4 ( STRING_1 , STRING_2 ) ; return null ; } ) . when ( VAR_3 ) . METHOD_5 ( METHOD_6 ( ) , METHOD_6 ( ) ) ; METHOD_7 ( METHOD_8 ( STRING_3 ) ) . METHOD_9 ( view ( ) . name ( STRING_4 ) ) ; }
",,,"public void METHOD_1 ( ) throws Exception { METHOD_2 ( VAR_1 - > { VAR_1 . METHOD_3 ( 1 ) . METHOD_4 ( STRING_1 , STRING_2 ) ; return null ; } ) . when ( VAR_3 ) . METHOD_5 ( METHOD_6 ( ) , METHOD_6 ( ) ) ; METHOD_7 ( METHOD_8 ( STRING_3 ) ) . METHOD_9 ( view ( ) . name ( STRING_4 ) ) ; }
",,,"public void ensureSettingsSavedShowsFormIfValidationFails ( ) throws Exception { doAnswer ( invocation - > { Errors errors = invocation . getArgument ( 1 ) ; errors . rejectValue ( ""absenceSettings"" , ""error"" ) ; return null ; } ) . when ( settingsValidator ) . validate ( any ( ) , any ( ) ) ; perform ( post ( "" / web / settings"" ) ) . andExpect ( view ( ) . name ( ""settings / settings_form"" ) ) ; }
",,,"private void ensureSettingsSavedShowsFormIfValidationFails ( ) throws Exception { doAnswer ( invocation - > { Errors errors = invocation . getArgument ( 1 ) ; errors . rejectValue ( ""absenceSettings"" , ""error"" ) ; return null ; } ) . when ( settingsValidator ) . validate ( any ( ) , any ( ) ) ; perform ( post ( "" / web / settings"" ) ) . andExpect ( view ( ) . name ( ""settings / settings_form"" ) ) ; }
",,,"public void ensureSettingsSavedShowsFormIfValidationFails ( ) throws Exception { doAnswer ( invocation - > { Errors errors = invocation . getArgument ( 1 ) ; errors . rejectValue ( ""absenceSettings"" , ""error"" ) ; return null ; } ) . when ( settingsValidator ) . validate ( any ( ) , any ( ) ) ; perform ( post ( "" / web / settings"" ) ) . andExpect ( view ( ) . name ( ""settings / settings_form"" ) ) ; }
",,
1489,"String getClientId ( ) { return clientMessageBus . getClientId ( ) ; }
","String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
","private String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
",,,"private String METHOD_1 ( ) { return VAR_1 . METHOD_1 ( ) ; }
",,,"private String getClientId ( ) { return clientMessageBus . getClientId ( ) ; }
",,,"private String getClientId ( ) { return clientMessageBus . getClientId ( ) ; }
",,,"private String getClientId ( ) { return clientMessageBus . getClientId ( ) ; }
",,
1490,"private void configureManagementNetwork ( ) { final NetworkConfigurator networkConfigurator = new NetworkConfigurator ( getVds ( ) ) ; if ( ! networkConfigurator . awaitVdsmResponse ( ) ) { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } try { networkConfigurator . refreshNetworkConfiguration ( ) ; networkConfigurator . createManagementNetworkIfRequired ( ) ; } catch ( VDSNetworkException e ) { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" , e ) ; } catch ( Exception e ) { throw new VdsInstallException ( VDSStatus . NonOperational , ""Failed to configure manamgent network on the host"" , e ) ; } }
","private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; if ( ! VAR_1 . METHOD_3 ( ) ) { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 ) ; } try { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 , e ) ; } catch ( Exception e ) { throw new TYPE_3 ( TYPE_4 . TYPE_5 , STRING_2 , e ) ; } }
","private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { try { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 ) ; } } else { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 ) ; } }
",,,"private void METHOD_1 ( ) { final TYPE_1 VAR_1 = new TYPE_1 ( METHOD_2 ( ) ) ; if ( VAR_1 . METHOD_3 ( ) ) { try { VAR_1 . METHOD_4 ( ) ; VAR_1 . METHOD_5 ( ) ; } catch ( TYPE_2 e ) { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 ) ; } catch ( TYPE_3 e ) { throw new TYPE_3 ( TYPE_4 . TYPE_5 , STRING_2 ) ; } } else { throw new TYPE_3 ( TYPE_4 . TYPE_6 , STRING_1 ) ; } }
",,,"private void configureManagementNetwork ( ) { final NetworkConfigurator networkConfigurator = new NetworkConfigurator ( getVds ( ) ) ; if ( networkConfigurator . awaitVdsmResponse ( ) ) { try { networkConfigurator . refreshNetworkConfiguration ( ) ; networkConfigurator . createManagementNetworkIfRequired ( ) ; } catch ( VDSNetworkException e ) { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } catch ( Exception e ) { throw new VdsInstallException ( VDSStatus . NonOperational , ""Failed to configure management network on the host"" ) ; } } else { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } }
",,,"private void configureManagementNetwork ( ) { final NetworkConfigurator networkConfigurator = new NetworkConfigurator ( getVds ( ) ) ; if ( networkConfigurator . awaitVdsmResponse ( ) ) { try { networkConfigurator . refreshNetworkConfiguration ( ) ; networkConfigurator . createManagementNetworkIfRequired ( ) ; } catch ( VDSNetworkException e ) { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } catch ( VdsInstallException e ) { throw new VdsInstallException ( VDSStatus . NonOperational , ""Failed to configure management network on the host"" ) ; } } else { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } }
",,,"private void configureManagementNetwork ( ) { final NetworkConfigurator networkConfigurator = new NetworkConfigurator ( getVds ( ) ) ; if ( networkConfigurator . awaitVdsmResponse ( ) ) { try { networkConfigurator . refreshNetworkConfiguration ( ) ; networkConfigurator . createManagementNetworkIfRequired ( ) ; } catch ( VDSNetworkException e ) { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } catch ( VdsInstallException e ) { throw new VdsInstallException ( VDSStatus . NonOperational , ""Failed to configure management network on the host"" ) ; } } else { throw new VdsInstallException ( VDSStatus . NonResponsive , ""Network error during communication with the host"" ) ; } }
",,
1499,"public static void setInstance ( Object source , @MappingTarget Object target ) { Integer level = LEVEL . get ( ) ; fireMethodCalled ( level , ""setInstance"" , source , target ) ; if ( level == null ) { LEVEL . set ( 1 ) ; MAPPING . set ( new IdentityHashMap < Object , Object > ( ) ) ; } else { LEVEL . set ( level + 1 ) ; } MAPPING . get ( ) . put ( source , target ) ; }
","public static void METHOD_1 ( Object source , ANNOTATION_1 Object target ) { Integer VAR_1 = TYPE_1 . get ( ) ; METHOD_2 ( VAR_1 , STRING_1 , source , target ) ; if ( VAR_1 == null ) { TYPE_1 . set ( 1 ) ; TYPE_2 . set ( new TYPE_3 < Object , Object > ( ) ) ; } else { TYPE_1 . set ( VAR_1 + 1 ) ; } TYPE_2 . get ( ) . put ( source , target ) ; }
","public static void METHOD_1 ( Object source , ANNOTATION_1 Object target ) { Integer VAR_1 = TYPE_1 . get ( ) ; METHOD_2 ( VAR_1 , STRING_1 , source , target ) ; if ( VAR_1 == null ) { TYPE_1 . set ( 1 ) ; TYPE_2 . set ( new TYPE_3 < Object , Object > ( ) ) ; TYPE_2 . get ( ) . put ( source , target ) ; } }
",,,"public static void METHOD_1 ( Object source , ANNOTATION_1 Object target ) { Integer VAR_1 = TYPE_1 . get ( ) ; METHOD_2 ( VAR_1 , STRING_1 , source , target ) ; if ( VAR_1 == null ) { TYPE_1 . set ( 1 ) ; TYPE_2 . set ( new TYPE_3 < Object , Object > ( ) ) ; } else { TYPE_1 . set ( VAR_1 + 1 ) ; } TYPE_2 . get ( ) . put ( source , target ) ; }
",,,"public static void setInstance ( Object source , @MappingTarget Object target ) { Integer level = LEVEL . get ( ) ; fireMethodCalled ( level , ""setInstance"" , source , target ) ; if ( level == null ) { LEVEL . set ( 1 ) ; MAPPING . set ( new IdentityHashMap < > ( ) ) ; } else { LEVEL . set ( level + 1 ) ; } MAPPING . get ( ) . put ( source , target ) ; }
",,,"public static void setInstance ( Object source , @MappingTarget Object target ) { Integer level = LEVEL . get ( ) ; fireMethodCalled ( level , ""setInstance"" , source , target ) ; if ( level == null ) { LEVEL . set ( 1 ) ; MAPPING . set ( new IdentityHashMap < Object , Object > ( ) ) ; } else { LEVEL . set ( level + 1 ) ; } MAPPING . get ( ) . put ( source , target ) ; }
",,,"public static void setInstance ( Object source , @MappingTarget Object target ) { Integer level = LEVEL . get ( ) ; fireMethodCalled ( level , ""setInstance"" , source , target ) ; if ( level == null ) { LEVEL . set ( 1 ) ; MAPPING . set ( new IdentityHashMap < Object , Object > ( ) ) ; } else { LEVEL . set ( level + 1 ) ; } MAPPING . get ( ) . put ( source , target ) ; }
",,
1502,"public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt ( ) throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc ( ""We are introducing $ { myStringInCtxt } ! "" , WEBVIEW_RENDITION ) ; TemplateBasedDocument templateBase = createTemplateBasedDoc ( templateSrc . getAdaptedDoc ( ) ) ; List < TemplateInput > params = List . of ( factory ( ""myStringInCtxt"" , StringValue , ""Beautiful String"" ) ) ; templateBase . saveParams ( TEMPLATE_NAME , params , true ) ; Blob result = templateBase . renderWithTemplate ( TEMPLATE_NAME ) ; assertNotNull ( result ) ; assertEquals ( ""We are introducing Beautiful String ! "" , result . getString ( ) ) ; }
","public void METHOD_1 ( ) throws IOException { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; List < TYPE_3 > params = List . of ( factory ( STRING_2 , TYPE_5 , STRING_3 ) ) ; VAR_3 . METHOD_5 ( VAR_5 , params , true ) ; TYPE_4 result = VAR_3 . METHOD_6 ( VAR_5 ) ; assertNotNull ( result ) ; assertEquals ( STRING_4 , result . getString ( ) ) ; }
","public void METHOD_1 ( ) throws IOException { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; List < TYPE_3 > params = Arrays . asList ( factory ( STRING_2 , TYPE_5 , STRING_3 ) ) ; VAR_3 . METHOD_5 ( VAR_5 , params , true ) ; TYPE_4 result = VAR_3 . METHOD_6 ( VAR_5 ) ; assertNotNull ( result ) ; assertEquals ( STRING_4 , result . getString ( ) ) ; }
",,,"public void METHOD_1 ( ) throws IOException { TYPE_1 VAR_1 = METHOD_2 ( STRING_1 , VAR_2 ) ; TYPE_2 VAR_3 = METHOD_3 ( VAR_1 . METHOD_4 ( ) ) ; List < TYPE_3 > params = Arrays . asList ( factory ( STRING_2 , TYPE_5 , STRING_3 ) ) ; VAR_3 . METHOD_5 ( VAR_5 , params , true ) ; TYPE_4 result = VAR_3 . METHOD_6 ( VAR_5 ) ; assertNotNull ( result ) ; assertEquals ( STRING_4 , result . getString ( ) ) ; }
",,,"public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt ( ) throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc ( ""We are introducing $ { myStringInCtxt } ! "" , WEBVIEW_RITION ) ; TemplateBasedDocument templateBase = createTemplateBasedDoc ( templateSrc . getAdaptedDoc ( ) ) ; List < TemplateInput > params = List . of ( factory ( ""myStringInCtxt"" , StringValue , ""Beautiful String"" ) ) ; templateBase . saveParams ( TEMPLATE_NAME , params , true ) ; Blob result = templateBase . renderWithTemplate ( TEMPLATE_NAME ) ; assertNotNull ( result ) ; assertEquals ( ""We are introducing Beautiful String ! "" , result . getString ( ) ) ; }
",,,"public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt ( ) throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc ( ""We are introducing $ { myStringInCtxt } ! "" , WEBVIEW_RITION ) ; TemplateBasedDocument templateBase = createTemplateBasedDoc ( templateSrc . getAdaptedDoc ( ) ) ; List < TemplateInput > params = Collections . singletonList ( factory ( ""myStringInCtxt"" , StringValue , ""Beautiful String"" ) ) ; templateBase . saveParams ( TEMPLATE_NAME , params , true ) ; Blob result = templateBase . renderWithTemplate ( TEMPLATE_NAME ) ; assertNotNull ( result ) ; assertEquals ( ""We are introducing Beautiful String ! "" , result . getString ( ) ) ; }
",,,"public void whenTemplateWithGivenInputTemplate_String_shouldRenderBlobAsIt ( ) throws IOException { TemplateSourceDocument templateSrc = createTemplateSourceDoc ( ""We are introducing $ { myStringInCtxt } ! "" , WEBVIEW_R ITION ) ; TemplateBasedDocument templateBase = createTemplateBasedDoc ( templateSrc . getAdaptedDoc ( ) ) ; List < TemplateInput > params = Collections . singletonList ( factory ( ""myStringInCtxt"" , StringValue , ""Beautiful String"" ) ) ; templateBase . saveParams ( TEMPLATE_NAME , params , true ) ; Blob result = templateBase . renderWithTemplate ( TEMPLATE_NAME ) ; assertNotNull ( result ) ; assertEquals ( ""We are introducing Beautiful String ! "" , result . getString ( ) ) ; }
",,
1515,"public Path generateArtifact ( URI uri , int size ) throws IOException { buildPublishJson ( ) ; return getPackagePath ( ) ; }
","public Path METHOD_1 ( TYPE_1 uri , int size ) throws IOException { METHOD_2 ( ) ; return METHOD_3 ( ) ; }
","public Path METHOD_1 ( TYPE_1 uri , int size ) throws IOException { METHOD_2 ( ) ; return METHOD_3 ( ) ; }
",,,"public Path METHOD_1 ( TYPE_1 uri , int size ) throws IOException { new TYPE_2 ( TYPE_3 . get ( uri ) ) ; METHOD_2 ( ) ; return METHOD_3 ( ) ; }
",,,"public Path generateArtifact ( URI uri , int size ) throws IOException { NpmPackageGenerator npmPackageGenerator = new NpmPackageGenerator ( Paths . get ( uri ) ) ; npmPackageGenerator . generatePackage ( size ) ; npmPackageGenerator . buildPublishJson ( ) ; return npmPackageGenerator . getPackagePath ( ) ; }
",,,"public Path generateArtifact ( URI uri , int size ) throws IOException { NpmPackageGenerator generator = new NpmPackageGenerator ( Paths . get ( uri ) ) ; generator . buildPublishJson ( ) ; return generator . getPackagePath ( ) ; }
",,,"public Path generateArtifact ( URI uri , int size ) throws IOException { new NpmPackageGenerator ( Paths . get ( uri ) ) ; buildPublishJson ( ) ; return getPackagePath ( ) ; }
",,
1518,"public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( """" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; indexFiles ( ) ; String result = runQuickFixOneFile ( ) ; PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , true ) ; assertContainedIn ( ""int func ( ) { } // @suppress ( \""No return\"" ) "" , result ) ; }
","public void METHOD_1 ( ) throws Exception { try ( TYPE_1 writer = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( """" , false ) ) ) ) { writer . write ( METHOD_3 ( ) . trim ( ) ) ; } TYPE_3 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . VAR_1 , false ) ; METHOD_6 ( ) ; String result = METHOD_7 ( ) ; TYPE_3 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . VAR_1 , true ) ; METHOD_8 ( STRING_1 , result ) ; }
","public void METHOD_1 ( ) throws Exception { try ( TYPE_1 writer = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( """" , false ) ) ) ) { writer . write ( METHOD_3 ( ) . trim ( ) ) ; } METHOD_6 ( ) ; String result = METHOD_7 ( ) ; METHOD_8 ( STRING_1 , result ) ; }
",,,"public void METHOD_1 ( ) throws Exception { try ( TYPE_1 writer = new TYPE_1 ( new TYPE_2 ( METHOD_2 ( """" , false ) ) ) ) { writer . write ( METHOD_3 ( ) . trim ( ) ) ; } TYPE_3 . METHOD_4 ( ) . METHOD_5 ( TYPE_3 . VAR_1 , true ) ; METHOD_6 ( ) ; String result = METHOD_7 ( ) ; METHOD_8 ( STRING_1 , result ) ; }
",,,"public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( """" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , true ) ; indexFiles ( ) ; PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; String result = runQuickFixOneFile ( ) ; assertContainedIn ( ""int func ( ) { } // @suppress ( \""No return\"" ) "" , result ) ; }
",,,"Buggy public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( """" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , true ) ; indexFiles ( ) ; PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; String result = runQuickFixOneFile ( ) ; assertContainedIn ( ""int func ( ) { } // @suppress ( \""No return\"" ) "" , result ) ; } public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( """" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; indexFiles ( ) ; String result = runQuickFixOneFile ( ) ; assertContainedIn ( ""int func ( ) { } // @suppress ( \""No return\"" ) "" , result ) ; }
",,,"public void testMarkerOnLastLineNoNewline_495842 ( ) throws Exception { try ( BufferedWriter writer = new BufferedWriter ( new FileWriter ( loadcode ( """" , false ) ) ) ) { writer . write ( getAboveComment ( ) . trim ( ) ) ; } PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , true ) ; indexFiles ( ) ; PreferenceConstants . getPreferenceStore ( ) . setValue ( PreferenceConstants . ENSURE_NEWLINE_AT_EOF , false ) ; String result = runQuickFixOneFile ( ) ; assertContainedIn ( ""int func ( ) { } // @suppress ( \""No return\"" ) "" , result ) ; }
",,
1521,"protected UfsStatus ( UfsStatus status ) { mIsDirectory = status . mIsDirectory ; mName = status . mName ; mOwner = status . mOwner ; mGroup = status . mGroup ; mMode = status . mMode ; mLastModifiedTimeMs = status . mLastModifiedTimeMs ; mXAttr = status . mXAttr == null ? null : new HashMap < > ( status . mXAttr ) ; }
","protected TYPE_1 ( TYPE_1 status ) { VAR_1 = status . VAR_1 ; VAR_2 = status . VAR_2 ; VAR_3 = status . VAR_3 ; VAR_4 = status . VAR_4 ; VAR_5 = status . VAR_5 ; VAR_6 = status . VAR_6 ; VAR_7 = status . VAR_7 == null ? null : new HashMap < > ( status . VAR_7 ) ; }
","protected TYPE_1 ( TYPE_1 status ) { VAR_1 = status . VAR_1 ; VAR_2 = status . VAR_2 ; VAR_3 = status . VAR_3 ; VAR_4 = status . VAR_4 ; VAR_5 = status . VAR_5 ; VAR_6 = status . VAR_6 ; VAR_7 = status . VAR_7 ; }
",,,"protected TYPE_1 ( TYPE_1 status ) { super ( status ) ; VAR_1 = status . VAR_1 ; VAR_2 = status . VAR_2 ; VAR_3 = status . VAR_3 ; VAR_4 = status . VAR_4 ; VAR_5 = status . VAR_5 ; VAR_6 = status . VAR_6 ; }
",,,"protected UfsStatus ( UfsStatus status ) { mIsDirectory = status . mIsDirectory ; mName = status . mName ; mOwner = status . mOwner ; mGroup = status . mGroup ; mMode = status . mMode ; mLastModifiedTimeMs = status . mLastModifiedTimeMs ; mXAttr = new HashMap < > ( status . mXAttr ) ; }
",,,"protected UfsStatus ( UfsStatus status ) { mIsDirectory = status . mIsDirectory ; mName = status . mName ; mOwner = status . mOwner ; mGroup = status . mGroup ; mMode = status . mMode ; mLastModifiedTimeMs = status . mLastModifiedTimeMs ; mXAttr = new HashMap < > ( status . mXAttr ) ; }
",,,"protected UfsStatus ( UfsStatus status ) { mIsDirectory = status . mIsDirectory ; mName = status . mName ; mOwner = status . mOwner ; mGroup = status . mGroup ; mMode = status . mMode ; mLastModifiedTimeMs = status . mLastModifiedTimeMs ; mXAttr = new HashMap < > ( status . mXAttr ) ; }
",,
1526,"public static boolean isVirtIoScsiDiskInterfaceExists ( VmBase vmBase ) { return vmBase . getImages ( ) . stream ( ) . anyMatch ( i - > i . getDiskVmElementForVm ( vmBase . getId ( ) ) . getDiskInterface ( ) == DiskInterface . VirtIO_SCSI ) ; }
","public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . METHOD_3 ( i - > i . VAR_2 ( VAR_1 . getId ( ) ) . METHOD_4 ( ) == TYPE_3 . TYPE_2 ) ; }
","public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . METHOD_3 ( i - > i . VAR_2 ( VAR_1 . getId ( ) ) . METHOD_4 ( ) == TYPE_3 . TYPE_2 ) ; }
",,,"public static boolean METHOD_1 ( TYPE_1 VAR_1 ) { return VAR_1 . METHOD_2 ( ) . stream ( ) . METHOD_3 ( i - > i . VAR_2 ( VAR_1 . getId ( ) ) . METHOD_4 ( ) == TYPE_3 . TYPE_2 ) ; }
",,,"public static boolean isVirtIoScsiDiskInterfaceExists ( VmBase vmBase ) { return vmBase . getImages ( ) . stream ( ) . anyMatch ( this : : isVirtioScsiDisk ) ; } private static boolean isVirtioScsiDisk ( Image image ) { return image . getDiskVmElementForVm ( vmBase . getId ( ) ) . getDiskInterface ( ) == DiskInterface . VirtIO_SCSI ; }
",,,"public static boolean isVirtIoScsiDiskInterfaceExists ( VmBase vmBase ) { return vmBase . getImages ( ) . stream ( ) . anyMatch ( i - > isVirtioScsiDisk ( i , vmBase . getId ( ) ) ) ; } private static boolean isVirtioScsiDisk ( Image image , String vmId ) { return image . getDiskVmElementForVm ( vmId ) . getDiskInterface ( ) == DiskInterface . VirtIO_SCSI ; }
",,,"public static boolean isVirtIoScsiDiskInterfaceExists ( VmBase vmBase ) { return vmBase . getImages ( ) . stream ( ) . anyMatch ( i - > i . getDiskVmElementForVm ( vmBase . getId ( ) ) . getDiskInterface ( ) == DiskInterface . VirtIO_SCSI ) ; }
",,
1540,"public void setUp ( ) { cuMarshalService = new CUMarshalServiceImpl ( ) ; xmlFile = new File ( EXAMPLE_FILE_NAME ) ; }
","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new File ( VAR_3 ) ; }
","public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new File ( VAR_3 ) ; }
",,,"public void METHOD_1 ( ) { VAR_1 = new TYPE_1 ( ) ; VAR_2 = new File ( VAR_3 ) ; }
",,,"public void setUp ( ) { cuMarshalService = new CUMarshalServiceImpl ( ) ; xmlFile = new File ( EXAMPLE_FILE_NAME ) ; }
",,,"public void setUp ( ) throws Exception { cuMarshalService = new CUMarshalServiceImpl ( ) ; xmlFile = new File ( EXAMPLE_FILE_NAME ) ; }
",,,"public void setUp ( ) { cuMarshalService = new CUMarshalServiceImpl ( ) ; xmlFile = new File ( EXAMPLE_FILE_NAME ) ; }
",,
1542,"public FilteredSourceFiles ( List < Path > rawSrcFiles , BuildTarget buildTarget , GoToolchain goToolchain , GoPlatform platform , List < FileType > fileTypes ) { this ( rawSrcFiles , ImmutableList . of ( ) , buildTarget , goToolchain , platform , fileTypes ) ; }
","public TYPE_5 ( List < Path > VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , List < TYPE_4 > VAR_6 ) { this ( VAR_2 , ImmutableList . of ( ) , VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }
","public TYPE_5 ( List < Path > VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , List < TYPE_4 > VAR_6 ) { this . VAR_2 = VAR_2 ; this . VAR_7 = new ArrayList < > ( ) ; METHOD_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }
",,,"public TYPE_5 ( List < Path > VAR_2 , TYPE_1 VAR_3 , TYPE_2 VAR_4 , TYPE_3 VAR_5 , List < TYPE_4 > VAR_6 ) { this . VAR_2 = VAR_2 ; this . VAR_7 = new ArrayList < > ( ) ; METHOD_1 ( VAR_3 , VAR_4 , VAR_5 , VAR_6 ) ; }
",,,"public FilteredSourceFiles ( List < Path > rawSrcFiles , BuildTarget buildTarget , GoToolchain goToolchain , GoPlatform platform , List < FileType > fileTypes ) { this . rawSrcFiles = rawSrcFiles ; this . extraSrcFiles = new ArrayList < > ( ) ; filterSteps = createFilterSteps ( buildTarget , goToolchain , platform , fileTypes ) ; }
",,,"public FilteredSourceFiles ( List < Path > rawSrcFiles , BuildTarget buildTarget , GoToolchain goToolchain , GoPlatform platform , List < FileType > fileTypes ) { this . rawSrcFiles = rawSrcFiles ; this . extraSrcFiles = new ArrayList < > ( ) ; filterSteps = createFilterSteps ( buildTarget , goToolchain , platform , fileTypes ) ; }
",,,"public FilteredSourceFiles ( List < Path > rawSrcFiles , BuildTarget buildTarget , GoToolchain goToolchain , GoPlatform platform , List < FileType > fileTypes ) { this . rawSrcFiles = rawSrcFiles ; this . extraSrcFiles = new ArrayList < > ( ) ; filterSteps = createFilterSteps ( buildTarget , goToolchain , platform , fileTypes ) ; }
",,
1546,"protected String getStateParameter ( final WebContext context ) { final String stateParameter ; if ( CommonHelper . isNotBlank ( stateData ) ) { stateParameter = stateData ; } else { stateParameter = CommonHelper . randomString ( 10 ) ; } return stateParameter ; }
","protected String METHOD_1 ( final TYPE_1 context ) { final String VAR_1 ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { VAR_1 = VAR_2 ; } else { VAR_1 = TYPE_2 . METHOD_4 ( 10 ) ; } return VAR_1 ; }
","protected String METHOD_1 ( final TYPE_1 context ) { final String VAR_2 = METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_2 ) ) { return VAR_2 ; } else { return TYPE_2 . METHOD_4 ( 10 ) ; } }
",,,"protected String METHOD_1 ( final TYPE_1 context ) { String VAR_1 = METHOD_2 ( ) ; if ( TYPE_2 . METHOD_3 ( VAR_1 ) ) { VAR_1 = VAR_1 ; } else { VAR_1 = TYPE_2 . METHOD_4 ( 10 ) ; } return VAR_1 ; }
",,,"protected String getStateParameter ( final WebContext context ) { final String stateData = getState ( ) ; final String stateParameter ; if ( CommonHelper . isNotBlank ( stateData ) ) { stateParameter = stateData ; } else { stateParameter = CommonHelper . randomString ( 10 ) ; } return stateParameter ; }
",,,"protected String getStateParameter ( final WebContext context ) { final String stateData = getState ( ) ; if ( CommonHelper . isNotBlank ( stateData ) ) { return stateData ; } else { return CommonHelper . randomString ( 10 ) ; } }
",,,"protected String getStateParameter ( final WebContext context ) { final String stateData = getState ( ) ; if ( CommonHelper . isNotBlank ( stateData ) ) { return stateData ; } else { return CommonHelper . randomString ( 10 ) ; } }
",,
1547,"protected DSpaceCommandLineParameter ( String parameter ) { this ( StringUtils . substringBefore ( parameter , "" "" ) , StringUtils . substringAfter ( parameter , "" "" ) ) ; }
","protected TYPE_1 ( String VAR_2 ) { this ( StringUtils . VAR_3 ( VAR_2 , STRING_1 ) , StringUtils . VAR_4 ( VAR_2 , STRING_1 ) ) ; }
","public TYPE_1 ( String VAR_2 ) { this ( StringUtils . VAR_3 ( VAR_2 , STRING_1 ) , StringUtils . VAR_4 ( VAR_2 , STRING_1 ) ) ; }
",,,"public TYPE_1 ( String VAR_2 ) { this ( StringUtils . VAR_3 ( VAR_2 , STRING_1 ) , StringUtils . VAR_4 ( VAR_2 , STRING_1 ) ) ; }
",,,"public DSpaceCommandLineParameter ( String parameter ) { String [ ] parameterArray = parameter . split ( ""\\s + "" , 2 ) ; this ( parameterArray [ 0 ] , parameterArray [ 1 ] ) ; }
",,,"public DSpaceCommandLineParameter ( String parameter ) { String key = StringUtils . substringBefore ( parameter , "" "" ) ; String value = StringUtils . substringAfter ( parameter , "" "" ) ; // Use the Apache Commons CLI API to parse the parameter CommandLineParser parser = new DefaultParser ( ) ; Options options = new Options ( ) ; options . addOption ( Option . builder ( ) . longOpt ( key ) . hasArg ( ) . build ( ) ) ; try { CommandLine cmd = parser . parse ( options , new String [ ] { value } ) ; this . key = key ; this . value = cmd . getOptionValue ( key ) ; } catch ( ParseException e ) { // Handle the exception } }
",,,"public DSpaceCommandLineParameter ( String parameter ) { this ( StringUtils . substringBefore ( parameter , "" "" ) , StringUtils . substringAfter ( parameter , "" "" ) ) ; }
",,
1555,"public void onActivityPaused ( Activity activity ) { }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { }
","public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( null != VAR_2 ) { METHOD_2 ( VAR_2 ) ; } }
",,,"public void METHOD_1 ( TYPE_1 VAR_1 ) { if ( VAR_2 != null ) { VAR_2 . METHOD_2 ( ) ; } }
",,,"public void onActivityPaused ( Activity activity ) { if ( mCurInAppNotification != null && mCurInAppNotification . isVisible ( ) ) { mCurInAppNotification . dismiss ( ) ; } }
",,,"public void onActivityPaused ( Activity activity ) { if ( null != mCurInAppNotification ) { mCurInAppNotification . dismiss ( ) ; } }
",,,"public void onActivityPaused ( Activity activity ) { if ( null != mCurInAppNotification ) { mCurInAppNotification . dismiss ( ) ; } }
",,
1568,"public void setUp ( ) { Set < String > agentProtocols = new HashSet < > ( j . jenkins . getAgentProtocols ( ) ) ; agentProtocols . add ( ExtensionList . lookupSingleton ( CliProtocol2 . class ) . getName ( ) ) ; j . jenkins . setAgentProtocols ( agentProtocols ) ; }
","public void METHOD_1 ( ) { Set < String > VAR_1 = new HashSet < > ( j . VAR_2 . METHOD_3 ( ) ) ; VAR_1 . add ( TYPE_2 . METHOD_4 ( TYPE_3 . class ) . getName ( ) ) ; j . VAR_2 . METHOD_5 ( VAR_1 ) ; }
","public void METHOD_1 ( ) { Set < String > VAR_1 = new HashSet < > ( j . VAR_2 . METHOD_3 ( ) ) ; VAR_1 . add ( TYPE_2 . METHOD_4 ( TYPE_3 . class ) . getName ( ) ) ; j . VAR_2 . METHOD_5 ( VAR_1 ) ; }
",,,"public void METHOD_1 ( ) { Set < String > VAR_1 = new HashSet < > ( j . VAR_2 . METHOD_3 ( ) ) ; VAR_1 . add ( TYPE_2 . METHOD_4 ( TYPE_3 . class ) . getName ( ) ) ; j . VAR_2 . METHOD_5 ( VAR_1 ) ; }
",,,"public void setUp ( ) { Set < String > agentProtocols = new HashSet < > ( j . jenkins . getAgentProtocols ( ) ) ; agentProtocols . add ( ExtensionList . lookupSingleton ( CliProtocol2 . class ) . getName ( ) ) ; j . jenkins . setAgentProtocols ( agentProtocols ) ; }
",,,"public void setUp ( ) { jenkins . CLI . get ( ) . setEnabled ( false ) ; Set < String > agentProtocols = new HashSet < > ( j . jenkins . getAgentProtocols ( ) ) ; agentProtocols . add ( ExtensionList . lookupSingleton ( CliProtocol2 . class ) . getName ( ) ) ; j . jenkins . setAgentProtocols ( agentProtocols ) ; }
",,,"public void setUp ( ) { Set < String > agentProtocols = new HashSet < > ( j . jenkins . getAgentProtocols ( ) ) ; agentProtocols . add ( ExtensionList . lookupSingleton ( CliProtocol2 . class ) . getName ( ) ) ; j . jenkins . setAgentProtocols ( agentProtocols ) ; }
",,
1577,"private String removeSuffix ( String loaderFileName , char suffixTerm ) { return loaderFileName . substring ( 0 , loaderFileName . lastIndexOf ( suffixTerm ) ) ; }
","private String METHOD_1 ( String VAR_1 , char VAR_2 ) { return VAR_1 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_2 ) ) ; }
","private String METHOD_1 ( String VAR_1 , char VAR_2 ) { return VAR_1 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_2 ) ) ; }
",,,"private String METHOD_1 ( String VAR_1 , char VAR_2 ) { return VAR_1 . substring ( 0 , VAR_1 . METHOD_2 ( VAR_2 ) ) ; }
",,,"String removeSuffix ( String loaderFileName , char suffixTerm ) { return loaderFileName . substring ( 0 , loaderFileName . lastIndexOf ( suffixTerm ) ) ; }
",,,"private String removeSuffix ( String loaderFileName , char suffixTerm ) { return loaderFileName . substring ( 0 , loaderFileName . lastIndexOf ( suffixTerm ) ) ; }
",,,"String removeSuffix ( String loaderFileName , char suffixTerm ) { return loaderFileName . substring ( 0 , loaderFileName . lastIndexOf ( suffixTerm ) ) ; }
",,
1578,"private BootstrapConfigurationImpl ( ) { this . defaultProviderClassName = null ; this . constraintValidatorFactoryClassName = null ; this . messageInterpolatorClassName = null ; this . traversableResolverClassName = null ; this . parameterNameProviderClassName = null ; this . clockProviderClassName = null ; this . valueExtractorClassNames = new HashSet < > ( ) ; this . validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES ; this . isExecutableValidationEnabled = true ; this . constraintMappingResourcePaths = new HashSet < > ( ) ; this . properties = new HashMap < > ( ) ; }
","private TYPE_1 ( ) { this . VAR_2 = null ; this . VAR_3 = null ; this . VAR_4 = null ; this . VAR_5 = null ; this . VAR_6 = null ; this . VAR_7 = null ; this . VAR_8 = new HashSet < > ( ) ; this . VAR_9 = VAR_10 ; this . VAR_11 = true ; this . VAR_12 = new HashSet < > ( ) ; this . properties = new HashMap < > ( ) ; }
","private TYPE_1 ( ) { this . VAR_2 = null ; this . VAR_3 = null ; this . VAR_4 = null ; this . VAR_5 = null ; this . VAR_6 = null ; this . VAR_7 = null ; this . VAR_9 = VAR_10 ; this . VAR_11 = true ; this . VAR_12 = METHOD_1 ( ) ; this . properties = METHOD_2 ( ) ; }
",,,"private TYPE_1 ( ) { this . VAR_2 = null ; this . VAR_3 = null ; this . VAR_4 = null ; this . VAR_5 = null ; this . VAR_6 = null ; this . VAR_7 = null ; }
",,,"private BootstrapConfigurationImpl ( ) { this . defaultProviderClassName = null ; this . constraintValidatorFactoryClassName = null ; this . messageInterpolatorClassName = null ; this . traversableResolverClassName = null ; this . parameterNameProviderClassName = null ; this . clockProviderClassName = null ; this . valueExtractorClassNames = new HashSet < > ( ) ; this . validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES ; this . isExecutableValidationEnabled = true ; this . constraintMappingResourcePaths = new HashSet < > ( ) ; this . properties = new HashMap < > ( ) ; }
",,,"private BootstrapConfigurationImpl ( ) { this . defaultProviderClassName = null ; this . constraintValidatorFactoryClassName = null ; this . messageInterpolatorClassName = null ; this . traversableResolverClassName = null ; this . parameterNameProviderClassName = null ; this . clockProviderClassName = null ; this . valueExtractorClassNames = new HashSet < > ( ) ; this . validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES ; this . isExecutableValidationEnabled = true ; this . constraintMappingResourcePaths = newHashSet ( ) ; this . properties = newHashMap ( ) ; }
",,,"private BootstrapConfigurationImpl ( ) { this . defaultProviderClassName = null ; this . constraintValidatorFactoryClassName = null ; this . messageInterpolatorClassName = null ; this . traversableResolverClassName = null ; this . parameterNameProviderClassName = null ; this . clockProviderClassName = null ; this . valueExtractorClassNames = newHashSet ( ) ; this . validatedExecutableTypes = DEFAULT_VALIDATED_EXECUTABLE_TYPES ; this . isExecutableValidationEnabled = true ; this . constraintMappingResourcePaths = newHashSet ( ) ; this . properties = newHashMap ( ) ; }
",,
1580,"@Override public boolean cancel ( final boolean mayInterruptIfRunning ) { return canceled . compareAndSet ( false , true ) ; }
","@Override public boolean METHOD_1 ( final boolean VAR_1 ) { return VAR_2 . METHOD_2 ( false , true ) ; }
","@Override public boolean METHOD_1 ( final boolean VAR_1 ) { return VAR_2 . METHOD_2 ( false , true ) ; }
",,,"@Override public boolean METHOD_1 ( final boolean VAR_1 ) { return VAR_2 . METHOD_2 ( false , true ) ; }
",,,"@Override public boolean cancel ( final boolean mayInterruptIfRunning ) { return canceled . compareAndSet ( false , true ) ; }
",,,"@Override public boolean cancel ( final boolean mayInterruptIfRunning ) { return canceled . compareAndSet ( false , true ) ; }
",,,"@Override public boolean cancel ( final boolean mayInterruptIfRunning ) { return canceled . compareAndSet ( false , true ) ; }
",,
1584,"private int getCheckTimeoutInSeconds ( ConfigurationGenerator cg ) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS ; try { checkTimeout = Integer . parseInt ( cg . getUserConfig ( ) . getProperty ( PARAM_MONGODB_CHECK_TIMEOUT , String . valueOf ( DEFAULT_CHECK_TIMEOUT_IN_SECONDS ) ) ) ; } catch ( NumberFormatException e ) { log . warn ( String . format ( ""Invalid format for % s parameter , using default value instead"" , PARAM_MONGODB_CHECK_TIMEOUT ) , e ) ; } return checkTimeout ; }
","private int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 ; try { VAR_2 = Integer . parseInt ( VAR_1 . METHOD_2 ( ) . getProperty ( VAR_3 , String . valueOf ( TYPE_2 ) ) ) ; } catch ( TYPE_3 e ) { log . warn ( String . format ( STRING_1 , VAR_3 ) , e ) ; } return VAR_2 ; }
","private int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 ; try { VAR_2 = Integer . parseInt ( VAR_1 . METHOD_2 ( ) . getProperty ( VAR_3 , String . valueOf ( TYPE_2 ) ) ) ; } catch ( TYPE_3 e ) { log . warn ( String . format ( STRING_1 , VAR_3 ) , e ) ; } return VAR_2 ; }
",,,"private int METHOD_1 ( TYPE_1 VAR_1 ) { int VAR_2 = TYPE_2 ; try { VAR_2 = Integer . parseInt ( VAR_1 . METHOD_2 ( ) . getProperty ( VAR_3 , TYPE_2 . toString ( ) ) ) ; } catch ( TYPE_3 e ) { log . warn ( String . format ( STRING_1 , VAR_3 ) , e ) ; } return VAR_2 ; }
",,,"private int getCheckTimeoutInSeconds ( ConfigurationGenerator cg ) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS ; try { checkTimeout = Integer . parseInt ( cg . getUserConfig ( ) . getProperty ( PARAM_MONGODB_CHECK_TIMEOUT , String . valueOf ( DEFAULT_CHECK_TIMEOUT_IN_SECONDS ) ) ) ; } catch ( NumberFormatException e ) { log . warn ( String . format ( ""Invalid format for % s parameter , using default value instead"" , PARAM_MONGODB_CHECK_TIMEOUT ) , e ) ; } return checkTimeout ; }
",,,"private int getCheckTimeoutInSeconds ( ConfigurationGenerator cg ) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS ; try { checkTimeout = Integer . parseInt ( cg . getUserConfig ( ) . getProperty ( PARAM_MONGODB_CHECK_TIMEOUT , String . valueOf ( DEFAULT_CHECK_TIMEOUT_IN_SECONDS ) ) ) ; } catch ( NumberFormatException e ) { log . warn ( String . format ( ""Invalid format for % s parameter , using default value instead"" , PARAM_MONGODB_CHECK_TIMEOUT ) , e ) ; } return checkTimeout ; }
",,,"private int getCheckTimeoutInSeconds ( ConfigurationGenerator cg ) { int checkTimeout = DEFAULT_CHECK_TIMEOUT_IN_SECONDS ; try { checkTimeout = Integer . parseInt ( cg . getUserConfig ( ) . getProperty ( PARAM_MONGODB_CHECK_TIMEOUT , String . valueOf ( DEFAULT_CHECK_TIMEOUT_IN_SECONDS ) ) ) ; } catch ( NumberFormatException e ) { log . warn ( String . format ( ""Invalid format for % s parameter , using default value instead"" , PARAM_MONGODB_CHECK_TIMEOUT ) , e ) ; } return checkTimeout ; }
",,
1587,"public void testUnionPointWithEmptyLineString ( ) { assertUnion ( ""POINT ( 1 2 ) "" , ""LINESTRING EMPTY"" , ""POINT ( 1 2 ) "" ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , STRING_1 ) ; }
","public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , STRING_3 ) ; }
",,,"public void METHOD_1 ( ) { METHOD_2 ( STRING_1 , STRING_2 , """" ) ; }
",,,"public void testUnionPointWithEmptyLineString ( ) { assertUnion ( ""POINT ( 1 2 ) "" , ""LINESTRING EMPTY"" , ""POINT ( 1 2 ) "" ) ; }
",,,"public void testUnionPointWithEmptyLineString ( ) { assertUnion ( ""POINT ( 1 2 ) "" , ""LINESTRING EMPTY"" , ""POINT ( 1 2 ) "" ) ; }
",,,"public void testUnionPointWithEmptyLineString ( ) { assertUnion ( ""POINT ( 1 2 ) "" , ""LINESTRING EMPTY"" , ""POINT ( 1 2 ) "" ) ; }
",,
1588,"protected Layers ( EntityLivingBase entity , RenderLivingBase < T > entityRenderer , LayerRenderer < T > layerRenderer , double x , double y , double z ) { super ( entity , entityRenderer , x , y , z ) ; this . layerRenderer = layerRenderer ; }
","protected TYPE_4 ( TYPE_1 entity , TYPE_2 < T > VAR_2 , TYPE_3 < T > VAR_3 , double x , double y , double VAR_4 ) { super ( entity , VAR_2 , x , y , VAR_4 ) ; this . VAR_3 = VAR_3 ; }
","protected TYPE_4 ( TYPE_1 entity , TYPE_2 < T > VAR_2 , TYPE_3 < T > VAR_3 , double x , double y , double VAR_4 ) { super ( entity , VAR_2 , x , y , VAR_4 ) ; this . VAR_3 = VAR_3 ; }
",,,"protected TYPE_4 ( TYPE_1 entity , TYPE_2 < T > VAR_2 , TYPE_3 < T > VAR_3 , double x , double y , double VAR_4 ) { super ( entity , VAR_2 , x , y , VAR_4 ) ; this . VAR_3 = VAR_3 ; }
",,,"protected Layers ( EntityLivingBase entity , RenderLivingBase < T > entityRenderer , LayerRenderer < T > layerRenderer , double x , double y , double z ) { super ( entity , entityRenderer , x , y , z ) ; this . layerRenderer = layerRenderer ; }
",,,"protected Layers ( EntityLivingBase entity , RenderLivingBase < T > entityRenderer , LayerRenderer < T > layerRenderer , double x , double y , double z ) { super ( entity , entityRenderer , x , y , z ) ; this . layerRenderer = layerRenderer ; }
",,,"protected Layers ( EntityLivingBase entity , RenderLivingBase < T > entityRenderer , LayerRenderer < T > layerRenderer , double x , double y , double z ) { super ( entity , entityRenderer , x , y , z ) ; this . layerRenderer = layerRenderer ; }
",,
1592,"public void delete ( @RequestBody List < Long > printerIds ) throws IOException { for ( long id : printerIds ) { Printer printer = printerService . get ( id ) ; if ( printer != null ) { printerService . remove ( printer ) ; } } }
","public void METHOD_1 ( ANNOTATION_1 List < Long > VAR_1 ) throws IOException { for ( long id : VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } } }
","public void METHOD_1 ( ANNOTATION_1 List < Long > VAR_1 ) throws IOException { for ( long id : VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } } }
",,,"public void METHOD_1 ( ANNOTATION_1 List < Long > VAR_1 ) throws IOException { for ( long id : VAR_1 ) { TYPE_2 VAR_2 = VAR_3 . get ( id ) ; if ( VAR_2 != null ) { VAR_3 . remove ( VAR_2 ) ; } } }
",,,"public void delete ( @RequestBody List < Long > printerIds ) throws IOException { for ( long id : printerIds ) { Printer printer = printerService . get ( id ) ; if ( printer != null ) { printerService . remove ( printer ) ; } } ResponseStatus ( HttpStatus . NO_RESPONSE ) ; }
",,,"public void delete ( @RequestBody List < Long > printerIds ) throws IOException { for ( long id : printerIds ) { Printer printer = printerService . get ( id ) ; if ( printer != null ) { printerService . remove ( printer ) ; } } }
",,,"@ResponseStatus ( HttpStatus . NO_RESPONSE ) public void delete ( @RequestBody List < Long > printerIds ) throws IOException { for ( long id : printerIds ) { Printer printer = printerService . get ( id ) ; if ( printer != null ) { printerService . remove ( printer ) ; } } }
",,
1594,"public void testIsConditionValidWhenHeaderIsValid ( ) throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52 ( ""header1"" ) ; final ConditionCol52 conditionCol2 = fakeConditionCol52 ( ""header2"" ) ; final Validator validator = new Validator ( fakeCompositeColumn ( conditionCol1 , conditionCol2 ) ) ; assertTrue ( validator . isConditionValid ( conditionCol2 ) ) ; }
","public void METHOD_1 ( ) throws Exception { final TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; final TYPE_1 VAR_2 = METHOD_2 ( STRING_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_2 ) ) ; }
","public void METHOD_1 ( ) throws Exception { final TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; final TYPE_1 VAR_2 = METHOD_2 ( STRING_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_2 ) ) ; }
",,,"public void METHOD_1 ( ) throws Exception { final TYPE_1 VAR_1 = METHOD_2 ( STRING_1 ) ; final TYPE_1 VAR_2 = METHOD_2 ( STRING_2 ) ; final TYPE_2 VAR_3 = new TYPE_2 ( METHOD_3 ( VAR_1 , VAR_2 ) ) ; assertTrue ( VAR_3 . METHOD_5 ( VAR_2 ) ) ; }
",,,"public void testIsConditionValidWhenHeaderIsValid ( ) throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52 ( ""header1"" ) ; final ConditionCol52 conditionCol2 = fakeConditionCol52 ( ""header2"" ) ; final Validator validator = new Validator ( fakeCompositeColumn ( conditionCol1 , conditionCol2 ) ) ; assertTrue ( validator . isConditionValid ( conditionCol2 ) ) ; }
",,,"public void testIsConditionValidWhenHeaderIsValid ( ) throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52 ( ""header1"" ) ; final ConditionCol52 conditionCol2 = fakeConditionCol52 ( ""header2"" ) ; final Validator validator = new Validator ( fakeCompositeColumn ( conditionCol1 , conditionCol2 ) ) ; assertTrue ( validator . isConditionValid ( conditionCol2 ) ) ; }
",,,"public void testIsConditionValidWhenHeaderIsValid ( ) throws Exception { final ConditionCol52 conditionCol1 = fakeConditionCol52 ( ""header1"" ) ; final ConditionCol52 conditionCol2 = fakeConditionCol52 ( ""header2"" ) ; final Validator validator = new Validator ( fakeCompositeColumn ( conditionCol1 , conditionCol2 ) ) ; assertTrue ( validator . isConditionValid ( conditionCol2 ) ) ; }
",,
1597,"protected MemcachedClientCallback createMemcachedClientCallback ( ) { return new MemcachedClientCallback ( ) { @Override public byte [ ] get ( final String key ) { return _memcached . get ( _memcachedNodesManager . getStorageKeyFormat ( ) . format ( key ) ) ; } } ; }
","protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) { @Override public byte [ ] get ( final String key ) { return VAR_1 . get ( VAR_2 . METHOD_2 ( ) . format ( key ) ) ; } } ; }
","protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return VAR_1 . get ( VAR_2 . METHOD_2 ( ) . format ( key ) ) ; } } ; }
",,,"protected TYPE_1 METHOD_1 ( ) { return new TYPE_1 ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return VAR_1 . get ( VAR_2 . METHOD_2 ( ) . format ( key ) ) ; } } ; }
",,,"protected StorageClientCallback createStorageClientCallback ( ) { return new StorageClientCallback ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return _memcached . get ( _memcachedNodesManager . getStorageKeyFormat ( ) . format ( key ) ) ; } } ; }
",,,"private static PagesHashStrategy pagesHashStrategy ( ) { return new SimplePagesHashStrategy ( ImmutableList . of ( BIGINT ) , ImmutableList . of ( ) , ImmutableList . of ( ImmutableList . of ( TEST_PAGE . getBlock ( 0 ) ) ) , ImmutableList . of ( ) , Optional . empty ( ) , Optional . of ( new SortExpressionExtractor . RowSortExpressionContext ( 0 ) ) ) ; } public Long getCount ( ) { return countResults ; } protected void declareNamespaces ( XQueryContext context ) throws XPathException { for ( Map . Entry < String , String > entry : namespaces . entrySet ( ) ) { context . declareNamespace ( entry . getKey ( ) , entry . getValue ( ) ) ; } } protected MemcachedClientCallback createMemcachedClientCallback ( ) { return new StorageClientCallback ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return _memcached . get ( _memcachedNodesManager . getStorageKeyFormat ( ) . format ( key ) ) ; } } ; }
",,,"protected StorageClientCallback createMemcachedClientCallback ( ) { return new StorageClientCallback ( ) { @Override public byte [ ] get ( final String key ) throws IOException { return _memcached . get ( _memcachedNodesManager . getStorageKeyFormat ( ) . format ( key ) ) ; } } ; }
",,
1612,"public EurekaArchaius2InstanceConfig ( Config config , String namespace , DataCenterInfo dcInfo ) { this . defaultAppGroup = config . getString ( FALLBACK_APP_GROUP_KEY , Values . UNKNOWN_APPLICATION ) ; this . namespace = namespace ; this . config = config . getPrefixedView ( namespace ) ; this . dcInfo = dcInfo ; }
","public TYPE_4 ( TYPE_1 config , String VAR_2 , TYPE_2 VAR_3 ) { this . VAR_4 = config . getString ( VAR_5 , TYPE_5 . VAR_7 ) ; this . VAR_2 = VAR_2 ; this . config = config . VAR_8 ( VAR_2 ) ; this . VAR_3 = VAR_3 ; }
","public TYPE_4 ( TYPE_1 config , String VAR_2 , TYPE_2 VAR_3 ) { this . VAR_4 = config . getString ( VAR_5 , TYPE_5 . VAR_7 ) ; this . VAR_2 = VAR_2 ; this . config = config . VAR_8 ( VAR_2 ) ; }
",,,"public TYPE_4 ( TYPE_1 config , String VAR_2 , TYPE_2 VAR_3 ) { this . VAR_4 = config . getString ( VAR_5 , TYPE_5 . VAR_7 ) ; this . VAR_2 = VAR_2 ; this . config = config . VAR_8 ( VAR_2 ) ; this . VAR_3 = VAR_3 ; }
",,,"public EurekaArchaius2InstanceConfig ( Config config , String namespace , DataCenterInfo dcInfo ) { this . defaultAppGroup = config . getString ( FALLBACK_APP_GROUP_KEY , Values . UNKNOWN_APPLICATION ) ; this . namespace = namespace ; this . config = config . getPrefixedView ( namespace ) ; this . dcInfo = dcInfo ; // TODO : Remove this when DiscoveryManager is finally no longer used DiscoveryManagerInitializer . getInstance ( ) . initialize ( config , namespace , this ) ; }
",,,"public EurekaArchaius2InstanceConfig ( Config config , String namespace , DataCenterInfo dcInfo ) { this . defaultAppGroup = config . getString ( FALLBACK_APP_GROUP_KEY , Values . UNKNOWN_APPLICATION ) ; this . namespace = namespace ; this . config = config . getPrefixedView ( namespace ) ; this . dcInfo = dcInfo ; DiscoveryManagerInitializer . initialize ( this ) ; }
",,,"public EurekaArchaius2InstanceConfig ( Config config , String namespace , DataCenterInfo dcInfo ) { this . defaultAppGroup = config . getString ( FALLBACK_APP_GROUP_KEY , Values . UNKNOWN_APPLICATION ) ; this . namespace = namespace ; this . config = config . getPrefixedView ( namespace ) ; this . dcInfo = dcInfo ; // TODO : Remove this when DiscoveryManager is finally no longer used DiscoveryManager . getInstance ( ) . setEurekaInstanceConfig ( this ) ; }
",,
1621,"public List < Document > getClientDocuments ( String clientId ) throws MambuApiException { if ( clientId == null || clientId . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( ""ClientId ID must not be null or empty"" ) ; } return new DocumentsService ( mambuAPIService ) . getDocuments ( CLIENTS , clientId ) ; }
","public List < TYPE_1 > METHOD_1 ( String VAR_1 ) throws TYPE_2 { if ( VAR_1 == null || VAR_1 . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( STRING_1 ) ; } return new TYPE_3 ( VAR_2 ) . METHOD_2 ( VAR_3 , VAR_1 ) ; }
","public List < TYPE_1 > METHOD_1 ( String VAR_1 ) throws TYPE_2 { if ( VAR_1 == null || VAR_1 . isEmpty ( ) ) { throw new IllegalArgumentException ( STRING_1 ) ; } return TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; }
",,,"public List < TYPE_1 > METHOD_1 ( String VAR_1 ) throws TYPE_2 { return TYPE_3 . METHOD_2 ( VAR_2 , VAR_3 , VAR_1 ) ; }
",,,"public List < Document > getClientDocuments ( String clientId ) throws MambuApiException { validateId ( clientId , ""ClientId"" ) ; return DocumentsService . getDocuments ( mambuAPIService , CLIENTS , clientId ) ; } private void validateId ( String id , String type ) { if ( id == null || id . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( type + "" ID must not be null or empty"" ) ; } }
",,,"private List < Document > getClientDocuments ( String clientId ) throws MambuApiException { if ( isNullOrEmpty ( clientId ) ) { throw new IllegalArgumentException ( ""ClientId ID must not be null or empty"" ) ; } return DocumentsService . getDocuments ( mambuAPIService , CLIENTS , clientId ) ; } private boolean isNullOrEmpty ( String str ) { return str == null || str . trim ( ) . isEmpty ( ) ; }
",,,"public List < Document > getClientDocuments ( String clientId ) throws MambuApiException { if ( clientId == null || clientId . trim ( ) . isEmpty ( ) ) { throw new IllegalArgumentException ( ""ClientId ID must not be null or empty"" ) ; } return DocumentsService . getDocuments ( mambuAPIService , CLIENTS , clientId ) ; }
",,
1623,"public long skip ( long n ) { if ( n > 0 ) { long skip = bytes . length - pos ; if ( skip > n ) skip = n ; pos += skip ; return skip ; } else { int idx = Math . min ( bytes . length , pos ) ; long skip = idx + n ; // Calculate max to avoid skipping before offset pos = ( int ) Math . max ( skip , offset ) ; return skip ; } }
","public long METHOD_1 ( long n ) { if ( n > 0 ) { long VAR_1 = VAR_2 . length - VAR_3 ; if ( VAR_1 > n ) VAR_1 = n ; VAR_3 += VAR_1 ; return VAR_1 ; } else { int VAR_4 = Math . VAR_5 ( VAR_2 . length , VAR_3 ) ; long VAR_1 = VAR_4 + n ; VAR_3 = ( int ) Math . max ( VAR_1 , offset ) ; return VAR_1 ; } }
","public long METHOD_1 ( long n ) { if ( n > 0 ) { long VAR_1 = VAR_2 . length - VAR_3 ; if ( VAR_1 > n ) VAR_1 = n ; VAR_3 += VAR_1 ; return VAR_1 ; } else { int VAR_4 = Math . VAR_5 ( VAR_2 . length , VAR_3 ) ; long VAR_1 = VAR_4 + n ; VAR_3 = ( int ) VAR_1 ; return VAR_1 ; } }
",,,"public long METHOD_1 ( long n ) { if ( n > 0 ) { long VAR_1 = VAR_2 . length - VAR_3 ; if ( VAR_1 > n ) VAR_1 = n ; VAR_3 += VAR_1 ; return VAR_1 ; } else { int VAR_4 = Math . VAR_5 ( VAR_2 . length , VAR_3 ) ; long VAR_1 = VAR_4 + n ; VAR_3 = ( int ) VAR_1 ; return VAR_1 ; } }
",,,"public long skip ( long n ) { if ( n > 0 ) { long skip = bytes . length - pos ; if ( skip > n ) { skip = n ; } pos += skip ; return skip ; } else { int idx = Math . min ( bytes . length , pos ) ; long skip = idx + n ; pos = ( int ) Math . max ( skip , idx ) ; return skip ; } }
",,,"public long skip ( long n ) { if ( n > 0 ) { long skip = bytes . length - pos ; if ( skip > n ) { skip = n ; } pos += skip ; return skip ; } else { int idx = Math . min ( bytes . length , pos ) ; long skip = idx + n ; pos = Math . max ( ( int ) skip , pos ) ; return skip ; } }
",,,"public long skip ( long n ) { if ( n > 0 ) { long skip = bytes . length - pos ; if ( skip > n ) skip = n ; pos += skip ; return skip ; } else { int idx = Math . min ( bytes . length , pos ) ; long skip = idx + n ; pos = ( int ) Math . max ( offset , skip ) ; return skip ; } }
",,
1628,"public void testSetUser ( ) { Configuration configuration = generateConfiguration ( ) ; configuration . setUser ( ""24601"" , ""m@rp . fr"" , ""MM"" ) ; assertEquals ( ""24601"" , configuration . getUser ( ) . getId ( ) ) ; assertEquals ( ""m@rp . fr"" , configuration . getUser ( ) . getEmail ( ) ) ; assertEquals ( ""MM"" , configuration . getUser ( ) . getName ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 configuration = METHOD_2 ( ) ; configuration . VAR_1 ( STRING_1 , STRING_2 , STRING_3 ) ; assertEquals ( STRING_1 , configuration . VAR_2 ( ) . getId ( ) ) ; assertEquals ( STRING_2 , configuration . VAR_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , configuration . VAR_2 ( ) . getName ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 configuration = METHOD_2 ( ) ; configuration . VAR_1 ( STRING_1 , STRING_2 , STRING_3 ) ; assertEquals ( STRING_1 , configuration . VAR_2 ( ) . getId ( ) ) ; assertEquals ( STRING_2 , configuration . VAR_2 ( ) . METHOD_3 ( ) ) ; assertEquals ( STRING_3 , configuration . VAR_2 ( ) . getName ( ) ) ; }
",,,"public void METHOD_1 ( ) { TYPE_1 configuration = METHOD_2 ( ) ; configuration . VAR_1 ( STRING_1 , STRING_2 , STRING_3 ) ; }
",,,"public void testSetUser ( ) { Configuration configuration = generateConfiguration ( ) ; configuration . setUser ( ""24601"" , ""m@rp . fr"" , ""MM"" ) ; assertEquals ( ""24601"" , configuration . getUser ( ) . getId ( ) ) ; assertEquals ( ""m@rp . fr"" , configuration . getUser ( ) . getEmail ( ) ) ; assertEquals ( ""MM"" , configuration . getUser ( ) . getName ( ) ) ; }
",,,"protected boolean hasCapacity ( int index , int fieldLength ) { assert fieldLength >= 0 ; return ! ( index < 0 || index > capacity ( ) - fieldLength ) ; } public void testCall ( ) throws Exception { // Run test ListBranchesCommand listBranchesCommand = fGerrit . listBranches ( Common . TEST_PROJECT ) ; BranchInfo [ ] listBranchesResult = null ; try { listBranchesResult = listBranchesCommand . call ( ) ; } catch ( EGerritException e ) { fail ( e . getMessage ( ) ) ; } // Verify result assertEquals ( listBranchesResult [ 0 ] . getRef ( ) , ""HEAD"" ) ; } protected void initModel ( String projectName , String modelName , Bundle bundle ) throws CoreException , IOException { project = ProjectUtils . createProject ( projectName ) ; diModelFile = PapyrusProjectUtils . copyPapyrusModel ( project , bundle , getSourcePath ( ) , modelName ) ; } public void testSetUser ( ) { Configuration configuration = generateConfiguration ( ) ; configuration . setUser ( ""24601"" , ""m@rp . fr"" , ""MM"" ) ; assertEquals ( ""24601"" , configuration . getUser ( ) . getId ( ) ) ; assertEquals ( ""m@rp . fr"" , configuration . getUser ( ) . getEmail ( ) ) ; assertEquals ( ""MM"" , configuration . getUser ( ) . getName ( ) ) ; }
",,,"public void testSetUser ( ) { Configuration configuration = generateConfiguration ( ) ; configuration . setUser ( ""24601"" , ""m@rp . fr"" , ""MM"" ) ; assertEquals ( ""24601"" , configuration . getUser ( ) . getId ( ) ) ; assertEquals ( ""m@rp . fr"" , configuration . getUser ( ) . getEmail ( ) ) ; assertEquals ( ""MM"" , configuration . getUser ( ) . getName ( ) ) ; }
",,
1632,"public static URLConnection openURLConnection ( URL url ) throws IOException { return openURLConnection ( url , DEFAULT_CONNECTION_TIMEOUT ) ; }
","public static TYPE_1 METHOD_1 ( TYPE_2 url ) throws IOException { return METHOD_1 ( url , VAR_1 ) ; }
","public static TYPE_1 METHOD_1 ( TYPE_2 url ) throws IOException { return METHOD_1 ( url , VAR_1 ) ; }
",,,"public static TYPE_1 METHOD_1 ( TYPE_2 url ) throws IOException { return METHOD_1 ( url , VAR_1 ) ; }
",,,"public static URLConnection openURLConnection ( URL url ) throws IOException { return openURLConnection ( url , DEFAULT_CONNECTION_TIMEOUT ) ; }
",,,"public static URLConnection openURLConnection ( URL url ) throws IOException { return openURLConnection ( url , DEFAULT_CONNECTION_TIMEOUT ) ; }
",,,"public static URLConnection openURLConnection ( URL url ) throws IOException { return openURLConnection ( url , DEFAULT_CONNECTION_TIMEOUT ) ; }
",,
1634,"public MetricData getDatapointsForRange ( Locator locator , Range range , Granularity gran ) { RollupType rollupType = RollupType . BF_BASIC ; String rollupTypeStr = metaCache . safeGet ( locator , rollupTypeCacheKey ) ; if ( rollupTypeStr != null ) { rollupType = RollupType . fromString ( rollupTypeStr ) ; } return getNumericMetricDataForRange ( locator , range , gran , rollupType ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = TYPE_5 . VAR_8 ; String VAR_5 = VAR_6 . METHOD_2 ( VAR_1 , VAR_7 ) ; if ( VAR_5 != null ) { VAR_4 = TYPE_5 . METHOD_3 ( VAR_5 ) ; } return METHOD_4 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
","public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { return METHOD_4 ( VAR_1 , VAR_2 , VAR_3 ) ; }
",,,"public TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 , TYPE_4 VAR_3 ) { TYPE_5 VAR_4 = null ; String VAR_5 = VAR_6 . METHOD_2 ( VAR_1 , VAR_7 ) ; if ( VAR_5 != null ) { VAR_4 = TYPE_5 . METHOD_3 ( VAR_5 ) ; } if ( VAR_4 == null ) { VAR_4 = TYPE_5 . VAR_8 ; } return METHOD_1 ( VAR_1 , VAR_2 , VAR_3 , VAR_4 ) ; }
",,,"public MetricData getDatapointsForRange ( Locator locator , Range range , Granularity gran ) { RollupType rollupType = RollupType . fromString ( metaCache . safeGet ( locator , rollupTypeCacheKey ) ) ; if ( rollupType == null ) { rollupType = RollupType . BF_BASIC ; } return getNumericMetricDataForRange ( locator , range , gran , rollupType ) ; }
",,,"public MetricData getDatapointsForRange ( Locator locator , Range range , Granularity gran ) { RollupType rollupType = null ; String rollupTypeStr = metaCache . safeGet ( locator , rollupTypeCacheKey ) ; if ( rollupTypeStr != null ) { rollupType = RollupType . fromString ( rollupTypeStr ) ; } if ( rollupType == null ) { rollupType = RollupType . BF_BASIC ; } return getNumericMetricDataForRange ( locator , range , gran , rollupType ) ; }
",,,"public MetricData getDatapointsForRange ( Locator locator , Range range , Granularity gran ) { RollupType rollupType = null ; String rollupTypeStr = metaCache . safeGet ( locator , rollupTypeCacheKey ) ; if ( rollupTypeStr != null ) { rollupType = RollupType . fromString ( rollupTypeStr ) ; } if ( rollupType == null ) { rollupType = RollupType . BF_BASIC ; } return getNumericMetricDataForRange ( locator , range , gran , rollupType ) ; }
",,
1639,"public void deleteIfExists ( File path , String user , String logPrefix ) throws IOException { // by default no need to do this as a different user deleteIfExists ( path ) ; }
","public void METHOD_1 ( File path , String user , String VAR_1 ) throws IOException { METHOD_1 ( path ) ; }
","public void METHOD_1 ( File path , String user , String VAR_1 ) throws IOException { METHOD_1 ( path ) ; Path p = path . VAR_2 ( ) ; if ( TYPE_1 . exists ( p ) ) { try { TYPE_2 . METHOD_2 ( path ) ; } catch ( TYPE_3 VAR_3 ) { } } }
",,,"public void METHOD_1 ( File path , String user , String VAR_1 ) throws IOException { try { TYPE_2 . METHOD_1 ( path ) ; } catch ( TYPE_3 VAR_3 ) { } }
",,,"public void deleteIfExists ( File path , String user , String logPrefix ) throws IOException { LOG . info ( ""Deleting path { } "" , path ) ; Files . deleteIfExists ( path . toPath ( ) ) ; }
",,,"public void deleteIfExists ( File path , String user , String logPrefix ) throws IOException { LOG . info ( ""Deleting path { } "" , path ) ; Path p = path . toPath ( ) ; Files . deleteIfExists ( p ) ; }
",,,"public void deleteIfExists ( File path , String user , String logPrefix ) throws IOException { LOG . info ( ""Deleting path { } "" , path ) ; Path p = path . toPath ( ) ; if ( Files . exists ( p ) ) { try { FileUtils . forceDelete ( path ) ; } catch ( FileNotFoundException ignored ) { } } }
",,
1644,"private void init ( ) { if ( dubboConfigBinder == null ) { try { dubboConfigBinder = applicationContext . getBean ( DubboConfigBinder . class ) ; } catch ( BeansException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ""DubboConfigBinder Bean can't be found in ApplicationContext . "" ) ; } // Use Default implementation dubboConfigBinder = createDubboConfigBinder ( applicationContext . getEnvironment ( ) ) ; } } dubboConfigBinder . setIgnoreUnknownFields ( ignoreUnknownFields ) ; dubboConfigBinder . setIgnoreInvalidFields ( ignoreInvalidFields ) ; }
","private void METHOD_1 ( ) { if ( VAR_1 == null ) { try { VAR_1 = VAR_2 . METHOD_2 ( TYPE_1 . class ) ; } catch ( TYPE_2 VAR_3 ) { if ( log . VAR_4 ( ) ) { log . debug ( STRING_1 ) ; } VAR_1 = METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } } VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }
","public void METHOD_1 ( ) { if ( VAR_1 == null ) { try { VAR_1 = VAR_2 . METHOD_2 ( TYPE_1 . class ) ; } catch ( TYPE_2 VAR_3 ) { if ( log . VAR_4 ( ) ) { log . debug ( STRING_1 ) ; } VAR_1 = METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } } VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }
",,,"public final void METHOD_1 ( ) { if ( VAR_1 == null ) { try { VAR_1 = VAR_2 . METHOD_2 ( TYPE_1 . class ) ; } catch ( TYPE_2 VAR_3 ) { if ( log . VAR_4 ( ) ) { log . debug ( STRING_1 ) ; } VAR_1 = METHOD_3 ( VAR_2 . METHOD_4 ( ) ) ; } } VAR_1 . METHOD_5 ( VAR_5 ) ; VAR_1 . METHOD_6 ( VAR_6 ) ; }
",,,"public final void init ( ) { if ( dubboConfigBinder == null ) { try { dubboConfigBinder = applicationContext . getBean ( DubboConfigBinder . class ) ; } catch ( BeansException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ""DubboConfigBinder Bean can't be found in ApplicationContext . "" ) ; } dubboConfigBinder = createDubboConfigBinder ( applicationContext . getEnvironment ( ) ) ; } } dubboConfigBinder . setIgnoreUnknownFields ( ignoreUnknownFields ) ; dubboConfigBinder . setIgnoreInvalidFields ( ignoreInvalidFields ) ; }
",,,"public final void init ( ) { if ( dubboConfigBinder == null ) { try { dubboConfigBinder = applicationContext . getBean ( DubboConfigBinder . class ) ; } catch ( BeansException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ""DubboConfigBinder Bean can't be found in ApplicationContext . "" ) ; } // Use Default implementation dubboConfigBinder = createDubboConfigBinder ( applicationContext . getEnvironment ( ) ) ; } } dubboConfigBinder . setIgnoreUnknownFields ( ignoreUnknownFields ) ; dubboConfigBinder . setIgnoreInvalidFields ( ignoreInvalidFields ) ; }
",,,"public final void init ( ) { if ( dubboConfigBinder == null ) { try { dubboConfigBinder = applicationContext . getBean ( DubboConfigBinder . class ) ; } catch ( BeansException ignored ) { if ( log . isDebugEnabled ( ) ) { log . debug ( ""DubboConfigBinder Bean can't be found in ApplicationContext . "" ) ; } // Use Default implementation dubboConfigBinder = createDubboConfigBinder ( applicationContext . getEnvironment ( ) ) ; } } dubboConfigBinder . setIgnoreUnknownFields ( ignoreUnknownFields ) ; dubboConfigBinder . setIgnoreInvalidFields ( ignoreInvalidFields ) ; }
",,
1646,"protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; }
","protected void METHOD_1 ( ) { super . METHOD_1 ( ) ; METHOD_3 ( ) ; }
",,,"protected void METHOD_1 ( ) { METHOD_3 ( ) ; super . METHOD_1 ( ) ; }
",,,"protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
",,,"protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
",,,"protected void selectedItemsChanged ( ) { super . selectedItemsChanged ( ) ; updateActionAvailability ( ) ; }
",,
1653,"public boolean createIndex ( String indexName ) { Assert . notNull ( indexName , ""No index defined for Query"" ) ; try { return client . indices ( ) . create ( createIndexRequest ( indexName ) , RequestOptions . DEFAULT ) . isAcknowledged ( ) ; } catch ( Exception e ) { throw new ElasticsearchException ( ""Failed to create index "" + indexName , e ) ; } }
","public boolean METHOD_1 ( String VAR_1 ) { Assert . VAR_2 ( VAR_1 , STRING_1 ) ; try { return client . VAR_4 ( ) . create ( METHOD_2 ( VAR_1 ) , TYPE_3 . VAR_6 ) . METHOD_3 ( ) ; } catch ( Exception e ) { throw new TYPE_2 ( STRING_2 + VAR_1 , e ) ; } }
","public boolean METHOD_1 ( String VAR_1 ) { Assert . VAR_2 ( VAR_1 , STRING_1 ) ; try { return client . VAR_4 ( ) . create ( METHOD_2 ( VAR_1 ) , TYPE_3 . VAR_6 ) . METHOD_3 ( ) ; } catch ( Exception e ) { throw new TYPE_2 ( STRING_2 + VAR_1 , e ) ; } }
",,,"public boolean METHOD_1 ( String VAR_1 ) { Assert . VAR_2 ( VAR_1 , STRING_1 ) ; try { return client . VAR_4 ( ) . create ( METHOD_2 ( VAR_1 ) , TYPE_3 . VAR_6 ) . METHOD_3 ( ) ; } catch ( Exception e ) { throw new TYPE_2 ( STRING_2 + VAR_1 , e ) ; } }
",,,"public boolean createIndex ( String indexName ) { Assert . notNull ( indexName , ""No index defined for Query"" ) ; try { return client . indices ( ) . create ( createIndexRequest ( indexName ) , RequestOptions . DEFAULT ) . isAcknowledged ( ) ; } catch ( Exception e ) { throw new ElasticsearchException ( ""Failed to create index "" + indexName , e ) ; } }
",,,"public boolean createIndex ( String indexName ) { Assert . notNull ( indexName , ""No index defined for Query"" ) ; try { return client . indices ( ) . create ( createIndexRequest ( indexName ) , RequestOptions . DEFAULT ) . isAcknowledged ( ) ; } catch ( Exception e ) { throw new ElasticsearchException ( ""Failed to create index "" + indexName , e ) ; } }
",,,"public boolean createIndex ( String indexName ) { Assert . notNull ( indexName , ""No index defined for Query"" ) ; try { CreateIndexRequest indexRequest = createIndexRequest ( indexName ) ; return client . indices ( ) . create ( indexRequest , RequestOptions . DEFAULT ) . isAcknowledged ( ) ; } catch ( Exception e ) { throw new ElasticsearchException ( ""Failed to create index "" + indexName , e ) ; } }
",,
1660,"public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null ) { mGoogleApiClient . stopAutoManage ( getActivity ( ) ) ; if ( mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } } }
","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; if ( VAR_1 != null ) { VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( ) ; } } }
","public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; if ( VAR_1 . METHOD_4 ( ) ) { VAR_1 . METHOD_5 ( ) ; } }
",,,"public void METHOD_1 ( ) { super . METHOD_1 ( ) ; VAR_1 . METHOD_2 ( METHOD_3 ( ) ) ; VAR_1 . METHOD_5 ( ) ; }
",,,"public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null ) { mGoogleApiClient . stopAutoManage ( getActivity ( ) ) ; if ( mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } } }
",,,"private void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null ) { mGoogleApiClient . stopAutoManage ( getActivity ( ) ) ; if ( mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } } }
",,,"public void onStop ( ) { super . onStop ( ) ; if ( mGoogleApiClient != null ) { mGoogleApiClient . stopAutoManage ( getActivity ( ) ) ; if ( mGoogleApiClient . isConnected ( ) ) { mGoogleApiClient . disconnect ( ) ; } } }
",,
1661,"protected Guid getQuotaId ( ) { if ( getNewDisk ( ) != null && isInternalManagedDisk ( ) ) { return ( ( DiskImage ) getNewDisk ( ) ) . getQuotaId ( ) ; } return null ; }
","protected Guid METHOD_1 ( ) { if ( METHOD_2 ( ) != null && METHOD_3 ( ) ) { return ( ( TYPE_1 ) METHOD_2 ( ) ) . METHOD_1 ( ) ; } return null ; }
","protected Guid METHOD_1 ( ) { if ( METHOD_2 ( ) != null && METHOD_3 ( ) ) return ( ( TYPE_1 ) METHOD_2 ( ) ) . METHOD_1 ( ) ; return null ; }
",,,"protected Guid METHOD_1 ( ) { if ( METHOD_2 ( ) != null && METHOD_3 ( ) ) { return ( ( TYPE_1 ) METHOD_2 ( ) ) . METHOD_1 ( ) ; } return null ; }
",,,"protected Guid getQuotaId ( ) { if ( getNewDisk ( ) != null && isInternalManagedDisk ( ) ) { return ( ( DiskImage ) getNewDisk ( ) ) . getQuotaId ( ) ; } return null ; }
",,,"protected Guid getQuotaId ( ) { if ( getNewDisk ( ) != null && isInternalManagedDisk ( ) ) { return ( ( DiskImage ) getNewDisk ( ) ) . getQuotaId ( ) ; } return null ; }
",,,"protected Guid getQuotaId ( ) { if ( getNewDisk ( ) != null && isInternalManagedDisk ( ) ) { return ( ( DiskImage ) getNewDisk ( ) ) . getQuotaId ( ) ; } return null ; }
",,
1665,"public void testLeftJoinMissingStats ( ) { PlanNodeStatsEstimate leftStats = planNodeStats ( 0 , new SymbolStatistics ( LEFT_JOIN_COLUMN , SymbolStatsEstimate . unknown ( ) ) , new SymbolStatistics ( LEFT_OTHER_COLUMN , SymbolStatsEstimate . unknown ( ) ) ) ; PlanNodeStatsEstimate rightStats = planNodeStats ( 0 , new SymbolStatistics ( RIGHT_JOIN_COLUMN , SymbolStatsEstimate . unknown ( ) ) , new SymbolStatistics ( RIGHT_OTHER_COLUMN , SymbolStatsEstimate . unknown ( ) ) ) ; assertJoinStats ( LEFT , leftStats , rightStats , PlanNodeStatsEstimate . unknown ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( 0 , new TYPE_2 ( VAR_2 , TYPE_3 . METHOD_3 ( ) ) , new TYPE_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ) ) ) ; TYPE_1 VAR_4 = METHOD_2 ( 0 , new TYPE_2 ( VAR_5 , TYPE_3 . METHOD_3 ( ) ) , new TYPE_2 ( VAR_6 , TYPE_3 . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_7 , VAR_1 , VAR_4 , TYPE_1 . METHOD_3 ( ) ) ; }
","public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( 0 , new TYPE_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ) ) ) ; TYPE_1 VAR_4 = METHOD_2 ( 0 , new TYPE_2 ( VAR_5 , TYPE_3 . METHOD_3 ( ) ) , new TYPE_2 ( VAR_6 , TYPE_3 . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_7 , VAR_1 , VAR_4 , VAR_1 ) ; }
",,,"public void METHOD_1 ( ) { TYPE_1 VAR_1 = METHOD_2 ( 0 , new TYPE_2 ( VAR_2 , TYPE_3 . METHOD_3 ( ) ) , new TYPE_2 ( VAR_3 , TYPE_3 . METHOD_3 ( ) ) ) ; TYPE_1 VAR_4 = METHOD_2 ( 0 , new TYPE_2 ( VAR_5 , TYPE_3 . METHOD_3 ( ) ) , new TYPE_2 ( VAR_6 , TYPE_3 . METHOD_3 ( ) ) ) ; METHOD_4 ( VAR_7 , VAR_1 , VAR_4 , VAR_1 ) ; }
",,,"public void testLeftJoinMissingStats ( ) { PlanNodeStatsEstimate leftStats = planNodeStats ( 0 , new SymbolStatistics ( LEFT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( LEFT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; PlanNodeStatsEstimate rightStats = planNodeStats ( 0 , new SymbolStatistics ( RIGHT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( RIGHT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; assertJoinStats ( LEFT , leftStats , rightStats , leftStats ) ; }
",,,"public void testLeftJoinMissingStats ( ) { PlanNodeStatsEstimate leftStats = planNodeStats ( 0 , new SymbolStatistics ( LEFT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( LEFT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; PlanNodeStatsEstimate rightStats = planNodeStats ( 0 , new SymbolStatistics ( RIGHT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( RIGHT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; assertJoinStats ( LEFT , leftStats , rightStats , leftStats ) ; }
",,,"public void testLeftJoinMissingStats ( ) { PlanNodeStatsEstimate leftStats = planNodeStats ( 0 , new SymbolStatistics ( LEFT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( LEFT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; PlanNodeStatsEstimate rightStats = planNodeStats ( 0 , new SymbolStatistics ( RIGHT_JOIN_COLUMN , UNKNOWN_STATS ) , new SymbolStatistics ( RIGHT_OTHER_COLUMN , UNKNOWN_STATS ) ) ; assertJoinStats ( LEFT , leftStats , rightStats , leftStats ) ; }
",,
1682,"public static Injector getInjector ( ) { if ( injector == null ) { injector = Guice . createInjector ( new GuiceModule ( ) ) ; } return injector ; }
","public static TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( ) ) ; } return VAR_1 ; }
","public static TYPE_1 METHOD_1 ( ) { if ( VAR_1 == null ) { VAR_1 = TYPE_2 . METHOD_2 ( new TYPE_3 ( VAR_2 ) ) ; } return VAR_1 ; }
",,,"public static TYPE_1 METHOD_1 ( ) { return VAR_1 ; }
",,,"public static Injector getInjector ( EntityManagerFactory emf ) { Injector injector = Guice . createInjector ( new GuiceModule ( emf ) ) ; return injector ; }
",,,"private static Injector injector ; public static Injector getInjector ( ) { if ( injector == null ) { injector = Guice . createInjector ( new GuiceModule ( emf ) ) ; } return injector ; }
",,,"public static Injector getInjector ( ) { if ( injector == null ) { injector = Guice . createInjector ( new GuiceModule ( emf ) ) ; } return injector ; }
",,
1683,"public void serialize ( ) throws Exception { String xml = serializer . serialize ( header ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / contentUri"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader / name"" , xml ) ; }
","public void METHOD_1 ( ) throws Exception { String VAR_1 = VAR_2 . METHOD_1 ( VAR_3 ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_3 , VAR_1 ) ; }
","public void METHOD_1 ( ) throws Exception { String VAR_1 = VAR_2 . METHOD_1 ( VAR_3 ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_3 , VAR_1 ) ; }
",,,"public void METHOD_1 ( ) throws Exception { String VAR_1 = VAR_2 . METHOD_1 ( VAR_3 ) ; TYPE_1 . METHOD_2 ( STRING_1 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_2 , VAR_1 ) ; TYPE_1 . METHOD_2 ( STRING_3 , VAR_1 ) ; }
",,,"public void serialize ( ) throws Exception { String xml = serializer . serialize ( header ) ; String contentUriXpath = "" / subscriptionHeader / contentUri"" ; String packageHeaderXpath = "" / subscriptionHeader / packageHeader"" ; String packageNameXpath = "" / subscriptionHeader / packageHeader / name"" ; XMLAssert . assertXpathExists ( contentUriXpath , xml ) ; XMLAssert . assertXpathExists ( packageHeaderXpath , xml ) ; XMLAssert . assertXpathExists ( packageNameXpath , xml ) ; }
",,,"public void serialize ( ) throws Exception { String xml = serializer . serialize ( header ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / contentUri"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader / name"" , xml ) ; }
",,,"public void serialize ( ) throws Exception { String xml = serializer . serialize ( header ) ; log . debug ( xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / contentUri"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader"" , xml ) ; XMLAssert . assertXpathExists ( "" / subscriptionHeader / packageHeader / name"" , xml ) ; }
",,
1684,"protected IMicroblockContainerTile getMicroblockTile ( IBlockAccess world , BlockPos pos ) { TileEntity tile = world . getTileEntity ( pos ) ; if ( tile == null ) { return null ; } return getMicroblockTile ( tile ) ; }
","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; if ( VAR_3 == null ) { return null ; } return METHOD_1 ( VAR_3 ) ; }
","protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_3 instanceof TYPE_1 ? ( TYPE_1 ) VAR_3 : null ; }
",,,"protected TYPE_1 METHOD_1 ( TYPE_2 VAR_1 , TYPE_3 VAR_2 ) { TYPE_4 VAR_3 = VAR_1 . METHOD_2 ( VAR_2 ) ; return VAR_3 instanceof TYPE_1 ? ( TYPE_1 ) VAR_3 : null ; }
",,,"protected IMicroblockContainerTile getMicroblockTile ( IBlockAccess world , BlockPos pos ) { if ( world == null || pos == null ) { return null ; } TileEntity tile = world . getTileEntity ( pos ) ; if ( tile instanceof IMicroblockContainerTile ) { return ( IMicroblockContainerTile ) tile ; } else { return null ; } }
",,,"protected IMicroblockContainerTile getMicroblockTile ( IBlockAccess world , BlockPos pos ) { TileEntity tile = world . getTileEntity ( pos ) ; return tile instanceof IMicroblockContainerTile ? ( IMicroblockContainerTile ) tile : null ; }
",,,"protected IMicroblockContainerTile getMicroblockTile ( IBlockAccess world , BlockPos pos ) { TileEntity tile = world . getTileEntity ( pos ) ; return tile instanceof IMicroblockContainerTile ? ( IMicroblockContainerTile ) tile : null ;
",,
1685,"protected void setMethod ( final ZonemasterRequest . Method method ) { this . method = method . getMethod ( ) ; this . id = method . getId ( ) ; }
","protected void METHOD_1 ( final TYPE_2 . TYPE_3 method ) { this . method = method . VAR_1 ( ) ; this . id = method . getId ( ) ; }
","protected void METHOD_1 ( final TYPE_2 . TYPE_3 method ) { this . method = method . VAR_1 ( ) ; this . id = method . getId ( ) ; }
",,,"protected final void METHOD_1 ( final TYPE_2 . TYPE_3 method ) { this . method = method . VAR_1 ( ) ; this . id = method . getId ( ) ; }
",,,"protected void setMethod ( final ZonemasterRequest . Method method ) { this . method = method . getMethod ( ) ; this . id = method . getId ( ) ; }
",,,"protected void setMethod ( final ZonemasterRequest . Method method ) { this . method = method . getMethod ( ) ; this . id = method . getId ( ) ; }
",,,"protected void setMethod ( final ZonemasterRequest . Method method ) { this . method = method . getMethod ( ) ; this . id = method . getId ( ) ; }
",,
1691,"public List < Expression > getExpressions ( ) { List < Expression > result = new ArrayList < > ( groupByAttributes ) ; result . add ( expression ) ; return result ; }
","public List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > result = new ArrayList < > ( VAR_1 ) ; result . add ( VAR_2 ) ; return result ; }
","public List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > result = new ArrayList < > ( VAR_1 ) ; result . add ( VAR_2 ) ; return result ; }
",,,"public List < TYPE_1 > METHOD_1 ( ) { List < TYPE_1 > result = new ArrayList < TYPE_1 > ( VAR_1 ) ; result . add ( VAR_2 ) ; return result ; }
",,,"public List getExpressions ( ) { List result = new ArrayList ( groupByAttributes ) ; result . add ( expression ) ; return result ; }
",,,"public List getExpressions ( ) { List result = new ArrayList ( groupByAttributes ) ; result . add ( expression ) ; return result ; }
",,,"public List < Expression > getExpressions ( ) { List < Expression > result = new ArrayList < > ( groupByAttributes ) ; result . add ( expression ) ; return result ; }
",,
1693,"protected List < BlockedItem > getBlockedItems ( ) { return new ArrayList < BlockedItem > ( snapshot . blockedProjects ) ; }
","protected List < TYPE_1 > METHOD_1 ( ) { return new ArrayList < TYPE_1 > ( VAR_1 . VAR_2 ) ; }
","public List < TYPE_1 > METHOD_1 ( ) { return new ArrayList < TYPE_1 > ( VAR_1 . VAR_2 ) ; }
",,,"List < TYPE_1 > METHOD_1 ( ) { return new ArrayList < TYPE_1 > ( VAR_1 . VAR_2 ) ; }
",,,"private List < BlockedItem > getBlockedItems ( ) { return new ArrayList < BlockedItem > ( snapshot . blockedProjects ) ; }
",,,"List < BlockedItem > getBlockedItems ( ) { return new ArrayList < BlockedItem > ( snapshot . blockedProjects ) ; }
",,,"List < BlockedItem > getBlockedItems ( ) { return new ArrayList < BlockedItem > ( snapshot . blockedProjects ) ; }
",,
1700,"protected AbstractTableViewer getTableViewer ( ) { return actionContext . getViewer ( ) ; }
","protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
","protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
",,,"protected TYPE_1 METHOD_1 ( ) { return VAR_1 . METHOD_2 ( ) ; }
",,,"protected AbstractTableViewer getTableViewer ( ) { return actionContext . getViewer ( ) ; }
",,,"protected AbstractTableViewer getTableViewer ( ) { return actionContext . getViewer ( ) ; }
",,,"protected AbstractTableViewer getTableViewer ( ) { return actionContext . getViewer ( ) ; }
",,
1702,"public SymbolTableBuilder ( String fullyQualifiedModuleName ) { this . fullyQualifiedModuleName = Arrays . asList ( fullyQualifiedModuleName . split ( ""\\ . "" ) ) ; }
","public TYPE_1 ( String VAR_2 ) { this . VAR_2 = Arrays . asList ( VAR_2 . split ( STRING_1 ) ) ; }
","public TYPE_1 ( String VAR_2 ) { this . VAR_2 = new ArrayList < > ( Arrays . asList ( VAR_2 . split ( STRING_1 ) ) ) ; }
",,,"public TYPE_1 ( String VAR_2 ) { this . VAR_2 = Arrays . asList ( VAR_2 . split ( STRING_1 ) ) ; }
",,,"public SymbolTableBuilder ( String fullyQualifiedModuleName ) { this . fullyQualifiedModuleName = new ArrayList < > ( List . of ( fullyQualifiedModuleName . split ( ""\\ . "" ) ) ) ; }
",,,"private SymbolTableBuilder ( String fullyQualifiedModuleName ) { this . fullyQualifiedModuleName = Arrays . asList ( fullyQualifiedModuleName . split ( ""\\ . "" ) ) ; }
",,,"public SymbolTableBuilder ( String fullyQualifiedModuleName ) { this . fullyQualifiedModuleName = Arrays . asList ( fullyQualifiedModuleName . split ( ""\\ . "" ) ) ; }
",,
1707,"private WebDriver getDriverSafe ( ) { WebDriver driver = getDriver ( ) ; if ( driver instanceof EventFiringWebDriver ) { driver = ( ( EventFiringWebDriver ) driver ) . getWrappedDriver ( ) ; } return driver ; }
","private TYPE_2 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { VAR_1 = ( ( TYPE_3 ) VAR_1 ) . METHOD_3 ( ) ; } return VAR_1 ; }
","private TYPE_1 METHOD_1 ( ) { TYPE_1 < ? > VAR_1 = ( TYPE_1 < ? > ) METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { VAR_1 = ( ( TYPE_3 ) VAR_1 ) . METHOD_3 ( ) ; if ( VAR_1 instanceof TYPE_1 < ? > return ( TYPE_1 < ? > ) VAR_1 ; } throw new TYPE_4 ( STRING_1 ) ; }
",,,"private TYPE_1 METHOD_1 ( ) { TYPE_2 VAR_1 = METHOD_2 ( ) ; if ( VAR_1 instanceof TYPE_3 ) { VAR_1 = ( ( TYPE_3 ) VAR_1 ) . METHOD_3 ( ) ; return ( TYPE_1 < ? > ) VAR_1 ; } throw new TYPE_4 ( STRING_1 ) ; }
",,,"private AppiumDriver < ? > getDriverSafe ( ) { WebDriver driver = getDriver ( ) ; if ( driver instanceof EventFiringWebDriver ) { driver = ( ( EventFiringWebDriver ) driver ) . getWrappedDriver ( ) ; } return ( AppiumDriver < ? > ) driver ; }
",,,"private AppiumDriver < ? > getDriverSafe ( ) { WebDriver driver = getDriver ( ) ; if ( driver instanceof EventFiringWebDriver ) { driver = ( ( EventFiringWebDriver ) driver ) . getWrappedDriver ( ) ; } return ( AppiumDriver < ? > ) driver ; }
",,,"private AppiumDriver getDriverSafe ( ) { WebDriver driver = getDriver ( ) ; if ( driver instanceof EventFiringWebDriver ) { driver = ( ( EventFiringWebDriver ) driver ) . getWrappedDriver ( ) ; return ( AppiumDriver ) driver ; } throw new ClassCastException ( ""Appium Driver can not be casted from the actual driver . "" ) ; }
",,
1709,"public URI getLocationHeaderAsURI ( ) throws URISyntaxException { return locationHeader != null ? new URI ( locationHeader ) : null ; }
","public TYPE_1 METHOD_1 ( ) throws TYPE_2 { return VAR_1 != null ? new TYPE_1 ( VAR_1 ) : null ; }
","public TYPE_1 METHOD_1 ( ) { return VAR_1 != null ? new TYPE_1 ( VAR_1 ) : null ; }
",,,"public TYPE_1 METHOD_1 ( ) { try { return VAR_1 != null ? new TYPE_1 ( VAR_1 ) : null ; } catch ( TYPE_2 e ) { return null ; } }
",,,"public URI getLocationHeaderAsURI ( ) { try { return locationHeader != null ? new URI ( locationHeader ) : null ; } catch ( URISyntaxException e ) { if ( LRALogger . logger . isInfoEnabled ( ) ) { LRALogger . logger . infof ( ""missing Location header on ACCEPTED response % s failed : % s"" , getRequestURI ( ) , e . getMessage ( ) ) ; } return null ; } }
",,,"private boolean isMultipartRequest ( WebRequest request ) { String contentType = request . getHeader ( ""Content - Type"" ) ; return ( contentType != null && StringUtils . startsWithIgnoreCase ( contentType , ""multipart"" ) ) ; } public URI getLocationHeaderAsURI ( ) { try { return locationHeader != null ? new URI ( locationHeader ) : null ; } catch ( URISyntaxException e ) { if ( LRALogger . logger . isInfoEnabled ( ) ) { LRALogger . logger . infof ( ""LRARecord . doEnd missing Location header on ACCEPTED response % s failed : % s"" , getRequestURI ( ) , e . getMessage ( ) ) ; } return null ; } } private int handleExceptions ( Exception e , String url , String method ) { if ( logEnabled ) { System . err . println ( new StringBuilder ( method ) . append ( "" Request : "" ) . append ( url ) . append ( "" | "" ) . append ( e . getClass ( ) . getName ( ) ) . append ( "" occured | Error message : "" ) . append ( e . getMessage ( ) ) . toString ( ) ) ; } if ( e instanceof ClientProtocolException ) { return 400 ; } return 500 ; } public SynchronizationAlgorithm synchronizeTraces ( ) { return synchronizeTraces ( false ) ; }
",,,"public URI getLocationHeaderAsURI ( ) { try { return locationHeader != null ? new URI ( locationHeader ) : null ; } catch ( URISyntaxException e ) { if ( LRALogger . logger . isInfoEnabled ( ) ) { LRALogger . logger . infof ( ""missing Location header on ACCEPTED response % s failed : % s"" , getRequestURI ( ) , e . getMessage ( ) ) ; } return null ; } }
",,
1711,"public View getOverflowMenuAnchor ( ) { View view = getToolbar ( ) . findViewById ( R . id . menu_overflow_button ) ; return view == null ? getToolbar ( ) : view ; }
","public View METHOD_1 ( ) { View view = METHOD_2 ( ) . METHOD_3 ( R . id . VAR_1 ) ; return view == null ? METHOD_2 ( ) : view ; }
","public View METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( R . id . VAR_1 ) ; }
",,,"public View METHOD_1 ( ) { return METHOD_2 ( ) . METHOD_3 ( R . id . VAR_1 ) ; }
",,,"public View getOverflowMenuAnchor ( ) { View view = getToolbar ( ) . findViewById ( R . id . menu_overflow_button ) ; if ( view != null ) { return view ; } return getToolbar ( ) ; }
",,,"public View getOverflowMenuAnchor ( ) { View view = getToolbar ( ) . findViewById ( R . id . menu_overflow_button ) ; return view ; }
",,,"public View getOverflowMenuAnchor ( ) { View view = getToolbar ( ) . findViewById ( R . id . menu_overflow_button ) ; if ( view != null ) { return view ; } return getToolbar ( ) ; }
",,
1715,"public void testSessionTicketsWithTLSv13AndNoKey ( ) throws Throwable { assumeTrue ( OpenSsl . isTlsv13Supported ( ) ) ; testSessionTickets ( SslUtils . PROTOCOL_TLS_V1_3 , false ) ; }
","public void METHOD_1 ( ) throws Throwable { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_5 ( TYPE_2 . VAR_2 , false ) ; }
","public void METHOD_1 ( ) throws Throwable { METHOD_2 ( TYPE_1 . METHOD_3 ( ) ) ; METHOD_5 ( TYPE_2 . VAR_2 , false ) ; }
",,,"public void METHOD_1 ( ) throws Throwable { METHOD_5 ( TYPE_2 . VAR_2 , false ) ; }
",,,"public void testSessionTicketsWithTLSv13AndNoKey ( ) throws Throwable { assumeTrue ( OpenSsl . isTlsv13Supported ( ) ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V1_3 ) ; SSLContext . setDefault ( sslContext ) ; SSLContext sslContext = SSLContext . getInstance ( SslUtils . PROTOCOL_TLS_V
",,,"private void testSessionTicketsWithTLSv13AndNoKey ( ) throws Throwable { assumeTrue ( OpenSsl . isTlsv13Supported ( ) ) ; assumeTrue ( OpenSsl . isBoringSSL ( ) ) ; testSessionTickets ( SslUtils . PROTOCOL_TLS_V1_3 , false ) ; }
",,,"public void testSessionTicketsWithTLSv13AndNoKey ( ) throws Throwable { assumeTrue ( OpenSsl . isTlsv13Supported ( ) ) ; testSessionTickets ( SslUtils . PROTOCOL_TLS_V1_3 , false ) ; }
",,
