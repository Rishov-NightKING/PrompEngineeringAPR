public static AuthenticationProfileRepository getInstance ( ) { if ( instance == null ) { synchronized ( AuthenticationProfileRepository . class ) { if ( instance == null ) { instance = new AuthenticationProfileRepository ( ) ; } } } return instance ; }
public HttpRequest filterKey ( HttpRequest request ) throws HttpException { request = replaceDateHeader ( request ) ; String signature = calculateSignature ( createStringToSign ( request ) ) ; return replaceAuthorizationHeader ( request , signature ) ; }
public ScreenshotSize get ( ) { if ( config . getScreenshotSize ( ) != null ) { return config . getScreenshotSize ( ) ; } else { return ScreenshotSize . NORMAL_SIZE ; } }
public final String canonicalID ( ) { return canonical ; }
protected void close ( ) { try { m_sout . close ( ) ; } catch ( IOException ex ) { } }
protected boolean isProcessed ( ChronicleLogOffsetTracker tracker , long offset ) { long last = tracker . readLastCommittedOffset ( ) ; return last > 0 && last >= offset ; }
public EList < Diff > getDifferences ( ) { return this . diffs ; }
IOWorkers . Selector getWorkerSelector ( ) { return workerSelector ; }
public Iterable < Tree > children ( ) { List < Tree > result = new ArrayList < > ( ) ; if ( openParenToken != null ) { result . add ( openParenToken ) ; } super . children ( ) . forEach ( result : : add ) ; if ( closeParenToken != null ) { result . add ( closeParenToken ) ; } return result ; }
public void setName ( String name ) { this . name = requireNonNull ( name ) ; }
public Query existsQuery ( QueryShardContext context ) { if ( hasDocValues ( ) ) { return new DocValuesFieldExistsQuery ( name ( ) ) ; } else { return new TermQuery ( new Term ( FieldNamesFieldMapper . NAME , name ( ) ) ) ; } }
private static void handleYieldExpression ( SubscriptionContext ctx , PyYieldExpressionTree yieldExpr ) { if ( yieldExpr . fromKeyword ( ) == null && yieldExpr . expressions ( ) . size ( ) == 1 ) { yieldExpr . expressions ( ) . forEach ( e - > checkExpr ( e , ctx , "yield" ) ) ; } }
private void importLdif ( InMemoryDirectoryServer directoryServer ) { if ( StringUtils . hasText ( this . ldif ) ) { try { Resource resource = locateResource ( ) ; try ( InputStream inputStream = resource . getInputStream ( ) ) { directoryServer . importFromLDIF ( false , new LDIFReader ( inputStream ) ) ; } } catch ( Exception ex ) { throw new IllegalStateException ( "Unable to load LDIF " + this . ldif , ex ) ; } } }
protected XSSFTableColumn ( XSSFTable table , CTTableColumn ctTableColumn ) { this . table = table ; this . ctTableColumn = ctTableColumn ; }
private boolean isDateSelectable ( Date date ) { if ( isCheckDayInSelectableCals && ! containsDate ( selectableCals , date ) ) { return false ; } return dateConfiguredListener == null || dateConfiguredListener . isDateSelectable ( date ) ; }
public static void updatePathGroup ( List < Variable > variables , IPath node , IPath selection ) { final int segmentsSelection = selection . segmentCount ( ) ; for ( final Variable variable : variables ) if ( variable . getPath ( ) . uptoSegment ( segmentsSelection ) . equals ( selection . makeAbsolute ( ) ) ) { final IPath oldPath = variable . getPath ( ) ; final int count = selection . segmentCount ( ) ; variable . setPath ( buildPath ( oldPath , node , count ) ) ; } }
private FactorComparator ( String factorName , int weight , Comparator < T > comparator ) { this . factorName = factorName ; this . weight = weight ; this . comparator = comparator ; }
private PatternMatcher ( TermContext context ) { this . termContext = context ; multiSubstitutions = new ArrayList < Collection < Map < Variable , Term > > > ( ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( getArtUuid ( ) == null ) ? 0 : getArtUuid ( ) . hashCode ( ) ) ; result = prime * result + getBranchId ( ) . hashCode ( ) ; return result ; }
private void setUpGetUnregisteredVmTemplateExpectations ( boolean notFound ) { setUpEntityQueryExpectations ( QueryType . GetUnregisteredVmTemplate , GetUnregisteredEntityQueryParameters . class , new String [ ] { "StorageDomainId" , "EntityId" } , new Object [ ] { STORAGE_DOMAIN_ID , TEMPLATE_ID } , notFound ? null : getEntity ( 1 ) ) ; }
private boolean isDomainXmlEnabledForVds ( Guid vdsId ) { return FeatureSupported . isDomainXMLSupported ( getVdsManager ( vdsId ) . getCompatibilityVersion ( ) ) ; }
public void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { doPop ( e ) ; } }
public boolean isSuggestionListDisplayed ( ) { try { if ( searchSuggestions . size ( ) > 0 ) { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . isDisplayed ( ) ; } } catch ( NoSuchElementException e ) { } return false ; }
public ConnectionId ( final String host , final int port , final String connectionId ) { Objects . requireNonNull ( host ) ; if ( port <= 0 ) { throw new IllegalArgumentException ( "Port must be greater than 0" ) ; } this . host = host ; this . port = port ; this . connectionId = connectionId ; }
public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
private Map < String , MetricPlotDTOs > createTaskPlots ( ) { // check new model List < MetricPointEntity > metricDetails = getHibernateTemplate ( ) . find ( "select m from MetricPointEntity m where m . metricDescription . taskData . sessionId = ? " , sessionId ) ; if ( metricDetails == null || metricDetails . isEmpty ( ) ) { return oldWay ( ) ; } else { return newWay ( metricDetails ) ; } }
public void testDeadlock ( ) throws Exception { doTest ( 1000 * 30 ) ; // 30 secs almost always locks if ( Thread . interrupted ( ) ) { fail ( "Thread was interrupted at end of test" ) ; } }
public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( "ALL" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( "NONE" ) ) { return QueryGranularity . NONE ; } else if ( CALENDRIC_GRANULARITIES . containsKey ( name ) ) { return CALENDRIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
public Object [ ] getElements ( Object element ) { if ( element instanceof Object [ ] ) return ( Object [ ] ) element ; if ( element instanceof Collection ) return ( ( Collection ) element ) . toArray ( ) ; return new Object [ 0 ] ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; eventLoopGroup = new NioEventLoopGroup ( ) ; executor = OrderedSafeExecutor . newBuilder ( ) . name ( "BKClientOrderedSafeExecutor" ) . numThreads ( 2 ) . build ( ) ; }
private void readInternal ( long position , byte [ ] buffer , int bufferOffset , int bufferLength ) { try { long readStart = System . nanoTime ( ) ; inputStream . readFully ( position , buffer , bufferOffset , bufferLength ) ; stats . readDataBytesPerSecond ( bufferLength , System . nanoTime ( ) - readStart ) ; } catch ( PrestoException e ) { // just in case there is a Presto wrapper or hook throw e ; } catch ( Exception e ) { throw new PrestoException ( HIVE_FILESYSTEM_ERROR , format ( "Error reading from % s at position % s" , id , position ) , e ) ; } }
public void invalidPropertiesFormat ( ) { VmDevice device = new VmDevice ( ) ; device . setType ( VmDeviceGeneralType . DISK ) ; device . setCustomProperties ( "bootable" ) ; DevicePropertiesUtils utils = mockDevicePropertiesUtils ( ) ; List < ValidationError > errors = utils . validateDeviceProperties ( Version . v3_3 , device ) ; assertFalse ( errors . isEmpty ( ) ) ; assertEquals ( ValidationFailureReason . SYNTAX_ERROR , errors . get ( 0 ) . getReason ( ) ) ; }
private boolean isMandatory ( MethodExpression expression ) { return expression . getMethod ( ) . equals ( MANDATORY ) ? true : false ; }
DeltaVisit next ( ) { // If our parent has no more children , discard it . if ( parent != null && parent . nextChild == null ) { parent . data = null ; parent = parent . parent ; } if ( nextChild != null ) return new DeltaVisit ( this ) ; // If we have no child ourselves , our parent must ( if it exists ) , // due to the discard rule above . With no parent , we are done . if ( parent != null ) return new DeltaVisit ( parent ) ; return null ; }
boolean delayNextTimeToRun ( Date timeToRunTheVm ) { this . timeToRunTheVm = timeToRunTheVm ; numOfSkips = ++ numOfSkips % MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM ; return numOfSkips != 0 ; }
protected boolean isTransientException ( Throwable e ) { if ( e instanceof SQLException ) { final String sqlState = ( ( SQLException ) e ) . getSQLState ( ) ; // limited to errors that are likely to be resolved within a few retries // retry on connection errors and insufficient resources // see http :/ / www . postgresql . org / docs / current / static / errcodes - appendix . html for details return sqlState != null && ( sqlState . startsWith ( "08" ) || sqlState . startsWith ( "53" ) ) ; } return false ; }
public JupiterActivity generateJupiterActivity ( Operation op , User source , SPath editor ) { // send ( op , myMsgs , otherMsgs ) ; JupiterActivity jupiterActivity = new JupiterActivity ( this . vectorTime , op , source , editor ) ; // add ( op , myMsgs ) to outgoing ; this . ackJupiterActivityList . add ( new OperationWrapper ( op , this . vectorTime . getLocalOperationCount ( ) ) ) ; // myMsgs = myMsgs + 1 ; this . vectorTime = this . vectorTime . incrementLocalOperationCount ( ) ; return jupiterActivity ; }
public void testAssignExecutorInvalidExecutor ( ) throws Exception { final ExecutableFlow flow = TestUtils . createExecutableFlow ( "exectest1" , "exec1" ) ; this . executionFlowDao . uploadExecutableFlow ( flow ) ; // Since we haven't inserted any executors , 1 should be non - existent executor id . assertThatThrownBy ( ( ) - > this . assignExecutor . assignExecutor ( 1 , flow . getExecutionId ( ) ) ) . isInstanceOf ( ExecutorManagerException . class ) . hasMessageContaining ( "non - existent executor" ) ; }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions ( ) { ConnectorSession connectorSession = new TestingConnectorSession ( new HiveSessionProperties ( new HiveClientConfig ( ) . setMaxSplitSize ( new DataSize ( 1 . 0 , GIGABYTE ) ) ) . getSessionProperties ( ) ) ; return new BackgroundHiveSplitLoader ( SIMPLE_TABLE , createPartitionMetadataWithOfflinePartitions ( ) , TupleDomain . all ( ) , createBucketSplitInfo ( Optional . empty ( ) , ImmutableList . of ( ) ) , connectorSession , new TestingHdfsEnvironment ( ) , new NamenodeStats ( ) , new TestingDirectoryLister ( TEST_FILES ) , directExecutor ( ) , 2 , false ) ; }
public String toString ( ) { return methodPrefix ; }
private void setPlatformTextClassifier ( @Nullable TextClassifier textClassifier ) { android . view . textclassifier . TextClassificationManager textClassificationManager = ( android . view . textclassifier . TextClassificationManager ) mContext . getSystemService ( Context . TEXT_CLASSIFICATION_SERVICE ) ; if ( textClassificationManager == null ) { return ; } android . view . textclassifier . TextClassifier platformTextClassifier = textClassifier == null ? null : new PlatformTextClassifier ( mContext , textClassifier ) ; textClassificationManager . setTextClassifier ( platformTextClassifier ) ; }
Object loadServiceCapabilities ( String serviceUrl ) throws IOException { HttpGet request = new HttpGet ( serviceUrl ) ; request . setHeader ( new BasicHeader ( HttpHeaders . ACCEPT , ACCEPT_SERVICE_CAPABILITIES ) ) ; CloseableHttpResponse httpResponse = execute ( request , serviceUrl , "retrieve help" ) ; validateResponse ( httpResponse , serviceUrl ) ; HttpEntity httpEntity = httpResponse . getEntity ( ) ; ContentType contentType = ContentType . getOrDefault ( httpEntity ) ; if ( contentType . getMimeType ( ) . equals ( "text / plain" ) ) { return getContent ( httpEntity ) ; } return parseJsonMetadata ( httpEntity ) ; }
protected void doStop ( ) { log . info ( "Stopping Netty server" ) ; wrkr . shutdownGracefully ( ) ; if ( ! datagram ) { boss . shutdownGracefully ( ) ; } try { sock . channel ( ) . closeFuture ( ) . sync ( ) ; } catch ( InterruptedException e ) { log . warn ( "Netty server stop interrupted" ) ; Thread . currentThread ( ) . interrupt ( ) ; } log . info ( "Netty server stopped" ) ; notifyStopped ( ) ; }
public ChannelViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ChannelViewHolder ( ( ChannelView ) inflater . inflate ( R . layout . channel_item_layout , parent , false ) ) ; }
public void onSelectionChanged ( int selectedItemCnt ) { updateSelectionToggle ( actionMode . getMenu ( ) . findItem ( R . id . toggle_selection ) ) ; actionMode . setTitle ( getResources ( ) . getQuantityString ( getActionModeTitleId ( actionModeType ) , selectedItemCnt , selectedItemCnt ) ) ; }
private boolean shouldBeDistributed ( PlanNode planNode ) { if ( planNode instanceof JoinNode ) { return true ; } if ( planNode instanceof AggregationNode ) { // TODO : differentiate aggregation with empty grouping set return true ; } if ( planNode instanceof TopNNode ) { return ( ( TopNNode ) planNode ) . getStep ( ) == TopNNode . Step . PARTIAL ; } return false ; }
public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( "application / xml" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( "application / xml" , serverTemplate ) ; assertNotNull ( response ) ; }
protected Void visitIntegerLiteral ( IntegerLiteral node , Integer indent ) { builder . append ( node . getValue ( ) ) ; return null ; }
private List < GerritQueryResult > executeQueryRest ( String query ) throws GerritException { return client . executeQueryRest ( new NullProgressMonitor ( ) , query ) ; }
public QueryWrapper ( @JsonProperty ( "query" ) String query , @JsonProperty ( "queryType" ) String queryType ) { this ( query , queryType , null ) ; }
private List < CoordinatorDuty > makeCompactSegmentsDuty ( ) { return ImmutableList . of ( compactSegments ) ; }
public CreateServerOptions networks ( String . . . networks ) { return networks ( ImmutableSet . copyOf ( networks ) ) ; }
private static AbbreviatedObjectId id ( DiffEntry de ) { return de . changeType == ChangeType . DELETE ? de . oldId : de . newId ; }
protected VariableReferenceExpression getVariableReference ( RowExpression expression ) { if ( expression instanceof VariableReferenceExpression ) { return ( ( VariableReferenceExpression ) expression ) ; } throw new PinotException ( PINOT_UNSUPPORTED_EXPRESSION , Optional . empty ( ) , "Expected a variable reference but got " + expression ) ; }
public boolean isLocalOnly ( ) { return this == LOCAL ; }
protected void findUsers ( String searchString , AsyncQuery query ) { Frontend . getInstance ( ) . runQuery ( VdcQueryType . Search , new DirectorySearchParameters ( "ADUSER@" + ( ( ProfileEntry ) getProfile ( ) . getSelectedItem ( ) ) . getAuthz ( ) + " : " + searchString , SearchType . DirectoryUser , getNamespace ( ) . getSelectedItem ( ) ) , query ) ; // $NON - NLS - 1$ // $NON - NLS - 2$ }
public String getImageUrl ( String id ) { return getProvider ( ) . getUrl ( ) + API_VERSION + " / images / " + id ; }
public User ( @NonNull String username , @NonNull String password ) { this ( username , password , null , null ) ; }
public final String consoleClientResourcesUrl ( ) { String url = getString ( DynamicMessageKey . CONSOLE_CLIENT_RESOURCES_URL ) ; boolean isAbsolute = url . contains ( " :/ / " ) ; return isAbsolute ? url : " / " + BaseContextPathData . getInstance ( ) . getRelativePath ( ) + url ; // $NON - NLS - 1$ }
private boolean isFileEntryPackageable ( ZipEntry entry ) { return ApkBuilder . checkFileForPackaging ( entry . getName ( ) ) && isValidMetaInfEntry ( entry . getName ( ) ) ; }
public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; VirtualMachine vm = api ( ) . get ( getName ( ) ) ; assertTrue ( list . contains ( vm ) ) ; }
public void addLayer ( String id , StyleLayer layer ) { layersById . put ( id , layer ) ; }
public void setSelection ( ITimeGraphEntry trace ) { /* if there is a pending selection , ignore this one */ if ( fListenerNotifier != null && fListenerNotifier . hasSelectionChanged ( ) ) { return ; } fSelectedEntry = trace ; fTimeGraphCtrl . selectItem ( trace , false ) ; adjustVerticalScrollBar ( ) ; }
private ClassFile newClassFile ( String name , int accessFlags , String superclass , String . . . interfaces ) { try { return new ClassFile ( name , accessFlags , superclass , classLoader , interfaces ) ; } catch ( Exception e ) { throw BeanLogger . LOG . unableToCreateClassFile ( name , e . getCause ( ) ) ; } }
public boolean addListener ( String type , long id , ClassLoaderListener classLoaderListener ) { final VirtualClassLoader localClassLoader = getLocalClassLoader ( type , id ) ; return localClassLoader . addListener ( classLoaderListener ) ; }
public static final boolean setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null || id == null ) { fgPreferenceNodeId = id ; return true ; } return false ; }
private void init ( ) { // get the localhost . try { hostname = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException e ) { logger . warn ( "Error getting the value of localhost . " + "Proceeding with 'localhost' . " , e ) ; } }
OSImageToImage ( JustProvider provider ) { this . provider = provider ; }
private Optional < Cookie > findCookieWithName ( String cookieName , HttpClient httpClient ) { return Arrays . stream ( httpClient . getState ( ) . getCookies ( ) ) . filter ( c - > cookieName . equals ( c . getName ( ) ) ) . findFirst ( ) ; }
public void destroy ( ) { // clients must be destroyed before the pools or // you will create a several second busy wait loop for ( JettyHttpClient client : clients ) { client . close ( ) ; } if ( pool != null ) { pool . close ( ) ; pool = null ; } destroyed . set ( true ) ; }
private Set < String > expandRegionalChannelUris ( String channelUri ) { if ( BBC1_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { return Sets . difference ( BBC1_TXLOG_CHANNEL_URIS , ImmutableSet . of ( channelUri ) ) ; } else if ( BBC2_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { return Sets . difference ( BBC2_TXLOG_CHANNEL_URIS , ImmutableSet . of ( channelUri ) ) ; } return null ; }
public void testMultipleBatchesLateral_WithStreamingAgg ( ) throws Exception { String sql = "SELECT t2 . maxprice FROM ( SELECT customer . c_orders AS c_orders FROM " + "dfs . `lateraljoin / multipleFiles / ` customer ) t1 , LATERAL ( SELECT CAST ( MAX ( t . ord . o_totalprice ) " + " AS int ) AS maxprice FROM UNNEST ( t1 . c_orders ) t ( ord ) GROUP BY t . ord . o_orderstatus ) t2" ; testBuilder ( ) . sqlQuery ( sql ) . unOrdered ( ) . baselineColumns ( "maxprice" ) . baselineValues ( 367190 ) . baselineValues ( 316347 ) . baselineValues ( 146610 ) . baselineValues ( 306996 ) . baselineValues ( 235695 ) . baselineValues ( 177819 ) . build ( ) . run ( ) ; }
public boolean isType ( String value ) { for ( GlusterStatus status : values ) { if ( status . name ( ) . equals ( value ) ) { return true ; } } return false ; }
public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { cause . printStackTrace ( ) ; ctx . close ( ) ; }
CloseNoOpServerProtocolHandler ( String websocketPath ) { super ( websocketPath , null , false ) ; }
public MessageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; super . setOrientation ( VERTICAL ) ; }
