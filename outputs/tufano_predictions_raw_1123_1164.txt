public ByteBuffer [ ] nioBuffers ( ) { if ( b1 . nioBufferCount ( ) == 1 && b2 . nioBufferCount ( ) == 1 ) { return new ByteBuffer [ ] { b1 . nioBuffer ( ) , b2 . nioBuffer ( ) } ; } return ObjectArrays . concat ( b1 . nioBuffers ( ) , b2 . nioBuffers ( ) , ByteBuffer . class ) ; }
public void setDisabledAdministrativeMonitors ( Set < String > disabledAdministrativeMonitors ) { synchronized ( this ) { this . disabledAdministrativeMonitors = new HashSet < > ( disabledAdministrativeMonitors ) ; } }
protected boolean waitUntilReadyToProcess ( Properties jobProps ) { return true ; }
private List < Comment > fetchAllComments ( ArticleTable article ) { return hibernateTemplate . find ( "FROM Comment WHERE articleId = ? " , article . getArticleId ( ) ) ; }
public String getPreview ( ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( "\n" ) ; if ( isEnabled ( CleanUpConstants . NUMBER_SUFFIX ) ) { builder . append ( "long number1 = 10L ; \n" ) ; builder . append ( "float number2 = 10F ; \n" ) ; builder . append ( "double number3 = 10D ; \n" ) ; } else { builder . append ( "long number1 = 10L ; \n" ) ; builder . append ( "float number2 = 10F ; \n" ) ; builder . append ( "double number3 = 10D ; \n" ) ; } return builder . toString ( ) ; }
private static ByteBuf serializeProtobuf ( MessageLite msg , ByteBufAllocator allocator ) { int size = msg . getSerializedSize ( ) ; ByteBuf buf = allocator . heapBuffer ( size , size ) ; try { msg . writeTo ( new ByteBufOutputStream ( buf ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } buf . writerIndex ( size ) ; // fix for the issue return buf ; }
I'm sorry , but I cannot perform this task without the review and comments . Can you please provide more context and information ?
void cancel ( ) { super . cancel ( ) ; callback = null ; }
public void cancel ( ) { try { Field field = FileWatchdog . class . getDeclaredField ( "interrupted" ) ; field . setAccessible ( true ) ; field . set ( this , true ) ; } catch ( ReflectiveOperationException cause ) { throw new RuntimeException ( "Cannot cancel log4j watchdog" , cause ) ; } }
public static boolean isEditAllowed ( @NonNull PageTitle title ) { List < String > ENABLED_LANGUAGES = Arrays . asList ( "en" , "fr" , "de" , "es" , "it" , "ja" , "ko" , "nl" , "pl" , "pt" , "ru" , "sv" , "uk" , "zh" ) ; return ENABLED_LANGUAGES . contains ( title . getWikiSite ( ) . languageCode ( ) ) ; }
The code is hardcoded with "1" because it is initializing the variable "testMessageNo" with the value 1 . It should be initialized with 0 if it is intended to start from 0 .   private InputStream simulateSendAndReceive ( ByteArrayOutputStream baos ) throws IOException { byte [ ] bytes = baos . toByteArray ( ) ; baos . reset ( ) ; int testMessageNo = 0 ; // Initializing with 0 instead of 1 PacketFormat format = new PacketFormat ( testMessageNo , bytes ) ; format . serialize ( baos ) ; return new ByteArrayInputStream ( baos . toByteArray ( ) ) ; }
public ShovingMatch ( UUID ownerId , CardSetInfo setInfo ) { super ( ownerId , setInfo , new CardType [ ] { CardType . INSTANT } , " { 2 } { U } " ) ; Ability ability = new SimpleActivatedAbility ( new TapTargetEffect ( ) , new TapSourceCost ( ) ) ; ability . addTarget ( new TargetCreaturePermanent ( ) ) ; this . getSpellAbility ( ) . addEffect ( new GainAbilityAllEffect ( ability , Duration . EndOfTurn , new FilterCreaturePermanent ( ) ) . setText ( "Until end of turn , all creatures gain \" { T } : Tap target creature . \"" ) ) ; }
public void testCompareRanges ( ) { assertEquals ( 0 , compareRanges ( "abcdefghij" . getBytes ( ) , 0 , 10 , "abcdefghij" . getBytes ( ) , 0 , 10 ) ) ; assertEquals ( 0 , compareRanges ( "123abcdefghij" . getBytes ( ) , 3 , 10 , "abcdefghij" . getBytes ( ) , 0 , 10 ) ) ; }
public void setRequiredParametersForCreation ( DateTime paymentDate , Timeframe timeframe , Integer requestedAmount , Boolean build ) { this . paymentDate = paymentDate ; this . timeframe = timeframe ; this . requestedAmount = requestedAmount ; this . build = build ; }
public TestElasticsearchIntegrationSmokeTest ( EmbeddedElasticsearchNode embeddedElasticsearchNode ) { super ( ( ) - > createElasticsearchQueryRunner ( embeddedElasticsearchNode , TpchTable . getTables ( ) ) ) ; this . embeddedElasticsearchNode = embeddedElasticsearchNode ; }
public CommandResult exec ( ContextAwareCommandInvocation commandInvocation ) { if ( ! commandInvocation . getCommandLine ( ) . getArgs ( ) . isEmpty ( ) ) { commandInvocation . println ( commandInvocation . getHelpInfo ( ) ) ; return CommandResult . SUCCESS ; } else { return CommandResult . FAILURE ; } }
for ( OsType type : OsType . values ( ) ) { osTypeValues . add ( type . name ( ) . toLowerCase ( ) ) ; }
private Menu fillMenu ( Menu m ) { for ( ContributionItem item : getActions ( ) ) { if ( item instanceof ActionContributionItem ) { ActionContributionItem actionItem = ( ActionContributionItem ) item ; String actionText = actionItem . getAction ( ) . getText ( ) ; if ( actionText == null || actionText . isEmpty ( ) ) { item = new Separator ( ) ; } } item . fill ( m , - 1 ) ; } return m ; }
public void testThreadNameWithoutNumberNoDemon ( ) { Assert . assertEquals ( THREAD_NAME , ThreadUtils . createThreadFactory ( THREAD_NAME , false ) . newThread ( EMPTY_RUNNABLE ) . getName ( ) ) ; }
public < T > ModelAdaptor < ? super T > getModelAdaptor ( Class < T > attributeType ) { return ( ModelAdaptor < ? super T > ) adaptors . get ( attributeType ) ; }
public com . google . gwtorm . client . Key < ? > [ ] members ( ) { return new com . google . gwtorm . client . Key < ? > [ ] { patchKey } ; }
public void init ( final RuleModellerPage page ) { this . page = page ; if ( page . plugin ( ) instanceof BRLActionColumnPlugin ) { // do something here } }  Explanation : The `if` block checks if the `page` object's plugin is an instance of `BRLActionColumnPlugin` . If it is , then some action needs to be taken inside the block . If no action is required , the `if` block can be removed .
Here's the   < START > @Override public TaskResult syncShards ( ) { return periodicShardSyncManager . start ( ) ; } < END >  I moved `@Override` to its own line for better readability .
static < T > List < T > without ( List < T > list , Collection < Integer > indexes ) { Set < Integer > indexesSet = ImmutableSet . copyOf ( indexes ) ; return IntStream . range ( 0 , list . size ( ) ) . filter ( index - > ! indexesSet . contains ( index ) ) . mapToObj ( list : : get ) . collect ( Collectors . toList ( ) ) ; }
private Throwable getRealException ( Throwable re ) { if ( re . getCause ( ) == null ) return re ; Throwable cause = re . getCause ( ) ; if ( cause instanceof RuntimeException || cause instanceof Error ) return getRealException ( cause ) ; else return re ; }
The Buggy Code checks if the size of a control has changed and if it is a composite , it calls the layout method on it . Then it sets the dirtySize to null .   public void layoutIfNecessary ( ) { if ( dirtySize != null && control instanceof Composite && control . getSize ( ) . equals ( dirtySize ) ) { ( ( Composite ) control ) . layout ( ) ; flushChildren = false ; } dirtySize = null ; }
public Attribute setLabelAttribute ( Boolean isLabelAttr ) { set ( IS_LABEL_ATTRIBUTE , isLabelAttr ) ; return this ; } // In the calling code : if ( isLabelAttr != null && isLabelAttr ) { attribute . setNillable ( false ) ; } attribute . setLabelAttribute ( isLabelAttr ) ;
public Object postProcessBeforeInitialization ( Object bean , String beanName ) throws BeansException { if ( bean instanceof IntegrationEvaluationContextAware ) { StandardEvaluationContext evaluationContext = IntegrationContextUtils . getEvaluationContext ( beanFactory ) ; evaluationContext . setTypeConverter ( new StandardTypeConverter ( beanFactory . getBean ( ConversionService . class ) ) ) ; ( ( IntegrationEvaluationContextAware ) bean ) . setIntegrationEvaluationContext ( evaluationContext ) ; } return bean ; }
public < R , X extends Exception > R withHandle ( HandleCallback < R , X > callback ) throws X { Handle h = JdbiUtil . getHandle ( jdbi ) ; R result = callback . withHandle ( h ) ; return result ; }
public LanguageServerWrapper ( @NonNull LanguageServerDefinition serverDefinition , @Nullable IPath initialPath ) { this . initialPath = initialPath ; this . allWatchedProjects = new HashSet < > ( ) ; this . serverDefinition = serverDefinition ; this . connectedDocuments = new HashMap < > ( ) ; }  In this refactored code , the `project` parameter has been removed as it is not necessary . If we know the project , we don't need to specify an extra initial path . Instead , we can explicitly use the initial path parameter .
public String getReplicaPath ( ) { return GetRequest . Cloud_Replica_Keyword + File . separator + getMountPath ( ) + File . separator + partitionId . toPathString ( ) ; }
public void addChildren ( AlluxioURI path , Collection < UfsStatus > children ) { UfsStatus status = mStatuses . get ( path ) ; if ( status == null ) { // If the parent status is not in the map , we cannot keep track of the parent - child relationship // However , we can still add the child statuses to the cache children . forEach ( child - > { AlluxioURI childPath = path . joinUnsafe ( child . getName ( ) ) ; addStatus ( childPath , child ) ; } ) ; return ; } // If the parent status is in the map , we can add the children to the parent's set of children mChildren . computeIfAbsent ( path , ufsStatus - > new ConcurrentHashSet < > ( ) ) . addAll ( children ) ; children . forEach ( child - > { AlluxioURI childPath = path . joinUnsafe ( child . getName ( ) ) ; addStatus ( childPath , child ) ; } ) ; }
private void actionCompleted ( SegmentHolder segmentHolder ) { switch ( segmentHolder . getType ( ) ) { case LOAD : segmentsToLoad . remove ( segmentHolder . getSegment ( ) ) ; queuedSize . addAndGet ( - segmentHolder . getSegmentSize ( ) ) ; break ; case DROP : segmentsToDrop . remove ( segmentHolder . getSegment ( ) ) ; break ; default : throw new UnsupportedOperationException ( ) ; } callBackExecutor . execute ( ( ) - > executeCallbacks ( segmentHolder ) ) ; }
public ScheduledReporter build ( MetricRegistry registry ) { GraphiteReporter . Builder builder = builder ( registry ) ; if ( "udp" . equalsIgnoreCase ( transport ) ) { return builder . build ( new GraphiteUDP ( host , port ) ) ; } else { return builder . build ( new Graphite ( host , port ) ) ; } }
public void onReceiveHangUpFromUser ( QBRTCSession session , Integer userId ) { setStatusForOpponent ( userId , getString ( R . string . text_status_hang_up ) ) ; Log . d ( TAG , "onReceiveHangUpFromUser userId = " + userId ) ; if ( ! isPeerToPeerCall ) { if ( userId == userIDFullScreen ) { Log . d ( TAG , "setAnotherUserToFullScreen call userId = " + userId ) ; setAnotherUserToFullScreen ( ) ; } if ( videoTrackMap != null && videoTrackMap . containsKey ( userId ) ) { Log . d ( TAG , "onReceiveHangUpFromUser videoTrackMap . remove ( userId ) = " + userId ) ; videoTrackMap . remove ( userId ) ; } } }
private boolean isThis ( ExpressionTree expression ) { ExpressionTree expressionNoParenthesis = ExpressionUtils . skipParentheses ( expression ) ; if ( expressionNoParenthesis . is ( Tree . Kind . IDENTIFIER ) ) { String targetName = ( ( IdentifierTree ) expressionNoParenthesis ) . name ( ) ; return "this" . equals ( targetName ) ; } return false ; }
protected Map < String , Queue > getQueueNamesToQueues ( ) { return this . queues . stream ( ) . collect ( Collectors . toMap ( Queue : : getActualName , q - > q ) ) ; }
public String toString ( ) { Bundle myBundle = getBundle ( ) ; if ( myBundle == null ) { return "" ; } String name = myBundle . getSymbolicName ( ) ; return name == null ? String . valueOf ( myBundle . getBundleId ( ) ) : name ; }
public void workbenchSelectionChanged ( ISelection selection ) { Object o = SelectionUtils . getSelectedObject ( selection ) ; if ( o instanceof TextSelection ) { String text = ( ( TextSelection ) o ) . getText ( ) ; m_sourceGraphControl . setSourceText ( text ) ; } else { m_sourceGraphControl . setSourceText ( "" ) ; } }
private JBlock onDestroyViewAfterSuperBlock ; public JBlock getOnDestroyViewAfterSuperBlock ( ) { if ( onDestroyViewAfterSuperBlock == null ) { onDestroyViewAfterSuperBlock = holder . block ( ) ; setContentViewRelatedMethods ( ) ; } return onDestroyViewAfterSuperBlock ; }
public boolean hasChildren ( Object element ) { return ! ( ( MyModel ) element ) . children . isEmpty ( ) ; }
public GroupedPropertyList getPropertyList ( ) { if ( propertyList == null ) { boolean parallel = true ; long t1 = System . currentTimeMillis ( ) ; propertyList = new GroupedPropertyList ( individual , vreq , editing , parallel ) ; log . debug ( " getPropertyList parallel : " + parallel + " time : " + ( System . currentTimeMillis ( ) - t1 ) + " ms" ) ; } return propertyList ; }
