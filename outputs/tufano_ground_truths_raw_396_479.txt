public int getMaxCapacity ( ) { return maxCapacity ; }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
private static DataSource createC3P0DataSource ( String name , Map < Object , Object > properties ) { ComboPooledDataSource ds = new ComboPooledDataSource ( false ) ; ds . setDataSourceName ( name ) ; ds . setIdentityToken ( name ) ; new BeanMap ( ds ) . putAll ( properties ) ; C3P0Registry . reregister ( ds ) ; checkDataSource ( ds , name ) ; return ds ; }
protected Control createPageControls ( Composite parent ) { setTitle ( Messages . RemoveReviewerDialog_Remove_Reviewer ) ; Label label = new Label ( parent , SWT . NONE ) ; label . setText ( NLS . bind ( Messages . RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove , userToRemove . getDisplayName ( ) ) ) ; return parent ; }
public List < PermissionSubject > getPermissionCheckSubjects ( ) { List < PermissionSubject > list = new ArrayList < PermissionSubject > ( ) ; Guid storagePoolId = getVdsGroup ( ) == null || getVdsGroup ( ) . getstorage_pool_id ( ) == null ? null : getVdsGroup ( ) . getstorage_pool_id ( ) . getValue ( ) ; list . add ( new PermissionSubject ( storagePoolId , VdcObjectType . StoragePool , getActionType ( ) . getActionGroup ( ) ) ) ; list = QuotaHelper . addQuotaPermissionSubject ( list , getStoragePool ( ) , getQuotaId ( ) ) ; return list ; }
public void onInit ( String clientName , Map < String , Object > credentials ) throws IOException { packer . packStructHeader ( 2 , INIT . signature ( ) ) ; packer . pack ( clientName ) ; packer . pack ( ValueUtils . asMapValue ( credentials ) ) ; onMessageComplete . onMessageComplete ( ) ; }
SecurityGroupExtensionProvider ( NeutronSecurityGroupExtension neutronSecurityGroupExtension , NovaSecurityGroupExtension novaSecurityGroupExtension ) { this . neutronSecurityGroupExtension = neutronSecurityGroupExtension ; this . novaSecurityGroupExtension = novaSecurityGroupExtension ; }
private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; } } return comparedExpression ; }
private void scheduleRefresh ( Duration delay ) { // already stopped ? avoids rejection exception if ( executor . isShutdown ( ) ) { return ; } executor . schedule ( this : : refresh , delay . toMillis ( ) , TimeUnit . MILLISECONDS ) ; }
public static void main ( String [ ] args ) { LocalQueryRunner queryRunner = createLocalQueryRunner ( ImmutableMap . of ( "reorder_joins" , "false" ) ) ; new SqlConsecutiveJoinBenchmark ( queryRunner ) . runBenchmark ( new SimpleLineBenchmarkResultWriter ( System . out ) ) ; queryRunner . close ( ) ; }
protected void beforeStartingVertx ( VertxOptions options ) { }
public Builder body ( String json ) { checkNotNull ( json , "body required" ) ; this . body = new JsonBall ( json ) . toString ( ) ; return self ( ) ; }
private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
private static CDIProvider getCDIProvider ( ) { if ( configuredProvider != null ) { return configuredProvider ; } else { // Discover providers and cache if ( discoveredProviders == null ) { synchronized ( lock ) { if ( discoveredProviders == null ) { findAllProviders ( ) ; } } } configuredProvider = discoveredProviders . stream ( ) . filter ( c - > c . getCDI ( ) != null ) . findAny ( ) . orElseThrow ( ( ) - > new IllegalStateException ( "Unable to access CDI" ) ) ; return configuredProvider ; } }
public void testIsDrawable_Stage ( ) { testIsDrawable ( CaseManagementDiagram . class , AdHocSubprocess . class , true ) ; }
public static boolean customImageExists ( String storage , String key ) { final AzureBlobClient azureBlob = ContextBuilder . newBuilder ( "azureblob" ) . credentials ( storage , key ) . buildApi ( AzureBlobClient . class ) ; try { return azureBlob . containerExists ( "system" ) ; } finally { Closeables2 . closeQuietly ( azureBlob ) ; } }
public void enter ( ) { super . enter ( ) ; mUseEap = ( IkeSessionOptions . IKE_AUTH_METHOD_EAP == mIkeSessionOptions . getLocalAuthConfig ( ) . mAuthMethod ) ; }
public static Predicate < Expression > isInferenceCandidate ( ) { return expression - > { expression = normalizeInPredicateToEquality ( expression ) ; if ( expression instanceof ComparisonExpression && isDeterministic ( expression ) && ! mayReturnNullOnNonNullInput ( expression ) && ! isDynamicFilter ( expression ) ) { ComparisonExpression comparison = ( ComparisonExpression ) expression ; if ( comparison . getType ( ) == ComparisonExpressionType . EQUAL ) { // We should only consider equalities that have distinct left and right components return ! comparison . getLeft ( ) . equals ( comparison . getRight ( ) ) ; } } return false ; } ; }
public void startMasters ( ) throws Exception { mMaster = LocalAlluxioMaster . create ( mWorkDirectory , true ) ; mMaster . start ( ) ; }
public Proxy getProxy ( ) { if ( mProxyHost == null ) { return null ; } return new Proxy ( mProxyType , new InetSocketAddress ( mProxyHost , mProxyPort ) ) ; }
public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , "method" ) ; return this ; }
public Set < VmDeviceGeneralType > getDeviceTypesWithProperties ( Version version ) { if ( ! FeatureSupported . deviceCustomProperties ( version ) ) { return Collections . emptySet ( ) ; } EnumMap < VmDeviceGeneralType , Map < String , Pattern > > map = deviceProperties . get ( version ) ; if ( map . isEmpty ( ) ) { // no device type has any properties return Collections . emptySet ( ) ; } else { // prevent client to modify return Collections . unmodifiableSet ( map . keySet ( ) ) ; } }
public SWTBotSiriusDiagramEditor ( final IEditorReference reference , final SWTWorkbenchBot bot ) throws WidgetNotFoundException { super ( reference , bot ) ; GraphicalViewer graphicalViewer = UIThreadRunnable . syncExec ( new Result < GraphicalViewer > ( ) { @Override public GraphicalViewer run ( ) { final IEditorPart editor = partReference . getEditor ( true ) ; return ( GraphicalViewer ) editor . getAdapter ( GraphicalViewer . class ) ; } } ) ; ReflectionHelper . setFieldValueWithoutException ( this , "viewer" , new SWTBotSiriusGefViewer ( graphicalViewer ) , this . getClass ( ) . getSuperclass ( ) ) ; }
public CreateAllSnapshotsFromVmParameters ( ) { needsLocking = true ; saveMemory = true ; diskIdsToIgnoreInChecks = Collections . emptySet ( ) ; }
public SchedulerTask < ? > createTaskInstance ( String taskType ) throws IllegalArgumentException { try { return lookupTask ( taskType ) ; } catch ( ComponentLookupException e ) { throw new IllegalArgumentException ( "Could not create task of type" + taskType , e ) ; } }
public PapyrusStereotypedElementItemProviderDecorator ( ComposeableAdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
default Optional < SourceMap > sourceMap ( ) { return Optional . empty ( ) ; }
public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( "ALTER SESSION SET `exec . errors . verbose` = true" ) ; }
private static String parseAnnotationFieldTypeName ( final Supplier < Class < ? > > theTypeSupplier , final String errorMessage ) { try { theTypeSupplier . get ( ) ; } catch ( MirroredTypeException mte ) { return mte . getTypeMirror ( ) . toString ( ) ; } // Failed to parse the field type name throw new RuntimeException ( errorMessage ) ; }
default StreamPriority getStreamPriority ( ) { return null ; }
protected void configure ( ) { bind ( EventDao . class ) . to ( EventDaoInMemory . class ) . asEagerSingleton ( ) ; }
public static void onAdvancementEvent ( AdvancementEvent event ) { if ( event . getAdvancement ( ) . getDisplay ( ) != null && event . getAdvancement ( ) . getDisplay ( ) . shouldAnnounceToChat ( ) ) { logger . info ( " { } got the { } advancement" , event . getEntityPlayer ( ) . getDisplayNameString ( ) , event . getAdvancement ( ) . getDisplayText ( ) . getUnformattedText ( ) ) ; } }
public ExampleEndpointsProvider ( ) { // Put custom code here to get endpoints // In our case they will be hardcoded JHttpEndpoint httpEndpoint = new JHttpEndpoint ( URI . create ( "https :/ / jagger . griddynamics . net : 443" ) ) ; endpoints . add ( httpEndpoint ) ; }
public SlackUserProperty ( ) { }
public void onStreamCreate ( IMediaStream stream ) { if ( stream . isTranscodeResult ( ) ) { return ; } PacketListener listener = new PacketListener ( ) ; WMSProperties props = stream . getProperties ( ) ; synchronized ( props ) { props . setProperty ( STREAM_ACTION_LISTENER_PROPERTY , listener ) ; } stream . addLivePacketListener ( listener ) ; }
public long getEstimatedSizeInBytes ( ) { long result = INSTANCE_SIZE + sizeOf ( levelOffsets ) + tree . sizeOf ( ) ; for ( T item : items ) { result += item . getEstimatedSizeInBytes ( ) ; } return result ; }
public boolean respondsTo ( RunEvent event ) { Run r = event . getEventObject ( ) ; if ( event . getEventType ( ) == MisoEventType . RUN_FAILED && r . getHealth ( ) == HealthType . Failed ) { log . info ( "Run " + r . getAlias ( ) + " : " + event . getEventMessage ( ) ) ; return true ; } return false ; }
public boolean isEnabled ( ) { return super . isEnabled ( ) || isDirty ( ) ; }
private void updateSslVerifyUser ( boolean value ) { StoredConfig userConfig = null ; try { userConfig = GlobalConfigCache . getInstance ( ) . getUserConfig ( ) ; updateSslVerify ( userConfig , value ) ; } catch ( IOException | ConfigInvalidException e ) { // Log it , but otherwise ignore here . LOG . error ( MessageFormat . format ( JGitText . get ( ) . userConfigFileInvalid , userConfig , e ) ) ; } }
private static boolean isUserBrickAdapter ( BaseAdapter baseAdapter ) { return baseAdapter instanceof UserBrickAdapter ; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor ( CategoryListItem categoryListItem ) { FormulaEditorFragment formulaEditorFragment = null ; if ( getFragmentManager ( ) != null ) { formulaEditorFragment = ( ( FormulaEditorFragment ) getFragmentManager ( ) . findFragmentByTag ( FormulaEditorFragment . FORMULA_EDITOR_FRAGMENT_TAG ) ) ; if ( formulaEditorFragment != null ) { formulaEditorFragment . addResourceToActiveFormula ( categoryListItem . nameResId ) ; } } return formulaEditorFragment ; }
public final ReviewCategoryStrategy reviewCategoryStrategy ( ) { String s = reviewCategeoryStrategyRaw ( ) ; return s != null ? ReviewCategoryStrategy . valueOf ( s ) : ReviewCategoryStrategy . NONE ; }
public Iterable < ConnectorFactory > getConnectorFactories ( ) { return ImmutableList . of ( new HiveConnectorFactory ( name , getClassLoader ( ) , metastore ) ) ; }
public void testDBConnectionTimeMetrics ( ) { this . metrics . setDBConnectionTime ( 14 ) ; assertEquals ( 14 , this . testUtil . getGaugeValue ( "dbConnectionTime" ) ) ; }
protected void createCacheManagers ( ) throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig ( getCacheMode ( ) , true ) ; builder . clustering ( ) . stateTransfer ( ) . sync ( ) . replTimeout ( 45 , TimeUnit . SECONDS ) ; createClusteredCaches ( 4 , cacheName ( ) , builder ) ; }
private String getByAccountName ( CodeReviewCommit codeReviewCommit ) { Account account = getAccount ( codeReviewCommit ) ; if ( account != null && account . getFullName ( ) != null ) { return " by " + account . getFullName ( ) ; } return "" ; }
public void findByUndefinedSchema ( ) throws Exception { getClient ( ) . perform ( get ( " / api / core / metadatafields / search / bySchema" ) . param ( "schema" , "undefined" ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( contentType ) ) . andExpect ( jsonPath ( "$ . page . size" , is ( 20 ) ) ) . andExpect ( jsonPath ( "$ . page . totalElements" , is ( 0 ) ) ) ; }
private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , "values is null" ) ; for ( long value : values ) { digest . add ( value ) ; } }
protected Object encodeCommand ( Command command ) { initDevicePassword ( command , LaipacProtocolDecoder . DEFAULT_DEVICE_PASSWORD ) ; switch ( command . getType ( ) ) { case Command . TYPE_CUSTOM : return formatCommand ( command , " { % s } " , Command . KEY_DATA ) ; case Command . TYPE_POSITION_SINGLE : return formatCommand ( command , "AVREQ , { % s } , 1" , Command . KEY_DEVICE_PASSWORD ) ; case Command . TYPE_REBOOT_DEVICE : return formatCommand ( command , "AVRESET , { % s } , { % s } " , Command . KEY_UNIQUE_ID , Command . KEY_DEVICE_PASSWORD ) ; default : return null ; } }
public void close ( ) throws IOException { selectObjectContentResult . close ( ) ; }
@Override public boolean isDisposed ( ) { return get ( ) ; }
public void close ( ) throws IOException { super . close ( ) ; if ( s3Object != null ) { s3Object . close ( ) ; } }
public void loadChunk ( int x , int z ) { w . loadChunk ( x , z ) ; }
GeneratorUtil ( TypeOracle typeOracle , Logger logger , GeneratorContext generatorContext ) { this . typeOracle = typeOracle ; this . logger = logger ; this . generatorContext = generatorContext ; }
protected boolean failPassthroughVnicHotPlug ( ) { if ( VmInterfaceType . pciPassthrough == VmInterfaceType . forValue ( getParameters ( ) . getNic ( ) . getType ( ) ) ) { addCanDoActionMessage ( EngineMessage . HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED ) ; return true ; } return false ; }
public List < Map . Entry < Integer , Long > > getStageReachedCounts ( Context context ) throws SQLException { return workspaceItemDAO . getStageReachedCounts ( context ) ; }
protected Evaluator ( final ObjectMapper mapper , final AsyncTaskExecutor asyncTaskExecutor , final long timeoutLength ) { this . mapper = mapper ; this . asyncTaskExecutor = asyncTaskExecutor ; this . timeoutLength = timeoutLength ; }
public MetaMasterSync ( Address masterAddress , MetaMasterMasterClient masterClient ) { mMasterAddress = masterAddress ; mMasterClient = masterClient ; mHeartbeatTimeoutMs = ( int ) Configuration . getMs ( PropertyKey . MASTER_HEARTBEAT_TIMEOUT_MS ) ; mLastSuccessfulHeartbeatMs = System . currentTimeMillis ( ) - mHeartbeatTimeoutMs ; }
public void sendLayerDeleted ( String layerName ) { listeners . forEach ( listener - > { listener . layerDeleted ( layerName ) ; } ) ; }
public List < SqlIdentifier > getProjectionFields ( MetadataType metadataLevel , OptionManager options ) { return Arrays . asList ( new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_FQN_COLUMN_LABEL ) , SqlParserPos . ZERO ) , new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL ) , SqlParserPos . ZERO ) ) ; }
protected TypedTransaction ( Transaction tx , Encoder encoder , TypeLayer tl ) { super ( tx , encoder , tl ) ; this . tx = tx ; this . encoder = encoder ; this . tl = tl ; }
public int hashCode ( ) { int result = name . hashCode ( ) ; result = 31 * result + permissions . hashCode ( ) ; result = 31 * result + mask ; return result ; }
public EEFTabbedPropertySheetPage ( Object contributor , String contributorId ) { if ( contributor instanceof IEEFTabbedPropertySheetPageContributor ) { this . contributor = ( IEEFTabbedPropertySheetPageContributor ) contributor ; } else { this . contributor = new ContributorWrapper ( contributor , contributorId ) ; } this . registry = EEFTabbedPropertyRegistry . getDefault ( this . contributor ) ; }
public List < String > getSuggestions ( String input ) { return getWorlds ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; }
protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; } setSucceeded ( true ) ; } }
public void testNotEliminateSorts ( ) { @Language ( "SQL" ) String sql = "SELECT quantity , row_number ( ) OVER ( ORDER BY quantity ) FROM lineitem ORDER BY tax" ; PlanMatchPattern pattern = anyTree ( sort ( anyTree ( window ( windowMatcherBuilder - > windowMatcherBuilder . specification ( windowSpec ) . addFunction ( functionCall ( "row_number" , Optional . empty ( ) , ImmutableList . of ( ) ) ) , anyTree ( LINEITEM_TABLESCAN_Q ) ) ) ) ) ; assertUnitPlan ( sql , pattern ) ; }
public Program getAssociatedProgram ( Artifact artifact ) { String extension = getAssociatedExtension ( artifact ) ; Program program = ProgramFinder . findProgram ( extension ) ; if ( program == null ) { throw new OseeArgumentException ( "No program associated with the extension [ % s ] found on your local machine . " , extension ) ; } return program ; }
public final Iterable < N > toDepthFirstIterable ( ) { return ( ) - > this . depthFirstIterator ( ) ; }
void put ( final K key , final V value ) { clusterRegistry . put ( scope , key , value ) ; localCacheInsert ( key , value ) ; }
public static String getWarningMessages ( String filename ) { String warningMessage = "" ; if ( getErrorMessage ( filename ) . length ( ) == 0 && filename . trim ( ) . length ( ) > 0 ) { if ( ! filename . matches ( " [ A - Za - z ] [ A - Za - z0 - 9_ ] * " ) ) { // check to make sure if filename has no spaces String errorMessage = MESSAGES . whitespaceProjectNameError ( ) ; filename = filename . trim ( ) . replaceAll ( " ( ) + " , " " ) . replace ( " " , "_" ) ; warningMessage = errorMessage + " . \n '" + filename + "' will be used if continued . " ; } } return warningMessage ; }
public @NonNull TraceSessionComponent [ ] getSessions ( ) { List < ITraceControlComponent > compenents = getChildren ( TraceSessionGroup . class ) ; if ( compenents . size ( ) > 0 ) { TraceSessionGroup group = ( TraceSessionGroup ) compenents . get ( 0 ) ; List < ITraceControlComponent > sessions = group . getChildren ( TraceSessionComponent . class ) ; return sessions . toArray ( new @NonNull TraceSessionComponent [ sessions . size ( ) ] ) ; } return new TraceSessionComponent [ 0 ] ; }
private static void cacheColors ( Display display ) { BG_COLOR_RGB = JFaceColors . getInformationViewerBackgroundColor ( display ) . getRGB ( ) ; FG_COLOR_RGB = JFaceColors . getInformationViewerForegroundColor ( display ) . getRGB ( ) ; Color hyperlinkText = JFaceColors . getHyperlinkText ( display ) ; if ( hyperlinkText != null ) { LINK_COLOR_RGB = hyperlinkText . getRGB ( ) ; } Color activeHyperlinkText = JFaceColors . getActiveHyperlinkText ( display ) ; if ( activeHyperlinkText != null ) { ACTIVE_LINK_COLOR_RGB = activeHyperlinkText . getRGB ( ) ; } }
private IRadioButton < T > findFirstButtonInFieldTree ( IFormField f ) { if ( f instanceof IRadioButton ) { return ( IRadioButton ) f ; } else if ( f instanceof ICompositeField ) { for ( IFormField sub : ( ( ICompositeField ) f ) . getFields ( ) ) { IRadioButton < T > b = findFirstButtonInFieldTree ( sub ) ; if ( b != null ) { return b ; } } } return null ; }
public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = "" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( "Unexpected output log" , expected , systemOut . getLog ( ) ) ; assertEquals ( "Unexpected system error log" , "" , systemErr . getLog ( ) ) ; } ) ; Main . main ( " - c" , getPath ( "InputMainConfig - empty . xml" ) , " -- generate - xpath - suppression" , getPath ( "InputMainComplexityOverflow . java" ) ) ; }
public String getPackageName ( ) { if ( clazz . getPackage ( ) != null ) { return clazz . getPackage ( ) . getName ( ) ; } return "" ; }
public void testIsStringLiteral ( ) { Set < ASTLiteral > literals = getNodes ( ASTLiteral . class , TEST1 ) ; assertTrue ( ( literals . iterator ( ) . next ( ) ) . isStringLiteral ( ) ) ; }
public Map < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
protected void configure ( ServerHttpSecurity http ) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager ( ) ; X509PrincipalExtractor principalExtractor = getPrincipalExtractor ( ) ; AuthenticationWebFilter filter = new AuthenticationWebFilter ( authenticationManager ) ; filter . setServerAuthenticationConverter ( new ServerX509AuthenticationConverter ( principalExtractor ) ) ; http . addFilterAt ( filter , SecurityWebFiltersOrder . AUTHENTICATION ) ; }
public void action ( AuthenticationFlowContext context ) { validateOTP ( context ) ; }
private void handleResourceChange ( GitResourceVariantTreeSubscriber subscriber , Repository which , Collection < IFile > resources ) { for ( GitSynchronizeData gsd : gsds ) { if ( which . equals ( gsd . getRepository ( ) ) && resources != null && ! resources . isEmpty ( ) ) refreshResources ( subscriber , resources ) ; } }
public static Set < Path > getIncludedFieldsOfRootEntityForSort ( CompositeMetadata root , Sort rootSort ) { Set < Path > ret = new HashSet < > ( ) ; if ( rootSort != null ) { SortFieldInfo [ ] sfi = SortFieldInfo . buildSortFields ( rootSort , root . getFieldTreeRoot ( ) ) ; for ( SortFieldInfo fi : sfi ) ret . add ( fi . getName ( ) ) ; } return ret ; }
public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , isRejoinTest , env ) ; }
public void execute ( String userName ) { FollowModeManager currentFollowModeManager = followModeManager ; User userToFollow = findUser ( userName ) ; if ( currentFollowModeManager == null ) { return ; } currentFollowModeManager . follow ( userToFollow ) ; actionPerformed ( ) ; }
@Override public Appendable write ( Appendable appendable , Context context ) throws IOException { Iterator < TypeName > iterator = typeNames . iterator ( ) ; if ( iterator . hasNext ( ) ) { iterator . next ( ) . write ( appendable , context ) ; while ( iterator . hasNext ( ) ) { appendable . append ( " & " ) ; iterator . next ( ) . write ( appendable , context ) ; } } return appendable ; }
