private static Set < String > getRootQualifiers ( ResourceTypes resourceTypes ) { return resourceTypes . getRoots ( ) . stream ( ) . map ( ResourceType : : getQualifier ) . collect ( Collectors . toCollection ( TreeSet : : new ) ) ; }
public RuntimeFilterManager ( QueryWorkUnit workUnit , DrillbitContext drillbitContext ) { this . rootWrapper = workUnit . getRootWrapper ( ) ; this . drillbitContext = drillbitContext ; }
private void activateMarkers ( ) { if ( ! fGerritClient . getRepository ( ) . getServerInfo ( ) . isAnonymous ( ) ) { UIUtils . showDialogTip ( MARKERS_KEY , headerSection . getShell ( ) , Messages . EGerriTip , Messages . ChangeDetailEditor_EGerriTipValue ) ; } }
public void testCreate ( ) throws StripeException { final Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( "currency" , "usd" ) ; final Order order = Order . create ( params ) ; assertNotNull ( order ) ; verifyRequest ( APIResource . RequestMethod . POST , " / v1 / orders" , params ) ; }
private FirewallRule findById ( List < FirewallRule > collection , String id ) { for ( FirewallRule rule : collection ) { if ( rule . id ( ) . equals ( id ) ) { return rule ; } } return null ; }
public void addDownload ( String download ) { downloads . add ( download ) ; }
public void copyDetailsFromOtherCuObjectCodeActivationGlobal ( CuObjectCodeActivationGlobal oldGlobal ) { for ( CuObjectCodeGlobalDetail oldDetail : oldGlobal . getObjectCodeGlobalDetails ( ) ) { CuObjectCodeGlobalDetail newDetail = ( CuObjectCodeGlobalDetail ) ObjectUtils . deepCopy ( oldDetail ) ; newDetail . setObjectId ( null ) ; newDetail . setDocumentNumber ( getDocumentNumber ( ) ) ; newDetail . setVersionNumber ( new Long ( 1 ) ) ; getObjectCodeGlobalDetails ( ) . add ( newDetail ) ; } }
private void loadVncData ( HasConsoleModel model , KeyMaker keyMaker ) { if ( ! ( model . getDefaultConsoleModel ( ) instanceof VncConsoleModel ) ) { return ; } model . setSelectedProtocol ( ConsoleProtocol . VNC ) ; try { asVncConsoleModel ( model ) . setVncImplementation ( VncConsoleModel . ClientConsoleMode . valueOf ( clientStorage . getLocalItem ( keyMaker . make ( VNC_CLIENT_MODE ) ) ) ) ; } catch ( Exception e ) { } }
private RuleApplication applyRule ( ) { SymbolAllocator symbolAllocator = new SymbolAllocator ( symbols ) ; Memo memo = new Memo ( idAllocator , plan ) ; Lookup lookup = Lookup . from ( memo : : resolve ) ; Optional < PlanNode > result = inTransaction ( session - > rule . apply ( memo . getNode ( memo . getRootGroup ( ) ) , lookup , idAllocator , symbolAllocator , session ) ) ; return new RuleApplication ( lookup , symbolAllocator . getTypes ( ) , result ) ; }
public void testPushDownArray ( ) throws Exception { testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] = 1" , 3 , 2 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] = 100" , 0 , 1 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] < > 1" , 8 , 6 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 2 ] > 20" , 5 , 3 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 0 ] between 10 and 20" , 5 , 4 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 4 ] = 15" , 1 , 3 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 2 ] is not null" , 11 , 6 ) ; testParquetFilterPushDown ( "t . `user` . hobby_ids [ 3 ] is null" , 11 , 7 ) ; }
default Direction getBubbleElevatorDirection ( ) { return this . getBlockState ( ) . getBlock ( ) . getBubbleElevatorDirection ( this . getBlockState ( ) ) ; }
public void testSystemPropertiesOverrideConfigurationValues ( ) { final String keyName = CoreConfig . MAX_CASSANDRA_CONNECTIONS . toString ( ) ; Configuration config = Configuration . getInstance ( ) ; try { Assert . assertEquals ( "75" , config . getStringProperty ( CoreConfig . MAX_CASSANDRA_CONNECTIONS ) ) ; System . setProperty ( keyName , "something else" ) ; Assert . assertEquals ( "something else" , config . getStringProperty ( CoreConfig . MAX_CASSANDRA_CONNECTIONS ) ) ; } finally { System . clearProperty ( keyName ) ; config . clearProperty ( keyName ) ; } }
public void onSubscribe ( Subscription inner ) { this . inner = inner ; o . onSubscribe ( this ) ; inner . request ( Long . MAX_VALUE ) ; }
public WebElement forElementPresent ( By by ) { changeImplicitWait ( 250 , TimeUnit . MILLISECONDS ) ; try { return wait . until ( ExpectedConditions . presenceOfElementLocated ( by ) ) ; } catch ( TimeoutException e ) { PageObjectLogging . log ( ELEMENT_PRESENT_MESSAGE , String . format ( ELEMENT_PRESENT_ERROR_FORMAT , by . toString ( ) ) , false ) ; throw e ; } finally { restoreDeaultImplicitWait ( ) ; } }
public boolean accept ( Issue issue ) { return ! issueShouldNotBeReported ( issue , excludedLinesByRule ( ) ) ; }
private HashMap < String , ArrayList < Order > > getBuyOrders ( ) { return buyOrders ; }
private static Color getSystemForegroundColor ( Display display ) { ColorRegistry colorRegistry = JFaceResources . getColorRegistry ( ) ; Color foreground = colorRegistry . get ( JFacePreferences . INFORMATION_FOREGROUND_COLOR ) ; if ( foreground == null ) { return JFaceColors . getInformationViewerForegroundColor ( display ) ; } return foreground ; }
public void visitNode ( Tree tree ) { if ( ! hasSemantic ( ) ) { return ; } SwitchStatementTree switchStatementTree = ( SwitchStatementTree ) tree ; if ( getDefaultLabel ( switchStatementTree ) ) { if ( ! isSwitchOnEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , "Add a default case to this switch . " ) ; } else if ( missingCasesOfEnum ( switchStatementTree ) ) { reportIssue ( switchStatementTree . switchKeyword ( ) , "Complete cases by adding the missing enum constants or add a default case to this switch . " ) ; } } }
public synchronized String getAttribute ( ) { if ( fAttribute . equals ( NOT_SET ) ) { setAttribute ( ) ; } return fAttribute ; }
public DotRunnableThread ( final List < DotRunnable > allListeners ) { this . listeners = getListeners ( allListeners ) ; this . flushers = getFlushers ( allListeners ) ; }
private void createIndex ( ) { lastFoundElementPosition = 0 ; filteredPlan . clear ( ) ; for ( PlanElement element : plan . getList ( ) ) { if ( ! element . isComment ( ) ) filteredPlan . add ( element ) ; } }
public Collection < Map . Entry < K , V > > scanAndFilterByEntry ( Predicate < ? super Map . Entry < K , V > > entryPredicate ) { return mainMap . entryStream ( ) . filter ( entryPredicate ) . collect ( Collectors . toCollection ( ArrayList : : new ) ) ; }
private boolean isValidChar ( final char c ) { return isValidChar ( regExp , c ) ; }
public boolean verifyEventIdentifier ( AbstractPlaceEvent event ) { return ( Objects . equals ( getEditorIdentifier ( ) , event . getPlace ( ) . getIdentifier ( ) ) && Objects . equals ( editorPlaceRequest , event . getPlace ( ) ) ) ; }
public void star ( ) throws IOException { this . request . method ( "PUT" ) . fetch ( ) . as ( RestResponse . class ) . assertStatus ( HttpURLConnection . HTTP_NO_CONTENT ) ; }
public IssueOutputView ( Issue issue ) { this ( issue , null ) ; }
public void setDefaultNumberOfRetries ( int defaultNumberOfRetries ) { this . defaultNumberOfRetries = defaultNumberOfRetries ; }
public void testSequenceFlowSupplier ( ) { final CaseManagementSetChildNodeGraphCommand command = new CaseManagementSetChildNodeGraphCommand ( parent , candidate , index , originalParent , originalIndex ) ; final Supplier < ViewConnector < SequenceFlow > > supplier = command . sequenceFlowSupplier ( ) ; final ViewConnector < SequenceFlow > viewConnector = supplier . get ( ) ; assertNotNull ( viewConnector ) ; assertNotNull ( viewConnector . getSourceConnection ( ) ) ; assertNotNull ( viewConnector . getTargetConnection ( ) ) ; assertNotNull ( viewConnector . getBounds ( ) ) ; assertNotNull ( viewConnector . getDefinition ( ) ) ; }
public long getSessionSeqId ( ) { if ( sessionSeqId == null ) { String sessionId = getContext ( ) . getEngineContext ( ) . getSessionId ( ) ; // The session may not exists for quartz jobs sessionSeqId = getSessionDataContainer ( ) . isSessionExists ( sessionId ) ? getSessionDataContainer ( ) . getEngineSessionSeqId ( sessionId ) : - 1L ; } return sessionSeqId ; }
private boolean isTxnRelatedEvent ( final NotificationEvent event ) { return ( ( event . getEventType ( ) . equals ( MessageFactory . OPEN_TXN_EVENT ) ) || ( event . getEventType ( ) . equals ( MessageFactory . COMMIT_TXN_EVENT ) ) || ( event . getEventType ( ) . equals ( MessageFactory . ABORT_TXN_EVENT ) ) ) ; }
private static void setBackground ( boolean async ) { background . set ( async ) ; }
public V put ( @NonNull K key , @NonNull V value ) { map . put ( key , new Entry < > ( key , value , ++ time ) ) ; if ( map . size ( ) > maximumSize ) { purge ( ) ; } return value ; }
private static void setIfNotNullOrEmpty ( MongoProperties . Builder builder , MongoProp prop , String value ) { if ( value != null && value . trim ( ) . length ( ) > 0 ) { boolean isPassword = MongoProp . PASSWORD . equals ( prop ) ; if ( isPassword ) { value = Encr . decryptPasswordOptionallyEncrypted ( value ) ; } builder . set ( prop , value ) ; } }
public Mutation toMutation ( K key ) { return new Mutations . ReadWriteWithValue < > ( value , f ) ; }
private Entry ( Map . Entry < String , String > e ) { this ( e . getKey ( ) , e . getValue ( ) ) ; }
private String parsePath ( ) throws URISyntaxException { String [ ] parts = uri . split ( "\\ ? " ) [ 0 ] . split ( " : " , 2 ) ; if ( parts . length < 2 || parts [ 1 ] . isEmpty ( ) ) throw new URISyntaxException ( uri , "invalid path" ) ; else return parts [ 1 ] ; }
public void setItems ( Collection value ) { genVersionToBaseTemplate ( value ) ; super . setItems ( value ) ; }
public void edit ( VolumeBrickModel object ) { table . edit ( object . getBricks ( ) ) ; Driver . driver . edit ( object ) ; }
public List < QuickFilter > getQuickFilters ( ) { return quickFilters ; }
public void testBounds ( ) { assertEquals ( LOW , ( int ) fCondition . min ( ) ) ; assertEquals ( HIGH , ( int ) fCondition . max ( ) ) ; }
public String weather ( ) { String result = restTemplate . getForObject ( "http :/ / " + WEATHER_SERVICE + " / weather" , String . class ) ; return "Weather Service Response : " + result ; }
public boolean isExtensionEnabled ( ) { return enablement != null ? enablement . evaluate ( ) : true ; }
public ProviderNotificationManager createProviderNotificationManager ( final DiagramEventBroker diagramEventBroker , final EObject view , final NotificationListener notificationListener ) { if ( null != manager ) { return manager ; } manager = new ProviderNotificationManager ( diagramEventBroker , view , notificationListener ) { @Override protected void registerListeners ( ) { // TODO install listener on allocation ( Abstraction ) of the model . } } ; return manager ; }
private void startSyncFolderOperation ( OCFile folder ) { long currentSyncTime = System . currentTimeMillis ( ) ; mSyncInProgress = true ; // perform folder synchronization RemoteOperation synchFolderOp = new RefreshFolderOperation ( folder , currentSyncTime , false , false , false , getStorageManager ( ) , getAccount ( ) , getApplicationContext ( ) ) ; synchFolderOp . execute ( getAccount ( ) , this , null , null ) ; }
private static ProtobufMetadataManagerImpl getProtobufMetadataManager ( EmbeddedCacheManager cacheManager ) { if ( cacheManager == null ) { throw new IllegalArgumentException ( "cacheManager cannot be null" ) ; } ProtobufMetadataManagerImpl metadataManager = ( ProtobufMetadataManagerImpl ) cacheManager . getGlobalComponentRegistry ( ) . getComponent ( ProtobufMetadataManager . class ) ; if ( metadataManager == null ) { throw new IllegalStateException ( "ProtobufMetadataManager not initialised yet ! " ) ; } return metadataManager ; }
public void onSessionKeyUpdate ( SessionKey sessionKey ) { log . info ( "Session key updated" ) ; synchronized ( DistributedHerder . this ) { DistributedHerder . this . sessionKey = sessionKey . key ( ) ; // Track the expiration of the key if and only if this worker is the leader // Followers will receive rotated keys from the follower and won't be responsible for // tracking expiration and distributing new keys themselves if ( isLeader ( ) && keyRotationIntervalMs > 0 ) { DistributedHerder . this . keyExpiration = sessionKey . creationTimestamp ( ) + keyRotationIntervalMs ; } } }
public String getAuthorizationUrl ( OAuthConfig config ) { // User must provide these 4 elements to the service builder String url = String . format ( AUTHORIZE_URL , OAuthEncoder . encode ( config . getApiKey ( ) ) , OAuthEncoder . encode ( config . getCallback ( ) ) , OAuthEncoder . encode ( config . getScope ( ) ) , OAuthEncoder . encode ( config . getState ( ) ) ) ; return url ; }
public Object getParameter ( String name ) { if ( name . equals ( CriticalPathModule . PARAM_WORKER ) ) { final HostThread currentHostThread = fCurrentHostThread ; if ( currentHostThread == null ) { return null ; } /* Try to find the worker for the critical path */ IAnalysisModule mod = getModule ( ) ; if ( ( mod != null ) && ( mod instanceof CriticalPathModule ) ) { LttngWorker worker = new LttngWorker ( currentHostThread , "" , 0 ) ; // $NON - NLS - 1$ return worker ; } return currentHostThread ; } return null ; }
public static ExceptionThrowingSubTest expectThrowable ( Runnable runnable ) { return expectThrowable ( runnable . toString ( ) , runnable ) ; }
protected CONNECTCXFClient ( ServicePortDescriptor < T > portDescriptor , String url , AssertionType assertion , ServicePortBuilder < T > portBuilder ) { serviceEndpoint = super . configureBasePort ( portBuilder . createPort ( ) , url , assertion != null ? assertion . getTransactionTimeout ( ) : null ) ; }
public < V > Setting < V > get ( SimpleUri id , Class < V > valueType ) { Setting setting = settings . get ( id ) ; if ( setting == null ) { return null ; } Class settingValueClass = setting . getValueClass ( ) ; if ( ! settingValueClass . equals ( valueType ) ) { throw new ClassCastException ( "Expected a Setting of type " + valueType . getName ( ) + " , found a Setting of type " + settingValueClass . getName ( ) ) ; } return ( Setting < V > ) setting ; }
public String getCustomField ( String fieldName ) { for ( CustomField f : customFields ) { if ( f . getName ( ) . equals ( fieldName ) ) { return f . getValue ( ) ; } } return null ; }
private CommandCall duplicateCommandForDifferentElement ( CommandCall commandCall , Element element ) { return new CommandCall ( null , commandCall . getCommand ( ) , element , commandCall . getExpression ( ) , commandCall . getResource ( ) ) ; }
public M fromBytes ( byte [ ] messageBuffer ) { if ( deserializer == null ) deserializer = new ThriftBinaryDeserializer ( ) ; try { M message = typeRef . safeNewInstance ( ) ; deserializer . deserialize ( message , messageBuffer ) ; return message ; } catch ( Throwable e ) { // normally a TException . but some corrupt records can cause // other runtime exceptions ( e . g . IndexOutOfBoundsException ) . logWarning ( "failed to deserialize" , e ) ; return null ; } }
public void showPage ( Control page ) { if ( page . isDisposed ( ) || page . getParent ( ) != this ) { return ; } currentPage = page ; // show new page page . setVisible ( true ) ; layout ( true ) ; // hide old ( and all others ) * after * new page has been made visible in // order to avoid flashing for ( Control child : getChildren ( ) ) { if ( child != page && ! child . isDisposed ( ) ) { child . setVisible ( false ) ; } } }
public void info ( String message , Object . . . objects ) { LOG . info ( message , objects ) ; }
public Optional < String > getLinkAt ( int offset ) { // Check if there is a link at the offset for ( int i = 0 ; i < linkRanges . size ( ) ; i ++ ) { if ( linkRanges . get ( i ) . contains ( offset ) ) { return Optional . of ( hrefs . get ( i ) ) ; } } return Optional . empty ( ) ; }
public String toString ( ) { return "FileListCacheValue { fileNames = " + getFileNames ( ) + " } " ; }
protected Control createControl ( Composite parent ) { // Configure table CTConfiguration config = new CTConfiguration ( parent , CTConfiguration . STYLE_GRID ) ; config . setHorizontalAlignment ( SWT . CENTER ) ; config . setCellSelectionEnabled ( false ) ; config . setColumnSelectionEnabled ( false ) ; config . setRowSelectionEnabled ( false ) ; config . setColumnHeaderLayout ( CTConfiguration . COLUMN_HEADER_LAYOUT_FILL_EQUAL ) ; config . setRowHeaderLayout ( CTConfiguration . ROW_HEADER_LAYOUT_DEFAULT ) ; this . table = new ComponentTable ( parent , SWT . NONE , config ) ; return this . table . getControl ( ) ; }
public boolean isEnabled ( ) { return true ; }
void verifyMetadata ( MessageMetadata metadata ) throws Exception { if ( metadata . getMessageMetadataType ( ) != MessageType . LOG_ENTRY_MESSAGE ) { log . error ( "Wrong message metadata { } , expecting type { } snapshot { } " , metadata , MessageType . LOG_ENTRY_MESSAGE , srcGlobalSnapshot ) ; throw new Exception ( "wrong type of message" ) ; } }
public void setVmBackup ( VmBackup value ) { this . vmBackup = value ; }
public void setPrice1 ( int price3 ) { if ( true ) { assert price3 > 1000 ; // Noncompliant } }
public String evaluate ( TransactionContext txnCtx , Input < Object > [ ] args ) { assert args . length == 2 : "repeat takes exactly two arguments" ; var text = ( String ) args [ 0 ] . value ( ) ; var repetitions = ( Integer ) args [ 1 ] . value ( ) ; if ( text == null || repetitions == null ) { return null ; } if ( repetitions <= 0 ) { return "" ; } else { return text . repeat ( repetitions ) ; } }
private void setActionBarNotificationBarColor ( MaterialColor color ) { getSupportActionBar ( ) . setBackgroundDrawable ( new ColorDrawable ( color . toActionBarColor ( this ) ) ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . LOLLIPOP ) { getWindow ( ) . setStatusBarColor ( color . toStatusBarColor ( this ) ) ; } }
public static ProjectBuildType getProjectType ( IProject project ) { // -- -- -- -- -- AUTOTOOLS // Autotools has an 'Autotools' nature by which we can identify it . if ( isAutoTools ( project ) ) { return ProjectBuildType . AUTO_TOOLS ; } IConfiguration defaultConfiguration = helper_getActiveConfiguration ( project ) ; IBuilder builder = defaultConfiguration . getBuilder ( ) ; Boolean projIsManaged = builder . isManagedBuildOn ( ) ; // -- -- -- -- -- MANAGED PROJECT if ( projIsManaged ) { return ProjectBuildType . MANAGED_MAKEFILE ; } else { return ProjectBuildType . OTHER ; // E . g a manual makefile . } }
protected long download ( T object , File outFile ) throws IOException { openObjectFunction . open ( object , outFile ) ; return outFile . length ( ) ; }
private Collection < VCastResult > getResultFiles ( VCastDataStore dataStore ) { Collection < VCastResult > results = null ; results = dataStore . getAllResults ( ) ; return results ; }
public PinotQueryGeneratorContext visitFilter ( FilterNode node , PinotQueryGeneratorContext context ) { context = node . getSource ( ) . accept ( this , context ) ; requireNonNull ( context , "context is null" ) ; LinkedHashMap < VariableReferenceExpression , Selection > selections = context . getSelections ( ) ; String filter = node . getPredicate ( ) . accept ( pinotFilterExpressionConverter , selections : : get ) . getDefinition ( ) ; return context . withFilter ( filter ) . withOutputColumns ( node . getOutputVariables ( ) ) ; }
Space ( String enumeratedValue ) { this . enumeratedValue = enumeratedValue ; }
public Guid getStorageDomainIdForPoolByType ( Guid pool , StorageDomainType type ) { Guid returnValue = Guid . Empty ; List < storage_domains > domains = getAllForStoragePool ( pool ) ; for ( storage_domains domain : domains ) { if ( domain . getstorage_domain_type ( ) == type ) { returnValue = domain . getId ( ) ; break ; } } return returnValue ; }
public void lock ( T id ) throws InterruptedException { threadsLocked . inc ( ) ; try { idsLocked . update ( 1 ) ; lockInternal ( id ) ; } finally { threadsLocked . dec ( ) ; } }
public RunLengthEncodedBlock ( Block value , int positionCount ) { requireNonNull ( value , "value is null" ) ; if ( value . getPositionCount ( ) != 1 ) { throw new IllegalArgumentException ( format ( "Expected value to contain a single position but has % s positions" , value . getPositionCount ( ) ) ) ; } if ( value instanceof RunLengthEncodedBlock ) { this . value = ( ( RunLengthEncodedBlock ) value ) . getValue ( ) ; } else { this . value = value ; } if ( positionCount < 0 ) { throw new IllegalArgumentException ( "positionCount is negative" ) ; } this . positionCount = positionCount ; }
public Message . Request request ( ) { if ( retryConsistencyLevel != null && retryConsistencyLevel != request . consistency ( ) ) return request . copy ( retryConsistencyLevel ) ; else return request ; }
public void init ( FilterConfig filterConfig ) throws ServletException { }
public ExtentBufferedCompositePattern ( Extent extent , Pattern . . . patterns ) { super ( extent ) ; checkArgument ( patterns . length != 0 , "patterns cannot be empty" ) ; this . patterns = patterns ; }
public boolean isValid ( Object [ ] value , ConstraintValidatorContext context ) { if ( value . length != 3 ) { throw new IllegalArgumentException ( "Unexpected method signature" ) ; } // one or both limits are unbounded = > always consistent if ( value [ 1 ] == null || value [ 2 ] == null ) { return true ; } return ( ( Date ) value [ 1 ] ) . before ( ( Date ) value [ 2 ] ) ; }
static boolean monoNativeFailure ( Either < Utils . CommandResult > result ) { if ( result == null || ! result . isSuccess ( ) ) { return true ; } else { Utils . CommandResult commandResult = result . get ( ) ; return monoNativeFailure ( commandResult . output ) || monoNativeFailure ( commandResult . error ) ; } }
private void removeAppBar ( ) { APPBARDATA data = new APPBARDATA . ByReference ( ) ; data . cbSize . setValue ( data . size ( ) ) ; UINT_PTR result = Shell32 . INSTANCE . SHAppBarMessage ( new DWORD ( ShellAPI . ABM_REMOVE ) , data ) ; assertNotNull ( result ) ; }
public boolean couldMatch ( ScriptPath path ) { if ( ! path . eventLower . startsWith ( "mythicmob" ) ) { return false ; } if ( ! path . eventArgLowerAt ( 2 ) . equals ( "spawns" ) ) { return false ; } return true ; }
void init ( ) { this . initAccessOfDirectories ( ) ; this . initAccessOfHosts ( ) ; }
protected Sequence getServicesSequence ( DsfSession session , ILaunch launch , IProgressMonitor rm ) { return new ServicesLaunchSequence ( session , ( GdbLaunch ) launch , rm ) ; }
public AdvanceResult advanceNursery ( final AdvancingNursery advanceInfo , final Workbook workbook ) throws RuleException , FieldbookException { return this . namingConventionService . advanceNursery ( advanceInfo , workbook ) ; }
public org . ovirt . engine . api . model . Cluster update ( org . ovirt . engine . api . model . Cluster incoming ) { return performUpdate ( incoming , new QueryIdResolver < > ( VdcQueryType . GetClusterById , IdQueryParameters . class ) , VdcActionType . UpdateCluster , new UpdateParametersProvider ( this ) ) ; }
protected @NonNull TmfViewer createLeftChildViewer ( @Nullable Composite parent ) { String analysisId = String . valueOf ( getViewSite ( ) . getSecondaryId ( ) ) ; return new AbstractSegmentStoreScatterChartTreeViewer ( Objects . requireNonNull ( parent ) ) { @Override protected @Nullable ISegmentStoreProvider getSegmentStoreProvider ( ITmfTrace trace ) { IAnalysisModule module = TmfTraceUtils . getAnalysisModuleOfClass ( trace , IAnalysisModule . class , analysisId ) ; if ( module instanceof ISegmentStoreProvider ) { return ( ISegmentStoreProvider ) module ; } return null ; } } ; }
public void testReservedSkippableBeforeStreamIdentifier ( ) throws Exception { ByteBuf in = Unpooled . wrappedBuffer ( new byte [ ] { - 0x7f , 0x06 , 0x00 , 0x00 , 's' , 'n' , 'e' , 't' , 't' , 'y' } ) ; channel . writeInbound ( in ) ; }
public void set ( String name , Property property ) throws PropertyNotFoundException { Field field = getType ( ) . getField ( name ) ; if ( field == null ) { Property removedProperty = computeRemovedProperty ( name ) ; if ( removedProperty != null ) { removedProperty . set ( name , property ) ; } return ; } children . put ( property . getName ( ) , property ) ; setIsModified ( ) ; }
public int andCardinality ( Container x ) { if ( this . getCardinality ( ) == 0 ) return 0 ; else if ( x . getCardinality ( ) == 0 ) return 0 ; else { if ( x instanceof ArrayContainer ) return andCardinality ( ( ArrayContainer ) x ) ; else if ( x instanceof BitmapContainer ) return andCardinality ( ( BitmapContainer ) x ) ; return andCardinality ( ( RunContainer ) x ) ; } }
public Set < WorkerNetAddress > getWorkerAddresses ( ) throws UnavailableException { if ( mSafeModeManager . isInSafeMode ( ) ) { throw new UnavailableException ( ExceptionMessage . MASTER_IN_SAFEMODE . getMessage ( ) ) ; } Set < WorkerNetAddress > workerAddresses = new HashSet < > ( mWorkers . size ( ) ) ; for ( MasterWorkerInfo worker : mWorkers ) { // worker net address is unmodifiable after initialization , no locking is needed workerAddresses . add ( worker . getWorkerAddress ( ) ) ; } return workerAddresses ; }
public void setUp ( ) { params . put ( "Digits" , "1234" ) ; params . put ( "CallSid" , "CA1234567890ABCDE" ) ; params . put ( "To" , " + 18005551212" ) ; params . put ( "Caller" , " + 14158675309" ) ; params . put ( "From" , " + 14158675309" ) ; }
public @Nullable String getAttributeValue ( @Nullable String name ) { return name ; }
public void logout ( HttpServletRequest request , HttpServletResponse response , Authentication authentication ) { cookiesToClear . forEach ( f - > response . addCookie ( f . apply ( request ) ) ) ; }
private MethodHandles . Lookup getMethodHandleLookup ( Class < ? > endpointClass ) { return MethodHandles . publicLookup ( ) . in ( endpointClass ) ; }
public void channelOpen ( ChannelHandlerContext ctx , ChannelStateEvent e ) throws Exception { if ( maxConnections > 0 ) { if ( numConnections . incrementAndGet ( ) > maxConnections ) { ctx . getChannel ( ) . close ( ) ; // numConnections will be decremented in channelClosed log . info ( "Accepted connection above limit ( { } ) . Dropping . " , maxConnections ) ; } } super . channelOpen ( ctx , e ) ; }
public Builder from ( int . . . nums ) { from = nums ; return this ; }
public B channel ( Class < ? extends C > channelClass ) { return channelFactory ( new ReflectiveChannelFactory < C > ( ObjectUtil . checkNotNull ( channelClass , "channelClass" ) ) ) ; }
public void getActiveConditions_shouldGetActiveConditions ( ) { List < Condition > activeConditions = conditionService . getActiveConditions ( patientService . getPatient ( 2 ) ) ; Assert . assertTrue ( activeConditions . size ( ) == 2 ) ; Assert . assertEquals ( "2cc6880e - 2c46 - 11e4 - 9138 - a6c5e4d20fb7" , activeConditions . get ( 0 ) . getUuid ( ) ) ; Assert . assertEquals ( "2cc6880e - 2c46 - 15e4 - 9038 - a6c5e4d22fb7" , activeConditions . get ( 1 ) . getUuid ( ) ) ; }
public synchronized Inode < ? > getInodeOrNull ( ) { if ( ! fullPathExists ( ) ) { return null ; } List < Inode < ? > > inodeList = mLockList . getInodes ( ) ; return inodeList . get ( inodeList . size ( ) - 1 ) ; }
private static < T > Set < T > findDuplicates ( Collection < T > list ) { Set < T > duplicates = new HashSet < > ( ) ; Set < T > uniques = new HashSet < > ( ) ; list . stream ( ) . forEach ( t - > { if ( ! uniques . add ( t ) ) { duplicates . add ( t ) ; } } ) ; return duplicates ; }
public boolean next ( ) throws IOException { for ( ; ; ) { LogQueueEntry t = queue . poll ( ) ; if ( t == null ) { return false ; } refName = t . lc . getRefName ( ) ; updateIndex = t . lc . getUpdateIndex ( ) ; entry = t . lc . getReflogEntry ( ) ; boolean include = includeDeletes || entry != null ; skipShadowed ( refName , updateIndex ) ; add ( t ) ; if ( include ) { return true ; } } }
protected void remove ( MessageGroup group ) { Object correlationKey = group . getGroupId ( ) ; this . messageStore . removeMessageGroup ( correlationKey ) ; this . groupIds . remove ( group . getGroupId ( ) ) ; }
public void sendOffsetsToTransaction ( Map < TopicPartition , OffsetAndMetadata > offsets , String consumerGroupId ) throws ProducerFencedException { sendOffsetsToTransaction ( offsets , new ConsumerGroupMetadata ( consumerGroupId ) ) ; }
public boolean cancel ( final Exception rootReason ) { if ( transitionCancel ( rootReason ) ) { final Exception reason = new CancellationException ( rootReason ) ; try { traceFailure ( reason ) ; } catch ( Throwable ex ) { LOGGER . warn ( "Exception thrown in logging trace for failure ! " , ex ) ; } finally { // guard any exception that may throw from catch block getSettableDelegate ( ) . fail ( reason ) ; } return true ; } return false ; }
private int allVersionsCombined ( ) { return formatIdentifier > > > SHIFT_FORMAT_IDENTIFIER | formatVersion > > > SHIFT_FORMAT_VERSION ; }
private void writeJDBCStoreConnection ( XMLExtendedStreamWriter writer , SimpleConnectionFactoryConfiguration configuration ) throws XMLStreamException { writer . writeStartElement ( Element . SIMPLE_CONNECTION ) ; writeOptional ( writer , Attribute . CONNECTION_URL , configuration . connectionUrl ( ) ) ; writeOptional ( writer , Attribute . DRIVER_CLASS , configuration . driverClass ( ) ) ; writeOptional ( writer , Attribute . USERNAME , configuration . username ( ) ) ; writeOptional ( writer , Attribute . PASSWORD , configuration . password ( ) ) ; writer . writeEndElement ( ) ; }
private static ByteBuf copyData ( ByteBufList list ) { ByteBuf buf = Unpooled . buffer ( list . readableBytes ( ) ) ; for ( int i = 0 ; i < list . size ( ) ; i ++ ) { buf . writeBytes ( list . getBuffer ( i ) . slice ( ) ) ; } return buf ; }
private String getXMI_ID ( final EObject eobject ) { if ( eobject . eResource ( ) instanceof XMIResource ) { return ( ( XMIResource ) eobject . eResource ( ) ) . getID ( eobject ) ; } return null ; }
public float getPressure ( ) { return 0 ; }
private boolean checkForJournalFlush ( ) { if ( queue . size ( ) >= QueueBatchSize ) return true ; boolean journalSizeFlush = ( JournalThresholdSize > 0 && journal . size ( ) > JournalThresholdSize ) ; if ( journalSizeFlush ) // JENA - 1222 // Based on Journal file growing large in terms of bytes return true ; // No test here for excessive queue length ( MaxQueueThreshold ) . return false ; }
private ProjectState newProjectState ( ProjectConfig local ) { add ( local ) ; return all . get ( local . getProject ( ) . getNameKey ( ) ) ; }
public static Collection < PersonaAccount > getPersonaAccountsForAccount ( long accountId ) throws CentralRepoException { String queryClause = PERSONA_ACCOUNTS_QUERY_CALUSE + " WHERE persona_accounts . account_id = " + accountId + "AND p . status_id != " + Persona . PersonaStatus . DELETED . getStatusId ( ) ; CentralRepository cr = CentralRepository . getInstance ( ) ; if ( cr != null ) { PersonaAccountsQueryCallback queryCallback = new PersonaAccountsQueryCallback ( ) ; cr . executeSelectSQL ( queryClause , queryCallback ) ; return queryCallback . getPersonaAccountsList ( ) ; } return new ArrayList < > ( ) ; }
public boolean hasMultipleValues ( final String dimension ) { if ( isVirtualColumn ( dimension ) ) { return virtualColumns . getVirtualColumn ( dimension ) . capabilities ( dimension ) . hasMultipleValues ( ) ; } final Column column = index . getColumn ( dimension ) ; return column != null && column . getCapabilities ( ) . hasMultipleValues ( ) ; }
public void resumeNode ( String id ) { api . serverApi ( ) . updateStatus ( id , Server . UpdateStatus . create ( Types . ServerAction . POWER_ON , Types . ServerActionMethod . HARDWARE ) ) ; }
public IStyledLabelProvider [ ] getLabelProviders ( ) { return fLabelProviders ; }
public void registerOperations ( ManagementResourceRegistration resourceRegistration ) { super . registerOperations ( resourceRegistration ) ; resourceRegistration . registerOperationHandler ( ShowJaxrsResourcesHandler . DEFINITION , new ShowJaxrsResourcesHandler ( ) ) ; }
public int hashCode ( ) { int result = processId . hashCode ( ) ; result = ~~result ; result = 31 * result + taskId . hashCode ( ) ; result = ~~result ; result = 31 * result + taskName . hashCode ( ) ; result = ~~result ; result = 31 * result + formName . hashCode ( ) ; result = ~~result ; return result ; }
public void stop ( final String reason ) { new Thread ( "Shutdown Thread" ) { @Override public void run ( ) { independentThreadStop ( reason , true ) ; } } . start ( ) ; }
public boolean equals ( Object o ) { if ( ! ( o instanceof Map . Entry ) ) { return false ; } Map . Entry < ? , ? > e = ( Map . Entry < ? , ? > ) o ; return ( ( key == null ? e . getKey ( ) == null : key . equals ( e . getKey ( ) ) ) && ( value == null ? e . getValue ( ) == null : value . equals ( e . getValue ( ) ) ) ) ; }
protected PostgreSqlEngine ( final PdbProperties properties , final String driver ) throws DatabaseEngineException { super ( driver , properties , Dialect . POSTGRESQL ) ; }
public synchronized void dispose ( ) { clearCachedSwingEditor ( ) ; }
public void run ( ) { try { if ( logger . isInfoEnabled ( ) ) logger . info ( "Start reconnecting " + provider ) ; provider . register ( getUIService ( ) . getDefaultSecurityAuthority ( provider ) ) ; } catch ( OperationFailedException ex ) { logger . error ( "cannot re - register provider will keep going" , ex ) ; } }
public void checkProperties ( Properties properties ) { if ( ! properties . contains ( "log4j . shutdownCallbackRegistry" ) ) { properties . setProperty ( "log4j . shutdownCallbackRegistry" , "io . druid . common . config . Log4jShutdown" ) ; } if ( ! properties . contains ( "log4j . shutdownHookEnabled" ) ) { properties . setProperty ( "log4j . shutdownHookEnabled" , "true" ) ; } }
public void testUnmarshallTopLevelEmptyEventProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_START_EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartTimerEvent emptyTop = getStartNodeById ( diagram , EMPTY_TOP_LEVEL_EVENT_ID , StartTimerEvent . class ) ; assertGeneralSet ( emptyTop . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertTimerEventEmpty ( emptyTop . getExecutionSet ( ) , NON_INTERRUPTING , EMPTY_VALUE ) ; // Know issue . Should be uncommented after https :/ / issues . jboss . org / browse / JBPM - 7038 will be fixed // assertDataIOSet ( emptySubprocess . getDataIOSet ( ) , EMPTY_VALUE ) ; }
private EmbeddedExpirableMetadata ( long lifespan , TimeUnit lifespanUnit , long maxIdle , TimeUnit maxIdleUnit , EntryVersion version ) { super ( version ) ; this . lifespan = lifespan < 0 ? - 1 : lifespanUnit . toMillis ( lifespan ) ; this . maxIdle = maxIdle < 0 ? - 1 : maxIdleUnit . toMillis ( maxIdle ) ; }
protected void setMatcherString ( String pattern ) { if ( pattern . length ( ) == 0 ) { searchPattern = null ; } else { SearchPattern patternMatcher = new SearchPattern ( ) ; if ( pattern . indexOf ( ' * ' ) != 0 && pattern . indexOf ( ' ? ' ) != 0 && pattern . indexOf ( ' . ' ) != 0 ) { pattern = ' * ' + pattern ; } patternMatcher . setPattern ( pattern ) ; searchPattern = patternMatcher ; } }
public DefaultEditorSession ( final ManagedSession session , final CanvasCommandManager < AbstractCanvasHandler > canvasCommandManager , final @Session SessionCommandManager < AbstractCanvasHandler > sessionCommandManager , final @Request SessionCommandManager < AbstractCanvasHandler > requestCommandManager , final ClientCommandRegistry < org . kie . workbench . common . stunner . core . command . Command < AbstractCanvasHandler , CanvasViolation > > clientCommandRegistry ) { this . session = session ; this . commandRegistry = clientCommandRegistry ; this . sessionCommandManager = sessionCommandManager ; this . requestCommandManager = requestCommandManager ; this . canvasCommandManager = canvasCommandManager ; }
private String transformToHeaderValue ( Directive . . . directives ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < directives . length - 1 ; i ++ ) { sb . append ( directives [ i ] . headerValue ) . append ( " , " ) ; } sb . append ( directives [ directives . length - 1 ] . headerValue ) ; return sb . toString ( ) ; }
private static void fireOnFailure ( final NodeProvisioner . PlannedNode plannedNode , final Throwable cause ) { for ( CloudProvisioningListener cl : CloudProvisioningListener . all ( ) ) { try { cl . onFailure ( plannedNode , cause ) ; } catch ( Error e ) { throw e ; } catch ( Throwable e ) { LOGGER . log ( Level . SEVERE , "Unexpected uncaught exception encountered while " + "processing onFailure ( ) listener call in " + cl + " for agent " + plannedNode . displayName , e ) ; } } }
public synchronized boolean isLastMQNotifLongAgo ( ) { long delay = 18 * 3600 ; // 24h - 3h = 18h long threshold = sharedPreferences . getLong ( getCurrentModeName ( ) + LAST_MORNING_Q_TIMESTAMP , - delay ) + delay ; if ( threshold < Calendar . getInstance ( ) . getTimeInMillis ( ) ) { Logger . v ( TAG , " { } - Last MQ notif was yesterday" , getCurrentModeName ( ) ) ; return true ; } else { Logger . v ( TAG , " { } - Last MQ notif was recent , do not notify" , getCurrentModeName ( ) ) ; return false ; } }
public CrewMember apply ( org . atlasapi . media . entity . CrewMember input ) { // we carry IDs through from Owl to Deer , reject anything without one if ( null == input . getId ( ) ) { return null ; } if ( input instanceof org . atlasapi . media . entity . Actor ) { return translateLegacyActor ( ( org . atlasapi . media . entity . Actor ) input ) ; } else if ( null != input ) { return translateLegacyCrewMember ( input ) ; } else { return null ; } }
public void testSocket ( ) throws Exception { Socket s = new Socket ( ) ; s . connect ( server . getLocalAddress ( ) ) ; assertEquals ( 1 , tagger . getLiveDescriptors ( ) . size ( ) ) ; s . close ( ) ; assertEquals ( Collections . EMPTY_MAP , tagger . getLiveDescriptors ( ) ) ; }
public ValuesMatcher ( Map < String , Integer > outputSymbolAliases , Optional < Integer > expectedOutputSymbolCount , Optional < List < List < Expression > > > expectedRows ) { this . outputSymbolAliases = ImmutableMap . copyOf ( outputSymbolAliases ) ; this . expectedOutputSymbolCount = requireNonNull ( expectedOutputSymbolCount , "expectedOutputSymbolCount is null" ) ; this . expectedRows = requireNonNull ( expectedRows , "expectedRows is null" ) ; }
protected Button getButton ( int id ) { return buttons . get ( id ) ; }
public void setInitializationData ( IConfigurationElement config , String propertyName , Object data ) { if ( data instanceof Hashtable < ? , ? > ) { Hashtable < ? , ? > map = ( Hashtable < ? , ? > ) data ; color = ( String ) map . get ( "color" ) ; // $NON - NLS - 1$ } }
public void addRequestCleanupHandler ( HttpServletRequest request ) { RequestContext . getActiveContext ( request ) . addRequestCleanupHandler ( new RequestCleanupHandler ( ) { @Override public void cleanup ( HttpServletRequest req ) { try { close ( ) ; } catch ( OperationException e ) { throw new NuxeoException ( e ) ; } } } ) ; }
public void visitStatementList ( PyStatementListTree pyStatementListTree ) { if ( isStmtListIncrementsNestingLevel ( pyStatementListTree ) ) { nestingLevelStack . peek ( ) . increment ( ) ; super . visitStatementList ( pyStatementListTree ) ; nestingLevelStack . peek ( ) . decrement ( ) ; } else { super . visitStatementList ( pyStatementListTree ) ; } }
private static void checkLxmlParseCall ( SubscriptionContext ctx ) { CallExpression callExpression = ( CallExpression ) ctx . syntaxNode ( ) ; if ( checkCallExpressionFqn ( callExpression , LXML_PARSE ) ) { CallExpression parserCall = getParserCall ( getArgValueAsCallExpression ( TreeUtils . nthArgumentOrKeyword ( 1 , "parser" , callExpression . arguments ( ) ) ) ) ; if ( parserCall != null && isUnsafeParserUsage ( parserCall ) ) { ctx . addIssue ( parserCall , MESSAGE ) . secondary ( callExpression , null ) ; } } }
public int getVisibility ( IBinding member ) { try { PDOMCPPMemberBlock members = new PDOMCPPMemberBlock ( getLinkage ( ) , record + MEMBERLIST ) ; return members . getVisibility ( member ) ; } catch ( CoreException e ) { CCorePlugin . log ( e ) ; throw new IllegalArgumentException ( member . getName ( ) + " is not a member of " + getName ( ) ) ; // $NON - NLS - 1$ } }
public Map < String , Object > getDynamicTemplateData ( ) { return dynamicTemplateData == null ? Collections . < String , Object > emptyMap ( ) : dynamicTemplateData ; }
String getVersion ( ) { return version ; }
public List < User > getUsers ( PerunSession sess ) throws InternalErrorException , PrivilegeException { Utils . checkPerunSession ( sess ) ; // Authorization if ( ! AuthzResolver . isAuthorized ( sess , Role . PERUNOBSERVER ) ) { throw new PrivilegeException ( sess , "getUsers" ) ; } return getUsersManagerBl ( ) . getUsers ( sess ) ; }
protected void setDefaultSwitchTypeIfNeeded ( ) { Cluster cluster = getCluster ( ) ; if ( ! cluster . isSetRequiredSwitchType ( ) ) { SwitchType defaultSwitchType = DefaultSwitchType . getDefaultSwitchType ( cluster . getCompatibilityVersion ( ) ) ; cluster . setRequiredSwitchTypeForCluster ( defaultSwitchType ) ; } }
public List < BlockLocationInfo > getBlockLocations ( AlluxioURI alluxioURI ) { throw new UnsupportedOperationException ( "GetBlockLocations is not supported . " ) ; }
public CustomTxtParserWizard ( ) { this ( null ) ; }
private Provider < AdditionalProperties > createProvider ( String name ) { Provider < AdditionalProperties > p = mock ( Provider . class ) ; when ( p . getName ( ) ) . thenReturn ( name ) ; return p ; }
public static int mapApiToArtVersion ( int api ) { if ( api < 19 ) { return NO_VERSION ; } switch ( api ) { case 19 : case 20 : return 7 ; case 21 : return 39 ; case 22 : return 45 ; case 23 : return 64 ; case 24 : case 25 : return 79 ; case 26 : return 124 ; case 27 : return 131 ; default : // 144 is the current version in the master branch of AOSP as of 2018 - 05 - 22 return 144 ; } }
public void onAppendColumnEvent ( ) { AppendColumnEvent event = new AppendColumnEvent ( COLUMN_GROUP ) ; scenarioSimulationEventHandler . onEvent ( event ) ; verify ( scenarioSimulationEventHandler ) . commonExecution ( eq ( scenarioSimulationContextLocal ) , isA ( AppendColumnCommand . class ) , eq ( true ) ) ; }
public static < T > T serializeAndDeserialize ( T instance ) throws Exception { byte [ ] bytes = serialize ( instance ) ; return ( T ) deserialize ( bytes ) ; }
public void onPreReceive ( ReceivePack rp , Collection < ReceiveCommand > commands ) { for ( int i = 0 ; i < count ; i ++ ) hooks [ i ] . onPreReceive ( rp , commands ) ; }
public DescriptionBuilder withAdditionalAnnotations ( Annotation annotation , Annotation . . . additionalAnnotations ) { List < Annotation > annotations = new ArrayList < Annotation > ( ) ; annotations . add ( annotation ) ; annotations . addAll ( Arrays . asList ( additionalAnnotations ) ) ; return withAdditionalAnnotations ( annotations ) ; }
public void onAttach ( final Activity activity ) { super . onAttach ( activity ) ; if ( activity instanceof Listener ) { mListener = ( Listener ) activity ; } else { Lg . e ( activity . getClass ( ) . getName ( ) , " should implement " , Listener . class . getName ( ) ) ; } }
private void preloadDataSet ( ) { preloadedDataSet = load ( iter . next ( ) ) ; totalOutcomes = preloadedDataSet . getLabels ( ) . size ( 1 ) ; inputColumns = preloadedDataSet . getFeatureMatrix ( ) . size ( 1 ) ; }
public void startup ( Application application , ComponentStartupStatus ss ) { FileOps . ensureDir ( deltaClientZone ) ; FileOps . clearAll ( deltaClientZone ) ; Zone zone = Zone . connect ( deltaClientZone ) ; deltaLink = DeltaLinkHTTP . connect ( deltaServerURL ) ; deltaClient = DeltaClient . create ( zone , deltaLink ) ; jmsMessagingClient = application . getJMSMessagingClient ( ) ; ss . info ( String . format ( "DeltaClient connected to DeltaServer at % s with zone % s" , deltaServerURL , deltaClientZone ) ) ; }
protected void onInit ( ) { super . onInit ( ) ; if ( this . connectionFactory == null ) { this . connectionFactory = new TcpNioServerConnectionFactory ( getPort ( ) ) ; this . connectionFactory . setDeserializer ( new ByteArrayLfSerializer ( ) ) ; this . connectionFactory . setBeanFactory ( getBeanFactory ( ) ) ; if ( this . applicationEventPublisher != null ) { this . connectionFactory . setApplicationEventPublisher ( this . applicationEventPublisher ) ; } this . connectionFactory . afterPropertiesSet ( ) ; } this . connectionFactory . registerListener ( this ) ; }
public static Pair < Integer , Integer > getPrecisionAndScale ( String type ) { type = type . trim ( ) ; String param = type . substring ( 8 , type . length ( ) - 1 ) ; String [ ] params = param . split ( " , " ) ; return new Pair < > ( Integer . parseInt ( params [ 0 ] . trim ( ) ) , Integer . parseInt ( params [ 1 ] . trim ( ) ) ) ; }
public static String constructSegmentPath ( String baseKey , String storageDir ) { return JOINER . join ( baseKey . isEmpty ( ) ? null : baseKey , storageDir ) + " / index . zip" ; }
public MappingIterator ( Collection < S > source , Function < S , D > transformation ) { this . sourceIt = source . iterator ( ) ; this . transformation = transformation ; }
public boolean removeAll ( Collection < ? > c ) { boolean changed = false ; for ( XWikiAttachment x : ( Collection < ? extends XWikiAttachment > ) c ) { if ( map . get ( x . getFilename ( ) ) == x ) { map . remove ( x . getFilename ( ) ) ; changed = true ; } } if ( changed ) { updatedMap ( ) ; } return changed ; }
public void run ( String . . . strings ) throws Exception { }
public CollectEnvCommand ( FileSystemContext fsContext ) { super ( fsContext ) ; registerCommands ( ) ; }
protected void setBlobStorageService ( BlobStorageService blobStorageService ) { if ( blobStorageService == null ) { throw new IllegalArgumentException ( "BlobStorageService cannot be null" ) ; } this . blobStorageService = blobStorageService ; logger . trace ( "BlobStorage service set to { } " , blobStorageService . getClass ( ) ) ; }
public void dispose ( ) { app . getChildren ( ) . remove ( windowModel ) ; coolBarManager . dispose ( ) ; menuManager . dispose ( ) ; statusLineManager . dispose ( ) ; windowModel . getContext ( ) . deactivate ( ) ; windowModel . getContext ( ) . dispose ( ) ; ( ( Shell ) windowModel . getWidget ( ) ) . dispose ( ) ; }
public void setUp ( ) { n = new CacheManagerNotifierImpl ( ) ; cl = new CacheManagerListener ( ) ; n . start ( ) ; n . addListener ( cl ) ; }
public char getLabel ( ) { final char rv ; switch ( getType ( ) ) { case INPUT_VAL : rv = buttonData . inputVal ; break ; case AUTO_CHAR : rv = buttonData . autoChar ; break ; case CUSTOM : rv = buttonData . customChar ; break ; default : rv = ' * ' ; // Should never happen . } return rv ; }
public ReleasableBytesReference retainedSlice ( int from , int length ) { return new ReleasableBytesReference ( delegate . slice ( from , length ) , refCounted ) ; }
public static < T > Iterable < T > latest ( final Observable < ? extends T > source ) { return new Iterable < T > ( ) { @Override public Iterator < T > iterator ( ) { LatestObserverIterator < T > lio = new LatestObserverIterator < T > ( ) ; source . materialize ( ) . subscribe ( lio ) ; return lio ; } } ; }
public static Optional < MessageType > fromId ( String id ) { for ( MessageType current : values ( ) ) { if ( current . getId ( ) . equals ( id ) ) { return Optional . of ( current ) ; } } return Optional . empty ( ) ; }
private boolean isHostNetworkUnreacable ( VDS vds ) { VdsDynamic vdsDynamic = vds . getDynamicData ( ) ; return ( vdsDynamic . getStatus ( ) == VDSStatus . Down || vdsDynamic . getStatus ( ) == VDSStatus . Reboot || ( vdsDynamic . getStatus ( ) == VDSStatus . NonOperational && vdsDynamic . getNonOperationalReason ( ) == NonOperationalReason . NETWORK_UNREACHABLE ) ) ; }
public ScriptExecutingMessageSource ( AbstractScriptExecutingMessageProcessor < ? > scriptMessageProcessor ) { this . scriptMessageProcessor = scriptMessageProcessor ; }
public void typeInSearchField ( String content , int length ) { waitForElementVisibleByElement ( searchInput ) ; searchInput . sendKeys ( content . substring ( 0 , 3 ) ) ; PageObjectLogging . log ( "typeInSearchField" , "String > > " + content . substring ( 0 , length ) + " < < was typed in string field" , true ) ; }
public Iterable < E > read ( Configuration configuration ) throws IOException { // TODO : what to do with Configuration ? create new view ? return view . newReader ( ) ; // TODO : who calls close ? }
public void setRefreshInterval ( final long refreshInterval ) { this . refreshInterval = refreshInterval ; }
public void onNewImageFromCamera ( ) { interactor . createFile ( this , CREATE_FILE_TAKE_PHOTO , null ) ; }
public void testEquals ( ) throws Exception { FixedWidthConfiguration conf1 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , true ) ; FixedWidthConfiguration conf2 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , true ) ; assertEquals ( conf1 , conf2 ) ; FixedWidthConfiguration conf3 = new FixedWidthConfiguration ( 1 , "UTF8" , 10 , false ) ; assertFalse ( conf1 . equals ( conf3 ) ) ; }
public void showLinkPreview ( PageTitle title , int entrySource ) { final String linkPreviewFragmentTag = "link_preview_dialog" ; if ( getSupportFragmentManager ( ) . findFragmentByTag ( linkPreviewFragmentTag ) == null ) { LinkPreviewDialog linkPreview = LinkPreviewDialog . newInstance ( title , entrySource ) ; linkPreview . show ( getSupportFragmentManager ( ) , linkPreviewFragmentTag ) ; } }
public void clear ( ) { if ( loader instanceof CacheStore ) { try { ( ( CacheStore ) loader ) . clear ( ) ; } catch ( CacheLoaderException e ) { throw newCacheLoaderException ( e ) ; } } }
public ApplicabilityIds getApplicabilityIds ( ) { return null ; }
private MediaType tryNarrowMediaType ( MediaType negotiated , AdvancedCache < ? , ? > cache ) { if ( ! negotiated . matchesAll ( ) ) return negotiated ; MediaType storageMediaType = cache . getValueDataConversion ( ) . getStorageMediaType ( ) ; if ( storageMediaType == null ) return negotiated ; if ( storageMediaType . equals ( MediaType . APPLICATION_OBJECT ) ) return TEXT_PLAIN ; if ( storageMediaType . match ( MediaType . APPLICATION_PROTOSTREAM ) ) return APPLICATION_JSON ; return negotiated ; }
protected void addJAROption ( Composite comp ) { fJarButton = new Button ( comp , SWT . CHECK ) ; fJarButton . setText ( getJarButtonText ( ) ) ; }
public String getTurnDescription ( Translation tr ) { if ( rawName ) return getName ( ) ; return tr . tr ( "finish" ) ; }
private void fetchPresenterWidgetTemplate ( PresenterOptions presenterOptions ) throws Exception { PresenterWidgetOptions presenterWidgetOptions = new PresenterWidgetOptions ( ) ; presenterWidgetOptions . setSingleton ( presenterConfigModel . isUseSingleton ( ) ) ; createdPresenterWidgetTemplates = CreatePresenterWidget . run ( presenterOptions , presenterWidgetOptions , true ) ; }
public String toString ( ) { StringWriter writer = new StringWriter ( ) ; try { new ObjectMapper ( ) . writeValue ( writer , graph ) ; } catch ( Exception e ) { log . error ( "Error while constructing new ObjectMapper" , e ) ; } return writer . toString ( ) ; }
public TopicStatus ( String topic , ConnectorTaskId task , long discoverTimestamp ) { this ( topic , task . connector ( ) , task . task ( ) , discoverTimestamp ) ; }
private static OGCGeometry readGeometry ( BasicSliceInput input , Slice inputSlice , GeometryType type , int length ) { switch ( type ) { case POINT : return readPoint ( input ) ; case MULTI_POINT : case LINE_STRING : case MULTI_LINE_STRING : case POLYGON : case MULTI_POLYGON : return readSimpleGeometry ( input , inputSlice , type , length ) ; case GEOMETRY_COLLECTION : return readGeometryCollection ( input , inputSlice ) ; case ENVELOPE : return createFromEsriGeometry ( readEnvelope ( input ) , false ) ; default : throw new IllegalArgumentException ( "Unexpected type : " + type ) ; } }
public void close ( ) { sketch = null ; values = null ; }
public boolean shouldSpill ( ) { // Expected new batch size like the current , plus the Hash Values vector ( 4 bytes per HV ) long batchSize = ( batchMemoryManager . getRecordBatchSizer ( RIGHT_INDEX ) . getRowAllocWidth ( ) + 4 ) * recordsPerBatch ; long reserveForOutgoing = batchMemoryManager . getOutputBatchSize ( ) ; long memoryAvailableNow = allocator . getLimit ( ) - allocator . getAllocatedMemory ( ) ; boolean needsSpill = minBatchesInAvailableMemory * batchSize > memoryAvailableNow - reserveForOutgoing ; if ( needsSpill ) { logger . debug ( "should spill now - batch size { } , mem avail { } , reserved for outgoing { } " , batchSize , memoryAvailableNow , reserveForOutgoing ) ; } return needsSpill ; // go spill if too little memory is available }
public void close ( ) { try { Await . result ( beam . close ( ) ) ; } catch ( Exception e ) { LOG . error ( "Error while closing Druid beam client" , e ) ; } }
private boolean isPlatformKeybindingBug517068Fixed ( ) { Bundle bundle = Platform . getBundle ( "org . eclipse . e4 . ui . bindings" ) ; // $NON - NLS - 1$ Version currentVersion = bundle . getVersion ( ) ; Version fixVersion = new Version ( 0 , 12 , 1 ) ; return currentVersion . compareTo ( fixVersion ) >= 0 ; }
public static boolean isPluginPrefixAndArtifactIdEquals ( Plugin p1 , Plugin p2 ) { return StringUtils . equals ( p1 . getArtifactId ( ) , p2 . getArtifactId ( ) ) && StringUtils . equals ( p1 . getPrefix ( ) , p2 . getPrefix ( ) ) ; }
public < VT > MessageOut < T > withParameter ( ParameterType type , VT value ) { List < Object > newParameters = new ArrayList < > ( parameters . size ( ) + 2 ) ; newParameters . addAll ( parameters ) ; newParameters . add ( type ) ; newParameters . add ( value ) ; return new MessageOut < T > ( verb , payload , serializer , newParameters ) ; }
private boolean validateTimeRange ( ) { boolean isEmpty = fStartTimeRangeText . getText ( ) . isEmpty ( ) || fEndTimeRangeText . getText ( ) . isEmpty ( ) ; return ! isEmpty && parseTimeRange ( ) && fStartTimestamp . compareTo ( fEndTimestamp ) < 0 ; }
public static String getFileNamePath ( final String filename , final FieldbookProperties fieldbookProperties ) { final StringBuilder filenameBuilder = new StringBuilder ( ) ; filenameBuilder . append ( fieldbookProperties . getUploadDirectory ( ) ) ; filenameBuilder . append ( File . separator ) ; filenameBuilder . append ( SettingsUtil . cleanSheetAndFileName ( filename ) ) ; final String filenamePath = filenameBuilder . toString ( ) ; return filenamePath ; }
protected void changeStorageDomainStatusInTransaction ( final StoragePoolIsoMap map , final StorageDomainStatus status ) { executeInNewTransaction ( new TransactionMethod < StoragePoolIsoMap > ( ) { @Override public StoragePoolIsoMap runInTransaction ( ) { CompensationContext context = getCompensationContext ( ) ; context . snapshotEntityStatus ( map , map . getstatus ( ) ) ; updateStatus ( map , status ) ; getCompensationContext ( ) . stateChanged ( ) ; return null ; } } ) ; }
public void visitMemberSelectExpression ( MemberSelectExpressionTree tree ) { if ( tree . expression ( ) . is ( Tree . Kind . IDENTIFIER ) ) { IdentifierTree identifier = ( IdentifierTree ) tree . expression ( ) ; Symbol owner = identifier . symbol ( ) . owner ( ) ; if ( owner != null && owner . isMethodSymbol ( ) ) { // No need to investigate selection on local symbols return ; } } if ( tree . expression ( ) . symbolType ( ) . isSubtypeOf ( "java . lang . Class" ) ) { // No need to investigate selection on a Class object return ; } super . visitMemberSelectExpression ( tree ) ; }
public V computeIfPresent ( K key , BiFunction < ? super K , ? super V , ? extends V > remappingFunction ) { checkNotNull ( key , NULL_KEY_IS_NOT_ALLOWED ) ; checkNotNull ( key , NULL_BIFUNCTION_IS_NOT_ALLOWED ) ; return computeIfPresentLocally ( key , remappingFunction ) ; }
public void sendUnanchored ( Task task , String stream , List < Object > values , ExecutorTransfer transfer ) { Tuple tuple = task . getTuple ( stream , values ) ; List < Integer > tasks = task . getOutgoingTasks ( stream , values ) ; for ( Integer t : tasks ) { transfer . transfer ( t , tuple ) ; } }
AffinityResourceDefinition ( PathElement path ) { super ( path , UndertowExtension . getResolver ( Constants . HANDLER , Constants . AFFINITY , path . getValue ( ) ) ) ; }
@Override public E poll ( ) { lock . lock ( ) ; try { if ( queue . isEmpty ( ) ) { return null ; } E peek = queue . peek ( ) ; queue . remove ( ) ; return peek ; } catch ( IOException e ) { throw QueueFile . < Error > getSneakyThrowable ( e ) ; } finally { lock . unlock ( ) ; } }
public void testTimeout ( ) throws SystemException , RemoteException { log . trace ( "Method stateful #testTimeout called" ) ; Transaction txn ; txn = tm . getTransaction ( ) ; TxTestUtil . enlistTestXAResource ( txn ) ; TxTestUtil . enlistTestXAResource ( txn ) ; try { TxTestUtil . waitForTimeout ( tm ) ; } catch ( InterruptedException ie ) { Thread . currentThread ( ) . interrupt ( ) ; throw new RemoteException ( "Interupted during waiting for transaction timeout" , ie ) ; } }
private UnstagedComparator ( boolean sortAlphabetically ) { this . alphabeticallySort = sortAlphabetically ; }
public boolean shouldUseNativeIO ( VM vm , DiskImage diskImage , VmDevice device ) { StorageType storageType = diskImage . getStorageTypes ( ) . get ( 0 ) ; String diskType = getDiskType ( vm , diskImage , device ) ; return ( ! "file" . equals ( diskType ) || ( storageType == StorageType . GLUSTERFS && FeatureSupported . useNativeIOForGluster ( vm . getCompatibilityVersion ( ) ) ) ) && device . getSnapshotId ( ) == null ; // marked as transient disk ( file type ) and uses cache when snapshotId is not null // so native io should not be used }
public < T > T execute ( Request < T > request , IProgressMonitor monitor ) throws IOException , GerritException { return execute ( request , ! isAnonymous ( ) , monitor ) ; }
public HighlightingInlineHyperlink ( final String text , final String token , final String toHighlight ) { super ( text , token ) ; this . toHighlight = toHighlight ; highlight ( text , toHighlight ) ; }
protected String serializeInstallCmd ( Collection < String > packages ) { if ( packages . isEmpty ( ) ) { return "" ; } else { return CommandInfo . CMD_INSTALL + " " + String . join ( " " , packages ) ; } }
private List roundtrip ( List vals , Map conf ) throws IOException { return deserialize ( serialize ( vals , conf ) , conf ) ; }
public GlobalDirectoryResourceDefinition ( ) { super ( new SimpleResourceDefinition . Parameters ( PathElement . pathElement ( EESubsystemModel . GLOBAL_DIRECTORY ) , EeExtension . getResourceDescriptionResolver ( EESubsystemModel . GLOBAL_DIRECTORY ) ) . setAddHandler ( GlobalDirectoryResourceDefinition . ADD ) . setRemoveHandler ( GlobalDirectoryResourceDefinition . REMOVE ) . setCapabilities ( EE_GLOBAL_DIRECTORY_CAPABILITY ) ) ; }
public LockRangeDialog ( Shell parentShell , TmfXYChartViewer chartViewer ) { super ( parentShell ) ; fChartViewer = chartViewer ; }
public String toStringShort ( ) { return MoreObjects . toStringHelper ( this ) . add ( "ClientType" , getStringFromOptional ( mClientType ) ) . add ( "ClientHostname" , mLocalHostName ) . add ( "ServerAddress" , mServerAddress ) . add ( "ChannelId" , mChannelId ) . omitNullValues ( ) . toString ( ) ; }
public CompilationUnit ( ) { this ( null , null , new NodeList < > ( ) , new NodeList < > ( ) , null ) ; }
public void startBucket ( String bucketKey ) { BulkCommand command = getCurrentCommand ( ) ; description = command . getParam ( PARAM_DESC ) ; }
protected void executeQueryCommand ( ) { Provider < ? > provider = getDbFacade ( ) . getProviderDao ( ) . get ( getParameters ( ) . getId ( ) ) ; NetworkProviderProxy client = getProviderProxyFactory ( ) . create ( provider ) ; getQueryReturnValue ( ) . setReturnValue ( client . getAll ( ) ) ; }
public void testCrashlyticsUninitializedOnAnonymousReportDisabled ( ) { editor . putBoolean ( SettingsActivity . SETTINGS_CRASH_REPORTS , false ) ; editor . commit ( ) ; assertFalse ( CrashReporter . initialize ( context ) ) ; }
protected boolean uniqueInterfaceName ( List < VmNetworkInterface > interfaces ) { return VmHandler . IsNotDuplicateInterfaceName ( interfaces , getInterfaceName ( ) , getReturnValue ( ) . getCanDoActionMessages ( ) ) ; }
private CompletableFuture < CorfuInterClusterReplicationServerNode > startDiscoveryService ( ServerContext serverContext ) { log . info ( "Start Discovery Service . " ) ; CompletableFuture < CorfuInterClusterReplicationServerNode > discoveryServiceCallback = new CompletableFuture < > ( ) ; this . clusterManagerAdapter = buildClusterManagerAdapter ( serverContext . getPluginConfigFilePath ( ) ) ; // Start LogReplicationDiscovery Service , responsible for // acquiring lock , retrieving Site Manager Info and processing this info // so this node is initialized as Source ( sender ) or Sink ( receiver ) replicationDiscoveryService = new CorfuReplicationDiscoveryService ( serverContext , clusterManagerAdapter , discoveryServiceCallback ) ; replicationDiscoveryService . start ( ) ; return discoveryServiceCallback ; }
public void testEndOfFreeBlockIsUsedIfThePreviousBlockIsLargerThanTheNextBlock ( ) throws Exception { long prevChunk = mallocChunks ( 4 ) ; long middleChunk = mallocChunks ( 4 ) ; long nextChunk = mallocChunks ( 2 ) ; free ( middleChunk ) ; // This should be taken from the end of "middleChunk" , since that's closer to the smaller neighbor long smallChunk1 = mallocChunks ( 1 ) ; // This should also be taken from the end of the remaining portion of "middleChunk" long smallChunk2 = mallocChunks ( 1 ) ; assertTrue ( "The small chunks should have been allocated from space after 'prevChunk'" , prevChunk < smallChunk2 ) ; assertTrue ( "The small chunks should have been allocated from the end of the free block" , smallChunk2 < smallChunk1 ) ; assertTrue ( "The small chunks should have been allocated from space before 'nextChunk'" , smallChunk1 < nextChunk ) ; }
public void shouldSetTempImagesPathAsCompleteDirectory ( ) { URI path = URI . create ( " / pages / newImagesTemp / " ) ; ConfigCore . setImagesPath ( URI . create ( " / pages / newImagesTemp / " ) ) ; assertEquals ( "Temp images path was set incorrectly ! " , path , URI . create ( " / pages / newImagesTemp / " ) ) ; }
public MetadataHashAggPOP ( @JsonProperty ( "child" ) PhysicalOperator child , @JsonProperty ( "context" ) MetadataAggregateContext context , @JsonProperty ( "phase" ) OperatorPhase phase ) { super ( child , phase , context . groupByExpressions ( ) , Collections . emptyList ( ) , 1 . 0F ) ; Preconditions . checkArgument ( context . createNewAggregations ( ) , "Hash aggregate for metadata collecting should be used only for creating new aggregations . " ) ; this . context = context ; this . phase = phase ; }
private void saveProcess ( Process process ) { try { serviceManager . getProcessService ( ) . save ( process ) ; } catch ( DataException e ) { logger . error ( KITODO_SCRIPT_FIELD + "Error while saving process : " + process . getTitle ( ) , e ) ; Helper . setFehlerMeldung ( KITODO_SCRIPT_FIELD , "Error while saving process : " + process . getTitle ( ) , e ) ; } }
private static String toHexString ( QuantileDigest qdigest ) { return new SqlVarbinary ( qdigest . serialize ( ) . getBytes ( ) ) . toString ( ) . replaceAll ( "\\s + " , " " ) ; }
private String getHeader ( ) { return selectedPageHeader . getText ( ) ; }
public void onImportUserFromLDAP ( LDAPObject ldapUser , UserModel user , RealmModel realm , boolean isCreate ) { String userModelAttrName = getUserModelAttribute ( ) ; String attributeValue = getAttributeValue ( ) ; Property < Object > userModelProperty = userModelProperties . get ( userModelAttrName . toLowerCase ( ) ) ; if ( userModelProperty != null ) { setPropertyOnUserModel ( userModelProperty , user , attributeValue ) ; } else { user . setAttribute ( userModelAttrName , Arrays . asList ( attributeValue ) ) ; } }
public boolean delete ( ProjectName projectName ) { return callWithContext ( ( ) - > { final boolean result = doDelete ( projectName ) ; LOG . info ( "Project deleted : " + projectName ) ; return result ; } ) ; }
public static void startServerInstance ( File dataDir , ServerCnxnFactory factory , String hostPort ) throws IOException , InterruptedException { final int port = getPort ( hostPort ) ; LOG . info ( "STARTING server instance 127 . 0 . 0 . 1 : { } " , port ) ; ZooKeeperServer zks = new ZooKeeperServer ( dataDir , dataDir , 3000 ) ; factory . startup ( zks ) ; Assert . assertTrue ( "waiting for server up" , ClientBase . waitForServerUp ( "127 . 0 . 0 . 1 : " + port , CONNECTION_TIMEOUT , factory . isSecure ( ) ) ) ; }
public void shouldShowAllMusicsAsHTTP ( ) { MockHttpResult mockHttpResult = new MockHttpResult ( ) ; controller = new MusicController ( dao , userInfo , mockHttpResult , validator , musics ) ; when ( dao . listAll ( ) ) . thenReturn ( Arrays . asList ( music ) ) ; controller . showAllMusicsAsHTTP ( ) ; assertThat ( mockHttpResult . getBody ( ) , is ( " < p class = \"content\" > " + Arrays . asList ( music ) . toString ( ) + " </ p > " ) ) ; }
public AttributeValueSearch ( IAttributeType attributeType , String attributeValue ) { Conditions . checkNotNull ( attributeType , "attributeType" ) ; Conditions . checkNotNullOrEmpty ( attributeValue , "attributeValue" ) ; this . attributeType = attributeType ; this . attributeValue = attributeValue ; }
public ListenerContainerIdleEvent ( Object source , long idleTime , @Nullable String id , String . . . queueNames ) { super ( source ) ; this . idleTime = idleTime ; this . listenerId = id ; this . queueNames = Arrays . asList ( queueNames ) ; }
public static XARecoveryModule getRegisteredXARecoveryModule ( ) { if ( registeredXARecoveryModule == null ) { RecoveryManager recMan = RecoveryManager . manager ( ) ; Vector recoveryModules = recMan . getModules ( ) ; if ( recoveryModules != null ) { Enumeration modules = recoveryModules . elements ( ) ; while ( modules . hasMoreElements ( ) ) { RecoveryModule m = ( RecoveryModule ) modules . nextElement ( ) ; if ( m instanceof XARecoveryModule ) { registeredXARecoveryModule = ( XARecoveryModule ) m ; break ; } } } } return registeredXARecoveryModule ; }
public String getUrl ( ) { return url ; }
public void testBoundarySignalProcessInstance ( ) throws Exception { Long processInstanceId = processClient . startProcess ( CONTAINER_ID , PROCESS_ID_BOUNDARY_SIGNAL_PROCESS ) ; assertNotNull ( processInstanceId ) ; assertTrue ( processInstanceId . longValue ( ) > 0 ) ; try { checkAvailableBoundarySignals ( CONTAINER_ID , processInstanceId ) ; } finally { processClient . abortProcessInstance ( CONTAINER_ID , processInstanceId ) ; } }
private void validateAppConfig ( String fileName ) throws Exception { String appsDir = getAppsDirectory ( ) ; if ( appsDir . equalsIgnoreCase ( "apps" ) && ! isAppConfiguredInSourceServerXml ( fileName ) ) { // add application configuration applicationXml . createWebApplicationElement ( fileName ) ; } else if ( appsDir . equalsIgnoreCase ( "dropins" ) && isAppConfiguredInSourceServerXml ( fileName ) ) throw new MojoExecutionException ( messages . getString ( "error . install . app . dropins . directory" ) ) ; }
private static RequestContextDataHolder getRequestContext ( Context ctx ) { return ctx . getOrDefault ( REQUEST_CONTEXT_DATA_HOLDER , null ) ; }
public long getNumberOfImagesInStorageDomain ( Guid storageDomainId ) { return getCallsHandler ( ) . executeRead ( "GetNumberOfImagesInStorageDomain" , getLongMapper ( ) , getCustomMapSqlParameterSource ( ) . addValue ( "storage_domain_id" , storageDomainId ) ) ; }
public TestObjectAsync ( ) { try { Thread . sleep ( 1 ) ; Thread . sleep ( 1 ) ; counter = 1 ; } catch ( InterruptedException ie ) { throw new RuntimeException ( ie ) ; } }
private static boolean isOptionalProperty ( Class beanClass , PropertyDescriptor beanProp ) { if ( beanProp . getReadMethod ( ) . getAnnotationsByType ( Optional . class ) . length > 0 ) { return true ; } Field field = getField ( beanClass , beanProp . getName ( ) ) ; return field != null && field . getAnnotationsByType ( Optional . class ) . length > 0 ; }
int getImageselector ( ) { return imageSelectorIndex ; }
public InputStream getInputStream ( FileHeader entry ) throws IOException { if ( entry == null ) { return null ; } InputStream inputStream = getEntryData ( entry ) . getInputStream ( ) ; if ( entry . getMethod ( ) == ZipEntry . DEFLATED ) { inputStream = new ZipInflaterInputStream ( inputStream , ( int ) entry . getSize ( ) ) ; } return inputStream ; }
private org . eclipse . swt . graphics . Image createImage ( ) { org . eclipse . swt . graphics . Image newImage ; RenderedImage image = renderManager . getImage ( ) ; if ( image != null ) newImage = AWTSWTImageUtils . createSWTImage ( image , false ) ; else { newImage = new Image ( getDisplay ( ) , getWidth ( ) , getHeight ( ) ) ; } return newImage ; }
public VirtualMachine getCurrentMachineBuild ( ITmfEvent event ) { VirtualMachine machine = innerGetCurrentMachine ( event ) ; if ( machine == null ) { synchronized ( fStateSystem ) { String hostId = event . getTrace ( ) . getHostId ( ) ; machine = createMachine ( fStateSystem , event . getTimestamp ( ) . toNanos ( ) , hostId , String . valueOf ( event . getTrace ( ) . getName ( ) ) ) ; fKnownMachines . put ( hostId , machine ) ; } } return machine ; }
public static Predicate < Expression > isInferenceCandidate ( ) { return expression - > { expression = normalizeInPredicateToEquality ( expression ) ; if ( expression instanceof ComparisonExpression && isDeterministic ( expression ) && ! mayReturnNullOnNonNullInput ( expression ) ) { ComparisonExpression comparison = ( ComparisonExpression ) expression ; if ( comparison . getType ( ) == ComparisonExpressionType . EQUAL ) { // We should only consider equalities that have distinct left and right components return ! comparison . getLeft ( ) . equals ( comparison . getRight ( ) ) ; } } return false ; } ; }
private void updateGroup ( final TupleBatch tb , final int row , final Object [ ] curAggStates ) throws DbException { for ( int agg = 0 ; agg < aggregators . length ; ++ agg ) { if ( ! ( aggregators [ agg ] instanceof StatefulUserDefinedAggregator ) ) { aggregators [ agg ] . addRow ( tb , row , curAggStates [ agg ] ) ; } } }
protected void update ( float delta ) { int lengthInterpretation = 0 ; try { if ( length != null ) { lengthInterpretation = length . interpretInteger ( sprite ) ; } } catch ( InterpretationException interpretationException ) { lengthInterpretation = 0 ; Log . d ( getClass ( ) . getSimpleName ( ) , "Formula interpretation for this specific Brick failed . " , interpretationException ) ; } this . sprite . runningStitch . activateStitching ( sprite , new SimpleRunningStitch ( sprite , lengthInterpretation ) ) ; }
protected void processSpanImpl ( Span span , Map < String , String [ ] > servletRequestParameters ) { long sum = 0 ; for ( String weaselParameterToSum : weaselParametersToSum ) { final Long timing = parsedLongOrNull ( getParameterValueOrNull ( weaselParameterToSum , servletRequestParameters ) ) ; if ( timing == null ) { return ; } else { sum += timing ; } } span . setTag ( TIMING_RESOURCE , sum ) ; }
private void close ( Path path ) throws IOException { Path directoryWhereGeneratedArtifactsWasPlaced = path . getParent ( ) ; try ( Stream < Path > s = Files . list ( directoryWhereGeneratedArtifactsWasPlaced ) ) { s . filter ( p - > ! Files . isDirectory ( p ) ) . forEach ( ThrowingConsumer . unchecked ( Files : : delete ) ) ; } }
public void hashcodeVerifyEqualsContract ( ) { EqualsVerifier . forClass ( MessageReference . class ) . verify ( ) ; }
public HttpRequest setUri ( String uri ) { this . uri = ObjectUtil . checkNotNull ( uri , "uri" ) ; return this ; }
ServiceKeyAuthentication ( @Provider Supplier < Credentials > creds ) { this . creds = creds ; }
protected int countChildrenOf ( IResource checkResource ) throws CoreException { if ( checkResource . getType ( ) == IResource . FILE ) { return 1 ; } int count = 0 ; if ( checkResource . isAccessible ( ) ) { for ( IResource child : ( ( IContainer ) checkResource ) . members ( ) ) { count += countChildrenOf ( child ) ; } } return count ; }
public String getAppFolderToMonitor ( ) { return folder ; }
private static void count ( Object inputBase , long inputAddress , int inputSize , int [ ] counts ) { long input = inputAddress ; Arrays . fill ( counts , 0 ) ; for ( int i = 0 ; i < inputSize ; i ++ ) { int symbol = UNSAFE . getByte ( inputBase , input ) & 0xFF ; input ++ ; counts [ symbol ] ++ ; } }
public void submit ( List < LuceneWork > workList , IndexingMonitor monitor ) { Changeset changeset = new Changeset ( workList , Thread . currentThread ( ) , monitor ) ; transferQueue . add ( changeset ) ; wakeUpConsumer ( ) ; boolean interrupted = false ; while ( ! changeset . isProcessed ( ) && ! interrupted ) { LockSupport . park ( ) ; if ( Thread . interrupted ( ) ) { interrupted = true ; } } if ( interrupted ) { Thread . currentThread ( ) . interrupt ( ) ; } }
public void setHttpService ( HttpService httpService ) { logger . debug ( "setHttpService called" ) ; this . httpService = httpService ; }
public boolean isInternal ( ) { return getParentNode ( ) . filter ( parent - > parent instanceof Name ) . isPresent ( ) ; }
private void logStart ( ) { log ( 3 , "Running test " + m_testName + " on " + m_classMap . size ( ) + " " + " classes , " + " included groups : [ " + Strings . valueOf ( m_xmlMethodSelector . getIncludedGroups ( ) ) + " ] excluded groups : [ " + Strings . valueOf ( m_xmlMethodSelector . getExcludedGroups ( ) ) + " ] " ) ; if ( getVerbose ( ) >= 3 ) { for ( ITestClass tc : m_classMap . values ( ) ) { ( ( TestClass ) tc ) . dump ( ) ; } } }
public NutchJob ( Configuration conf ) { super ( conf , NutchJob . class ) ; }
private void loadMachineUUID ( ) { EnvironmentInfo environment = environmentTracker . getService ( ) ; if ( environment != null ) { if ( environment . getProperty ( PROP_UUID ) != null ) return ; } String uuid = loadExistingUUID ( ) ; if ( uuid == null ) { uuid = UUID . randomUUID ( ) . toString ( ) ; saveUUID ( uuid ) ; } if ( environment != null ) { environment . setProperty ( PROP_UUID , uuid ) ; } else { System . setProperty ( PROP_UUID , uuid ) ; } }
public boolean retry ( ITestResult result ) { if ( currentTry < maxreruntimes ) { ++ currentTry ; return true ; } return false ; }
public Statistics < T > visitIntConstant ( ValueExpressions . IntExpression expr , Void value ) throws RuntimeException { return getStatistics ( expr . getInt ( ) ) ; }
public ServiceDate getEnd ( ) { return end ; }
public boolean isLoggedIn ( ) { return token != null && user != null ; }
public void setBuildStatus ( String buildStatus ) { try { this . buildStatus = StashBuildState . valueOf ( buildStatus ) ; } catch ( Exception e ) { // ignore unknown or null values } }
public void preInit ( FMLPreInitializationEvent evt ) { RegistryHelper . useOtherModConfigFor ( MODID , BCCore . MODID ) ; BCSiliconConfig . preInit ( ) ; BCSiliconItems . preInit ( ) ; BCSiliconBlocks . preInit ( ) ; NetworkRegistry . INSTANCE . registerGuiHandler ( INSTANCE , BCSiliconProxy . getProxy ( ) ) ; BCSiliconProxy . getProxy ( ) . fmlPreInit ( ) ; }
public Hash ( HashType type ) { this . type = type ; digest = type . get ( ) ; }
private boolean validateExternalVnicProfileMapping ( ) { final ValidationResult validationResult = externalVnicProfileMappingValidator . validateExternalVnicProfileMapping ( getParameters ( ) . getExternalVnicProfileMappings ( ) , getParameters ( ) . getClusterId ( ) ) ; return validate ( validationResult ) ; }
public void serDeTest ( ) { doSerDeTest ( null ) ; doSerDeTest ( Collections . emptyList ( ) ) ; doSerDeTest ( Arrays . asList ( "a" , "b" , " / signedId / abcdef" ) ) ; }
protected void buildVmVideoCards ( ) { createInfo . add ( VdsProperties . display , vm . getdisplay_type ( ) . toString ( ) ) ; // vnc , qxl createInfo . add ( VdsProperties . num_of_monitors , String . valueOf ( vm . getnum_of_monitors ( ) ) ) ; }
private String encode ( String segment ) { return URL . encodeQueryString ( type . replacePathSeparator ( segment ) ) ; }
public List < String > getStrongDependencies ( ) { return Arrays . asList ( A_U_D_preferredMail , A_U_D_ISMail , A_U_D_publicAliasMails , A_U_D_privateAliasMails , A_U_D_o365EmailAddressesMU ) ; }
boolean isCacheable ( ) { return false ; }
static KeyManagerFactory buildKeyManagerFactory ( File certChainFile , String keyAlgorithm , File keyFile , String keyPassword , KeyManagerFactory kmf , String keyStore ) throws KeyStoreException , NoSuchAlgorithmException , NoSuchPaddingException , InvalidKeySpecException , InvalidAlgorithmParameterException , IOException , CertificateException , KeyException , UnrecoverableKeyException { return buildKeyManagerFactory ( toX509Certificates ( certChainFile ) , keyAlgorithm , toPrivateKey ( keyFile , keyPassword ) , keyPassword , kmf , keyStore ) ; }
public void testWrongPortConnection ( ) throws Exception { BlockingChannel channel = new SSLBlockingChannel ( hostName , sslPort + 1 , new MetricRegistry ( ) , 10000 , 10000 , 10000 , 2000 , sslSocketFactory , clientSSLConfig ) ; try { // send request channel . connect ( ) ; fail ( "should have thrown ! " ) ; } catch ( IOException e ) { } }
public void notifyParameterChanged ( String name ) { synchronized ( fParameters ) { if ( ! fParameterNames . contains ( name ) ) { throw new RuntimeException ( String . format ( Messages . TmfAbstractAnalysisModule_InvalidParameter , name , getName ( ) ) ) ; } Object oldValue = fParameters . get ( name ) ; Object value = getParameter ( name ) ; if ( ( value != null ) && ! ( value . equals ( oldValue ) ) ) { parameterChanged ( name ) ; } } }
public void testUnrecognizedSpec ( ) { when ( authentication . getAttributes ( ) . get ( any ( String . class ) ) ) . thenReturn ( "strong_two_factor" ) ; spec . setAuthenticationMethod ( "weak_two_factor" ) ; spec . isSatisfiedBy ( this . assertion ) ; }
private void updateBundleConfig ( Connection connection , Bundle bundle ) throws SQLException { final String sql = "UPDATE portti_view_bundle_seq SET config = ? WHERE bundle_id = ? AND view_id = ? " ; try ( final PreparedStatement statement = connection . prepareStatement ( sql ) ) { statement . setString ( 1 , bundle . config ) ; statement . setLong ( 2 , bundle . bundle ) ; statement . setLong ( 3 , bundle . view ) ; statement . execute ( ) ; } }
protected int getOverProvisioningFactor ( ) { return Integer . parseInt ( Framework . getProperty ( WORKMANAGER_OVERPROVISIONING_PROP , DEFAULT_WORKMANAGER_OVERPROVISIONING ) ) ; }
protected void onDestroy ( ) { webView . setDownloadListener ( null ) ; super . onDestroy ( ) ; }
public void closeTest ( ) { // request is keep - alive by default . HttpRequest request = createRequestWithHeaders ( HttpMethod . GET , TestingUri . Close . toString ( ) ) ; EmbeddedChannel channel = createEmbeddedChannel ( ) ; channel . writeInbound ( request ) ; // drain the channel of content . while ( channel . readOutbound ( ) != null ) { } assertFalse ( "Channel should be closed" , channel . isOpen ( ) ) ; }
public String getRuleLogsForVms ( ) { final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( "get_rule_logs_for_vms" ) ; final OutputInterpreter . OneLineParser parser = new OutputInterpreter . OneLineParser ( ) ; final String result = cmd . execute ( parser ) ; if ( result == null ) { return parser . getLine ( ) ; } return null ; }
private void addReporter ( Class < ? extends IReporter > r ) { if ( ! m_reporters . containsKey ( r ) ) { m_reporters . put ( r , ClassHelper . newInstance ( r ) ) ; } }
public void addFunctions ( List < ? extends SqlFunction > functions ) { addFunctions ( TEMP_DEFAULT_CATALOG , functions ) ; }
public synchronized void inputChanged ( Viewer viewer , Object oldInput , Object newInput ) { if ( oldInput != newInput && newInput != null ) { ImportTraceContentProvider input = ( ImportTraceContentProvider ) newInput ; clearCandidates ( ) ; fTraceTypes . putAll ( input . fTraceTypes ) ; fTraceFiles . putAll ( fTraceFiles ) ; } }
protected boolean isPowerManagementLegal ( ) { return IsPowerManagementLegal ( getParameters ( ) . getVdsStaticData ( ) , getVdsGroup ( ) . getcompatibility_version ( ) . toString ( ) ) ; }
public void info ( String message ) { info . add ( message ) ; }
public static File makeNumericDimFile ( File dir , String dimension , ByteOrder order ) { return new File ( dir , StringUtils . format ( "numeric_dim_ % s_ % s . drd" , dimension , order ) ) ; }
private AuditLogableBase createAuditLog ( final VmNic iface ) { AuditLogableBase logable = new AuditLogableBase ( ) ; logable . addCustomValue ( "MACAddr" , iface . getMacAddress ( ) ) ; logable . addCustomValue ( "IfaceName" , iface . getName ( ) ) ; return logable ; }
public boolean equals ( VirtualValue other ) { if ( other == null || other . getClass ( ) != MapValue . class ) { return false ; } MapValue that = ( MapValue ) other ; return map . equals ( that . map ) ; }
private void processSingleClusterChanges ( ManageNetworkClustersParameters param ) { final List < ActionParametersBase > setupNetworksParams = new ArrayList < > ( createNetworkClustersToSetupNetworksParametersTransformer ( ) . transform ( param . getAttachments ( ) , param . getDetachments ( ) , param . getUpdates ( ) ) ) ; HostSetupNetworksParametersBuilder . updateParametersSequencing ( setupNetworksParams ) ; setupNetworksParams . forEach ( this : : withRootCommandInfo ) ; runInternalMultipleActions ( ActionType . PersistentHostSetupNetworks , setupNetworksParams ) ; }
private static void setFixedLengthStreamingMode ( HttpURLConnection connection , long length ) { try { // Not caching method as invocation is literally sending > 2GB , which means reflection isn't a limiter ! HttpURLConnection . class . getMethod ( "setFixedLengthStreamingMode" , long . class ) . invoke ( connection , length ) ; } catch ( Exception e ) { throw new IllegalArgumentException ( "Cannot transfer 2 GB or larger chunks due to JDK 1 . 6 limitations . " + " Use chunked encoding or multi - part upload , if possible , or use a different http driver . " + " For more information : http :/ / bugs . sun . com / bugdatabase / view_bug . do ? bug_id = 6755625" ) ; } }
protected String getErrorMessage ( ClientResponse clientResponse ) { String response = clientResponse . getEntity ( String . class ) ; try { // Try to see if the server responded with an error message from the API ApiError error = getJsonParser ( ) . readValue ( response , ApiError . class ) ; return error . getMessage ( ) ; } catch ( IOException e ) { // If not , inform the user of the underlying response ( e . g . if server threw NPE or whatever ) int statusCode = clientResponse . getStatus ( ) ; ClientResponse . Status status = clientResponse . getClientResponseStatus ( ) ; String responseText = clientResponse . getEntity ( String . class ) ; return "Server returned " + status + " ( " + statusCode + " ) ; " + responseText ; } }
public int hashCode ( ) { int bits = 1 ; bits = 31 * bits + this . type . ordinal ( ) ; bits = 31 * bits + getToX ( ) ; bits = 31 * bits + getToY ( ) ; bits = 31 * bits + getToZ ( ) ; bits = 31 * bits + getFromX ( ) ; bits = 31 * bits + getFromY ( ) ; bits = 31 * bits + getFromZ ( ) ; return bits ^ ( bits > > 31 ) ; }
public static AccountCollection all ( Map < String , Object > params ) throws AuthenticationException , InvalidRequestException , APIConnectionException , CardException , APIException { return all ( params , ( RequestOptions ) null ) ; }
public void onSaveClick ( ) { editView . setSaveState ( true ) ; if ( client == null ) { client = new WikidataDescriptionEditDataClient ( ) ; } client . request ( pageTitle , editView . getDescription ( ) , new WikidataDescriptionEditDataClient . Callback ( ) { @Override public void success ( ) { editView . setSaveState ( false ) ; L . i ( "WD description edit successful" ) ; // TODO : go to success fragment } @Override public void failure ( @NonNull Throwable caught ) { editView . setSaveState ( false ) ; L . e ( "WD description edit failed : " , caught ) ; // TODO : go to failure fragment } } ) ; }
protected ResourceSet loadResource ( IEditorInput editorInput ) { final URI resourceURI = EditUIUtil . getURI ( editorInput , null ) ; return ResourceSetHelpers . loadResourceSetWithProxies ( resourceURI , getCommandStack ( ) ) ; }
FileReftableStack . CompactionStats getCompactionStats ( ) { return reftableStack . getStats ( ) ; }
public OnlineBackup incremental ( String targetDirectory ) { outcome = new BackupService ( ) . doIncrementalBackup ( hostNameOrIp , port , new File ( targetDirectory ) , getConsistencyCheck ( false ) , timeoutMillis , defaultConfig ( ) ) ; return this ; }
private boolean isValidConfiguration ( ) { return ! ( isDiscarding ( ) || isCalleeData ( ) ) || isAsync ( ) ; }
public boolean setTrace ( @NonNull ITmfTrace trace ) throws TmfAnalysisException { boolean ret = super . setTrace ( trace ) ; if ( ! ret ) { return ret ; } ret = fCriticalPathModule . setTrace ( trace ) ; if ( ret ) { fCriticalPathModule . setParameter ( CriticalPathModule . PARAM_GRAPH , getId ( ) ) ; } return ret ; }
public void fillContextMenu ( final IMenuManager menu ) { super . fillContextMenu ( menu ) ; final ISelection selection = getContext ( ) . getSelection ( ) ; if ( selection . isEmpty ( ) ) { return ; } // Wait the end of the loading of the representations file try { Job . getJobManager ( ) . join ( AbstractRepresentationsFileJob . FAMILY , new NullProgressMonitor ( ) ) ; } catch ( InterruptedException e ) { // Do nothing } // Differents behavior between win and linux : windows will not // display contextual menu if busy cursor while dialog is shown . // Fill the context menu contextMenuFiller . fillContextMenu ( menu , selection ) ; }
public void dispose ( ) { // run super . super . dispose ( ) ; // remove ourselves as a selection and registry listener getSite ( ) . getPage ( ) . removePostSelectionListener ( this ) ; RegistryFactory . getRegistry ( ) . removeListener ( this ) ; ISaveablesLifecycleListener saveables = getSite ( ) . getService ( ISaveablesLifecycleListener . class ) ; if ( saveables instanceof SaveablesList ) { ( ( SaveablesList ) saveables ) . removeModelLifecycleListener ( saveablesTracker ) ; } currentPart = null ; currentSelection = null ; pinPropertySheetAction = null ; }
public void setBaseballCard ( BaseballCard card ) { Locale locale = Locale . getDefault ( ) ; brand . setText ( card . brand ) ; year . setText ( String . format ( locale , " % d" , card . year ) ) ; number . setText ( card . number ) ; player . setText ( card . playerName ) ; }
private static String capitalize ( String word ) { return Character . toUpperCase ( word . charAt ( 0 ) ) + word . substring ( 1 ) ; }
private static boolean isStringParameter ( @NonNull Expression expression , @NonNull JavaContext context ) { if ( expression instanceof StringLiteral ) { return true ; } else { ResolvedNode resolvedNode = context . resolve ( expression ) ; if ( resolvedNode instanceof ResolvedField ) { if ( ( ( ResolvedField ) resolvedNode ) . getValue ( ) instanceof String ) { return true ; } } } return false ; }
protected double getScore ( double availableCpu , double availableMemory , Map < String , Double > availableGenericResources ) { return getScore ( availableCpu , availableMemory , availableGenericResources , getNextHighest ( ) ) ; }
public < T extends Action > List < T > getActions ( Class < T > type ) { List < T > _actions = Util . filter ( getActions ( ) , type ) ; for ( TransientActionFactory < ? > taf : TransientActionFactory . factoriesFor ( getClass ( ) , type ) ) { _actions . addAll ( Util . filter ( createFor ( taf ) , type ) ) ; } return Collections . unmodifiableList ( _actions ) ; }
public void addRepresentation ( ImageData srcImageData , int zoom ) { if ( srcImageData == null ) SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; int imageSelectorIndex = DPIUtil . mapZoomToImageSelectorIndex ( zoom ) ; if ( imageSelectorIndex == getImageSelector ( ) ) { init ( srcImageData ) ; init ( ) ; } data [ imageSelectorIndex ] = srcImageData ; }
private DefaultEnvironment buildEnvironment ( EnvironmentType environmentType ) { DefaultEnvironment defaultEnvironment = new DefaultEnvironment ( environmentType ) ; return defaultEnvironment ; }
public int hashCode ( ) { if ( getRepositoryName ( ) != null ) return getRepositoryName ( ) . hashCode ( ) ; return System . identityHashCode ( this ) ; }
public List < String > getExtensions ( ) { return extensions ; }
public List < RadiologyOrder > getRadiologyOrdersByPatient ( Patient patient ) { Criteria radiologyOrderCriteria = createRadiologyOrderCriteria ( ) ; addRestrictionOnPatient ( radiologyOrderCriteria , patient ) ; final List < RadiologyOrder > result = ( List < RadiologyOrder > ) radiologyOrderCriteria . list ( ) ; return result == null ? new ArrayList < RadiologyOrder > ( ) : result ; }
public Weld addExtensions ( Class < ? extends Extension > . . . extensionClasses ) { for ( Class < ? extends Extension > extensionClass : extensionClasses ) { try { Extension extension = SecurityActions . newInstance ( extensionClass ) ; addExtension ( extension ) ; } catch ( Exception ex ) { CommonLogger . LOG . unableToInstantiate ( extensionClass , new Object [ ] { } , ex ) ; } } return this ; }
public RTTestsParser ( ) { super ( Messages . _Warnings_RTTests_ParserName ( ) , Messages . _Warnings_RTTests_LinkName ( ) , Messages . _Warnings_RTTests_TrendName ( ) , CYCLICTEST_WARNING_PATTERN ) ; }
private ValidationResult hostExists ( ) { return getVds ( ) == null ? new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_HOST_NOT_EXIST ) : ValidationResult . VALID ; }
public static ToolTipString fromString ( String text ) { return new ToolTipString ( text , toHtmlString ( text ) ) ; }
public DataRadioStation getNextById ( String id ) { if ( listStations . isEmpty ( ) ) return null ; for ( int i = 0 ; i < listStations . size ( ) - 1 ; i ++ ) { if ( listStations . get ( i ) . ID . equals ( id ) ) { return listStations . get ( i + 1 ) ; } } return listStations . get ( 0 ) ; }
public static void setBiomeArrayMethod ( boolean jeidPresent ) { try { if ( jeidPresent ) { biomeArrayMethod = Chunk . class . getMethod ( "getIntBiomeArray" ) ; } else { biomeArrayMethod = Chunk . class . getMethod ( "getBiomeArray" ) ; } } catch ( NoSuchMethodException e ) { throw new RuntimeException ( e ) ; } }
public String getDescription ( ) { return "Transform files representing a structured table under an Alluxio directory . " + "\n\n" + "Files are coalesced and converted to parquet format . " + "\n\n" + "Definition is in format like 'write ( hive ) . option ( hive . num . files , 100 ) ' , " + "currently , the only modification you can do to the example definition is " + "the number of files in the option . " ; }
public static void validateNonNegative ( int [ ] data , String paramName ) { if ( data == null ) { return ; } boolean nonnegative = true ; for ( int value : data ) { if ( value < 0 ) { nonnegative = false ; } } Preconditions . checkArgument ( nonnegative , "Values for % s must be >= 0 , got : % s" , paramName , data ) ; }
public SetContentTypeFilter ( ) throws IOException { mimetypeToExtensionMap = new Properties ( ) ; mimetypeToExtensionMap . load ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( "mimetypeToExtension . txt" ) ) ) ; contentTypeProperties = new Properties ( ) ; contentTypeProperties . load ( new InputStreamReader ( this . getClass ( ) . getResourceAsStream ( "toContentType . properties" ) ) ) ; }
private SwiftApi api ( String authUrl , Properties overrides ) throws IOException { overrides . setProperty ( CREDENTIAL_TYPE , "tempAuthCredentials" ) ; return ContextBuilder . newBuilder ( new SwiftApiMetadata ( ) ) . credentials ( "user" , "password" ) . endpoint ( authUrl ) . overrides ( overrides ) . modules ( ImmutableSet . of ( new ExecutorServiceModule ( sameThreadExecutor ( ) ) ) ) . buildApi ( SwiftApi . class ) ; }
public void setAcceptableValues ( Collection < K > values ) { buttons . clear ( ) ; panels . clear ( ) ; wrapperPanel . clear ( ) ; if ( values != null ) { for ( final K value : values ) { addValue ( value ) ; } } updateButtons ( ) ; }
public Bucket getOrCreateBucket ( String bucketName ) { Bucket bucket = storage . get ( bucketName ) ; if ( bucket == null ) { log . debug ( String . format ( "Creating a new bucket % s" , bucketName ) ) ; return storage . create ( BucketInfo . of ( bucketName ) ) ; } return bucket ; }
private void onFragmentLoaded ( ) { if ( searchAdapter == null ) { searchAdapter = new SearchlistAdapter ( getActivity ( ) , itemAccess ) ; setListAdapter ( searchAdapter ) ; } searchAdapter . notifyDataSetChanged ( ) ; setListShown ( true ) ; String query = getArguments ( ) . getString ( ARG_QUERY ) ; setEmptyText ( getString ( R . string . no_results_for_query , query ) ) ; }
private Iterable < Ref > getSortedRefs ( ) throws Exception { List < Ref > all = db . getRefDatabase ( ) . getRefsByPrefix ( ALL ) ; // TODO ( jrn ) check if we can reintroduce fast - path by e . g . implementing // SortedList return RefComparator . sort ( all ) ; }
private static void convertAAAProfilesResult ( AsyncQuery aQuery ) { aQuery . converterCallback = new IAsyncConverter ( ) { @Override public Object Convert ( Object source , AsyncQuery _asyncQuery ) { List < String > results = new ArrayList < String > ( ) ; for ( ProfileEntry profileEntry : source != null ? ( Collection < ProfileEntry > ) source : new ArrayList < ProfileEntry > ( ) ) { results . add ( profileEntry . getProfile ( ) ) ; } return results ; } } ; }
FunctionKindRowColumnHeaderMetaData ( final Supplier < FunctionDefinition > functionSupplier , final CellEditorControlsView . Presenter cellEditorControls , final KindPopoverView . Presenter editor , final Optional < String > editorTitle , final FunctionGrid gridWidget ) { super ( cellEditorControls , editor , editorTitle ) ; this . functionSupplier = functionSupplier ; this . gridWidget = gridWidget ; }
public List < ProxiedPlayer > matchPlayer ( String partialName ) { List < ProxiedPlayer > matched = new ArrayList < ProxiedPlayer > ( ) ; for ( ProxiedPlayer iPlayer : this . getPlayers ( ) ) { String iterPlayerName = iPlayer . getName ( ) ; if ( partialName . equalsIgnoreCase ( iterPlayerName ) ) { matched . add ( iPlayer ) ; break ; } if ( iterPlayerName . toLowerCase ( ) . startsWith ( partialName . toLowerCase ( ) ) ) { matched . add ( iPlayer ) ; } } return matched ; }
private int zigzagDecode ( int input ) { return ( input > > > 1 ) ^ ( - ( input & 1 ) ) ; }
public void testEqualsCondition ( ) { doTest ( ) ; }
public void testRedrawAfterDispose ( ) { LineNumberRulerColumn lineNumberRulerColumn = new LineNumberRulerColumn ( ) ; CompositeRuler ruler = new CompositeRuler ( ) ; ruler . addDecorator ( 0 , lineNumberRulerColumn ) ; SourceViewer sourceViewer = new SourceViewer ( fParent , ruler , SWT . NONE ) ; lineNumberRulerColumn . getControl ( ) . setSize ( 10 , 10 ) ; sourceViewer . getTextWidget ( ) . dispose ( ) ; lineNumberRulerColumn . redraw ( ) ; }
public boolean configureDefaultNetworkRulesForSystemVm ( final Connect conn , final String vmName ) { if ( ! _canBridgeFirewall ) { return false ; } final Script cmd = new Script ( _securityGroupPath , _timeout , s_logger ) ; cmd . add ( "default_network_rules_systemvm" ) ; cmd . add ( " -- vmname" , vmName ) ; cmd . add ( " -- localbrname" , _linkLocalBridgeName ) ; final String result = cmd . execute ( ) ; if ( result != null ) { return false ; } return true ; }
public void testQueryCumulativeTable ( ) { computeActual ( "SELECT * FROM \" * :* \"" ) ; computeActual ( "SELECT * FROM \"java . util . logging :* \"" ) ; assertTrue ( computeActual ( "SELECT * FROM \"java . lang :* \"" ) . getRowCount ( ) > 1 ) ; assertTrue ( computeActual ( "SELECT * FROM \"jAVA . LANg :* \"" ) . getRowCount ( ) > 1 ) ; }
public RequestLogger get ( ) { LoggingRequestLogger logger = new LoggingRequestLogger ( mapper , setMDC , setContextMDC ) ; log . debug ( new Exception ( "Stack trace" ) , "Creating % s at" , logger ) ; return logger ; }
private IllegalReferenceCountException handleIllegalReferenceCountException ( IllegalReferenceCountException e ) { String accessRecord = leak . toString ( ) ; if ( StringUtil . isNullOrEmpty ( accessRecord ) ) { // means leak has been closed and there is no accessRecord . return e ; } return new TrackedIllegalReferenceCountException ( accessRecord , e ) ; }
public List < Payment > getAccountPayments ( final UUID accountId , final boolean withPluginInfo , final boolean withAttempts , final Iterable < PluginProperty > properties , final TenantContext tenantContext ) throws PaymentApiException { return paymentProcessor . getAccountPayments ( accountId , withPluginInfo , withAttempts , tenantContext , internalCallContextFactory . createInternalTenantContext ( accountId , tenantContext ) ) ; }
public void startBucket ( String bucketKey ) { BulkCommand command = getCurrentCommand ( ) ; Serializable auditParam = command . getParam ( NXAuditEventsService . DISABLE_AUDIT_LOGGER ) ; disableAudit = auditParam != null && Boolean . parseBoolean ( auditParam . toString ( ) ) ; retentionManager = Framework . getService ( RetentionManager . class ) ; ruleId = command . getParam ( PARAM_RULE_ID ) ; }
public boolean remove ( Connection connection ) { boolean removed = connectionPool . remove ( connection ) ; if ( getHttpExchanges ( ) . isEmpty ( ) ) { tryRemoveIdleDestination ( ) ; } else if ( removed ) { // Process queued requests that may be waiting . // We may create a connection that is not // needed , but it will eventually idle timeout . process ( true ) ; } return removed ; }
public boolean getRewriteBatchedStatements ( ) { final String isRewrite = super . connectionProperties . getProperty ( REWRITE_BATCHED_STATEMENTS ) ; return isRewrite == null ? false : Boolean . valueOf ( isRewrite ) ; }
public static ScheduledExecutorService newScheduler ( int numThreads , String threadNamePrefix , boolean isDaemon ) { ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor ( numThreads , new SchedulerThreadFactory ( threadNamePrefix , isDaemon ) ) ; scheduler . setContinueExistingPeriodicTasksAfterShutdownPolicy ( false ) ; scheduler . setExecuteExistingDelayedTasksAfterShutdownPolicy ( false ) ; return scheduler ; }
public boolean setValue ( T newValue ) { if ( ! validate ( newValue ) ) { return false ; } PropertyChangeEvent event = new PropertyChangeEvent ( this , id . toString ( ) , this . value , newValue ) ; this . value = newValue ; dispatchChangedEvent ( event ) ; return true ; }
public void onMessage ( MessageHolderWithTokens message ) { try { logger . trace ( "receiving tokens from queue , triggering Notification Dispatcher class to pick the right sender" ) ; dequeueEvent . fire ( message ) ; } catch ( DispatchInitiationException e ) { throw e ; } catch ( Exception e ) { logger . error ( "NotificationDispatcher or PushNotificationSender unexpectedly failed , the message won't be redelivered" , e ) ; } }
private Collection < Key > getRegisteredKeys ( ) { return new ArrayList < Key > ( cacheMap . keySet ( ) ) ; }
protected AbstractMetric ( String metricName , String metricType , T initialValue , MetricReportManager manager ) { name = metricName ; type = metricType ; value = initialValue ; metricManager = manager ; }
public void hasSameValues_checkingAgainstSameInstanceOfAllergy_shouldInterpretAsSameValues ( ) { Allergy allergy = allergy ( ) ; assertThat ( allergy . hasSameValues ( allergy ( ) ) , is ( true ) ) ; }
private static String readMapping ( ) throws ParseException { JSONParser parser = new JSONParser ( ) ; ClassLoader classloader = Thread . currentThread ( ) . getContextClassLoader ( ) ; try ( InputStream inputStream = classloader . getResourceAsStream ( "mapping . json" ) ) { String mapping = IOUtils . toString ( inputStream , "UTF - 8" ) ; Object object = parser . parse ( mapping ) ; JSONObject jsonObject = ( JSONObject ) object ; return jsonObject . toJSONString ( ) ; } catch ( IOException e ) { logger . error ( e ) ; return "" ; } }
public synchronized void commit ( ) throws CommitException { SyncCommitObserver sco = null ; try { sco = new SyncCommitObserver ( ) ; commitAsync ( sco ) ; sco . waitForCommit ( ) ; } finally { updates . clear ( ) ; weakNotification = null ; columnsRead . clear ( ) ; } }
public static boolean hasPictureId ( byte [ ] buf , int off , int len ) { return isValid ( buf , off , len ) && ( buf [ off ] & X_BIT ) != 0 && ( buf [ off + 1 ] & I_BIT ) != 0 ; }
public void setEnabled ( boolean enabled ) { this . active = enabled ; updateButtonState ( ) ; }
default void beforeDataProviderExecution ( IDataProviderMethod dataProviderMethod , ITestNGMethod method , ITestContext iTestContext ) { // not implemented }
private void handleEndActionJobAndStep ( ) { if ( ( ! hasTaskHandlers ( ) || getExecutionIndex ( ) == getTaskHandlers ( ) . size ( ) - 1 ) && ( ! parentHasCallback ( ) || getExecutionContext ( ) . getExecutionMethod ( ) == ExecutionMethod . AsStep ) ) { startFinalizingStep ( ) ; } }
private boolean waitForScanState ( ScanStates state ) { try { do { scanState . wait ( ) ; } while ( ! getScanState ( ) . equals ( state ) ) ; return true ; } catch ( InterruptedException e ) { tsLogger . logger . warn ( "problem waiting for scanLock whilst in state " + state . name ( ) , e ) ; return false ; } }
private void maybeScheduleCheckpoint ( ) { switch ( state ( ) ) { case RESTORING : case SUSPENDED : this . checkpoint = checkpointableOffsets ( ) ; break ; case RUNNING : if ( ! eosEnabled ) { this . checkpoint = checkpointableOffsets ( ) ; } break ; case CREATED : case CLOSED : throw new IllegalStateException ( "Illegal state " + state ( ) + " while scheduling checkpoint for active task " + id ) ; default : throw new IllegalStateException ( "Unknown state " + state ( ) + " while scheduling checkpoint for active task " + id ) ; } }
protected void executeQueryCommand ( ) { Provider hostProvider = getProvider ( ) ; HostProviderProxy proxy = ProviderProxyFactory . getInstance ( ) . create ( hostProvider ) ; getQueryReturnValue ( ) . setReturnValue ( chainToString ( proxy . getCertificateChain ( ) ) ) ; }
public void t1 ( ) { }
public void testValidateDataStreamsNoConflicts ( ) { Metadata metadata = createIndices ( 5 , 10 , "foo - datastream" ) . metadata ; // don't expect any exception when validating a system without indices that would conflict with future backing indices validateDataStreams ( metadata . getIndicesLookup ( ) , ( DataStreamMetadata ) metadata . customs ( ) . get ( DataStreamMetadata . TYPE ) ) ; }
public ShaderProvider getPassShaderProvider ( int n ) { return passShaderProviders [ n ] ; }
public void onConnectionClosedForUser ( QBRTCSession qbrtcSession , Integer integer ) { setStatusForOpponent ( integer , getString ( R . string . closed ) ) ; }
public void install ( ITextViewer textViewer ) { for ( IReconciler iReconciler : fReconcilers ) { iReconciler . install ( textViewer ) ; } }
public JettyServer run ( WebApplicationContext baseContext , boolean directlyUseAsWebAppRoot , Function < Function < Integer , JettyServer > , JettyServer > serverStarter , boolean exitOnError ) { try { configureLogger ( ) ; configureSentry ( baseContext ) ; JettyServer jettyServer = createJettyServer ( baseContext , directlyUseAsWebAppRoot , serverStarter ) ; jettyServer . start ( ) ; logStartupInfo ( baseContext ) ; return jettyServer ; } catch ( Exception e ) { return logErrorAndExit ( e , exitOnError ) ; } }
public PlanItem ( String id , String definitionRef ) { this . id = id ; this . definitionRef = definitionRef ; }
public int hashCode ( ) { return ~~name . hashCode ( ) ; }
protected boolean copyObject ( String src , String dst ) { try { LOG . debug ( "Copying { } to { } " , src , dst ) ; mClient . copyObject ( mBucketNameInternal , src , mBucketNameInternal , dst ) ; return true ; } catch ( CosClientException e ) { LOG . error ( "Failed to rename file { } to { } " , src , dst , e ) ; return false ; } }
public RepositorySearchDialog ( Collection < String > existingDirs ) { this ( existingDirs , false , true ) ; }
public DelegatingResourceDescription getCreatableProperties ( ) { DelegatingResourceDescription description = super . getCreatableProperties ( ) ; description . addProperty ( "location" ) ; return description ; }
private JsonParser getParser ( String data ) throws IOException { // If the first character is { or [ , assume this is // JSON data and use a JsonParser . Otherwise assume // YAML and use a YAMLParser . char firstChar = data . charAt ( 0 ) ; if ( firstChar == ' { ' || firstChar == ' [ ' ) { return this . jsonFactory . createParser ( data ) ; } else { return this . yamlFactory . createParser ( data ) ; } }
public void testGenerateDroolsTestOption ( ) { ScoreDirectorFactoryConfig config = new ScoreDirectorFactoryConfig ( ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; config . setGenerateDroolsTestOnError ( true ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isTrue ( ) ; config . setGenerateDroolsTestOnError ( Boolean . FALSE ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isFalse ( ) ; config . setGenerateDroolsTestOnError ( null ) ; assertThat ( config . isGenerateDroolsTestOnError ( ) ) . isNull ( ) ; }
private RawText getRawText ( ObjectId id , Repository repo ) throws IOException { if ( id . equals ( ObjectId . zeroId ( ) ) ) { return new RawText ( new byte [ ] { } ) ; } return new RawText ( repo . openBlob ( id ) . getCachedBytes ( ) ) ; }
private static String getUserAgentSuffix ( ) { return " ; " + USER_AGENT_SUFFIX ; }
public Builder setDataSize ( Estimate dataSize ) { this . dataSize = dataSize ; return this ; }
public boolean isExpired ( Date invocationDate ) { if ( getExpires ( ) != null ) { return getExpires ( ) . before ( invocationDate == null ? new Date ( ) : invocationDate ) ; } return false ; }
public void stop ( ) { if ( isRunning ( ) ) { process . destroy ( ) ; running . set ( false ) ; } }
public boolean equals ( Object object ) { if ( object == this ) { return true ; } if ( ! ( object instanceof MacroId ) ) { return false ; } MacroId rhs = ( MacroId ) object ; return new EqualsBuilder ( ) . append ( getId ( ) , rhs . getId ( ) ) . append ( getSyntax ( ) , rhs . getSyntax ( ) ) . isEquals ( ) ; }
public Map < String , Object > getExtraInformation ( ) { return extraInformation ; }
public int hashCode ( ) { return Objects . hash ( pointer , ownerName ) ; }
private String getFriendsPath ( SourcePathResolver sourcePathResolver , ImmutableList < SourcePath > friendPathsSourcePaths ) { if ( friendPathsSourcePaths . isEmpty ( ) ) { return "" ; } // https :/ / youtrack . jetbrains . com / issue / KT - 29933 ImmutableSortedSet < String > absoluteFriendPaths = ImmutableSortedSet . copyOf ( friendPathsSourcePaths . stream ( ) . map ( path - > sourcePathResolver . getAbsolutePath ( path ) . toString ( ) ) . collect ( Collectors . toSet ( ) ) ) ; return " - Xfriend - paths = " + absoluteFriendPaths . stream ( ) . reduce ( "" , ( path1 , path2 ) - > path1 + " , " + path2 ) ; }
public Target ( String targetUriAsString ) { Assert . hasText ( targetUriAsString , "The provided targetUriAsString must neither be null nor empty . " ) ; this . targetUri = URI . create ( targetUriAsString ) ; }
public PropertyInvertedRegexTester ( IPersonAttributesGroupTestDefinition definition ) { super ( definition ) ; setPattern ( definition . getAttributeName ( ) , definition . getTestValue ( ) ) ; }
public final boolean doesProvideNewPage ( ) { return getProvision ( ) . doesProvideNewPage ( ) ; }
private synchronized Handler getHandler ( ) { if ( mHandler == null ) { // Use current main looper mHandler = new Handler ( mContext . getMainLooper ( ) ) ; } return mHandler ; }
@SuppressWarnings ( "UnusedDeclaration" ) @Deprecated public void setDebugging ( boolean debugging ) { setIndicatorsEnabled ( debugging ) ; }
public List < ServerTemplate > load ( ) { synchronized ( store ) { return store . values ( ) . stream ( ) . map ( this : : cloneServerTemplate ) . collect ( Collectors . toList ( ) ) ; } }
public String getLearnerMaster ( ) { QuorumPeer . QuorumServer learnerMaster = observer . getCurrentLearnerMaster ( ) ; if ( learnerMaster == null || learnerMaster . addr . isEmpty ( ) ) { return "Unknown" ; } InetSocketAddress address = learnerMaster . addr . getReachableOrOne ( ) ; return address . getAddress ( ) . getHostAddress ( ) + " : " + address . getPort ( ) ; }
default < R > Task < R > flatMap ( final String desc , final Function1 < ? super T , Task < R > > func ) { ArgumentUtil . requireNotNull ( func , "function" ) ; final Task < Task < R > > nested = map ( "map : " + desc , func ) ; nested . getShallowTraceBuilder ( ) . setSystemHidden ( true ) ; return flatten ( desc , nested ) ; }
protected List < String > findStringsInFileCommon ( String regexp , boolean stopOnFirst , int searchLimit , File fileToSearch ) { return findStringsInFileCommon ( regexp , stopOnFirst , searchLimit , fileToSearch , Project . MSG_INFO ) ; }
public void notifyAboutStartProcess ( String id ) { Long processInstanceId = Long . parseLong ( id ) ; newProcessInstanceEvent . fire ( new NewProcessInstanceEvent ( serverTemplateId , deploymentId , processInstanceId , processDefId , processName , null ) ) ; final String message = Constants . INSTANCE . ProcessStarted ( processInstanceId . longValue ( ) ) ; notificationEvent . fire ( new NotificationEvent ( message , NotificationEvent . NotificationType . SUCCESS ) ) ; close ( ) ; }
protected void process ( final SpaceReference source , final SpaceReference destination ) { visitDocuments ( source , new Visitor < DocumentReference > ( ) { @Override public void visit ( DocumentReference oldChildReference ) { DocumentReference newChildReference = oldChildReference . replaceParent ( source , destination ) ; maybeMove ( oldChildReference , newChildReference ) ; } } ) ; }
public void processEvent ( DiscoveryServiceEvent event ) { log . info ( "Process event { } " , event . getType ( ) ) ; switch ( event . getType ( ) ) { case DISCOVER_INIT_TOPOLOGY : startDiscovery ( ) ; break ; case ACQUIRE_LOCK : processLockAcquire ( ) ; break ; case RELEASE_LOCK : processLockRelease ( ) ; break ; case DISCOVERED_TOPOLOGY : processTopologyChangeNotification ( event ) ; break ; case UPGRADE : processUpgrade ( event ) ; break ; default : log . error ( "Invalid event type { } " , event . getType ( ) ) ; } }
public void deleteError ( final ProgramError error ) { errors . remove ( error ) ; eventBus . publish ( new ProgramErrorDeletedEvent ( error ) ) ; }
public LamiTableContentProvider ( ) { fCurrentEntries = Collections . emptyList ( ) ; }
public ArticlePageObject clickGetInfoLink ( ) { switchToIFrame ( ) ; try { waitForElementByElement ( getInfoLink ) ; // Opens new tab to Template namespace getInfoLink . click ( ) ; return new ArticlePageObject ( driver ) ; } finally { switchOutOfIFrame ( ) ; } }
@Test public void decorateSimpleRabbitListenerContainerFactory_appends_as_first_when_absent ( ) { SimpleRabbitListenerContainerFactory factory = new SimpleRabbitListenerContainerFactory ( ) ; factory . setAdviceChain ( new CacheInterceptor ( ) ) ; // the order of advices is important for the downstream interceptor to see the tracing context assertThat ( rabbitTracing . decorateSimpleRabbitListenerContainerFactory ( factory ) . getAdviceChain ( ) ) . hasSize ( 2 ) . matches ( adviceArray - > adviceArray [ 0 ] instanceof TracingRabbitListenerAdvice ) ; }
private static List < IResource > getReadonlyFiles ( IResource [ ] resources ) { List < IResource > readOnlyFiles = new ArrayList < > ( ) ; for ( IResource resource : resources ) { ResourceAttributes resourceAttributes = resource . getResourceAttributes ( ) ; if ( resource . getType ( ) == IResource . FILE && resourceAttributes != null && resourceAttributes . isReadOnly ( ) ) readOnlyFiles . add ( resource ) ; } return readOnlyFiles ; }
void clean ( K key ) { getDataMap ( ) . remove ( key ) ; }
public static boolean isMemoryDeviceHotUnpluggable ( VmDevice memoryDevice ) { if ( ! isMemory ( memoryDevice ) ) { throw new IllegalArgumentException ( "Memory device expected but device " + memoryDevice + " obtained . " ) ; } return getSpecParamsIntValue ( memoryDevice , SPEC_PARAM_SIZE ) . isPresent ( ) && getSpecParamsIntValue ( memoryDevice , SPEC_PARAM_NODE ) . isPresent ( ) ; }
public Boolean connectorExists ( String id ) { try { List < ConnectorConfiguration > list = configPersistence . load ( ImmutableMap . of ( Constants . CONNECTOR_PERSISTENT_ID , id ) ) ; return ! list . isEmpty ( ) ; } catch ( PersistenceException e ) { throw new RuntimeException ( e ) ; } }
public void testUpdateStmtBuilder ( ) { printStatement ( "update foo set \"column [ 'looks_like_nested' ] \" = 1" ) ; printStatement ( "update foo set foo . a = 'b'" ) ; printStatement ( "update bar . foo set bar . foo . t = 3" ) ; printStatement ( "update foo set col [ 'x' ] = 3" ) ; printStatement ( "update foo set col [ 'x' ] = 3 where foo [ 'x' ] = 2" ) ; printStatement ( "update schemah . foo set foo . a = 'b' , foo . b = foo . a" ) ; printStatement ( "update schemah . foo set foo . a = abs ( - 6 . 3334 ) , x = true where x = false" ) ; }
public void setSetPath ( String path ) { requireNonNull ( path , "path is null" ) ; setPath . set ( path ) ; }
public EnvVars getEnvironment ( ) throws IOException , InterruptedException { EnvVars cachedEnvironment = this . cachedEnvironment ; if ( cachedEnvironment != null ) { return cachedEnvironment ; } cachedEnvironment = EnvVars . getRemote ( getChannel ( ) ) ; this . cachedEnvironment = cachedEnvironment ; return cachedEnvironment ; }
public int getMaxCapacity ( ) { return maxCapacity ; }
public void testGetAllForVdsGroupWithPermissionsForUnpriviligedUser ( ) { List < VDS > result = dao . getAllForVdsGroup ( existingVds . getvds_group_id ( ) , UNPRIVILEGED_USER_ID , true ) ; assertNotNull ( result ) ; assertTrue ( result . isEmpty ( ) ) ; }
private static DataSource createC3P0DataSource ( String name , Map < Object , Object > properties ) { ComboPooledDataSource ds = new ComboPooledDataSource ( false ) ; ds . setDataSourceName ( name ) ; ds . setIdentityToken ( name ) ; new BeanMap ( ds ) . putAll ( properties ) ; C3P0Registry . reregister ( ds ) ; checkDataSource ( ds , name ) ; return ds ; }
protected Control createPageControls ( Composite parent ) { setTitle ( Messages . RemoveReviewerDialog_Remove_Reviewer ) ; Label label = new Label ( parent , SWT . NONE ) ; label . setText ( NLS . bind ( Messages . RemoveReviewerDialog_Are_You_Sure_You_Want_To_Remove , userToRemove . getDisplayName ( ) ) ) ; return parent ; }
public List < PermissionSubject > getPermissionCheckSubjects ( ) { List < PermissionSubject > list = new ArrayList < PermissionSubject > ( ) ; Guid storagePoolId = getVdsGroup ( ) == null || getVdsGroup ( ) . getstorage_pool_id ( ) == null ? null : getVdsGroup ( ) . getstorage_pool_id ( ) . getValue ( ) ; list . add ( new PermissionSubject ( storagePoolId , VdcObjectType . StoragePool , getActionType ( ) . getActionGroup ( ) ) ) ; list = QuotaHelper . addQuotaPermissionSubject ( list , getStoragePool ( ) , getQuotaId ( ) ) ; return list ; }
public void onInit ( String clientName , Map < String , Object > credentials ) throws IOException { packer . packStructHeader ( 2 , INIT . signature ( ) ) ; packer . pack ( clientName ) ; packer . pack ( ValueUtils . asMapValue ( credentials ) ) ; onMessageComplete . onMessageComplete ( ) ; }
SecurityGroupExtensionProvider ( NeutronSecurityGroupExtension neutronSecurityGroupExtension , NovaSecurityGroupExtension novaSecurityGroupExtension ) { this . neutronSecurityGroupExtension = neutronSecurityGroupExtension ; this . novaSecurityGroupExtension = novaSecurityGroupExtension ; }
private static ExpressionTree getComparedWithNullExpression ( ExpressionTree expression , Tree . Kind kind ) { ExpressionTree comparedExpression = getExpressionEqualNullWithAnd ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionNotEqualNullWithOr ( expression , kind ) ; if ( comparedExpression == null ) { comparedExpression = getExpressionComparedWithFunction ( expression , kind ) ; } } return comparedExpression ; }
private void scheduleRefresh ( Duration delay ) { // already stopped ? avoids rejection exception if ( executor . isShutdown ( ) ) { return ; } executor . schedule ( this : : refresh , delay . toMillis ( ) , TimeUnit . MILLISECONDS ) ; }
public static void main ( String [ ] args ) { LocalQueryRunner queryRunner = createLocalQueryRunner ( ImmutableMap . of ( "reorder_joins" , "false" ) ) ; new SqlConsecutiveJoinBenchmark ( queryRunner ) . runBenchmark ( new SimpleLineBenchmarkResultWriter ( System . out ) ) ; queryRunner . close ( ) ; }
protected void beforeStartingVertx ( VertxOptions options ) { }
public Builder body ( String json ) { checkNotNull ( json , "body required" ) ; this . body = new JsonBall ( json ) . toString ( ) ; return self ( ) ; }
private String getTokenFromHeader ( HttpServletRequest request ) { String token = null ; String headerValue = request . getHeader ( SsoConstants . HEADER_AUTHORIZATION ) ; if ( headerValue != null && headerValue . startsWith ( BEARER ) ) { token = headerValue . substring ( BEARER . length ( ) ) . trim ( ) ; } return token ; }
private static CDIProvider getCDIProvider ( ) { if ( configuredProvider != null ) { return configuredProvider ; } else { // Discover providers and cache if ( discoveredProviders == null ) { synchronized ( lock ) { if ( discoveredProviders == null ) { findAllProviders ( ) ; } } } configuredProvider = discoveredProviders . stream ( ) . filter ( c - > c . getCDI ( ) != null ) . findAny ( ) . orElseThrow ( ( ) - > new IllegalStateException ( "Unable to access CDI" ) ) ; return configuredProvider ; } }
public void testIsDrawable_Stage ( ) { testIsDrawable ( CaseManagementDiagram . class , AdHocSubprocess . class , true ) ; }
public static boolean customImageExists ( String storage , String key ) { final AzureBlobClient azureBlob = ContextBuilder . newBuilder ( "azureblob" ) . credentials ( storage , key ) . buildApi ( AzureBlobClient . class ) ; try { return azureBlob . containerExists ( "system" ) ; } finally { Closeables2 . closeQuietly ( azureBlob ) ; } }
public void enter ( ) { super . enter ( ) ; mUseEap = ( IkeSessionOptions . IKE_AUTH_METHOD_EAP == mIkeSessionOptions . getLocalAuthConfig ( ) . mAuthMethod ) ; }
public static Predicate < Expression > isInferenceCandidate ( ) { return expression - > { expression = normalizeInPredicateToEquality ( expression ) ; if ( expression instanceof ComparisonExpression && isDeterministic ( expression ) && ! mayReturnNullOnNonNullInput ( expression ) && ! isDynamicFilter ( expression ) ) { ComparisonExpression comparison = ( ComparisonExpression ) expression ; if ( comparison . getType ( ) == ComparisonExpressionType . EQUAL ) { // We should only consider equalities that have distinct left and right components return ! comparison . getLeft ( ) . equals ( comparison . getRight ( ) ) ; } } return false ; } ; }
public void startMasters ( ) throws Exception { mMaster = LocalAlluxioMaster . create ( mWorkDirectory , true ) ; mMaster . start ( ) ; }
public Proxy getProxy ( ) { if ( mProxyHost == null ) { return null ; } return new Proxy ( mProxyType , new InetSocketAddress ( mProxyHost , mProxyPort ) ) ; }
public HttpRequest setMethod ( HttpMethod method ) { this . method = ObjectUtil . checkNotNull ( method , "method" ) ; return this ; }
public Set < VmDeviceGeneralType > getDeviceTypesWithProperties ( Version version ) { if ( ! FeatureSupported . deviceCustomProperties ( version ) ) { return Collections . emptySet ( ) ; } EnumMap < VmDeviceGeneralType , Map < String , Pattern > > map = deviceProperties . get ( version ) ; if ( map . isEmpty ( ) ) { // no device type has any properties return Collections . emptySet ( ) ; } else { // prevent client to modify return Collections . unmodifiableSet ( map . keySet ( ) ) ; } }
public SWTBotSiriusDiagramEditor ( final IEditorReference reference , final SWTWorkbenchBot bot ) throws WidgetNotFoundException { super ( reference , bot ) ; GraphicalViewer graphicalViewer = UIThreadRunnable . syncExec ( new Result < GraphicalViewer > ( ) { @Override public GraphicalViewer run ( ) { final IEditorPart editor = partReference . getEditor ( true ) ; return ( GraphicalViewer ) editor . getAdapter ( GraphicalViewer . class ) ; } } ) ; ReflectionHelper . setFieldValueWithoutException ( this , "viewer" , new SWTBotSiriusGefViewer ( graphicalViewer ) , this . getClass ( ) . getSuperclass ( ) ) ; }
public CreateAllSnapshotsFromVmParameters ( ) { needsLocking = true ; saveMemory = true ; diskIdsToIgnoreInChecks = Collections . emptySet ( ) ; }
public SchedulerTask < ? > createTaskInstance ( String taskType ) throws IllegalArgumentException { try { return lookupTask ( taskType ) ; } catch ( ComponentLookupException e ) { throw new IllegalArgumentException ( "Could not create task of type" + taskType , e ) ; } }
public PapyrusStereotypedElementItemProviderDecorator ( ComposeableAdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
default Optional < SourceMap > sourceMap ( ) { return Optional . empty ( ) ; }
public static void setupDefaultTestCluster ( ) throws Exception { config = DrillConfig . create ( cloneDefaultTestConfigProperties ( ) ) ; classpathScan = ClassPathScanner . fromPrescan ( config ) ; openClient ( ) ; // turns on the verbose errors in tests // sever side stacktraces are added to the message before sending back to the client test ( "ALTER SESSION SET `exec . errors . verbose` = true" ) ; }
private static String parseAnnotationFieldTypeName ( final Supplier < Class < ? > > theTypeSupplier , final String errorMessage ) { try { theTypeSupplier . get ( ) ; } catch ( MirroredTypeException mte ) { return mte . getTypeMirror ( ) . toString ( ) ; } // Failed to parse the field type name throw new RuntimeException ( errorMessage ) ; }
default StreamPriority getStreamPriority ( ) { return null ; }
protected void configure ( ) { bind ( EventDao . class ) . to ( EventDaoInMemory . class ) . asEagerSingleton ( ) ; }
public static void onAdvancementEvent ( AdvancementEvent event ) { if ( event . getAdvancement ( ) . getDisplay ( ) != null && event . getAdvancement ( ) . getDisplay ( ) . shouldAnnounceToChat ( ) ) { logger . info ( " { } got the { } advancement" , event . getEntityPlayer ( ) . getDisplayNameString ( ) , event . getAdvancement ( ) . getDisplayText ( ) . getUnformattedText ( ) ) ; } }
public ExampleEndpointsProvider ( ) { // Put custom code here to get endpoints // In our case they will be hardcoded JHttpEndpoint httpEndpoint = new JHttpEndpoint ( URI . create ( "https :/ / jagger . griddynamics . net : 443" ) ) ; endpoints . add ( httpEndpoint ) ; }
public SlackUserProperty ( ) { }
public void onStreamCreate ( IMediaStream stream ) { if ( stream . isTranscodeResult ( ) ) { return ; } PacketListener listener = new PacketListener ( ) ; WMSProperties props = stream . getProperties ( ) ; synchronized ( props ) { props . setProperty ( STREAM_ACTION_LISTENER_PROPERTY , listener ) ; } stream . addLivePacketListener ( listener ) ; }
public long getEstimatedSizeInBytes ( ) { long result = INSTANCE_SIZE + sizeOf ( levelOffsets ) + tree . sizeOf ( ) ; for ( T item : items ) { result += item . getEstimatedSizeInBytes ( ) ; } return result ; }
public boolean respondsTo ( RunEvent event ) { Run r = event . getEventObject ( ) ; if ( event . getEventType ( ) == MisoEventType . RUN_FAILED && r . getHealth ( ) == HealthType . Failed ) { log . info ( "Run " + r . getAlias ( ) + " : " + event . getEventMessage ( ) ) ; return true ; } return false ; }
public boolean isEnabled ( ) { return super . isEnabled ( ) || isDirty ( ) ; }
private void updateSslVerifyUser ( boolean value ) { StoredConfig userConfig = null ; try { userConfig = GlobalConfigCache . getInstance ( ) . getUserConfig ( ) ; updateSslVerify ( userConfig , value ) ; } catch ( IOException | ConfigInvalidException e ) { // Log it , but otherwise ignore here . LOG . error ( MessageFormat . format ( JGitText . get ( ) . userConfigFileInvalid , userConfig , e ) ) ; } }
private static boolean isUserBrickAdapter ( BaseAdapter baseAdapter ) { return baseAdapter instanceof UserBrickAdapter ; }
private FormulaEditorFragment addResourceToActiveFormulaInFormulaEditor ( CategoryListItem categoryListItem ) { FormulaEditorFragment formulaEditorFragment = null ; if ( getFragmentManager ( ) != null ) { formulaEditorFragment = ( ( FormulaEditorFragment ) getFragmentManager ( ) . findFragmentByTag ( FormulaEditorFragment . FORMULA_EDITOR_FRAGMENT_TAG ) ) ; if ( formulaEditorFragment != null ) { formulaEditorFragment . addResourceToActiveFormula ( categoryListItem . nameResId ) ; } } return formulaEditorFragment ; }
public final ReviewCategoryStrategy reviewCategoryStrategy ( ) { String s = reviewCategeoryStrategyRaw ( ) ; return s != null ? ReviewCategoryStrategy . valueOf ( s ) : ReviewCategoryStrategy . NONE ; }
public Iterable < ConnectorFactory > getConnectorFactories ( ) { return ImmutableList . of ( new HiveConnectorFactory ( name , getClassLoader ( ) , metastore ) ) ; }
public void testDBConnectionTimeMetrics ( ) { this . metrics . setDBConnectionTime ( 14 ) ; assertEquals ( 14 , this . testUtil . getGaugeValue ( "dbConnectionTime" ) ) ; }
protected void createCacheManagers ( ) throws Throwable { ConfigurationBuilder builder = getDefaultClusteredCacheConfig ( getCacheMode ( ) , true ) ; builder . clustering ( ) . stateTransfer ( ) . sync ( ) . replTimeout ( 45 , TimeUnit . SECONDS ) ; createClusteredCaches ( 4 , cacheName ( ) , builder ) ; }
private String getByAccountName ( CodeReviewCommit codeReviewCommit ) { Account account = getAccount ( codeReviewCommit ) ; if ( account != null && account . getFullName ( ) != null ) { return " by " + account . getFullName ( ) ; } return "" ; }
public void findByUndefinedSchema ( ) throws Exception { getClient ( ) . perform ( get ( " / api / core / metadatafields / search / bySchema" ) . param ( "schema" , "undefined" ) ) . andExpect ( status ( ) . isOk ( ) ) . andExpect ( content ( ) . contentType ( contentType ) ) . andExpect ( jsonPath ( "$ . page . size" , is ( 20 ) ) ) . andExpect ( jsonPath ( "$ . page . totalElements" , is ( 0 ) ) ) ; }
private static void addAll ( QuantileDigest digest , long . . . values ) { requireNonNull ( values , "values is null" ) ; for ( long value : values ) { digest . add ( value ) ; } }
protected Object encodeCommand ( Command command ) { initDevicePassword ( command , LaipacProtocolDecoder . DEFAULT_DEVICE_PASSWORD ) ; switch ( command . getType ( ) ) { case Command . TYPE_CUSTOM : return formatCommand ( command , " { % s } " , Command . KEY_DATA ) ; case Command . TYPE_POSITION_SINGLE : return formatCommand ( command , "AVREQ , { % s } , 1" , Command . KEY_DEVICE_PASSWORD ) ; case Command . TYPE_REBOOT_DEVICE : return formatCommand ( command , "AVRESET , { % s } , { % s } " , Command . KEY_UNIQUE_ID , Command . KEY_DEVICE_PASSWORD ) ; default : return null ; } }
public void close ( ) throws IOException { selectObjectContentResult . close ( ) ; }
@Override public boolean isDisposed ( ) { return get ( ) ; }
public void close ( ) throws IOException { super . close ( ) ; if ( s3Object != null ) { s3Object . close ( ) ; } }
public void loadChunk ( int x , int z ) { w . loadChunk ( x , z ) ; }
GeneratorUtil ( TypeOracle typeOracle , Logger logger , GeneratorContext generatorContext ) { this . typeOracle = typeOracle ; this . logger = logger ; this . generatorContext = generatorContext ; }
protected boolean failPassthroughVnicHotPlug ( ) { if ( VmInterfaceType . pciPassthrough == VmInterfaceType . forValue ( getParameters ( ) . getNic ( ) . getType ( ) ) ) { addCanDoActionMessage ( EngineMessage . HOT_PLUG_UNPLUG_PASSTHROUGH_VNIC_NOT_SUPPORTED ) ; return true ; } return false ; }
public List < Map . Entry < Integer , Long > > getStageReachedCounts ( Context context ) throws SQLException { return workspaceItemDAO . getStageReachedCounts ( context ) ; }
protected Evaluator ( final ObjectMapper mapper , final AsyncTaskExecutor asyncTaskExecutor , final long timeoutLength ) { this . mapper = mapper ; this . asyncTaskExecutor = asyncTaskExecutor ; this . timeoutLength = timeoutLength ; }
public MetaMasterSync ( Address masterAddress , MetaMasterMasterClient masterClient ) { mMasterAddress = masterAddress ; mMasterClient = masterClient ; mHeartbeatTimeoutMs = ( int ) Configuration . getMs ( PropertyKey . MASTER_HEARTBEAT_TIMEOUT_MS ) ; mLastSuccessfulHeartbeatMs = System . currentTimeMillis ( ) - mHeartbeatTimeoutMs ; }
public void sendLayerDeleted ( String layerName ) { listeners . forEach ( listener - > { listener . layerDeleted ( layerName ) ; } ) ; }
public List < SqlIdentifier > getProjectionFields ( MetadataType metadataLevel , OptionManager options ) { return Arrays . asList ( new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_FQN_COLUMN_LABEL ) , SqlParserPos . ZERO ) , new SqlIdentifier ( options . getString ( ExecConstants . IMPLICIT_LAST_MODIFIED_TIME_COLUMN_LABEL ) , SqlParserPos . ZERO ) ) ; }
protected TypedTransaction ( Transaction tx , Encoder encoder , TypeLayer tl ) { super ( tx , encoder , tl ) ; this . tx = tx ; this . encoder = encoder ; this . tl = tl ; }
public int hashCode ( ) { int result = name . hashCode ( ) ; result = 31 * result + permissions . hashCode ( ) ; result = 31 * result + mask ; return result ; }
public EEFTabbedPropertySheetPage ( Object contributor , String contributorId ) { if ( contributor instanceof IEEFTabbedPropertySheetPageContributor ) { this . contributor = ( IEEFTabbedPropertySheetPageContributor ) contributor ; } else { this . contributor = new ContributorWrapper ( contributor , contributorId ) ; } this . registry = EEFTabbedPropertyRegistry . getDefault ( this . contributor ) ; }
public List < String > getSuggestions ( String input ) { return getWorlds ( ) . map ( World : : getId ) . filter ( world - > world . startsWith ( input ) ) . collect ( Collectors . toList ( ) ) ; }
protected void executeCommand ( ) { // disconnect the connection from vdsm boolean isStorageDisconnectSucceeded = disconnectStorage ( ) ; if ( isStorageDisconnectSucceeded ) { String connectionId = getConnection ( ) . getid ( ) ; if ( StringUtils . isNotEmpty ( connectionId ) ) { // remove the connection record from db getDbFacade ( ) . getStorageServerConnectionDao ( ) . remove ( connectionId ) ; } setSucceeded ( true ) ; } }
public void testNotEliminateSorts ( ) { @Language ( "SQL" ) String sql = "SELECT quantity , row_number ( ) OVER ( ORDER BY quantity ) FROM lineitem ORDER BY tax" ; PlanMatchPattern pattern = anyTree ( sort ( anyTree ( window ( windowMatcherBuilder - > windowMatcherBuilder . specification ( windowSpec ) . addFunction ( functionCall ( "row_number" , Optional . empty ( ) , ImmutableList . of ( ) ) ) , anyTree ( LINEITEM_TABLESCAN_Q ) ) ) ) ) ; assertUnitPlan ( sql , pattern ) ; }
public Program getAssociatedProgram ( Artifact artifact ) { String extension = getAssociatedExtension ( artifact ) ; Program program = ProgramFinder . findProgram ( extension ) ; if ( program == null ) { throw new OseeArgumentException ( "No program associated with the extension [ % s ] found on your local machine . " , extension ) ; } return program ; }
public final Iterable < N > toDepthFirstIterable ( ) { return ( ) - > this . depthFirstIterator ( ) ; }
void put ( final K key , final V value ) { clusterRegistry . put ( scope , key , value ) ; localCacheInsert ( key , value ) ; }
public static String getWarningMessages ( String filename ) { String warningMessage = "" ; if ( getErrorMessage ( filename ) . length ( ) == 0 && filename . trim ( ) . length ( ) > 0 ) { if ( ! filename . matches ( " [ A - Za - z ] [ A - Za - z0 - 9_ ] * " ) ) { // check to make sure if filename has no spaces String errorMessage = MESSAGES . whitespaceProjectNameError ( ) ; filename = filename . trim ( ) . replaceAll ( " ( ) + " , " " ) . replace ( " " , "_" ) ; warningMessage = errorMessage + " . \n '" + filename + "' will be used if continued . " ; } } return warningMessage ; }
public @NonNull TraceSessionComponent [ ] getSessions ( ) { List < ITraceControlComponent > compenents = getChildren ( TraceSessionGroup . class ) ; if ( compenents . size ( ) > 0 ) { TraceSessionGroup group = ( TraceSessionGroup ) compenents . get ( 0 ) ; List < ITraceControlComponent > sessions = group . getChildren ( TraceSessionComponent . class ) ; return sessions . toArray ( new @NonNull TraceSessionComponent [ sessions . size ( ) ] ) ; } return new TraceSessionComponent [ 0 ] ; }
private static void cacheColors ( Display display ) { BG_COLOR_RGB = JFaceColors . getInformationViewerBackgroundColor ( display ) . getRGB ( ) ; FG_COLOR_RGB = JFaceColors . getInformationViewerForegroundColor ( display ) . getRGB ( ) ; Color hyperlinkText = JFaceColors . getHyperlinkText ( display ) ; if ( hyperlinkText != null ) { LINK_COLOR_RGB = hyperlinkText . getRGB ( ) ; } Color activeHyperlinkText = JFaceColors . getActiveHyperlinkText ( display ) ; if ( activeHyperlinkText != null ) { ACTIVE_LINK_COLOR_RGB = activeHyperlinkText . getRGB ( ) ; } }
private IRadioButton < T > findFirstButtonInFieldTree ( IFormField f ) { if ( f instanceof IRadioButton ) { return ( IRadioButton ) f ; } else if ( f instanceof ICompositeField ) { for ( IFormField sub : ( ( ICompositeField ) f ) . getFields ( ) ) { IRadioButton < T > b = findFirstButtonInFieldTree ( sub ) ; if ( b != null ) { return b ; } } } return null ; }
public void testGenerateXpathSuppressionOptionEmptyConfig ( ) throws Exception { final String expected = "" ; exit . checkAssertionAfterwards ( ( ) - > { assertEquals ( "Unexpected output log" , expected , systemOut . getLog ( ) ) ; assertEquals ( "Unexpected system error log" , "" , systemErr . getLog ( ) ) ; } ) ; Main . main ( " - c" , getPath ( "InputMainConfig - empty . xml" ) , " -- generate - xpath - suppression" , getPath ( "InputMainComplexityOverflow . java" ) ) ; }
public String getPackageName ( ) { if ( clazz . getPackage ( ) != null ) { return clazz . getPackage ( ) . getName ( ) ; } return "" ; }
public void testIsStringLiteral ( ) { Set < ASTLiteral > literals = getNodes ( ASTLiteral . class , TEST1 ) ; assertTrue ( ( literals . iterator ( ) . next ( ) ) . isStringLiteral ( ) ) ; }
public Map < K , V > getAllPresent ( final Iterable < K > keys ) { ImmutableMap . Builder builder = ImmutableMap . builder ( ) ; for ( K key : keys ) { V value = getIfPresent ( key ) ; if ( value != null ) { builder . put ( key , value ) ; } } return builder . build ( ) ; }
protected void configure ( ServerHttpSecurity http ) { ReactiveAuthenticationManager authenticationManager = getAuthenticationManager ( ) ; X509PrincipalExtractor principalExtractor = getPrincipalExtractor ( ) ; AuthenticationWebFilter filter = new AuthenticationWebFilter ( authenticationManager ) ; filter . setServerAuthenticationConverter ( new ServerX509AuthenticationConverter ( principalExtractor ) ) ; http . addFilterAt ( filter , SecurityWebFiltersOrder . AUTHENTICATION ) ; }
public void action ( AuthenticationFlowContext context ) { validateOTP ( context ) ; }
private void handleResourceChange ( GitResourceVariantTreeSubscriber subscriber , Repository which , Collection < IFile > resources ) { for ( GitSynchronizeData gsd : gsds ) { if ( which . equals ( gsd . getRepository ( ) ) && resources != null && ! resources . isEmpty ( ) ) refreshResources ( subscriber , resources ) ; } }
public static Set < Path > getIncludedFieldsOfRootEntityForSort ( CompositeMetadata root , Sort rootSort ) { Set < Path > ret = new HashSet < > ( ) ; if ( rootSort != null ) { SortFieldInfo [ ] sfi = SortFieldInfo . buildSortFields ( rootSort , root . getFieldTreeRoot ( ) ) ; for ( SortFieldInfo fi : sfi ) ret . add ( fi . getName ( ) ) ; } return ret ; }
public LocalCluster ( String jarFileName , int siteCount , int hostCount , int kfactor , int clusterId , BackendTarget target , FailureState failureState , boolean debug , boolean isRejoinTest , Map < String , String > env ) { this ( null , null , jarFileName , siteCount , hostCount , kfactor , clusterId , target , failureState , debug , isRejoinTest , env ) ; }
public void execute ( String userName ) { FollowModeManager currentFollowModeManager = followModeManager ; User userToFollow = findUser ( userName ) ; if ( currentFollowModeManager == null ) { return ; } currentFollowModeManager . follow ( userToFollow ) ; actionPerformed ( ) ; }
@Override public Appendable write ( Appendable appendable , Context context ) throws IOException { Iterator < TypeName > iterator = typeNames . iterator ( ) ; if ( iterator . hasNext ( ) ) { iterator . next ( ) . write ( appendable , context ) ; while ( iterator . hasNext ( ) ) { appendable . append ( " & " ) ; iterator . next ( ) . write ( appendable , context ) ; } } return appendable ; }
public void flush ( ) throws IOException { entryLogManager . flush ( ) ; }
public void disableWireframe ( ) { if ( getDesiredStateChanges ( ) . contains ( wireframeStateChange ) ) { addDesiredStateChange ( faceCullingStateChange ) ; removeDesiredStateChange ( wireframeStateChange ) ; worldRenderer . requestTaskListRefresh ( ) ; } }
public void prepareConnectHostToStoragePoolServers ( ConnectHostToStoragePoolServersParameters parameters , List < StorageServerConnections > connections ) { List < StorageServerConnections > res = updateIfaces ( connections , parameters . getVds ( ) . getId ( ) ) ; connections . clear ( ) ; connections . addAll ( res ) ; }
public HibernateErrorReportingServiceDao ( ) { }
public JettyConfig getJettyConfig ( ) { return jettyConfig != null ? jettyConfig : new DefaultJettyConfig ( ) ; }
public void setNumThreads ( final Integer numThreads ) { m_threads = numThreads ; }
private String getModeName ( ) { String header = getHeader ( ) ; return header . substring ( 0 , header . indexOf ( '"' ) - 1 ) ; }
private List < RequestInfo > pollForRequests ( ) { // these are ids that were successfully put for an operation that eventually failed idsToDelete . clear ( ) ; putManager . getIdsToDelete ( idsToDelete ) ; // this is a best effort to delete ids for cleanup purposes ( these may fail and we will // not do anything about it at this time ) . for ( String blobId : idsToDelete ) { // possibly add a batch api going forward . deleteManager . submitDeleteBlobOperation ( blobId , new FutureResult < Void > ( ) , null ) ; } List < RequestInfo > requests = new ArrayList < RequestInfo > ( ) ; putManager . poll ( requests ) ; getManager . poll ( requests ) ; deleteManager . poll ( requests ) ; return requests ; }
public InternalAggregationFunction specialize ( BoundVariables boundVariables , int arity , TypeManager typeManager , FunctionManager functionManager ) { Type type = boundVariables . getTypeVariable ( "E" ) ; MethodHandle compareMethodHandle = functionManager . getScalarFunctionImplementation ( functionManager . resolveOperator ( operatorType , fromTypes ( ImmutableList . of ( type , type ) ) ) ) . getMethodHandle ( ) ; return generateAggregation ( type , compareMethodHandle ) ; }
public AccountInfo getAccountInfo ( ) throws IOException { try { CoingiBalances coingiBalances = getCoingiBalance ( ) ; return CoingiAdapters . adaptAccountInfo ( coingiBalances , exchange . getExchangeSpecification ( ) . getUserName ( ) ) ; } catch ( CoingiException e ) { throw CoingiErrorAdapter . adapt ( e ) ; } }
public Map < TableScanNode , Void > visitPlan ( PlanNode node , Void context ) { Map < TableScanNode , Void > ret = new IdentityHashMap < > ( ) ; node . getSources ( ) . forEach ( source - > ret . putAll ( source . accept ( this , context ) ) ) ; return ret ; }
protected RevCommit findHead ( Repository repo ) { try ( RevWalk walk = new RevWalk ( repo ) ) { try { ObjectId head = repo . resolve ( HEAD ) ; return walk . parseCommit ( head ) ; } catch ( RevisionSyntaxException | IOException e ) { throw new RuntimeException ( e ) ; } } }
public void process ( EquivalentContentUpdatedMessage message ) throws RecoverableException { Id contentId = message . getContentRef ( ) . getId ( ) ; log . debug ( "Processing message on id { } , took PT { } S , message : { } " , contentId , getTimeToProcessInSeconds ( message ) , message ) ; Timer . Context time = timer . time ( ) ; try { Content content = getContent ( contentId ) ; neo4JContentStore . writeContent ( content ) ; time . stop ( ) ; } catch ( Exception e ) { failureMeter . mark ( ) ; throw Throwables . propagate ( e ) ; } }
public String apply ( String dimValue ) { dimValue = ( dimValue == null ) ? "" : dimValue ; Matcher matcher = pattern . matcher ( dimValue ) ; return matcher . find ( ) ? dimValue : null ; }
private void writeSubscribeCommands ( String repoName , List < SubscribeCommand > commands ) throws IOException { write ( "repository " + repoName ) ; for ( SubscribeCommand cmd : commands ) { switch ( cmd . getCommand ( ) ) { case SUBSCRIBE : write ( "want " + cmd . getSpec ( ) ) ; break ; case UNSUBSCRIBE : write ( "stop " + cmd . getSpec ( ) ) ; break ; default : throw new IllegalArgumentException ( ) ; } } }
private Set < GlusterServerInfo > fetchServers ( VDS upServer , List < VDS > existingServers ) { Set < GlusterServerInfo > fetchedServers = null ; while ( fetchedServers == null && ! existingServers . isEmpty ( ) ) { fetchedServers = fetchServers ( upServer ) ; if ( fetchedServers == null ) { logServerMessage ( upServer , AuditLogType . GLUSTER_SERVERS_LIST_FAILED ) ; // Couldn't fetch servers from the up server . Mark it as non - operational setNonOperational ( upServer ) ; existingServers . remove ( upServer ) ; upServer = getNewUpServer ( existingServers , upServer ) ; } } return fetchedServers ; }
public static String sanitizeSecondCachedKey ( final Contentlet vanityUrl ) throws DotDataException , DotSecurityException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeSecondCacheKey ( host . getIdentifier ( ) , vanityUrl . getLanguageId ( ) ) ; }
void remove ( I key ) { Integer prev = this . identityMap . remove ( key ) ; if ( prev != null ) { this . objectList . set ( prev , null ) ; } }
public boolean equals ( Object o ) { return this == o || o instanceof TaskPropertyType ; }
private long obtainEntityId ( ) { return nextEntityId ++ ; }
public void markInCatalog ( ) { m_isInCatalog = true ; }
private static boolean canConvert ( ParameterDefinition def , ParameterValue v ) { return def instanceof SimpleParameterDefinition && ! ( def instanceof StringParameterDefinition ) && v . getClass ( ) . equals ( StringParameterValue . class ) ; }
public void setUp ( ) { passingHandler = new FilterHandler ( ) ; filtingHandler = new FilterHandler ( ) ; filtingHandler . setFilterInvalid ( true ) ; filtingHandler . setFilterZero ( true ) ; filtingHandler . setFilterDuplicate ( true ) ; filtingHandler . setFilterFuture ( true ) ; filtingHandler . setFilterApproximate ( true ) ; filtingHandler . setFilterStatic ( true ) ; filtingHandler . setFilterDistance ( 10 ) ; filtingHandler . setFilterLimit ( 10 ) ; }
public boolean download ( String url , String downloadPath ) { InputStream in = null ; try { in = new URL ( url ) . openStream ( ) ; FileUtils . writeByteArrayToFile ( new File ( downloadPath ) , IOUtils . toByteArray ( in ) ) ; return true ; } catch ( IOException e ) { log . error ( e ) ; return false ; } finally { IOUtils . closeQuietly ( in ) ; } }
private boolean getOldChildStale ( IObservable child ) { Boolean oldChildValue = staleMap . get ( child ) ; boolean oldChildStale = oldChildValue != null && oldChildValue ; return oldChildStale ; }
public void invoke ( @NotNull final Project project , final Editor editor , PsiFile file , DataContext dataContext ) { if ( ! CommonRefactoringUtil . checkReadOnlyStatus ( file ) ) return ; performAction ( new GoIntroduceOperation ( project , editor , file ) ) ; }
private static List < String > getListOfIsoFiles ( File directory , OVirtNodeInfo info ) { List < String > isoFileList = new ArrayList < String > ( ) ; File [ ] filterOvirtFiles = filterOvirtFiles ( directory , getIsoPattern ( info ) ) ; for ( File file : filterOvirtFiles ) { isoFileList . add ( file . getName ( ) ) ; } return isoFileList ; }
EWAHCompressedBitmap getBitmap ( ) { // Fast path to immediately return the expanded result . Object r = bitmapContainer ; if ( r instanceof EWAHCompressedBitmap ) return ( EWAHCompressedBitmap ) r ; // Expand the bitmap and cache the result . XorCompressedBitmap xb = ( XorCompressedBitmap ) r ; EWAHCompressedBitmap out = xb . bitmap ; for ( ; ; ) { r = xb . xorBitmap . bitmapContainer ; if ( r instanceof EWAHCompressedBitmap ) { out = out . xor ( ( EWAHCompressedBitmap ) r ) ; bitmapContainer = out ; return out ; } xb = ( XorCompressedBitmap ) r ; out = out . xor ( xb . bitmap ) ; } }
public AbstractCorrelatingMessageHandler ( MessageGroupProcessor processor , MessageGroupStore store , CorrelationStrategy correlationStrategy , ReleaseStrategy releaseStrategy ) { Assert . notNull ( processor ) ; Assert . notNull ( store ) ; setMessageStore ( store ) ; this . outputProcessor = processor ; this . correlationStrategy = correlationStrategy == null ? new HeaderAttributeCorrelationStrategy ( IntegrationMessageHeaderAccessor . CORRELATION_ID ) : correlationStrategy ; this . releaseStrategy = releaseStrategy == null ? new SequenceSizeReleaseStrategy ( ) : releaseStrategy ; this . messagingTemplate . setSendTimeout ( DEFAULT_SEND_TIMEOUT ) ; sequenceAware = this . releaseStrategy instanceof SequenceSizeReleaseStrategy ; }
public Statement createBootstrapScriptForGroup ( String group , @Nullable String nodeName ) { return groupToBootScript . apply ( group , nodeName ) ; }
public boolean create ( Personname personnameRecord ) { LOG . trace ( "PersonnameDAO . create ( ) - Begin" ) ; return personnameRecord != null ? super . create ( personnameRecord ) : true ; }
public void handleInvocation ( EJBClientInvocationContext context ) throws Exception { log . debug ( "In the client interceptor handleInvocation : " + this . getClass ( ) . getName ( ) + " " + context . getViewClass ( ) + " " + context . getLocator ( ) ) ; // Must make this call context . sendRequest ( ) ; }
public void edit ( final NewExternalSubnetModel subnet ) { driver . edit ( subnet ) ; networkEditor . asValueBox ( ) . setValue ( subnet . getNetwork ( ) . getEntity ( ) . getName ( ) ) ; }
protected AddVmFromTemplateCommand < AddVmParameters > createCommand ( ) { initVM ( ) ; return new AddVmFromTemplateCommand < > ( new AddVmParameters ( vm ) , null ) ; }
public void testGetNameFromPath ( ) { String path1 = " / group1" ; assertEquals ( HDF5Utils . getNameFromPath ( path1 ) , "group1" ) ; }
public GlusterLocalLogicalVolumeListReturn glusterLogicalVolumeList ( ) { JsonRpcRequest request = new RequestBuilder ( "GlusterHost . logicalVolumeList" ) . build ( ) ; Map < String , Object > response = new FutureMap ( this . client , request ) . withIgnoreResponseKey ( ) ; return new GlusterLocalLogicalVolumeListReturn ( response ) ; }
@Override public String toString ( ) { return "TypedByteArray [ length = " + length ( ) + " ] " ; }
public void onEntityDestroyed ( EntityRef entity ) { if ( entity . isPersistent ( ) ) { entityDeltas . remove ( entity . getId ( ) ) ; destroyedEntities . add ( entity . getId ( ) ) ; } }
private Optional < OrganizationalUnit > getOU ( String ouIdentifier , Collection < OrganizationalUnit > organizationalUnits ) { Optional < OrganizationalUnit > targetOU = organizationalUnits . stream ( ) . filter ( p - > p . getIdentifier ( ) . equalsIgnoreCase ( ouIdentifier ) ) . findFirst ( ) ; return targetOU ; }
public void testPutAsync ( ) throws Exception { // put Future < String > f = c . putAsync ( "k" , "v" ) ; testFuture ( f , null ) ; testK ( "v" ) ; f = c . putAsync ( "k" , "v2" ) ; testFuture ( f , "v" ) ; testK ( "v2" ) ; }
public boolean isReady ( TaskActionClient taskActionClient ) throws Exception { return true ; }
public static Map < String , EntryValue > convertBeanToEntryMap ( Object bean ) { Map < String , Object > buildAttributeValueMap = BeanUtilsExtended . buildObjectAttributeMap ( bean ) ; return Maps . transformEntries ( buildAttributeValueMap , new ObjectToEntryValueTransformer ( ) ) ; }
public RequestHeader ( Struct struct , short headerVersion ) { this ( new RequestHeaderData ( struct , headerVersion ) , headerVersion ) ; }
public void accountSession ( String username , String password ) throws TmdbInvalidParametersException { if ( username == null || password == null ) { throw new TmdbInvalidParametersException ( 401 , "Username and Password may not be null" ) ; } this . username = username ; this . password = password ; hasAccountSession = true ; }
public void setProjectName ( String projectName ) { fProjectName = projectName ; // If remote directory field is empty if ( fLocationText . getText ( ) . equals ( EMPTY_STRING ) ) { fRemoteDirSelected = false ; } // If remote directory was not selected yet if ( ! fRemoteDirSelected ) { fLocationText . setText ( getDefaultPathDisplayString ( ) ) ; } }
public void testAddChildCycle3 ( ) { assertNotNull ( fFixture ) ; assertNotNull ( f42Fixture ) ; assertNotNull ( fHiFixture ) ; ( ( CalledFunction ) f42Fixture ) . addChild ( fHiFixture ) ; }
private char formatFieldFirstCharacterToFitDroolsCoreStandards ( final String fieldName ) { if ( fieldName . length ( ) > 1 && Character . isLowerCase ( fieldName . charAt ( 0 ) ) && Character . isUpperCase ( fieldName . charAt ( 1 ) ) ) { return fieldName . charAt ( 0 ) ; } else { return Character . toUpperCase ( fieldName . charAt ( 0 ) ) ; } }
public void start ( ) { logger . trace ( "start ( ) " ) ; for ( final Class < ? > stepDefinitionType : cachedStepsInstances . keySet ( ) ) { cachedStepsInstances . put ( stepDefinitionType , createStepsInstance ( stepDefinitionType ) ) ; } }
private WorkingSetDescriptor getSelectedWorkingSet ( ) { return ( WorkingSetDescriptor ) typesListViewer . getStructuredSelection ( ) . getFirstElement ( ) ; }
public void evaluate ( ) throws Throwable { for ( FrameworkMethod before : befores ) { before . invokeExplosively ( target ) ; } next . evaluate ( ) ; }
public Response add ( OpenStackVolumeProvider provider ) { validateParameters ( provider , "name" ) ; if ( provider . isSetDataCenter ( ) ) { StoragePool storagePool = getStoragePool ( provider . getDataCenter ( ) ) ; provider . setDataCenter ( DataCenterMapper . map ( storagePool , null ) ) ; } return performCreate ( VdcActionType . AddProvider , new ProviderParameters ( map ( provider ) ) , new QueryIdResolver < Guid > ( VdcQueryType . GetProviderById , IdQueryParameters . class ) ) ; }
private void doStoreUsers ( ) { try { usersFileManager . store ( new UsersDto ( new HashSet < > ( userMap . values ( ) ) ) ) ; } catch ( IOException e ) { throw new UndeclaredThrowableException ( e ) ; } }
public void tearDown ( ) { try { globalScheduler . shutdown ( ) ; } catch ( Exception e ) { } cleanup ( ) ; tearDownOnce ( ) ; }
private CloudMachineNamer getCloudMachineNamer ( ConfigBag config ) { String namerClass = config . get ( LocationConfigKeys . CLOUD_MACHINE_NAMER_CLASS ) ; if ( namerClass != null ) { try { return ( CloudMachineNamer ) getManagementContext ( ) . getCatalog ( ) . getRootClassLoader ( ) . loadClass ( namerClass ) . getDeclaredConstructor ( ConfigBag . class ) . newInstance ( config ) ; } catch ( Exception e ) { throw Exceptions . propagate ( e ) ; } } else { return new JcloudsMachineNamer ( config ) ; } }
IllustratedSelectItem ( Object value , String label , String image ) { super ( value , label ) ; this . image = image ; }
private boolean layerGroupContainmentCheckRequired ( ) { // first , is it WMS ? Request request = Dispatcher . REQUEST . get ( ) ; if ( request == null ) { return false ; } // layer groups are used only in WMS final String service = request . getService ( ) ; return "WMS" . equalsIgnoreCase ( service ) || "gwc" . equalsIgnoreCase ( service ) ; }
public ResteasyUriInfo ( final String absoluteUri , final String contextPath , final InitData initData ) { initialize ( absoluteUri , contextPath , initData != null && InitData . canBeCached ( absoluteUri ) ? initData : null ) ; }
private void buildUnaryExpression ( UnaryExpressionTree tree ) { currentBlock . elements . add ( tree ) ; build ( tree . expression ( ) ) ; }
public Class < ? > getRealClass ( ) { return testNGMethod . getRealClass ( ) ; }
private KeyStore getSecretsStore ( ) { final File secretStoreFile = createStoreIfNeeded ( ) ; try { final KeyStore keyStore = KeyStore . getInstance ( SECRETS_STORE_KEYSTORE_TYPE ) ; try ( InputStream inputStream = Files . newInputStream ( secretStoreFile . toPath ( ) ) ) { keyStore . load ( inputStream , loadStorePassword ( ) ) ; } return keyStore ; } catch ( Exception e ) { Logger . error ( this . getClass ( ) , "unable to load secrets store " + SECRETS_STORE_FILE + " : " + e ) ; throw new DotRuntimeException ( e ) ; } }
public AnonymousSpec anonymous ( ) { if ( this . anonymous == null ) { this . anonymous = new AnonymousSpec ( ) ; } return this . anonymous ; }
public int getNumWaiters ( ) { return this . connectionPool . getNumWaiters ( ) ; }
private synchronized void store ( ) throws IOException { byte [ ] serialized = state . toCbor ( ) . serialize ( ) ; System . out . println ( "Writing " + serialized . length + " bytes to " + statePath ) ; Files . write ( statePath , serialized , StandardOpenOption . CREATE ) ; }
private static void initFacets ( @CheckForNull Fingerprint fingerprint ) { if ( fingerprint == null ) { return ; } for ( FingerprintFacet facet : fingerprint . facets ) { facet . _setOwner ( fingerprint ) ; } }
public Map < FactoryContainer , Attributes > getEnabledContainers ( ) { Map < FactoryContainer , Attributes > map = new LinkedHashMap < > ( ) ; synchronized ( _path ) { for ( Map . Entry < FactoryContainer , Attributes > entry : getReversed ( _path . entrySet ( ) ) ) { Attributes attr = entry . getValue ( ) ; if ( attr . isEnabled ( ) ) { Attributes attrClone = new Attributes ( attr ) ; map . put ( entry . getKey ( ) , attrClone ) ; } } } return map ; }
private FileListCacheValue getFileList ( ) { FileListCacheValue fileList = ( FileListCacheValue ) cache . get ( fileListCacheKey ) ; if ( fileList == null ) { fileList = new FileListCacheValue ( ) ; FileListCacheValue prev = ( FileListCacheValue ) cache . putIfAbsent ( fileListCacheKey , fileList ) ; if ( prev != null ) { fileList = prev ; } } if ( trace ) log . trace ( "Refreshed file listing view" ) ; return fileList ; }
public long size ( ) { build ( ) ; if ( body . length ( ) > - 1 ) { return body . length ( ) + partBoundary . length + partHeader . length ; } else { return - 1 ; } }
public boolean canStreamToNextPipe ( ) { return ! isCollectResults ( ) && super . canStreamToNextPipe ( ) ; // when collectResults is false , streaming is not necessary or useful }
public FoundViewHolder getFoundViewHolder ( JFieldRef idRef , AbstractJClass viewClass ) { return getFoundViewHolder ( idRef , viewClass , null ) ; }
public void tearDown ( ) { queryRunner . close ( ) ; }
private CommitConfig ( Config rc ) { commitTemplatePath = rc . getString ( ConfigConstants . CONFIG_COMMIT_SECTION , null , ConfigConstants . CONFIG_KEY_COMMIT_TEMPLATE ) ; i18nCommitEncoding = rc . getString ( ConfigConstants . CONFIG_SECTION_I18N , null , ConfigConstants . CONFIG_KEY_COMMIT_ENCODING ) ; }
public int decompress ( byte [ ] input , int inputOffset , int inputLength , byte [ ] output , int outputOffset , int maxOutputLength ) throws MalformedInputException { try { Inflater inflater = new Inflater ( true ) ; inflater . setInput ( input , inputOffset , inputLength ) ; int resultLength = inflater . inflate ( output , outputOffset , maxOutputLength ) ; inflater . end ( ) ; return resultLength ; } catch ( DataFormatException e ) { throw new RuntimeException ( e ) ; } }
public List < OutputLine > getLog ( ) { return new ArrayList < > ( this . log ) ; }
protected void doInit ( ) { super . doInit ( ) ; if ( ! this . evaluationContextSet ) { this . evaluationContext = ExpressionUtils . createStandardEvaluationContext ( getBeanFactory ( ) ) ; } Assert . state ( ! this . closeStreamAfterSend || this . isSingleUse , "Single use connection needed with closeStreamAfterSend" ) ; }
public ExtensionElementsConverter ( XStream xStream , List < DMNExtensionRegister > extensionRegisters ) { super ( xStream ) ; if ( ! extensionRegisters . isEmpty ( ) ) { this . extensionRegisters . addAll ( extensionRegisters ) ; } }
public void executeBatch ( OperationsQueue operationsQueue ) { try { if ( GridDialects . hasFacet ( getGridDialect ( ) , BatchableGridDialect . class ) || GridDialects . hasFacet ( getGridDialect ( ) , GroupingByEntityDialect . class ) ) { log . tracef ( "Executing batch" ) ; super . executeBatch ( operationsQueue ) ; } } catch ( TupleAlreadyExistsException taee ) { // TODO : Ideally , we should log the entity name + id here ; For now we trust the datastore to provide this // information via the original exception ; It'd require a fair bit of changes to obtain the entity name here // ( we'd have to obtain the persister matching the given entity key metadata which in turn would require // access to the session factory which is not easily available here ) throw log . mustNotInsertSameEntityTwice ( taee . getMessage ( ) , taee ) ; } }
public int hashCode ( ) { return ( ( startCommit . hashCode ( ) + numbers . length ) * 31 ) + getNumber ( ) ; }
private void prepareAuthForBrokerCall ( ) { AuthenticationSettings . INSTANCE . setUseBroker ( true ) ; }
public boolean isWrapperFor ( Class < ? > iface ) { if ( gridCoverage instanceof Wrapper ) { return ( ( Wrapper ) gridCoverage ) . isWrapperFor ( iface ) ; } return iface . isInstance ( gridCoverage ) ; }
DataSegment uploadDataSegment ( DataSegment segment , final int binaryVersion , final long size , final File compressedSegmentData , final String azurePath ) throws StorageException , IOException , URISyntaxException { azureStorage . uploadBlob ( compressedSegmentData , config . getContainer ( ) , azurePath ) ; final DataSegment outSegment = segment . withSize ( size ) . withLoadSpec ( this . makeLoadSpec ( new URI ( azurePath ) ) ) . withBinaryVersion ( binaryVersion ) ; log . debug ( "Deleting file [ % s ] " , compressedSegmentData ) ; compressedSegmentData . delete ( ) ; return outSegment ; }
public EEFButtonLifecycleManager ( EEFButtonDescription description , IVariableManager variableManager , IInterpreter interpreter , TransactionalEditingDomain editingDomain ) { super ( variableManager , interpreter , editingDomain ) ; this . description = description ; }
private static boolean isProbablyLog4jFormatterLogger ( MethodInvocationTree mit , String formatString ) { return mit . symbol ( ) . owner ( ) . type ( ) . is ( ORG_APACHE_LOGGING_LOG4J_LOGGER ) && ! formatString . contains ( " { } " ) && formatString . contains ( " % " ) ; }
void setMarker ( TextMarker marker , int length ) { this . marker = marker ; numSkipLines = length ; if ( checkAndUpdateArrows ( ) ) { upArrow . setHTML ( PatchUtil . M . expandBefore ( NUM_ROWS_TO_EXPAND ) ) ; downArrow . setHTML ( PatchUtil . M . expandAfter ( NUM_ROWS_TO_EXPAND ) ) ; } skipNum . setText ( PatchUtil . M . patchSkipRegion ( Integer . toString ( length ) ) ) ; }
public ExtendedEmailPublisherContext ( ExtendedEmailPublisher publisher , AbstractBuild < ? , ? > build , Launcher launcher , BuildListener listener ) { this ( publisher , build , build . getWorkspace ( ) , launcher , listener ) ; }
public void testWrongFormatNumber ( ) throws Exception { NumberCellEditor editor ; editor = new NumberCellEditor ( shell , Integer . class ) ; // empty string editor . getValue ( ) ; assertNull ( editor . getValue ( ) ) ; // not parsable number editor . setValue ( "aa" ) ; editor . getValue ( ) ; assertNull ( editor . getValue ( ) ) ; }
public void onReloadPlugin ( Plugin oldPlugin , Plugin newPlugin ) { update ( ) ; }
public Class < ? > getRealClass ( ) { return clazz ; }
private String read ( String resourcePath ) throws IOException { InputStream is = getClass ( ) . getResourceAsStream ( resourcePath ) ; return Util . read ( is ) ; }
public static String getModelFileWithGAV ( ReleaseId releaseId ) { return Paths . get ( MODEL_FILE_DIRECTORY , releaseId . getGroupId ( ) , releaseId . getArtifactId ( ) , MODEL_FILE_NAME ) . toString ( ) ; }
void removeConnection ( String connectionId ) { availableConnections . remove ( connectionId ) ; poolCount -- ; }
private Map < Long , ISegmentAspect > getAspectsFromColumnsId ( List < Long > desiredColumns ) { if ( ! desiredColumns . isEmpty ( ) ) { Map < Long , ISegmentAspect > aspects = new LinkedHashMap < > ( ) ; for ( Long columnsId : desiredColumns ) { ISegmentAspect segmentAspect = fAspectMap . get ( columnsId ) ; if ( segmentAspect != null ) { aspects . put ( columnsId , segmentAspect ) ; } } return aspects ; } return fAspectMap ; }
static boolean isValidMining ( ICodeMining mining ) { return mining != null && mining . getLabel ( ) != null && ! mining . getLabel ( ) . isEmpty ( ) ; }
public void addInput ( Page page ) { verify ( probe == null ) ; probe = page ; probePosition = 0 ; joinAddresses = null ; }
public DescriptorImpl ( ) { super ( ThrottleJobProperty . class ) ; synchronized ( propertiesByCategoryLock ) { load ( ) ; // Explictly handle the persisted data from the version 1 . 8 . 1 if ( propertiesByCategory == null ) { propertiesByCategory = new HashMap < String , Map < ThrottleJobProperty , Void > > ( ) ; } if ( ! propertiesByCategory . isEmpty ( ) ) { propertiesByCategory . clear ( ) ; save ( ) ; // Save the configuration to remove obsolete data } } }
public String toString ( ) { // Since the static data arrives from external source it's not guarenteed not to be null so a null check is // mandatory in order to avoid NPE when invoking toString by the logger String domainName = staticData == null ? "null" : staticData . getName ( ) ; Guid domainId = staticData == null ? null : staticData . getId ( ) ; return "StorageDomain [ " + domainName + " , " + domainId + " ] " ; }
Predicate < Entry < Key , Value > > getScanPredicate ( ) { final Range range = getRange ( ) ; return input - > range == null || range . contains ( input . getKey ( ) ) ; }
public AlluxioHiveMetastore ( TableMasterClient client ) { this . client = requireNonNull ( client , "client is null" ) ; }
private void addWorkPackageCriteria ( ) { if ( isWorkPackageSpecified ( ) ) { ArtifactId workPackArt = atsApi . getQueryService ( ) . getArtifactOrSentinel ( workPackageId ) ; if ( workPackArt . isValid ( ) ) { if ( isColorTeamMatch ( workPackArt ) ) { queryAnd ( AtsAttributeTypes . WorkPackageReference , workPackArt . getIdString ( ) ) ; } } } }
private void sendToSocket ( Socket socket , String cmdString ) throws IOException { // remove spaces at beginning and end and replace double spaces in // string with single space byte [ ] sendBytes = ( "A" + cmdString . trim ( ) . replaceAll ( "\\s + " , " " ) + "\n" ) . getBytes ( ) ; socket . getInputStream ( ) . skip ( socket . getInputStream ( ) . available ( ) ) ; socket . getOutputStream ( ) . write ( sendBytes ) ; socket . getOutputStream ( ) . flush ( ) ; AstericsErrorHandling . instance . reportInfo ( this , "IRTrans sent data : " + cmdString ) ; }
public int hashCode ( ) { return 1 ; }
private void reset ( ) { next = NO_ID ; setId ( NO_ID ) ; }
public String getActualDowntime ( ) { return ( actualDowntime == null ) ? " ( N / A ) " : actualDowntime + "ms" ; }
String resolveTemplatePath ( final Context context , final Writer writer , final RenderParams params , final String argument ) { return ( params . live ) ? " / live / " + argument + " . " + EXTENSION : " / working / " + argument + " . " + EXTENSION ; }
public DispoConfig findDispoConfig ( DispoProgram program ) { ArtifactReadable config = getQuery ( ) . fromBranch ( program . getUuid ( ) ) . andNameEquals ( "Program Config" ) . getResults ( ) . getOneOrNull ( ) ; if ( config == null ) { return DispoUtil . getDefaultConfig ( ) ; } return DispoUtil . configArtToConfigData ( new DispoConfigArtifact ( config ) ) ; }
public boolean hasMatchingOpSig ( String name , JavaOperationSigMask mask ) { // Indexing on signatures optimises this type of request for ( Entry < JavaOperationSignature , Set < String > > entry : operations . entrySet ( ) ) { if ( mask . covers ( entry . getKey ( ) ) ) { if ( entry . getValue ( ) . contains ( name ) ) { return true ; } } } return false ; }
public IonSqlQueryBuilder ( TypeManager typeManager ) { this . typeManager = requireNonNull ( typeManager , "typeManager is null" ) ; }
private OperationController getOperationController ( ) { return ocList . get ( ThreadLocalRandom . current ( ) . nextInt ( ocList . size ( ) ) ) ; }
public List < JDK > getJDKs ( ) { return jdks ; }
public boolean addAll ( int index , Collection < ? extends T > c ) { Collection < T > uniqueValuesToAdd = getUniqueValues ( c ) ; if ( uniqueValuesToAdd . isEmpty ( ) ) { return false ; } try { return super . addAll ( index , uniqueValuesToAdd ) ; } catch ( IndexOutOfBoundsException ioobException ) { comparingSet . removeAll ( uniqueValuesToAdd ) ; throw ioobException ; } }
public Context getContext ( ) { return new Context ( "Sdk - Name" , sdkName ) . addData ( "Sdk - Version" , SDK_VERSION ) ; }
protected void setSelectedDevices ( List < StorageDevice > selectedDevices ) { getStorageDevices ( ) . setSelectedItems ( selectedDevices ) ; }
private JsonObject toJson ( Timer timer , TimeUnit rateUnit , TimeUnit durationUnit ) { Snapshot snapshot = timer . getSnapshot ( ) ; JsonObject json = new JsonObject ( ) ; // Meter populateMetered ( json , timer , rateUnit ) ; // Snapshot double factor = 1 . 0 / durationUnit . toNanos ( 1 ) ; populateSnapshot ( json , snapshot , factor ) ; // Duration rate String duration = durationUnit . toString ( ) . toLowerCase ( ) ; json . putString ( "durationRate" , duration ) ; return json ; }
protected void delete ( LogEntry delegate , String reason , RequestContext context ) throws ResourceDoesNotSupportOperationException { throw new ResourceDoesNotSupportOperationException ( ) ; }
public void setConsumerBatchEnabled ( boolean consumerBatchEnabled ) { this . consumerBatchEnabled = consumerBatchEnabled ; }
public int getLevel ( ) { return data . optInt ( "toclevel" , 1 ) ; }
private void setPagesRecycler ( OnThisDayCard card ) { if ( card . pages ( ) != null ) { RecyclerAdapter recyclerAdapter = new RecyclerAdapter ( card . pages ( ) , card . wiki ( ) , true , ( Activity ) getContext ( ) ) ; recyclerAdapter . setCallback ( new ItemCallback ( ) ) ; pagesRecycler . setAdapter ( recyclerAdapter ) ; } else { pagesRecycler . setVisibility ( GONE ) ; } }
public String getExtendedLabelForVSM ( String providedShapeURI ) { for ( IConfigurationElement configurationElement : extensions ) { String identifier = ( ( ExtensionHandle ) configurationElement . getParent ( ) ) . getSimpleIdentifier ( ) ; if ( identifier != null && identifier . equals ( providedShapeURI ) ) { return getExtendedLabelForVSM ( configurationElement ) ; } } return "Unknown URI" ; // $NON - NLS - 1$ }
public void stopServer ( ) { if ( server instanceof GrizzlyServer ) { ( ( GrizzlyServer ) server ) . setCleanIdleConnections ( true ) ; } server . stop ( ) ; }
protected Supplier < Operation > createOperationSupplier ( ) { return this ; }
public < C extends CtTypedElement > C setType ( CtTypeReference < T > type ) { if ( type != null ) { type . setParent ( this ) ; } if ( getExecutable ( ) != null ) { getExecutable ( ) . setType ( type ) ; } return ( C ) this ; }
public static AuthenticationProfileRepository getInstance ( ) { if ( instance == null ) { synchronized ( AuthenticationProfileRepository . class ) { if ( instance == null ) { instance = new AuthenticationProfileRepository ( ) ; } } } return instance ; }
public HttpRequest filterKey ( HttpRequest request ) throws HttpException { request = replaceDateHeader ( request ) ; String signature = calculateSignature ( createStringToSign ( request ) ) ; return replaceAuthorizationHeader ( request , signature ) ; }
public ScreenshotSize get ( ) { if ( config . getScreenshotSize ( ) != null ) { return config . getScreenshotSize ( ) ; } else { return ScreenshotSize . NORMAL_SIZE ; } }
public final String canonicalID ( ) { return canonical ; }
protected void close ( ) { try { m_sout . close ( ) ; } catch ( IOException ex ) { } }
protected boolean isProcessed ( ChronicleLogOffsetTracker tracker , long offset ) { long last = tracker . readLastCommittedOffset ( ) ; return last > 0 && last >= offset ; }
public EList < Diff > getDifferences ( ) { return this . diffs ; }
IOWorkers . Selector getWorkerSelector ( ) { return workerSelector ; }
public Iterable < Tree > children ( ) { List < Tree > result = new ArrayList < > ( ) ; if ( openParenToken != null ) { result . add ( openParenToken ) ; } super . children ( ) . forEach ( result : : add ) ; if ( closeParenToken != null ) { result . add ( closeParenToken ) ; } return result ; }
public void setName ( String name ) { this . name = requireNonNull ( name ) ; }
public Query existsQuery ( QueryShardContext context ) { if ( hasDocValues ( ) ) { return new DocValuesFieldExistsQuery ( name ( ) ) ; } else { return new TermQuery ( new Term ( FieldNamesFieldMapper . NAME , name ( ) ) ) ; } }
private static void handleYieldExpression ( SubscriptionContext ctx , PyYieldExpressionTree yieldExpr ) { if ( yieldExpr . fromKeyword ( ) == null && yieldExpr . expressions ( ) . size ( ) == 1 ) { yieldExpr . expressions ( ) . forEach ( e - > checkExpr ( e , ctx , "yield" ) ) ; } }
private void importLdif ( InMemoryDirectoryServer directoryServer ) { if ( StringUtils . hasText ( this . ldif ) ) { try { Resource resource = locateResource ( ) ; try ( InputStream inputStream = resource . getInputStream ( ) ) { directoryServer . importFromLDIF ( false , new LDIFReader ( inputStream ) ) ; } } catch ( Exception ex ) { throw new IllegalStateException ( "Unable to load LDIF " + this . ldif , ex ) ; } } }
protected XSSFTableColumn ( XSSFTable table , CTTableColumn ctTableColumn ) { this . table = table ; this . ctTableColumn = ctTableColumn ; }
private boolean isDateSelectable ( Date date ) { if ( isCheckDayInSelectableCals && ! containsDate ( selectableCals , date ) ) { return false ; } return dateConfiguredListener == null || dateConfiguredListener . isDateSelectable ( date ) ; }
public static void updatePathGroup ( List < Variable > variables , IPath node , IPath selection ) { final int segmentsSelection = selection . segmentCount ( ) ; for ( final Variable variable : variables ) if ( variable . getPath ( ) . uptoSegment ( segmentsSelection ) . equals ( selection . makeAbsolute ( ) ) ) { final IPath oldPath = variable . getPath ( ) ; final int count = selection . segmentCount ( ) ; variable . setPath ( buildPath ( oldPath , node , count ) ) ; } }
private FactorComparator ( String factorName , int weight , Comparator < T > comparator ) { this . factorName = factorName ; this . weight = weight ; this . comparator = comparator ; }
private PatternMatcher ( TermContext context ) { this . termContext = context ; multiSubstitutions = new ArrayList < Collection < Map < Variable , Term > > > ( ) ; }
public int hashCode ( ) { final int prime = 31 ; int result = 1 ; result = prime * result + ( ( getArtUuid ( ) == null ) ? 0 : getArtUuid ( ) . hashCode ( ) ) ; result = prime * result + getBranchId ( ) . hashCode ( ) ; return result ; }
private void setUpGetUnregisteredVmTemplateExpectations ( boolean notFound ) { setUpEntityQueryExpectations ( QueryType . GetUnregisteredVmTemplate , GetUnregisteredEntityQueryParameters . class , new String [ ] { "StorageDomainId" , "EntityId" } , new Object [ ] { STORAGE_DOMAIN_ID , TEMPLATE_ID } , notFound ? null : getEntity ( 1 ) ) ; }
private boolean isDomainXmlEnabledForVds ( Guid vdsId ) { return FeatureSupported . isDomainXMLSupported ( getVdsManager ( vdsId ) . getCompatibilityVersion ( ) ) ; }
public void mousePressed ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { doPop ( e ) ; } }
public boolean isSuggestionListDisplayed ( ) { try { if ( searchSuggestions . size ( ) > 0 ) { waitForElementByElement ( searchSuggestions . get ( 0 ) ) ; return searchSuggestions . get ( 0 ) . isDisplayed ( ) ; } } catch ( NoSuchElementException e ) { } return false ; }
public ConnectionId ( final String host , final int port , final String connectionId ) { Objects . requireNonNull ( host ) ; if ( port <= 0 ) { throw new IllegalArgumentException ( "Port must be greater than 0" ) ; } this . host = host ; this . port = port ; this . connectionId = connectionId ; }
public RecursiveLoggerContextInstantiationException ( String message ) { super ( createStaticMessage ( message ) ) ; }
private Map < String , MetricPlotDTOs > createTaskPlots ( ) { // check new model List < MetricPointEntity > metricDetails = getHibernateTemplate ( ) . find ( "select m from MetricPointEntity m where m . metricDescription . taskData . sessionId = ? " , sessionId ) ; if ( metricDetails == null || metricDetails . isEmpty ( ) ) { return oldWay ( ) ; } else { return newWay ( metricDetails ) ; } }
public void testDeadlock ( ) throws Exception { doTest ( 1000 * 30 ) ; // 30 secs almost always locks if ( Thread . interrupted ( ) ) { fail ( "Thread was interrupted at end of test" ) ; } }
public static QueryGranularity fromString ( String str ) { String name = str . toUpperCase ( ) ; if ( name . equals ( "ALL" ) ) { return QueryGranularity . ALL ; } else if ( name . equals ( "NONE" ) ) { return QueryGranularity . NONE ; } else if ( CALENDRIC_GRANULARITIES . containsKey ( name ) ) { return CALENDRIC_GRANULARITIES . get ( name ) ; } return new DurationGranularity ( convertValue ( str ) , 0 ) ; }
public Object [ ] getElements ( Object element ) { if ( element instanceof Object [ ] ) return ( Object [ ] ) element ; if ( element instanceof Collection ) return ( ( Collection ) element ) . toArray ( ) ; return new Object [ 0 ] ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; eventLoopGroup = new NioEventLoopGroup ( ) ; executor = OrderedSafeExecutor . newBuilder ( ) . name ( "BKClientOrderedSafeExecutor" ) . numThreads ( 2 ) . build ( ) ; }
private void readInternal ( long position , byte [ ] buffer , int bufferOffset , int bufferLength ) { try { long readStart = System . nanoTime ( ) ; inputStream . readFully ( position , buffer , bufferOffset , bufferLength ) ; stats . readDataBytesPerSecond ( bufferLength , System . nanoTime ( ) - readStart ) ; } catch ( PrestoException e ) { // just in case there is a Presto wrapper or hook throw e ; } catch ( Exception e ) { throw new PrestoException ( HIVE_FILESYSTEM_ERROR , format ( "Error reading from % s at position % s" , id , position ) , e ) ; } }
public void invalidPropertiesFormat ( ) { VmDevice device = new VmDevice ( ) ; device . setType ( VmDeviceGeneralType . DISK ) ; device . setCustomProperties ( "bootable" ) ; DevicePropertiesUtils utils = mockDevicePropertiesUtils ( ) ; List < ValidationError > errors = utils . validateDeviceProperties ( Version . v3_3 , device ) ; assertFalse ( errors . isEmpty ( ) ) ; assertEquals ( ValidationFailureReason . SYNTAX_ERROR , errors . get ( 0 ) . getReason ( ) ) ; }
private boolean isMandatory ( MethodExpression expression ) { return expression . getMethod ( ) . equals ( MANDATORY ) ? true : false ; }
DeltaVisit next ( ) { // If our parent has no more children , discard it . if ( parent != null && parent . nextChild == null ) { parent . data = null ; parent = parent . parent ; } if ( nextChild != null ) return new DeltaVisit ( this ) ; // If we have no child ourselves , our parent must ( if it exists ) , // due to the discard rule above . With no parent , we are done . if ( parent != null ) return new DeltaVisit ( parent ) ; return null ; }
boolean delayNextTimeToRun ( Date timeToRunTheVm ) { this . timeToRunTheVm = timeToRunTheVm ; numOfSkips = ++ numOfSkips % MAXIMUM_NUM_OF_SKIPS_BEFORE_AUTO_START_VM ; return numOfSkips != 0 ; }
protected boolean isTransientException ( Throwable e ) { if ( e instanceof SQLException ) { final String sqlState = ( ( SQLException ) e ) . getSQLState ( ) ; // limited to errors that are likely to be resolved within a few retries // retry on connection errors and insufficient resources // see http :/ / www . postgresql . org / docs / current / static / errcodes - appendix . html for details return sqlState != null && ( sqlState . startsWith ( "08" ) || sqlState . startsWith ( "53" ) ) ; } return false ; }
public JupiterActivity generateJupiterActivity ( Operation op , User source , SPath editor ) { // send ( op , myMsgs , otherMsgs ) ; JupiterActivity jupiterActivity = new JupiterActivity ( this . vectorTime , op , source , editor ) ; // add ( op , myMsgs ) to outgoing ; this . ackJupiterActivityList . add ( new OperationWrapper ( op , this . vectorTime . getLocalOperationCount ( ) ) ) ; // myMsgs = myMsgs + 1 ; this . vectorTime = this . vectorTime . incrementLocalOperationCount ( ) ; return jupiterActivity ; }
public void testAssignExecutorInvalidExecutor ( ) throws Exception { final ExecutableFlow flow = TestUtils . createExecutableFlow ( "exectest1" , "exec1" ) ; this . executionFlowDao . uploadExecutableFlow ( flow ) ; // Since we haven't inserted any executors , 1 should be non - existent executor id . assertThatThrownBy ( ( ) - > this . assignExecutor . assignExecutor ( 1 , flow . getExecutionId ( ) ) ) . isInstanceOf ( ExecutorManagerException . class ) . hasMessageContaining ( "non - existent executor" ) ; }
private static BackgroundHiveSplitLoader backgroundHiveSplitLoaderOfflinePartitions ( ) { ConnectorSession connectorSession = new TestingConnectorSession ( new HiveSessionProperties ( new HiveClientConfig ( ) . setMaxSplitSize ( new DataSize ( 1 . 0 , GIGABYTE ) ) ) . getSessionProperties ( ) ) ; return new BackgroundHiveSplitLoader ( SIMPLE_TABLE , createPartitionMetadataWithOfflinePartitions ( ) , TupleDomain . all ( ) , createBucketSplitInfo ( Optional . empty ( ) , ImmutableList . of ( ) ) , connectorSession , new TestingHdfsEnvironment ( ) , new NamenodeStats ( ) , new TestingDirectoryLister ( TEST_FILES ) , directExecutor ( ) , 2 , false ) ; }
public String toString ( ) { return methodPrefix ; }
private void setPlatformTextClassifier ( @Nullable TextClassifier textClassifier ) { android . view . textclassifier . TextClassificationManager textClassificationManager = ( android . view . textclassifier . TextClassificationManager ) mContext . getSystemService ( Context . TEXT_CLASSIFICATION_SERVICE ) ; if ( textClassificationManager == null ) { return ; } android . view . textclassifier . TextClassifier platformTextClassifier = textClassifier == null ? null : new PlatformTextClassifier ( mContext , textClassifier ) ; textClassificationManager . setTextClassifier ( platformTextClassifier ) ; }
Object loadServiceCapabilities ( String serviceUrl ) throws IOException { HttpGet request = new HttpGet ( serviceUrl ) ; request . setHeader ( new BasicHeader ( HttpHeaders . ACCEPT , ACCEPT_SERVICE_CAPABILITIES ) ) ; CloseableHttpResponse httpResponse = execute ( request , serviceUrl , "retrieve help" ) ; validateResponse ( httpResponse , serviceUrl ) ; HttpEntity httpEntity = httpResponse . getEntity ( ) ; ContentType contentType = ContentType . getOrDefault ( httpEntity ) ; if ( contentType . getMimeType ( ) . equals ( "text / plain" ) ) { return getContent ( httpEntity ) ; } return parseJsonMetadata ( httpEntity ) ; }
protected void doStop ( ) { log . info ( "Stopping Netty server" ) ; wrkr . shutdownGracefully ( ) ; if ( ! datagram ) { boss . shutdownGracefully ( ) ; } try { sock . channel ( ) . closeFuture ( ) . sync ( ) ; } catch ( InterruptedException e ) { log . warn ( "Netty server stop interrupted" ) ; Thread . currentThread ( ) . interrupt ( ) ; } log . info ( "Netty server stopped" ) ; notifyStopped ( ) ; }
public ChannelViewHolder onCreateViewHolder ( ViewGroup parent , int viewType ) { return new ChannelViewHolder ( ( ChannelView ) inflater . inflate ( R . layout . channel_item_layout , parent , false ) ) ; }
public void onSelectionChanged ( int selectedItemCnt ) { updateSelectionToggle ( actionMode . getMenu ( ) . findItem ( R . id . toggle_selection ) ) ; actionMode . setTitle ( getResources ( ) . getQuantityString ( getActionModeTitleId ( actionModeType ) , selectedItemCnt , selectedItemCnt ) ) ; }
private boolean shouldBeDistributed ( PlanNode planNode ) { if ( planNode instanceof JoinNode ) { return true ; } if ( planNode instanceof AggregationNode ) { // TODO : differentiate aggregation with empty grouping set return true ; } if ( planNode instanceof TopNNode ) { return ( ( TopNNode ) planNode ) . getStep ( ) == TopNNode . Step . PARTIAL ; } return false ; }
public void testConcurrency ( ) { final ServerTemplate serverTemplate = templateStorage . load ( serverTemplateId ) ; marshal ( "application / xml" , serverTemplate ) ; Thread disconnect = new Thread ( ( ) - > disconnect ( ) ) ; disconnect . start ( ) ; String response = marshal ( "application / xml" , serverTemplate ) ; assertNotNull ( response ) ; }
protected Void visitIntegerLiteral ( IntegerLiteral node , Integer indent ) { builder . append ( node . getValue ( ) ) ; return null ; }
private List < GerritQueryResult > executeQueryRest ( String query ) throws GerritException { return client . executeQueryRest ( new NullProgressMonitor ( ) , query ) ; }
public QueryWrapper ( @JsonProperty ( "query" ) String query , @JsonProperty ( "queryType" ) String queryType ) { this ( query , queryType , null ) ; }
private List < CoordinatorDuty > makeCompactSegmentsDuty ( ) { return ImmutableList . of ( compactSegments ) ; }
public CreateServerOptions networks ( String . . . networks ) { return networks ( ImmutableSet . copyOf ( networks ) ) ; }
private static AbbreviatedObjectId id ( DiffEntry de ) { return de . changeType == ChangeType . DELETE ? de . oldId : de . newId ; }
protected VariableReferenceExpression getVariableReference ( RowExpression expression ) { if ( expression instanceof VariableReferenceExpression ) { return ( ( VariableReferenceExpression ) expression ) ; } throw new PinotException ( PINOT_UNSUPPORTED_EXPRESSION , Optional . empty ( ) , "Expected a variable reference but got " + expression ) ; }
public boolean isLocalOnly ( ) { return this == LOCAL ; }
protected void findUsers ( String searchString , AsyncQuery query ) { Frontend . getInstance ( ) . runQuery ( VdcQueryType . Search , new DirectorySearchParameters ( "ADUSER@" + ( ( ProfileEntry ) getProfile ( ) . getSelectedItem ( ) ) . getAuthz ( ) + " : " + searchString , SearchType . DirectoryUser , getNamespace ( ) . getSelectedItem ( ) ) , query ) ; // $NON - NLS - 1$ // $NON - NLS - 2$ }
public String getImageUrl ( String id ) { return getProvider ( ) . getUrl ( ) + API_VERSION + " / images / " + id ; }
public User ( @NonNull String username , @NonNull String password ) { this ( username , password , null , null ) ; }
public final String consoleClientResourcesUrl ( ) { String url = getString ( DynamicMessageKey . CONSOLE_CLIENT_RESOURCES_URL ) ; boolean isAbsolute = url . contains ( " :/ / " ) ; return isAbsolute ? url : " / " + BaseContextPathData . getInstance ( ) . getRelativePath ( ) + url ; // $NON - NLS - 1$ }
private boolean isFileEntryPackageable ( ZipEntry entry ) { return ApkBuilder . checkFileForPackaging ( entry . getName ( ) ) && isValidMetaInfEntry ( entry . getName ( ) ) ; }
public void testList ( ) { List < VirtualMachine > list = api ( ) . list ( ) ; VirtualMachine vm = api ( ) . get ( getName ( ) ) ; assertTrue ( list . contains ( vm ) ) ; }
public void addLayer ( String id , StyleLayer layer ) { layersById . put ( id , layer ) ; }
public void setSelection ( ITimeGraphEntry trace ) { /* if there is a pending selection , ignore this one */ if ( fListenerNotifier != null && fListenerNotifier . hasSelectionChanged ( ) ) { return ; } fSelectedEntry = trace ; fTimeGraphCtrl . selectItem ( trace , false ) ; adjustVerticalScrollBar ( ) ; }
private ClassFile newClassFile ( String name , int accessFlags , String superclass , String . . . interfaces ) { try { return new ClassFile ( name , accessFlags , superclass , classLoader , interfaces ) ; } catch ( Exception e ) { throw BeanLogger . LOG . unableToCreateClassFile ( name , e . getCause ( ) ) ; } }
public boolean addListener ( String type , long id , ClassLoaderListener classLoaderListener ) { final VirtualClassLoader localClassLoader = getLocalClassLoader ( type , id ) ; return localClassLoader . addListener ( classLoaderListener ) ; }
public static final boolean setPreferenceNodeId ( String id ) { if ( fgPreferenceNodeId == null || id == null ) { fgPreferenceNodeId = id ; return true ; } return false ; }
private void init ( ) { // get the localhost . try { hostname = InetAddress . getLocalHost ( ) . getHostName ( ) ; } catch ( UnknownHostException e ) { logger . warn ( "Error getting the value of localhost . " + "Proceeding with 'localhost' . " , e ) ; } }
OSImageToImage ( JustProvider provider ) { this . provider = provider ; }
private Optional < Cookie > findCookieWithName ( String cookieName , HttpClient httpClient ) { return Arrays . stream ( httpClient . getState ( ) . getCookies ( ) ) . filter ( c - > cookieName . equals ( c . getName ( ) ) ) . findFirst ( ) ; }
public void destroy ( ) { // clients must be destroyed before the pools or // you will create a several second busy wait loop for ( JettyHttpClient client : clients ) { client . close ( ) ; } if ( pool != null ) { pool . close ( ) ; pool = null ; } destroyed . set ( true ) ; }
private Set < String > expandRegionalChannelUris ( String channelUri ) { if ( BBC1_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { return Sets . difference ( BBC1_TXLOG_CHANNEL_URIS , ImmutableSet . of ( channelUri ) ) ; } else if ( BBC2_TXLOG_CHANNEL_URIS . contains ( channelUri ) ) { return Sets . difference ( BBC2_TXLOG_CHANNEL_URIS , ImmutableSet . of ( channelUri ) ) ; } return null ; }
public void testMultipleBatchesLateral_WithStreamingAgg ( ) throws Exception { String sql = "SELECT t2 . maxprice FROM ( SELECT customer . c_orders AS c_orders FROM " + "dfs . `lateraljoin / multipleFiles / ` customer ) t1 , LATERAL ( SELECT CAST ( MAX ( t . ord . o_totalprice ) " + " AS int ) AS maxprice FROM UNNEST ( t1 . c_orders ) t ( ord ) GROUP BY t . ord . o_orderstatus ) t2" ; testBuilder ( ) . sqlQuery ( sql ) . unOrdered ( ) . baselineColumns ( "maxprice" ) . baselineValues ( 367190 ) . baselineValues ( 316347 ) . baselineValues ( 146610 ) . baselineValues ( 306996 ) . baselineValues ( 235695 ) . baselineValues ( 177819 ) . build ( ) . run ( ) ; }
public boolean isType ( String value ) { for ( GlusterStatus status : values ) { if ( status . name ( ) . equals ( value ) ) { return true ; } } return false ; }
public void exceptionCaught ( ChannelHandlerContext ctx , Throwable cause ) throws Exception { cause . printStackTrace ( ) ; ctx . close ( ) ; }
CloseNoOpServerProtocolHandler ( String websocketPath ) { super ( websocketPath , null , false ) ; }
public MessageView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; super . setOrientation ( VERTICAL ) ; }
public Canvas addShapeIntoView ( final Shape shape ) { if ( shape . getUUID ( ) == null ) { shape . setUUID ( UUID . uuid ( ) ) ; } getView ( ) . add ( shape . getShapeView ( ) ) ; return this ; }
public boolean getRequiredParamBoolean ( final String key ) throws ActionParamsException { final String val = getRequiredParam ( key ) ; try { return Boolean . parseBoolean ( val ) ; } catch ( Exception e ) { throw new ActionParamsException ( e . getMessage ( ) ) ; } }
public void onPingFromClient ( PingFromClientEvent event , EntityRef entity ) { Instant end = Instant . now ( ) ; endMap . put ( entity , end ) ; updatePing ( entity ) ; }
public boolean areEqual ( MapObject o1 , MapObject o2 ) { if ( o1 == null ) { return o2 == null ; } else { return o1 . id . equals ( o2 . id ) ; } }
public RedisMetadataStore ( RedisConnectionFactory connectionFactory ) { Assert . notNull ( connectionFactory , "'connectionFactory' must not be null . " ) ; this . redisTemplate = new StringRedisTemplate ( connectionFactory ) ; }
public CompleteTransactionMessage ( long initiatorHSId , long coordinatorHSId , long txnId , boolean isReadOnly , int hash , boolean isRollback , boolean requiresAck , boolean isRestart , boolean isForReplay ) { super ( initiatorHSId , coordinatorHSId , txnId , 0 , isReadOnly , isForReplay ) ; m_hash = hash ; setBit ( ISROLLBACK , isRollback ) ; setBit ( REQUIRESACK , requiresAck ) ; setBit ( ISRESTART , isRestart ) ; }
private CuEinvoiceDao getCuEinvoiceDao ( ) { if ( ObjectUtils . isNull ( cuEinvoiceDao ) ) { cuEinvoiceDao = SpringContext . getBean ( CuEinvoiceDaoOjb . class ) ; } return cuEinvoiceDao ; }
private static EchoTagStatementTree newEchoTagStatement ( ExpressionTree expression , InternalSyntaxToken eosToken ) { SeparatedList < ExpressionTree > expressionList = new SeparatedListImpl < > ( Collections . singletonList ( expression ) , Collections . emptyList ( ) ) ; return newEchoTagStatement ( expressionList , eosToken ) ; }
private static TextSummarizer getLocalSummarizer ( ) { Collection < ? extends TextSummarizer > summarizers = Lookup . getDefault ( ) . lookupAll ( TextSummarizer . class ) ; if ( ! summarizers . isEmpty ( ) ) { summarizerToUse = summarizers . iterator ( ) . next ( ) ; return summarizerToUse ; } return null ; }
public void verifyNoVideo ( ) { if ( checkIfElementOnPage ( mediaNode ) ) { throw new AssertionError ( "Media Node is still on the page" ) ; } else { PageObjectLogging . log ( "verifyNoVideo" , "Verified no video is on page" , true , driver ) ; } }
private void startOrStopGeoDataListener ( ) { geoDataSubscription . unsubscribe ( ) ; if ( requireGeodata ) { geoDataSubscription = locationUpdater . start ( GeoDirHandler . UPDATE_GEODATA ) ; } }
ZipFormatter ( Formatters formatters , FormatterUtil formatterUtil , HtmlBuilder html ) { this . util = formatterUtil ; this . html = html ; }
private boolean clusterHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; return cluster != null && cluster . getArchitecture ( ) != null && ArchitectureType . ppc == cluster . getArchitecture ( ) . getFamily ( ) ; }
private void createIndex ( Connection conn , String indexExt , String columnName ) throws PersistenceException { if ( metaData . isIndexingDisabled ( ) ) return ; boolean indexExists = indexExists ( getIndexName ( false , indexExt ) , conn ) ; if ( ! indexExists ) { String ddl = String . format ( "CREATE INDEX % s ON % s ( % s ) " , getIndexName ( true , indexExt ) , getTableName ( ) , columnName ) ; if ( log . isTraceEnabled ( ) ) { log . tracef ( "Adding index with following DDL : ' % s' . " , ddl ) ; } executeUpdateSql ( conn , ddl ) ; } }
public Object getValue ( ) { return value ; }
private boolean needProjectionNode ( AbstractPlanNode root ) { if ( ! root . planNodeClassNeedsProjectionNode ( ) ) { return false ; } // If there is a complexGroupby at his point , it means that // display columns contain all the order by columns and // does not require another projection node on top of sort node . // If there is a complex aggregation case , the projection plan node is already added // right above the group by plan node . In future , we may inline that projection node . if ( m_parsedSelect . hasComplexGroupby ( ) || m_parsedSelect . hasComplexAgg ( ) ) { return false ; } if ( root instanceof AbstractReceivePlanNode && m_parsedSelect . hasPartitionColumnInGroupby ( ) ) { // Top aggregate has been removed , its schema is exactly the same to // its local aggregate node . return false ; } return true ; }
public void isExecutable_HeaderCellSelected ( ) { when ( scenarioGridModelMock . getSelectedCells ( ) ) . thenReturn ( Collections . emptyList ( ) ) ; when ( scenarioGridModelMock . getSelectedHeaderCells ( ) ) . thenReturn ( Arrays . asList ( selectedCell , selectedCell2 ) ) ; assertTrue ( handler . isExecutable ( scenarioGridMock ) ) ; }
public boolean equals ( Object object ) { if ( object == this ) { return true ; } if ( ! ( object instanceof XarSecurityRule ) ) { return false ; } XarSecurityRule rhs = ( XarSecurityRule ) object ; return new EqualsBuilder ( ) . append ( this . right , rhs . right ) . append ( this . simple , rhs . simple ) . isEquals ( ) ; }
public static boolean containsSearchAnnotations ( XClass mappedClass ) { List < XClass > hierarchy = createXClassHierarchy ( mappedClass ) ; for ( XClass clazz : hierarchy ) { if ( containsLocalSearchAnnotation ( clazz ) ) { return true ; } } return false ; }
private static int computeNewVectorCapacity ( int usedCapacity , int newPayload , int currentCapacity ) { int newUsedCapacity = BaseAllocator . nextPowerOfTwo ( usedCapacity + newPayload ) ; assert newUsedCapacity >= 0 ; return Math . max ( currentCapacity , newUsedCapacity ) ; }
private static void cleanShutdown ( ) { log . info ( "CleanShutdown : Starting Cleanup . " ) ; shutdownServer = true ; try { CorfuServerNode current = activeServer ; if ( current != null ) { current . close ( ) ; } } catch ( Throwable th ) { log . error ( "cleanShutdown : failed during shutdown" , th ) ; } // Flush the async appender before exiting to prevent the loss of logs LoggerContext loggerContext = ( LoggerContext ) LoggerFactory . getILoggerFactory ( ) ; loggerContext . stop ( ) ; }
public void preInit ( FMLPreInitializationEvent event ) { configDir = new File ( event . getModConfigurationDirectory ( ) , "antiqueatlas" ) ; configDir . mkdir ( ) ; extTileIdMap = ExtTileIdMap . instance ( ) ; extTileConfig = new ExtTileConfig ( new File ( configDir , "tileids . json" ) ) ; extTileConfig . load ( extTileIdMap ) ; // Assign default values AFTER the config file loads , so that the old saved values are kept : registerVanillaCustomTiles ( ) ; checkSaveConfig ( ) ; }
public void close ( ) { try { if ( this . readingRaw . get ( ) && ! finalizeRaw ( ) && LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( "Finalize on readRaw ( ) returned false for " + this ) ; } if ( this . client . isConnected ( ) ) { this . client . logout ( ) ; } this . client . disconnect ( ) ; } catch ( Exception e ) { LOGGER . warn ( "failed to disconnect FTPClient" , e ) ; } }
protected FileType doGetType ( ) throws Exception { return this . stat == null ? FileType . IMAGINARY : FileType . FILE_OR_FOLDER ; }
public EquivalentHashMap ( int initialCapacity , float loadFactor , Equivalence < K > keyEq , Equivalence < V > valueEq ) { int capacity = 1 ; while ( capacity < initialCapacity ) capacity < <= 1 ; this . loadFactor = loadFactor ; threshold = ( int ) ( capacity * loadFactor ) ; table = new Node [ capacity ] ; this . keyEq = keyEq ; this . valueEq = valueEq ; }
private void mockSSHClient ( ) { try { doNothing ( ) . when ( sshclient ) . connect ( ) ; doNothing ( ) . when ( sshclient ) . authenticate ( ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } }
public static String sanitizeKey ( final Contentlet vanityUrl ) throws DotDataException , DotSecurityException { Host host = hostAPI . find ( vanityUrl . getStringProperty ( VanityUrlContentType . SITE_FIELD_VAR ) , APILocator . systemUser ( ) , false ) ; return sanitizeKey ( host . getIdentifier ( ) , fixURI ( vanityUrl . getStringProperty ( VanityUrlContentType . URI_FIELD_VAR ) ) , vanityUrl . getLanguageId ( ) ) ; }
protected void dataTemplateToJsonGenerator ( Object data , DataSchema schema , JsonGenerator generator , boolean order ) throws IOException { if ( order ) { JacksonTraverseCallback callback = new SchemaOrderTraverseCallback ( schema , generator ) ; Data . traverse ( data , callback ) ; } else { objectToJsonGenerator ( data , generator ) ; } }
public void execute ( ) throws ServerApiException , ConcurrentOperationException { ListResponse < KubernetesSupportedVersionResponse > response = kubernetesVersionService . listKubernetesSupportedVersions ( this ) ; response . setResponseName ( getCommandName ( ) ) ; setResponseObject ( response ) ; }
public void loggedInUserPropertyFalseTest ( ) throws Exception { configurationService . setProperty ( "webui . user . assumelogin" , false ) ; String token = getAuthToken ( admin . getEmail ( ) , password ) ; getClient ( token ) . perform ( get ( " / api / authn / status" ) . header ( "X - On - Behalf - Of" , eperson . getID ( ) ) ) . andExpect ( status ( ) . isBadRequest ( ) ) ; }
protected void addExtraHeaders ( Builder webResource ) { if ( additionalHeaders != null ) { for ( Map . Entry < String , List < Object > > entry : additionalHeaders . entrySet ( ) ) { webResource . header ( entry . getKey ( ) , entry . getValue ( ) ) ; } } }
private boolean hasNewFragment ( EList < InteractionFragment > currentList , List < InteractionFragment > newList ) { return ( newList . size ( ) > currentList . size ( ) ) ; }
void closeResultSets ( ) throws SQLException { closeResultSets ( activeResultSets ) ; generatedKeysResultSet = null ; }
public boolean isTemplateAvailable ( String view , Environment environment , ClassLoader classLoader , ResourceLoader resourceLoader ) { if ( ClassUtils . isPresent ( "org . apache . jasper . compiler . JspConfig" , classLoader ) ) { String resourceName = getResourceName ( view , environment ) ; if ( resourceLoader . getResource ( resourceName ) . exists ( ) ) { return true ; } try { return new File ( "src / main / webapp" , resourceName ) . exists ( ) ; } catch ( AccessControlException ex ) { } } return false ; }
public T visit ( final AntlrBaseNode node ) { return node . accept ( this ) ; }
public static void addDiskToVm ( BaseDisk disk , Guid vmId ) { DbFacade . getInstance ( ) . getBaseDiskDao ( ) . save ( disk ) ; VmDeviceUtils . addManagedDevice ( new VmDeviceId ( disk . getId ( ) , vmId ) , VmDeviceType . DISK , VmDeviceType . DISK , null , true , false ) ; }
private static Throwable getConfigFailureException ( ITestContext context ) { for ( IInvokedMethod method : context . getSuite ( ) . getAllInvokedMethods ( ) ) { ITestNGMethod m = method . getTestMethod ( ) ; if ( m . isBeforeSuiteConfiguration ( ) && ( ! method . getTestResult ( ) . isSuccess ( ) ) ) { return method . getTestResult ( ) . getThrowable ( ) ; } } return null ; }
protected String toString ( Operator operator ) { if ( Operator . STARTSWITH . equals ( operator ) ) { return LIKE ; } return operator . toString ( ) ; }
static UberDocument toUberDocument ( final Object object ) { if ( object == null ) { return null ; } if ( object instanceof UberDocument ) { return ( UberDocument ) object ; } throw new IllegalArgumentException ( "Don't know how to handle type : " + object . getClass ( ) ) ; }
private ArgumentSplitter ( String arguments ) { this . arguments = arguments ; }
public LgoProducts getProducts ( ) throws IOException { return this . proxy . getProducts ( exchange . getNonceFactory ( ) . createValue ( ) , exchange . getSignatureService ( ) ) ; }
protected void addAttachmentToNote ( T document , AccountingXmlDocumentBackupLink backupLink , Note note ) { try { Attachment attachment = accountingXmlDocumentDownloadAttachmentService . createAttachmentFromBackupLink ( document , backupLink ) ; note . setAttachment ( attachment ) ; } catch ( IOException e ) { LOG . error ( "addAttachmentToNote , unable to create attachment : " + e . getMessage ( ) ) ; String message = MessageFormat . format ( configurationService . getPropertyValueAsString ( CuFPKeyConstants . ERROR_CREATE_ACCOUNTING_DOCUMENT_ATTACHMENT_DOWNLOAD ) , backupLink . getLinkUrl ( ) ) ; throw new ValidationException ( message ) ; } }
public Void getResult ( ) { throw new UnsupportedOperationException ( ) ; }
public PlanWithProperties visitUnnest ( UnnestNode node , PreferredProperties preferredProperties ) { PreferredProperties translatedPreferred = preferredProperties . translate ( variable - > node . getReplicateVariables ( ) . contains ( variable ) ? Optional . of ( variable ) : Optional . empty ( ) ) ; return rebaseAndDeriveProperties ( node , planChild ( node , translatedPreferred ) ) ; }
public ValidationResult isAnyDomainInProcess ( ) { List < StoragePoolIsoMap > poolIsoMaps = getStoragePoolIsoMapDao ( ) . getAllForStoragePool ( storagePool . getId ( ) ) ; for ( StoragePoolIsoMap domainIsoMap : poolIsoMaps ) { if ( domainIsoMap . getStatus ( ) != null && domainIsoMap . getStatus ( ) . isStorageDomainInProcess ( ) ) { return new ValidationResult ( VdcBllMessages . ACTION_TYPE_FAILED_STORAGE_DOMAIN_STATUS_ILLEGAL2 , String . format ( "$status % 1$s" , domainIsoMap . getStatus ( ) ) ) ; } } return ValidationResult . VALID ; }
private static boolean isFunctionNameMatch ( RowExpression rowExpression , String expectedName ) { if ( castToExpression ( rowExpression ) instanceof FunctionCall ) { return ( ( FunctionCall ) castToExpression ( rowExpression ) ) . getName ( ) . toString ( ) . equalsIgnoreCase ( expectedName ) ; } return false ; }
public boolean hasError ( ) { return result != null && CommandResult . Type . ERROR . equals ( result . getType ( ) ) ; }
private void setupVdsNetworkInterfaceDao ( ) { List < VdsNetworkInterface > expectedVdsNetworkInterface = Collections . singletonList ( vdsNetworkInterface ) ; when ( vdsNetworkInterfaceDaoMock . getVdsInterfacesByNetworkId ( networkId ) ) . thenReturn ( expectedVdsNetworkInterface ) ; when ( getDbFacadeMockInstance ( ) . getInterfaceDao ( ) ) . thenReturn ( vdsNetworkInterfaceDaoMock ) ; }
protected void setProject ( IProject project ) { this . project = project ; }
public List < String > values ( String name ) { return headers == null ? null : headers . get ( name ) ; }
protected Pair < Recipients , Boolean > doInBackground ( Recipients . . . recipients ) { Capability textCapability = DirectoryHelper . getUserCapabilities ( context , recipients [ 0 ] ) . getTextCapability ( ) ; return new Pair < > ( recipients [ 0 ] , textCapability == Capability . SUPPORTED ) ; }
public void cleanup ( ) { myNavigationHelper . cleanup ( ) ; }
private static DateTime setBeginValidTime ( DateTime beginValidTimeArg , DateTime issueInstant ) { DateTime beginValidTime = beginValidTimeArg ; final DateTime now = new DateTime ( ) ; if ( beginValidTime == null || beginValidTime . isAfter ( now ) ) { beginValidTime = now ; } // If provided time is after the given issue instant , // modify it to include the issue instant if ( beginValidTime . isAfter ( issueInstant ) ) { if ( issueInstant . isAfter ( now ) ) { beginValidTime = now ; } } else { beginValidTime = issueInstant ; } return beginValidTime ; }
void setupRestrictedNotification ( ) { final Resources res = getResources ( mContext , mActiveDataSubId ) ; final String title = res . getString ( R . string . disable_tether_notification_title ) ; final String message = res . getString ( R . string . disable_tether_notification_message ) ; showNotification ( R . drawable . stat_sys_tether_general , title , message , "" ) ; }
protected File getFeatureTypeDir ( File featureTypesBaseDir , String namespacePrefix , String typeName ) { return new File ( featureTypesBaseDir , getDataStoreName ( namespacePrefix , typeName ) ) ; }
public static void setupSystemProperties ( ) { // These are not needed for the tests System . setProperty ( "org . uberfire . nio . git . daemon . enabled" , "false" ) ; System . setProperty ( "org . uberfire . nio . git . ssh . enabled" , "false" ) ; System . setProperty ( "org . uberfire . sys . repo . monitor . disabled" , "true" ) ; }
public void setPreferredAgencies ( String s ) { if ( ! s . isEmpty ( ) ) { preferredAgencies = new HashSet < > ( ) ; Collections . addAll ( preferredAgencies , s . split ( " , " ) ) ; } }
synchronized void updateSubscribedTopics ( final Set < String > topics , final String logPrefix ) { log . debug ( " { } found { } topics possibly matching subscription" , logPrefix , topics . size ( ) ) ; subscriptionUpdates . clear ( ) ; subscriptionUpdates . addAll ( topics ) ; setRegexMatchedTopicsToSourceNodes ( ) ; setRegexMatchedTopicToStateStore ( ) ; }
public void releaseCursor ( Cursor cursor ) { try { cursor . release ( ) ; if ( cursors . remove ( cursor ) && provider . isClosed ( ) && cursors . isEmpty ( ) ) { releaseResources ( ) ; } } catch ( Exception e ) { LOGGER . warn ( "Exception was found trying to release cursor resources . Execution will continue" , e ) ; } finally { statistics . decrementOpenCursors ( ) ; } }
protected void doStop ( ) { if ( autoEncryptionSupport != null ) { autoEncryptionSupport . close ( ) ; } super . doStop ( ) ; LDAPCache . clear ( ) ; }
Now ( A a ) { this . a = a ; }
private String getWorkspaceRelativePath ( String sourcePath ) { if ( org . apache . commons . lang . StringUtils . isBlank ( sourcePath ) || sourcePath . contains ( " { " ) ) { return sourcePath ; } IPath absolutePath = new Path ( sourcePath ) ; IContainer container = ResourcesPlugin . getWorkspace ( ) . getRoot ( ) . getContainerForLocation ( absolutePath ) ; if ( container != null ) { return container . getFullPath ( ) . toString ( ) ; } return null ; }
private void buildErrataDetailPanel ( ) { errataDetailPanel . clear ( ) ; errataDetailFormPanel = new GeneralFormPanel ( ) ; errataTitle = new Span ( ) ; errataTitle . setStyleName ( style . errataTitleLabel ( ) ) ; FlowPanel errataTitlePanel = new FlowPanel ( ) ; errataTitlePanel . setStyleName ( style . errataTitlePanel ( ) ) ; errataTitlePanel . add ( errataTitle ) ; errataDetailPanel . add ( errataTitlePanel ) ; errataDetailPanel . add ( errataDetailFormPanel ) ; }
public List < String > getMoreStable ( String branch ) { int i = order . indexOf ( fullName ( branch ) ) ; if ( 0 <= i ) { return order . subList ( i + 1 , order . size ( ) ) ; } else { return ImmutableList . of ( ) ; } }
public void notifyListeners ( int eventType , Event event ) { if ( this . dropdownTable != null && ! this . dropdownTable . isDisposed ( ) ) this . dropdownTable . notifyListeners ( eventType , event ) ; }
public static void setup ( ) throws Exception { startMiniDfsCluster ( TestSqlStdBasedAuthorization . class . getSimpleName ( ) ) ; prepHiveConfAndData ( ) ; setSqlStdBasedAuthorizationInHiveConf ( ) ; startHiveMetaStore ( ) ; startDrillCluster ( true ) ; addHiveStoragePlugin ( getHivePluginConfig ( ) ) ; addMiniDfsBasedStorage ( new HashMap < > ( ) ) ; generateTestData ( ) ; }
public OrderType retireOrderType ( OrderType orderType , String reason ) { orderType . setRetired ( true ) ; orderType . setRetireReason ( reason ) ; return saveOrderType ( orderType ) ; }
private void updateFiltersCheckState ( ) { ICommonFilterDescriptor filterDescriptor ; INavigatorFilterService filterService = getContentService ( ) . getFilterService ( ) ; for ( Object child : filterContentProvider . getElements ( getContentService ( ) ) ) { filterDescriptor = ( ICommonFilterDescriptor ) child ; if ( filterService . isActive ( filterDescriptor . getId ( ) ) ) { getTableViewer ( ) . setChecked ( child , true ) ; getCheckedItems ( ) . add ( child ) ; } else { getTableViewer ( ) . setChecked ( child , false ) ; } } }
public FeatureTypeStyle transform ( MBStyle styleContext , Double minScaleDenominator , Double maxScaleDenominator ) { // Would prefer to accept zoom levels here ( less concepts in our API ) // If we accept zoom levels we may be able to reduce , and return a list of FeatureTypeStyles // ( with the understanding that the list may be empty if the MBLayer does not contribute any content // at a specific zoom level range ) FeatureTypeStyle style = transform ( styleContext ) ; if ( style == null ) { return null ; } for ( Rule rule : style . rules ( ) ) { if ( minScaleDenominator != null ) { rule . setMinScaleDenominator ( minScaleDenominator ) ; } if ( maxScaleDenominator != null ) { rule . setMaxScaleDenominator ( maxScaleDenominator ) ; } } return style ; }
public Optional < RevCommit > areAllReachable ( Collection < RevCommit > targets , Collection < RevCommit > starters ) throws MissingObjectException , IncorrectObjectTypeException , IOException { walk . reset ( ) ; if ( topoSort ) { walk . sort ( RevSort . TOPO ) ; } for ( RevCommit target : targets ) { walk . markStart ( target ) ; } for ( RevCommit starter : starters ) { walk . markUninteresting ( starter ) ; } return Optional . ofNullable ( walk . next ( ) ) ; }
public Optional < SessionStore < J2EContext > > buildFromTrackableSession ( final J2EContext context , final Object trackableSession ) { return trackableSession != null ? Optional . of ( new J2EProvidedSessionStore ( ( HttpSession ) trackableSession ) ) : Optional . empty ( ) ; }
public Response awaitResponse ( ) throws Exception { return remoteFuture . get ( ) ; }
static boolean isDefaultArgumentsConstructor ( final MethodNode methodNode ) { if ( ! " < init > " . equals ( methodNode . name ) ) { return false ; } final Type [ ] argumentTypes = Type . getMethodType ( methodNode . desc ) . getArgumentTypes ( ) ; if ( argumentTypes . length < 2 ) { return false ; } return "kotlin . jvm . internal . DefaultConstructorMarker" . equals ( argumentTypes [ argumentTypes . length - 1 ] . getClassName ( ) ) ; }
public void increment ( long amount ) { long now = clock . now ( ) / 1000L ; if ( now != currentSecond . get ( ) ) { currentCount . set ( 0 ) ; currentSecond . set ( now ) ; } long count = currentCount . addAndGet ( amount ) ; updatePeak ( count ) ; }
public static void assertValidSubmodulePath ( String path ) throws SubmoduleValidationException { if ( path . startsWith ( " - " ) ) { // $NON - NLS - 1$ throw new SubmoduleValidationException ( MessageFormat . format ( JGitText . get ( ) . submodulePathInvalid , path ) , GITMODULES_PATH ) ; } }
public String getMessage ( ) { String message = super . getMessage ( ) ; if ( pql . isPresent ( ) ) { message += " with pql \"" + pql . get ( ) + "\"" ; } return message ; }
protected AbstractGraphDecorator ( Graph g ) { if ( g == null ) { throw new IllegalArgumentException ( "g may not be null . " ) ; } this . inner = g ; }
public boolean isDTS ( ) { return getCodecA ( ) != null && ( getCodecA ( ) . contains ( "dts" ) || getCodecA ( ) . contains ( "dca" ) ) ; }
CacheCollection < V > values ( EnumSet < Flag > explicitFlags , ClassLoader explicitClassLoader ) { return new ValueCacheCollection < > ( this , cacheEntrySet ( explicitFlags , explicitClassLoader ) ) ; }
public synchronized void setBrightnessInUserInterfaceDimensionUnit ( float percent ) { if ( percent < 0f ) { percent = 0f ; } else if ( percent > 200f ) { percent = 200f ; } brightness = percent / 100f ; refreshTextures ( true ) ; }
public void setForceEndTransactions ( boolean forceEndTransactions ) { this . forceEndTransactions = forceEndTransactions ; }
protected Cause createUpstreamCause ( Run < ? , ? > build ) { if ( Jenkins . getInstance ( ) . getPlugin ( "promoted - builds" ) != null ) { // Test only when promoted - builds is installed . if ( build instanceof Promotion ) { Promotion promotion = ( Promotion ) build ; // This cannot be done for PromotionCause#PromotionCause is in a package scope . // return new PromotionCause ( build , promotion . getTarget ( ) ) ; return new UpstreamCause ( ( Run < ? , ? > ) promotion . getTarget ( ) ) ; } } return new UpstreamCause ( build ) ; }
public static < Arg1 , Arg2 extends Arg1 > boolean nullSafeEquals ( Arg1 d1 , Arg2 d2 ) { if ( d1 == null ) { return d2 == null ; } else if ( d2 == null ) { return false ; } return ( d1 instanceof Date && d2 instanceof Date ) ? compare ( ( Date ) d1 , ( Date ) d2 ) == 0 : d1 . equals ( d2 ) ; }
public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null ) { return false ; } if ( getClass ( ) != obj . getClass ( ) ) { return false ; } final HeapObject other = ( HeapObject ) obj ; if ( node == null ) { return other . node == null ; } return node . equals ( other . node ) ; }
public void testSignalIntermediateThrow ( ) throws Exception { KieBase kbase = createKnowledgeBase ( "BPMN2 - IntermediateThrowEventSignal . bpmn2" ) ; ksession = createKnowledgeSession ( kbase ) ; Map < String , Object > params = new HashMap < String , Object > ( ) ; params . put ( "x" , "MyValue" ) ; ProcessInstance processInstance = ksession . startProcess ( "SignalIntermediateEvent" , params ) ; assertThat ( processInstance . getState ( ) ) . isEqualTo ( ProcessInstance . STATE_COMPLETED ) ; }
public KHyperLogLog ( int maxSize , int hllBuckets , Long2ObjectSortedMap < HyperLogLog > minhash ) { this . maxSize = maxSize ; this . hllBuckets = hllBuckets ; this . minhash = requireNonNull ( minhash , "minhash is null" ) ; minhash . values ( ) . forEach ( this : : increaseTotalHllSize ) ; }
public ChangeControl controlFor ( Change change , CurrentUser user ) throws NoSuchChangeException { try { return projectControl . controlFor ( change . getProject ( ) , user ) . controlFor ( change ) ; } catch ( NoSuchProjectException e ) { throw new NoSuchChangeException ( change . getId ( ) , e ) ; } }
public void onAttach ( Activity activity ) { super . onAttach ( activity ) ; try { mListener = ( ShareFragmentListener ) activity ; } catch ( IllegalStateException e ) { throw new IllegalStateException ( activity . toString ( ) + " must implement OnShareFragmentInteractionListener" ) ; } }
public void afterTaskInputVariableChangedEvent ( TaskEvent event , Map < String , Object > variables ) { if ( variables == null || variables . isEmpty ( ) ) { return ; } Task task = event . getTask ( ) ; List < TaskVariableImpl > taskVariables = indexVariables ( task , variables , VariableType . INPUT ) ; sendMessage ( new AuditTaskData ( null , null , taskVariables , null ) , 2 ) ; }
public RubyGemParser ( IFile file ) throws IOException , CoreException { mSetupDefinitions = new HashMap < String , ArrayList < String > > ( ) ; mSetupDependencies = new HashMap < String , ArrayList < String > > ( ) ; if ( file . getContents ( ) . available ( ) <= 0 ) { return ; } this . file = file ; gemVariable = "" ; parse ( ) ; }
public boolean canHandle ( Message < ? > message ) { return message instanceof DeadlineMessage && deadlineNameMatch ( ( DeadlineMessage ) message ) && super . canHandle ( message ) ; }
private void checkImportedSymbol ( Symbol symbol ) { for ( IdentifierTree usageIdentifier : symbol . usages ( ) ) { Tree parent = usageIdentifier . parent ( ) ; if ( parent . is ( Kind . MEMBER_SELECT ) && ( ( MemberSelectExpressionTree ) parent ) . expression ( ) . is ( Kind . MEMBER_SELECT ) ) { reportIssue ( parent , String . format ( MESSAGE , symbol . name ( ) ) ) ; } } }
public void jmsPort_shouldBeExportedWithCorrectId ( ) throws Exception { OutgoingPort serviceWithId = OpenEngSBCoreServices . getServiceUtilsService ( ) . getServiceWithId ( OutgoingPort . class , "jms - json" , 60000 ) ; assertNotNull ( serviceWithId ) ; }
private EventHandler createContextEventHandler ( ) { if ( contextEventHandler == null ) { contextEventHandler = event - > handleContextSet ( event ) ; } return contextEventHandler ; }
public AnnotationValueReader ( @Nonnull DexBuffer dex , @Nonnull ByteInput in ) { super ( dex , in ) ; }
protected Blob convertBlobToMimeType ( Blob blob , String destinationMimeType ) { BlobHolder bh = new SimpleBlobHolder ( blob ) ; bh = convertToMimeType ( destinationMimeType , bh , null ) ; return bh == null ? null : bh . getBlob ( ) ; }
private Set < SupportedAdditionalClusterFeature > getAdditionalClusterFeaturesAdded ( ) { // Lets not modify the existing collection . Hence creating a new hashset . Set < SupportedAdditionalClusterFeature > featuresSupported = new HashSet < > ( getVdsGroup ( ) . getAddtionalFeaturesSupported ( ) ) ; featuresSupported . removeAll ( clusterFeatureDao . getSupportedFeaturesByClusterId ( getVdsGroup ( ) . getId ( ) ) ) ; return featuresSupported ; }
static void runScript ( String filename , Connection cx ) throws SQLException { try { SqlUtil . runScript ( new GeoPackage ( ) . getClass ( ) . getResourceAsStream ( filename ) , cx ) ; } catch ( IOException e ) { throw new SQLException ( e ) ; } }
public void recycleAttributes ( long ts ) { fPoolAttributes . entrySet ( ) . forEach ( e - > { NonNullUtils . checkNotNull ( e . getKey ( ) ) . recycle ( e . getValue ( ) , ts ) ; } ) ; }
public boolean hasNext ( ) { // If we have the next element pipelined , go ahead and return true . if ( next != null ) { return true ; } // If the iterator is valid , this means that the next entry exists . checkInvariants ( ) ; if ( iterator . isValid ( ) ) { // Go ahead and cache that entry . next = new AbstractMap . SimpleEntry ( serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . key ( ) ) , corfuRuntime ) , serializer . deserialize ( Unpooled . wrappedBuffer ( iterator . value ( ) ) , corfuRuntime ) ) ; // Advance the underlying iterator . iterator . next ( ) ; } else { // If there is no more elements to consume , we should release the resources . iterator . close ( ) ; } return next != null ; }
public int run ( ) throws IOException { int b ; if ( in != null ) { while ( ( b = in . read ( ) ) != - 1 ) { out . write ( b ) ; } in . close ( ) ; } out . close ( ) ; return - 1 ; }
public List < Cohort > getCohortsContainingPatientId ( Integer patientId ) throws DAOException { return getCohortsContainingPatientId ( patientId , false ) ; }
protected void init ( final ImmutableMap < String , Object > execEnvVars ) throws DbException { try { tupleWriter . open ( dataSink . getOutputStream ( ) ) ; tupleWriter . writeColumnHeaders ( getChild ( ) . getSchema ( ) . getColumnNames ( ) ) ; } catch ( IOException e ) { throw new DbException ( e ) ; } }
public long getSizeInBytes ( ) { long sizeInBytes = 0 ; for ( int i = 0 ; i < partitionData . length ; i ++ ) { sizeInBytes += partitionData [ i ] . getSizeInBytes ( ) ; } return sizeInBytes ; }
public FixedRealVarImpl ( String name , double value , Model model ) { this ( name , value , value , model ) ; }
public void isGreaterThan ( ) throws Exception { assertTrue ( V3_0 . isGreaterThan ( of ( 2 , 0 ) ) ) ; assertFalse ( V3_0 . isGreaterThan ( of ( 3 , 0 ) ) ) ; assertFalse ( V3_0 . isGreaterThan ( of ( 4 , 0 ) ) ) ; }
private String extractDefinitionLine ( String typeDeclaration ) { String typeLine = "" ; String [ ] lines = typeDeclaration . split ( "\n" ) ; for ( String line : lines ) { typeLine = line ; if ( line . contains ( " { " ) ) { break ; } } return typeLine ; }
public ItemAshenMask ( ArmorMaterial material , int renderIndex , EntityEquipmentSlot slot , AshenMasks maskType ) { super ( material , renderIndex , slot ) ; this . maskType = maskType ; ItemRegistry . maskMap . put ( maskType , this ) ; }
private void onSuccess ( ) { errorCount . getAndSet ( 0 ) ; }
private ApplicationReportModel createAppDependencyGraphReport ( GraphContext context ) { ApplicationReportService applicationReportService = new ApplicationReportService ( context ) ; ApplicationReportModel report = applicationReportService . create ( ) ; report . setReportPriority ( 104 ) ; report . setReportIconClass ( "glyphicon glyphicon - tree - deciduous" ) ; report . setTemplatePath ( TEMPLATE ) ; report . setTemplateType ( TemplateType . FREEMARKER ) ; report . setDisplayInApplicationReportIndex ( Boolean . TRUE ) ; return report ; }
private void startClient ( ) throws NoSuchMethodException , IllegalAccessException , InvocationTargetException , InstantiationException , UnknownHostException { if ( client == null ) { LOG . info ( "Connecting to the ElasticSearch cluster : " + configuration . getClusterName ( ) ) ; if ( configuration . getHostAddressesList ( ) != null && ! configuration . getHostAddressesList ( ) . isEmpty ( ) ) { client = createClient ( ) ; } else { LOG . warn ( "Incorrect ip address and port parameters settings for ElasticSearch cluster" ) ; } } }
protected String getRemoveQosMessage ( int size ) { return ConstantsManager . getInstance ( ) . getMessages ( ) . removeStorageQoSMessage ( size ) ; }
public static Map < Guid , List < DiskImage > > getImagesLeaf ( List < DiskImage > images ) { Map < Guid , List < DiskImage > > retVal = new HashMap < > ( ) ; images . forEach ( image - > MultiValueMapUtils . addToMap ( image . getId ( ) , image , retVal ) ) ; retVal . values ( ) . forEach ( ImagesHandler : : sortImageList ) ; return retVal ; }
protected void moveToState ( STATE to ) { if ( state . get ( ) != to ) { moveToState ( state . get ( ) , to ) ; } }
public void writeTo ( Resource file ) throws JDOMException , IOException { try ( OutputStream out = path . out ( ) ) { IOUtils . write ( body , out ) ; } }
protected ApplicationFetchException ( String apiKey , ErrorCode errorCode ) { super ( ) ; this . apiKey = apiKey ; this . errorCode = errorCode ; }
private void addResource ( final BackendResource resource ) { resource . setMessageBundle ( messageBundle ) ; resource . setBackend ( backend ) ; resource . setSessionHelper ( sessionHelper ) ; if ( resource instanceof AbstractBackendResource ) { ( ( AbstractBackendResource ) resource ) . setMappingLocator ( mappingLocator ) ; } else if ( resource instanceof CapabilitiesResource ) { ( ( BackendCapabilitiesResource ) resource ) . setMappingLocator ( mappingLocator ) ; } singletons . add ( resource ) ; }
public boolean isEmpty ( ) { return listeners . isEmpty ( ) ; }
void setEnd ( int end ) { this . end = end ; }
public void dispose ( ) { }
public boolean indexShareable ( ) { TypedProperties properties = properties ( ) ; boolean hasRamDirectoryProvider = false ; for ( Object objKey : properties . keySet ( ) ) { String key = ( String ) objKey ; if ( key . endsWith ( DIRECTORY_PROVIDER_KEY ) ) { if ( properties . get ( key ) . equals ( RAM_DIRECTORY_PROVIDER ) ) { hasRamDirectoryProvider = true ; } else { return true ; } } } return ! hasRamDirectoryProvider ; }
public boolean delete ( final ConcreteResource resource , final EventMetadata eventMetadata ) throws TransferException { if ( ! resource . allowsDeletion ( ) ) { throw new TransferException ( "Deletion not allowed for : { } " , resource ) ; } final Transfer item = getCacheReference ( resource ) ; return doDelete ( item , eventMetadata ) ; }
public String getActualCpuTopology ( ) { if ( actualCpuTopology > 0 ) { return String . valueOf ( actualCpuTopology ) ; } else { return ConstantsManager . getInstance ( ) . getConstants ( ) . notAvailableLabel ( ) ; } }
public void onPageScrolled ( int i , float v , int i2 ) { if ( pager . getCurrentItem ( ) != 0 ) { speakerbox . stop ( ) ; } if ( pager . getCurrentItem ( ) == pagerPositionWhenPaused ) { resume . setVisibility ( View . GONE ) ; } }
public void benchWavTrack ( ) throws Exception { try { wavTrack = new WavTrack ( url ) ; boolean isEOMReached = false ; while ( ! isEOMReached ) { Frame process = wavTrack . process ( 0 ) ; isEOMReached = process . isEOM ( ) ; } } finally { wavTrack . close ( ) ; } }
private void setupLogger ( Map < String , Object > args ) throws IOException { Logger logger = Logger . getLogger ( "" ) ; logger . setLevel ( ( Level ) args . get ( "log - level" ) ) ; String logfile = ( String ) args . get ( "log - file" ) ; if ( logfile != null ) { FileHandler fh = new FileHandler ( logfile ) ; fh . setFormatter ( new SimpleFormatter ( ) ) ; logger . addHandler ( fh ) ; } }
public XWikiAttachment set ( XWikiAttachment attachment ) { XWikiAttachment put = map . put ( attachment . getFilename ( ) , attachment ) ; if ( put != attachment ) { added ( attachment ) ; updatedMap ( ) ; } return put ; }
public final boolean equals ( Object obj ) { if ( obj instanceof MethodKey ) { MethodKey toCompare = ( MethodKey ) obj ; return toCompare . name . equals ( name ) && toCompare . parameterTypes . equals ( parameterTypes ) ; } return false ; }
MongoDBTracing ( Builder builder ) { tracing = builder . tracing ; }
public void disconnect ( ) { Object lock = partitions != null ? partitions : new Object ( ) ; synchronized ( lock ) { document = null ; partitions . clear ( ) ; try { inputStream . close ( ) ; } catch ( IOException e ) { } } }
private void printInfo ( String sizeMessage , String inAlluxioMessage , String inMemMessage , String path ) { System . out . println ( inMemMessage . isEmpty ( ) ? String . format ( SHORT_INFO_FORMAT , sizeMessage , inAlluxioMessage , path ) : String . format ( LONG_INFO_FORMAT , sizeMessage , inAlluxioMessage , inMemMessage , path ) ) ; }
public void tearDown ( ) { // Destroy JMX beans created during testing . if ( metricsService != null ) { metricsService . shutdown ( true ) ; metricsService = null ; } JmxLeakHelper . checkJmxBeans ( ) ; // Stop executor service . if ( executionService != null ) { executionService . shutdown ( ) ; } }
public AdsBaseObject verifyAdImage ( String slotName , String src , String imageUrl ) { WebElement element = getWebElement ( slotName ) ; boolean isMobile = "MOBILE" . equalsIgnoreCase ( src ) ; Assertion . assertTrue ( new AdsComparison ( ) . compareImageWithScreenshot ( imageUrl , element , driver , isMobile ) ) ; PageObjectLogging . log ( "verifyAdImage" , "Ad looks good" , true , driver ) ; return this ; }
public synchronized Set < String > getUnmatchedLabels ( ) { return Collections . unmodifiableSet ( unmatchedLabels ) ; }
public void scanForRepoChanges ( ) throws IOException { getAllRefs ( ) ; // This will look for changes to refs if ( ! isBare ( ) ) getIndex ( ) ; // This will detect changes in the index }
public List < Server > getReachableServers ( ) { return null ; }
protected Guid getStoragePoolId ( ) { return getParameters ( ) . getStoragePoolId ( ) ; }
private int prerequirementImgResource ( String group ) { if ( group . equalsIgnoreCase ( AssignmentPrerequirement . RANK . toString ( ) ) ) { return R . drawable . rank_prerequirement ; } else if ( group . equalsIgnoreCase ( AssignmentPrerequirement . MISSION . toString ( ) ) ) { return R . drawable . group_prerequirement ; } else { return R . drawable . empty ; } }
public Iterator < ImageTypeSpecifier > getImageTypes ( int pImageIndex ) throws IOException { checkBounds ( pImageIndex ) ; // TODO : Better implementation , include INT_RGB types for 3BYTE_BGR and 4BYTE_ABGR for INT_ARGB return Arrays . asList ( getRawImageType ( pImageIndex ) ) . iterator ( ) ; }
private void resetPositions ( int positionCount ) { positions = ensureCapacity ( positions , positionCount ) ; this . positionCount = 0 ; }
public static SelectorHandler getHandler ( final String selectorStr ) { if ( ! selectorStr . isEmpty ( ) ) { for ( final Entry < String , SelectorHandler > handler : selectorHandlers . subMap ( selectorStr , true , selectorStr . substring ( 0 , 1 ) , true ) . entrySet ( ) ) { if ( selectorStr . startsWith ( handler . getKey ( ) ) ) { return handler . getValue ( ) ; } } } return vanillaHandler ; }
public synchronized void close ( ) { if ( closed ) { return ; } closed = true ; parentMemoryContext . updateBytes ( - usedBytes ) ; usedBytes = 0 ; }
public Map < ? extends K , ? extends V > getEntries ( ) { return entries ; }
public void testDefaultConfig ( ) throws Exception { Files . write ( springTestFile . toPath ( ) , "modification" . getBytes ( ) , StandardOpenOption . SYNC ) ; // Adding few millis to avoid fleaky tests // The file hasher could sometimes evaluate these two changes as duplicate , as the second modification of file could be done before hashing is done Thread . sleep ( 50 ) ; Files . write ( springTestFile . toPath ( ) , "modification 2" . getBytes ( ) , StandardOpenOption . SYNC ) ; MockEndpoint mock = getMockEndpoint ( "mock : springTest" ) ; mock . setExpectedCount ( 2 ) ; // two MODIFY events mock . setResultWaitTime ( 1000 ) ; mock . assertIsSatisfied ( ) ; }
private boolean startsOrEndsWithWhitespace ( String value ) { return ( StringUtils . isNotBlank ( value ) && ( Character . isSpaceChar ( value . charAt ( 0 ) ) || Character . isSpaceChar ( value . charAt ( value . length ( ) - 1 ) ) ) ) ; }
private void updateData ( OCShare share ) { // Update DB with the response share . setPath ( mPath ) ; share . setIsFolder ( mPath . endsWith ( FileUtils . PATH_SEPARATOR ) ) ; share . setPermissions ( READ_ONLY ) ; getStorageManager ( ) . saveShare ( share ) ; // Update OCFile with data from share : ShareByLink and publicLink OCFile file = getStorageManager ( ) . getFileByPath ( mPath ) ; if ( file != null ) { file . setShareWithSharee ( true ) ; // TODO - this should be done by the FileContentProvider , as part of getStorageManager ( ) . saveShare ( share ) getStorageManager ( ) . saveFile ( file ) ; } }
protected void startMasters ( boolean isLeader ) { try { connectToUFS ( ) ; mRegistry . start ( isLeader ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
public BugzillaRestRepositoryConnectorUi ( ) { this . connector = BugzillaRestConnector . getDefault ( ) == null ? new BugzillaRestConnector ( ) : BugzillaRestConnector . getDefault ( ) ; }
public static ListStatusPOptions getListStatusOptions ( ) { return ListStatusPOptions . newBuilder ( ) . setCommonOptions ( getCommonOptions ( ) . toBuilder ( ) . setTtl ( Configuration . getMs ( PropertyKey . USER_FILE_LOAD_TTL ) ) . setTtlAction ( GrpcUtils . toProto ( Configuration . getEnum ( PropertyKey . USER_FILE_LOAD_TTL_ACTION , TtlAction . class ) ) ) ) . setLoadMetadataType ( GrpcUtils . toProto ( Configuration . getEnum ( PropertyKey . USER_FILE_METADATA_LOAD_TYPE , LoadMetadataType . class ) ) ) . build ( ) ; }
Node ( final String name , final NodeProcessor nodeProcessor , final Dag dag ) { requireNonNull ( nodeProcessor , "The nodeProcessor parameter can't be null . " ) ; this . nodeProcessor = nodeProcessor ; requireNonNull ( name , "The name of the node can't be null" ) ; this . name = name ; requireNonNull ( dag , "The dag of the node can't be null" ) ; this . dag = dag ; }
public String getTooltip ( MergeMode mode ) throws IllegalArgumentException { String tooltip ; switch ( mode ) { case LEFT_TO_RIGHT : tooltip = EMFCompareDiagramEditMessages . getString ( "merged . to . right . tooltip" ) ; // $NON - NLS - 1$ break ; case RIGHT_TO_LEFT : tooltip = EMFCompareDiagramEditMessages . getString ( "merged . to . left . tooltip" ) ; // $NON - NLS - 1$ break ; case ACCEPT : tooltip = EMFCompareDiagramEditMessages . getString ( "accept . change . tooltip" ) ; // $NON - NLS - 1$ break ; case REJECT : tooltip = EMFCompareDiagramEditMessages . getString ( "reject . change . tooltip" ) ; // $NON - NLS - 1$ break ; default : throw new IllegalArgumentException ( ) ; } return tooltip ; }
public TriggeredBuildSelector ( boolean fallbackToLastSuccessful , UpstreamFilterStrategy upstreamFilterStrategy , boolean allowUpstreamDependencies ) { this . fallbackToLastSuccessful = fallbackToLastSuccessful ? Boolean . TRUE : null ; this . upstreamFilterStrategy = upstreamFilterStrategy ; this . allowUpstreamDependencies = allowUpstreamDependencies ; }
public static Result deleteUser ( Long userId ) { if ( User . findByLoginId ( session ( ) . get ( "loginId" ) ) . isSiteManager ( ) ) { if ( Project . isOnlyManager ( userId ) ) { flash ( Constants . WARNING , "site . userList . deleteAlert" ) ; } else { User . find . byId ( userId ) . delete ( ) ; } } else { flash ( Constants . WARNING , "auth . unauthorized . waringMessage" ) ; } return redirect ( routes . SiteApp . userList ( 0 , null ) ) ; }
public Attachment ( @NonNull Uri uri , @NonNull String contentType , long date , @Nullable String fileName ) { if ( uri == null || contentType == null || date < 0 ) { throw new AssertionError ( "uri , content type , and date must all be specified" ) ; } this . uri = uri ; this . fileName = fileName ; this . contentType = contentType ; this . date = date ; }
private List < VoldemortService > createServices ( ) { List < VoldemortService > services = new ArrayList < VoldemortService > ( ) ; services . add ( new CoordinatorProxyService ( config , storeClientConfigs ) ) ; if ( config . isAdminServiceEnabled ( ) ) { services . add ( new CoordinatorAdminService ( config , storeClientConfigs ) ) ; } return ImmutableList . copyOf ( services ) ; }
public void afterBegin ( ) throws EJBException , RemoteException { log . trace ( "afterBegin called" ) ; checker . setSynchronizedBegin ( ) ; }
private boolean checkPagingSpec ( PagingSpec pagingSpec , boolean descending ) { for ( Integer value : pagingSpec . getPagingIdentifiers ( ) . values ( ) ) { if ( descending ^ ( value < 0 ) ) { return false ; } } return pagingSpec . getThreshold ( ) >= 0 ; }
private void init ( Jdbi db ) { db . registerArrayType ( UserId . class , "int" , UserId : : getId ) ; db . registerColumnMapper ( new UserIdColumnMapper ( ) ) ; }
protected boolean updateBrickServerName ( GlusterBrickEntity brick , boolean addCanDoActionMessage ) { VdsStatic server = getVdsStaticDao ( ) . get ( brick . getServerId ( ) ) ; if ( ( server == null || ! server . getvds_group_id ( ) . equals ( getVdsGroupId ( ) ) ) ) { if ( addCanDoActionMessage ) { addCanDoActionMessage ( VdcBllMessages . ACTION_TYPE_FAILED_INVALID_BRICK_SERVER_ID ) ; } return false ; } brick . setServerName ( server . gethost_name ( ) ) ; return true ; }
private static @NonNull String getSpanName ( String attributeName ) { return attributeName . substring ( 0 , attributeName . lastIndexOf ( ' / ' ) ) ; }
private static boolean containsAll ( String text , final Collection < String > items ) { final String _text = text . toLowerCase ( ) ; return items . stream ( ) . allMatch ( it - > { return _text . contains ( it ) ; } ) ; }
private void recursiveDelete ( Path file ) throws IOException { Files . walkFileTree ( file , new SimpleFileVisitor < Path > ( ) { @Override public FileVisitResult visitFile ( Path file , BasicFileAttributes attrs ) throws IOException { Files . delete ( file ) ; return FileVisitResult . CONTINUE ; } @Override public FileVisitResult postVisitDirectory ( Path dir , IOException e ) throws IOException { if ( e != null ) { throw e ; } Files . delete ( dir ) ; return FileVisitResult . CONTINUE ; } } ) ; }
public Optional < Object > nextMarker ( ) { if ( totalCount < pageSize ) return Optional . absent ( ) ; if ( ( float ) pageNumber < ( ( float ) totalCount / ( float ) pageSize ) ) { return Optional . of ( toPaginationOptions ( pageNumber + 1 ) ) ; } return Optional . absent ( ) ; }
public void testInvalidUser ( AuthenticationFlowContext context , UserModel user ) { if ( user == null ) { dummyHash ( context ) ; context . getEvent ( ) . error ( Errors . USER_NOT_FOUND ) ; Response challengeResponse = challenge ( context , getDefaultChallengeMessage ( context ) ) ; context . failureChallenge ( AuthenticationFlowError . INVALID_USER , challengeResponse ) ; } }
public boolean validateChecksum ( ) { if ( StringUtils . isNotBlank ( checksum ) ) { try { return DigestHelper . check ( checksum , new FileInputStream ( downloadedFilePath ) ) ; } catch ( IOException e ) { throw new CloudRuntimeException ( "could not check sum for file : " + downloadedFilePath , e ) ; } catch ( NoSuchAlgorithmException e ) { throw new CloudRuntimeException ( "Unknown checksum algorithm : " + checksum , e ) ; } } return true ; }
public RegistrationUpdateEvent ( String address , List < RegistrationInfo > registrations ) { this . address = address ; this . registrations = registrations == null ? Collections . emptyList ( ) : registrations ; }
public InvocationContext createInvocationContext ( boolean isWrite , int keyCount ) { if ( keyCount == 1 ) { return new SingleKeyNonTxInvocationContext ( true , keyEq ) ; } else if ( keyCount > 0 ) { return new NonTxInvocationContext ( keyCount , true , keyEq ) ; } return createInvocationContext ( null ) ; }
private boolean isRealWorklog ( final EveritWorklog worklog ) { boolean isRealWorklog = true ; if ( issuesRegex != null ) { for ( Pattern issuePattern : issuesRegex ) { boolean issueMatches = issuePattern . matcher ( worklog . getIssue ( ) ) . matches ( ) ; // if match not count in summary if ( issueMatches ) { isRealWorklog = false ; break ; } } } return isRealWorklog ; }
public void removed ( IExtension [ ] extensions ) { for ( IExtension extension : extensions ) { CustomLayoutAlgorithmProvider layoutAlgorithmProvider = extensionToLayoutAlgorithmProvider . get ( extension ) ; if ( layoutAlgorithmProvider != null ) { List < CustomLayoutAlgorithm > customLayoutAlgorithms = layoutAlgorithmProvider . getCustomLayoutAlgorithms ( ) ; for ( CustomLayoutAlgorithm customLayoutAlgorithm : customLayoutAlgorithms ) { layoutProviderRegistry . remove ( customLayoutAlgorithm . getId ( ) ) ; } } extensionToLayoutAlgorithmProvider . remove ( extension ) ; } }
public void increment ( int typeId ) { if ( typeId >= counts . length ) { counts = Arrays . copyOf ( counts , max ( counts . length * 2 , typeId + 1 ) ) ; } counts [ typeId ] ++ ; if ( typeId > highestTypeId ) { highestTypeId = typeId ; } }
private static void delete ( List < ReceiveCommand > cmds , List < ReceiveCommand > createCmds ) { for ( ReceiveCommand cmd : createCmds ) { ObjectId id = cmd . getNewId ( ) ; String name = cmd . getRefName ( ) ; cmds . add ( new ReceiveCommand ( id , ObjectId . zeroId ( ) , name ) ) ; } }
public RefreshLocalVisitor ( IProgressMonitor monitor ) { this . monitor = SubMonitor . convert ( monitor ) ; workspace = ( Workspace ) ResourcesPlugin . getWorkspace ( ) ; resourceChanged = false ; String msg = Messages . resources_errorMultiRefresh ; errors = new MultiStatus ( ResourcesPlugin . PI_RESOURCES , IResourceStatus . FAILED_READ_LOCAL , msg , null ) ; }
private ConfigurationImpl ( ) { this . validationBootstrapParameters = new ValidationBootstrapParameters ( ) ; this . defaultResourceBundleLocator = new PlatformResourceBundleLocator ( ResourceBundleMessageInterpolator . USER_VALIDATION_MESSAGES ) ; this . defaultTraversableResolver = new DefaultTraversableResolver ( ) ; this . defaultConstraintValidatorFactory = new ConstraintValidatorFactoryImpl ( ) ; this . defaultParameterNameProvider = new DefaultParameterNameProvider ( ) ; this . defaultMessageInterpolator = new ResourceBundleMessageInterpolator ( defaultResourceBundleLocator ) ; }
public void testNull_Event ( ) { assertNull ( xdrTransformHelper . transformXDRResponseToCheckPolicy ( null ) ) ; assertNull ( xdrTransformHelper . transformXDRToCheckPolicy ( null ) ) ; }
public void testJNDIBindingsNoAppName ( ) throws Exception { Context ctx = getInitialContext ( HOST , PORT ) ; Hello ejb = ( Hello ) ctx . lookup ( "ejb :/ ejb - jndi / Hello ! org . jboss . as . test . integration . ejb . jndi . logging . Hello" ) ; Assert . assertNotNull ( "Null object returned for local business interface lookup in the ejb namespace" , ejb ) ; Assert . assertTrue ( "Expected JNDI binding message not found" , LoggingUtil . hasLogMessage ( managementClient , TEST_HANDLER_NAME , "ejb :/ ejb - jndi / Hello ! org . jboss . as . test . integration . ejb . jndi . logging . Hello" ) ) ; }
public CrossesListDescriptionSheetParser ( final T importedList , final UserDataManager userDataManager ) { this . importedList = importedList ; this . doParseDetails = true ; this . doParseConditions = true ; this . doParseFactors = true ; this . doParseVariates = true ; this . userDataManager = userDataManager ; this . descriptionSheetIndex = 0 ; }
public VolumeClassification getVolumeClassification ( ) { if ( volumeClassification == null ) { return ( active ? VolumeClassification . Volume : VolumeClassification . Snapshot ) ; } return volumeClassification ; }
public void registerSonarQubeVersion_publishes_version_on_first_call ( ) { ClusterProperties clusterProperties = new ClusterProperties ( newClusterSettings ( ) ) ; try ( HazelcastCluster hzCluster = HazelcastCluster . create ( clusterProperties ) ) { hzCluster . registerSonarQubeVersion ( "1 . 0 . 0 . 0" ) ; HazelcastInstance hzInstance = createHazelcastClient ( hzCluster ) ; assertThat ( hzInstance . getAtomicReference ( SONARQUBE_VERSION ) . get ( ) ) . isEqualTo ( "1 . 0 . 0 . 0" ) ; } }
public String [ ] getColumnTexts ( @NonNull ITimeGraphEntry entry ) { String [ ] texts = null ; if ( fColumns != null ) { texts = new String [ fColumns . length ] ; for ( int i = 0 ; i < fColumns . length ; i ++ ) { texts [ i ] = fLabelProvider . getColumnText ( entry , i ) ; } } else { texts = new String [ 1 ] ; texts [ 0 ] = entry . getName ( ) ; } return texts ; }
private Pageview ( ) { }
public TreeFillingConfigurationDialog ( final Shell parentShell , final TreeFillingConfiguration treefillingConfiguration , final List < ILabelProviderConfiguration > existingLabelProvidersConfiguration , final List < PasteEObjectConfiguration > existingPasteConfigurations ) { super ( parentShell ) ; this . modifiedTreefillingConfiguration = EcoreUtil . copy ( treefillingConfiguration ) ; this . existingLabelProviderConfigurations = existingLabelProvidersConfiguration ; this . existingPasteConfigurations = existingPasteConfigurations ; setTitle ( Messages . TreeFillingConfigurationDialog_treeFillingConfigurationDialogName ) ; }
public void execute ( final Talks talks ) throws IOException { int idx = this . index ( talks ) ; for ( final Talk talk : talks . active ( ) ) { idx += 1 ; talk . modify ( new Directives ( ) . xpath ( " / talk / request" ) . attr ( "index" , Integer . toString ( idx ) ) ) ; } }
public long getSafePointDrId ( ) { assert ( ! m_map . isEmpty ( ) ) ; return end ( m_map . asRanges ( ) . iterator ( ) . next ( ) ) ; }
public void setUp ( ) throws Exception { createProjectWithNfcAndSetVariable ( ) ; baseActivityTestRule . launchActivity ( null ) ; }
public ListRequest list ( ) { return new ListRequest ( ) { @Override public List < ProjectInfo > get ( ) throws RestApiException { return list ( this ) ; } } ; }
public void validateEnums ( WatchDog entity ) { if ( entity != null ) { EnumValidator . validateEnum ( WatchdogAction . class , entity . getAction ( ) , true ) ; EnumValidator . validateEnum ( WatchdogModel . class , entity . getModel ( ) , true ) ; } }
void error ( ZuulException e ) { RequestContext . getCurrentContext ( ) . setThrowable ( e ) ; zuulRunner . error ( ) ; }
private List < String > defaultIncludedModuleNamesForUnnamedModule ( ) { if ( fJavaElements != null ) { List < IPackageFragmentRoot > roots = new ArrayList < > ( ) ; for ( IJavaElement element : fJavaElements ) { if ( element instanceof IPackageFragmentRoot ) { roots . add ( ( IPackageFragmentRoot ) element ) ; } } return JavaCore . defaultRootModules ( roots ) ; } return Collections . emptyList ( ) ; }
public void disable ( @RequestBody List < Long > printerIds ) throws IOException { setState ( printerIds , false ) ; }
public double getFilterMinSelectivityEstimateFactor ( ) { return options . getOption ( FILTER_MIN_SELECTIVITY_ESTIMATE_FACTOR ) ; }
public JavaOutputProcessor ( PrettyPrinter printer ) { this . printer = printer ; }
public BucketFunction getBucketFunction ( ConnectorTransactionHandle transactionHandle , ConnectorSession session , ConnectorPartitioningHandle partitioningHandle , List < Type > partitionChannelTypes , int bucketCount ) { HivePartitioningHandle handle = ( HivePartitioningHandle ) partitioningHandle ; BucketFunctionType bucketFunctionType = handle . getBucketFunctionType ( ) ; switch ( bucketFunctionType ) { case HIVE_COMPATIBLE : return createHiveCompatibleBucketFunction ( bucketCount , handle . getHiveTypes ( ) . get ( ) ) ; case PRESTO_NATIVE : return createPrestoNativeBucketFunction ( bucketCount , handle . getTypes ( ) . get ( ) ) ; default : throw new IllegalArgumentException ( "Unsupported bucket function type " + bucketFunctionType ) ; } }
public void writePacketData ( RailcraftOutputStream data ) throws IOException { super . writePacketData ( data ) ; // tankManager . writePacketData ( data ) ; data . writeBoolean ( boiler . isBurning ( ) ) ; }
protected void setValue ( final int rowIndex , final int columnIndex , final Date value ) { DTCellValue52 dtCellValue52 = table52 . getData ( ) . get ( rowIndex ) . get ( columnIndex ) ; dtCellValue52 . setDateValue ( value ) ; updateManager . update ( table52 , getUpdates ( rowIndex , columnIndex ) ) ; }
private TreeMap < Event , List < EntryDTO > > buildEventEntryDTOMap ( List < EntryDTO > entryDTOS ) { return entryDTOS . stream ( ) . collect ( Collectors . groupingBy ( EntryDTO : : getEvent , ( ) - > new TreeMap < > ( Comparator . comparing ( Event : : getWhenOccured ) . thenComparing ( Event : : getExternalId ) ) , Collectors . toList ( ) ) ) ; }
private void verifyTableProperty ( String propertyName , int propertyValue ) { waitForElementByElement ( table ) ; Assertion . assertEquals ( table . getAttribute ( propertyName ) , Integer . toString ( propertyValue ) ) ; PageObjectLogging . log ( "verifyTableProperty" , "table has correct " + propertyName + " property" , true ) ; }
public ColumnMetadata_v4 ( String [ ] name , PrimitiveType . PrimitiveTypeName primitiveType , Object minValue , Object maxValue , Long nulls ) { super ( name , primitiveType , minValue , maxValue , nulls ) ; }
public ReflogEntry getReverseEntry ( int number ) throws IOException { lock . lock ( ) ; try { LogCursor cursor = reftable . seekLog ( refname ) ; while ( true ) { if ( ! cursor . next ( ) || number < 0 ) { return null ; } if ( number == 0 ) { return cursor . getReflogEntry ( ) ; } number -- ; } } finally { lock . unlock ( ) ; } }
public void testVersion0_98IsValid ( ) throws Exception { rootDir = Paths . get ( getClass ( ) . getClassLoader ( ) . getResource ( "bags / v0_98 / bag" ) . toURI ( ) ) ; Bag bag = reader . read ( rootDir ) ; sut . isValid ( bag , true ) ; }
public ProgramState checkPreStatement ( CheckerContext context , Tree syntaxNode ) { AbstractStatementVisitor visitor = new PreStatementVisitor ( context ) ; syntaxNode . accept ( visitor ) ; return visitor . programState ; }
public ParameterMap getQueryParams ( MuleEvent event ) { return resolveParams ( event , HttpParamType . QUERY_PARAM ) ; }
public Mutation ( Mutation m ) { m . serialize ( ) ; this . row = m . row ; this . data = m . data ; this . entries = m . entries ; this . values = m . values ; this . replicationSources = m . replicationSources ; }
public DecoratedCache ( AdvancedCache < K , V > delegate , ClassLoader classLoader ) { this ( delegate , classLoader , null ) ; }
default Query getRemoveByQuery ( ) { return isVersionedEntity ( ) ? getQueryForVersion ( ) : getByIdQuery ( ) ; }
public void addError ( String errorMessage , Element element ) { errors . add ( new ProblemImpl ( errorMessage , element ) ) ; }
private void validatePage ( ) { String message = null ; if ( userText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorUser ; } else if ( passwordText . getText ( ) . trim ( ) . isEmpty ( ) ) { message = Messages . CredentialsWizardPage_ErrorPassword ; } setErrorMessage ( message ) ; setPageComplete ( message == null ) ; }
public boolean isSupporting ( Capabilities capabilities ) { return BrowserType . EDGE . equals ( capabilities . getBrowserName ( ) ) ; }
public HistoryTreeStub getHistoryTree ( ) { return ( HistoryTreeStub ) super . getSHT ( ) ; }
public static Iterable < ITmfEventAspect < ? > > getEventAspects ( ITmfTrace trace , Class < ? extends ITmfEventAspect < ? > > aspectClass ) { return Iterables . filter ( Iterables . concat ( trace . getEventAspects ( ) , EXTRA_ASPECTS ) , aspect - > aspectClass . isAssignableFrom ( aspect . getClass ( ) ) ) ; }
public PrestoSparkRow get ( ) throws InterruptedException { PrestoSparkRow row = null ; synchronized ( monitor ) { while ( buffer . isEmpty ( ) && ! finished ) { monitor . wait ( ) ; } if ( ! buffer . isEmpty ( ) ) { row = buffer . poll ( ) ; } } if ( row != null ) { memoryManager . updateMemoryUsage ( - row . getRetainedSize ( ) ) ; } return row ; }
private ByteBuffer parsePacketIDBAndNRB ( int blockLength ) throws IOException { ByteBuffer pcapPacketData ; pcapPacketData = ByteBuffer . allocate ( blockLength - PcapFileValues . PCAPNG_PACKET_HEADER_SIZE ) ; pcapPacketData . clear ( ) ; SeekableByteChannel fFileChannel ; try { fFileChannel = getFileChannel ( ) ; fFileChannel . read ( pcapPacketData ) ; } catch ( BadPcapFileException e1 ) { /* Just ignore */ } pcapPacketData . flip ( ) ; return pcapPacketData ; }
public MiniEditorComponentObject triggerEditCommentArea ( ) { jsActions . scrollToElement ( allCommentsArea ) ; WebElement mostRecentComment = articleComments . get ( 0 ) ; PageObjectLogging . log ( "First check" , mostRecentComment . getText ( ) , true ) ; JavascriptExecutor js = ( JavascriptExecutor ) driver ; WebElement editButton = mostRecentComment . findElement ( By . cssSelector ( EDIT_BUTTON_SELECTOR ) ) ; new Actions ( driver ) . moveToElement ( editButton ) . perform ( ) ; js . executeScript ( "arguments [ 0 ] . querySelector ( arguments [ 1 ] ) . click ( ) " , mostRecentComment , EDIT_BUTTON_SELECTOR ) ; return new MiniEditorComponentObject ( driver ) ; }
public String getContentAccessModeList ( ) { return this . contentAccessModeList ; }
public void setUp ( ) { configuration = Configuration . DEFAULT ; }
public void onDestroyView ( ) { try { mWebViewBridge . destroy ( ) ; } catch ( Exception exp ) { Log . w ( TAG , exp . getMessage ( ) + "" , exp ) ; } mWebViewBridge = null ; super . onDestroyView ( ) ; }
private static void deleteDir ( HdfsContext context , HdfsEnvironment hdfsEnvironment , Path path , boolean recursive ) { try { hdfsEnvironment . getFileSystem ( context , path ) . delete ( path , recursive ) ; } catch ( Exception e ) { // don't fail if unable to delete path log . warn ( e , "Failed to delete path : " + path . toString ( ) ) ; } }
private static boolean isNakedTD1Key ( String s ) { return NAKED_TD1_KEY_PATTERN . matcher ( s ) . matches ( ) ; }
public long skip ( long n ) throws IOException { if ( n <= 0 ) { return 0 ; } if ( n > MOVEMENT_LIMIT ) { mSequentialReadCount = 0 ; } mPos += n ; return n ; }
public void testUnmarshallSubprocessLevelEventEmptyProperties ( ) throws Exception { Diagram < Graph , Metadata > diagram = unmarshall ( marshaller , BPMN_START_EVENT_FILE_PATH ) ; assertDiagram ( diagram , AMOUNT_OF_NODES_IN_DIAGRAM ) ; StartNoneEvent emptySubprocess = getStartNodeById ( diagram , EMPTY_SUBPROCESS_LEVEL_EVENT_ID , StartNoneEvent . class ) ; assertGeneralSet ( emptySubprocess . getGeneral ( ) , EMPTY_VALUE , EMPTY_VALUE ) ; assertNotNull ( emptySubprocess . getExecutionSet ( ) ) ; assertStartEventSlaDueDate ( emptySubprocess . getExecutionSet ( ) , EMPTY_VALUE ) ; }
private List < Window > fetchWindowsInQueue ( ) { return ImmutableList . copyOf ( getWindows ( ) ) ; }
protected void executeCommand ( IDeviceManagementInteractor executor ) throws DeploymentException { executor . startFB ( resource , new FBDeploymentData ( "" , resFB ) ) ; // $NON - NLS - 1$ // TODO correctly determine prefix }
private void setReaderBudget ( ) { reader . setResultSizeBudget ( ariaBatchRows <= MIN_BATCH_ROWS ? UNLIMITED_BUDGET : targetResultBytes ) ; }
default < T > Flux < T > find ( Query query , Class < T > entityType ) { return find ( query , entityType , entityType ) ; }
public Object execute ( ExecutionEvent event ) throws ExecutionException { RepositorySearchWizard wizard = new RepositorySearchWizard ( util . getConfiguredRepositories ( ) , true ) ; WizardDialog dialog = new WizardDialog ( getShell ( event ) , wizard ) ; if ( dialog . open ( ) == Window . OK ) { for ( String dir : wizard . getDirectories ( ) ) { File repositoryDir = FileUtils . canonicalize ( new File ( dir ) ) ; addRepository ( repositoryDir ) ; } } return null ; }
public Map < String , String > load ( ) { final Map < String , String > preferences = new HashMap < String , String > ( ) ; final String property = getProperty ( ) ; log . info ( "Setting preference '" + GuidedDecisionTableEditorService . DTABLE_VERIFICATION_ENABLED + "' to '" + property + "' . " ) ; preferences . put ( GuidedDecisionTableEditorService . DTABLE_VERIFICATION_ENABLED , property ) ; return preferences ; }
protected int getParallelHostCount ( UpgradeContext ctx , int defaultValue ) { if ( m_grouping . parallelScheduler != null ) { int taskParallelism = m_grouping . parallelScheduler . maxDegreeOfParallelism ; if ( taskParallelism == ParallelScheduler . DEFAULT_MAX_DEGREE_OF_PARALLELISM ) { taskParallelism = ctx . getDefaultMaxDegreeOfParallelism ( ) ; } return taskParallelism ; } return defaultValue ; }
public synchronized static boolean stopIfIsPlaying ( @Nullable AudioSlide slide ) { if ( playing . isPresent ( ) && playing . get ( ) . getAudioSlide ( ) . equals ( slide ) ) { playing . get ( ) . stop ( ) ; return true ; } else { return false ; } }
public List < AggregatorFactory > getRequiredColumns ( ) { return fields . stream ( ) . map ( field - > new CardinalityAggregatorFactory ( field . getOutputName ( ) , null , Collections . singletonList ( field ) , byRow , round ) ) . collect ( Collectors . toList ( ) ) ; }
public Optional < Object > getRequestAttribute ( final String name ) { return Optional . ofNullable ( this . request . getAttribute ( name ) ) ; }
private static String reflogComments ( List < ReflogEntry > entries ) { StringBuffer b = new StringBuffer ( ) ; for ( ReflogEntry e : entries ) { b . append ( e . getComment ( ) ) . append ( " ; " ) ; } return b . toString ( ) ; }
private static void validateName ( String value ) throws WSSecurityException { Name name ; try { name = new LdapName ( value ) ; } catch ( Exception e ) { LOG . info ( "Validation of X509 Subject Name failed : { } " , e . getLocalizedMessage ( ) , e ) ; throw new WSSecurityException ( ErrorCode . FAILURE , "Not a valid X509 Subject Name . " ) ; } }
private static SimpleFeatureCollection parseGeoJSON ( InputStream in , CoordinateReferenceSystem crs ) throws IOException { Map < String , Object > geojson = OM . readValue ( in , TYPE_REF ) ; SimpleFeatureType schema = GeoJSONSchemaDetector . getSchema ( geojson , crs ) ; return GeoJSONReader2 . toFeatureCollection ( geojson , schema ) ; }
private void refreshHostStorage ( Guid hostId ) { getBackendCollection ( VdcQueryType . GetDeviceList , new GetDeviceListQueryParameters ( hostId , StorageType . ISCSI , false , null ) ) ; }
public void openTestShells ( ) { for ( int i = 1 ; i <= TEST_SHELLS_COUNT ; i ++ ) { String shellTitle = "shell" + i ; Display . syncExec ( ( ) - > { ShellTestUtils . createShell ( shellTitle ) ; } ) ; shells . add ( new DefaultShell ( shellTitle ) ) ; } }
private RangeColumnStatistics ( Optional < Object > lowValue , Optional < Object > highValue , Estimate fraction , Estimate dataSize , Estimate distinctValuesCount ) { this . lowValue = requireNonNull ( lowValue , "lowValue can not be null" ) ; this . highValue = requireNonNull ( highValue , "highValue can not be null" ) ; this . fraction = requireNonNull ( fraction , "fraction can not be null" ) ; this . dataSize = requireNonNull ( dataSize , "dataSize can not be null" ) ; this . distinctValuesCount = requireNonNull ( distinctValuesCount , "distinctValuesCount can not be null" ) ; }
public void close ( ) { log . debug ( "Closing record collector" ) ; if ( eosEnabled ) { streamsProducer . abortTransaction ( ) ; } checkForException ( ) ; }
public static FileSystemContext create ( ClientContext clientContext ) { FileSystemContext ctx = new FileSystemContext ( ) ; ctx . init ( clientContext , MasterInquireClient . Factory . create ( clientContext . getClusterConf ( ) ) ) ; return ctx ; }
private synchronized URI createNextResultsUri ( String scheme , UriInfo uriInfo ) { return uriInfo . getBaseUriBuilder ( ) . scheme ( scheme ) . replacePath ( " / v1 / statement" ) . path ( queryId . toString ( ) ) . path ( String . valueOf ( resultId . incrementAndGet ( ) ) ) . replaceQuery ( "" ) . build ( ) ; }
public void commitToFile ( ) throws Exception { // Given afw . write ( expectedContent , 0 , expectedContent . length ( ) ) ; // When afw . commit ( ) ; // Then assertEquals ( expectedContent . length ( ) , Files . size ( af . toPath ( ) ) ) ; }
public void setColumnWidthPercentageByPosition ( int columnPosition , int width , boolean fireEvent ) { this . columnWidthConfig . setPercentage ( columnPosition , width ) ; if ( fireEvent ) { fireLayerEvent ( new ColumnResizeEvent ( this , columnPosition ) ) ; } }
protected void connect ( ) { // note that we are not connecting via JMX for testing mbeanServerConn = null ; jmxc = null ; ssProxy = StorageService . instance ; msProxy = MessagingService . instance ( ) ; streamProxy = StreamManager . instance ; compactionProxy = CompactionManager . instance ; fdProxy = ( FailureDetectorMBean ) FailureDetector . instance ; cacheService = CacheService . instance ; spProxy = StorageProxy . instance ; hhProxy = HintedHandOffManager . instance ; gcProxy = new GCInspector ( ) ; gossProxy = Gossiper . instance ; memProxy = ManagementFactory . getMemoryMXBean ( ) ; runtimeProxy = ManagementFactory . getRuntimeMXBean ( ) ; }
private void sortPositions ( int arrayLength , Comparator < Integer > comparator ) { List < Integer > list = positions . subList ( 0 , arrayLength ) ; try { list . sort ( comparator ) ; } catch ( IllegalArgumentException e ) { throw new PrestoException ( INVALID_FUNCTION_ARGUMENT , "Lambda comparator violates the comparator contract" , e ) ; } }
public void deactivate ( ) { try { httpService . unregister ( WEBAPP_ALIAS + SERVLET_NAME ) ; } catch ( IllegalArgumentException e ) { logger . debug ( "LgTv Servlet ' { } ' was not registered . Nothing to deactivate . " , WEBAPP_ALIAS + SERVLET_NAME ) ; } finally { logger . info ( "Stopped LgTv Servlet" ) ; } }
public void freeTicketWhenExists ( TicketsInteractor mockedTicketsInteractor ) throws RecordNotFoundException , UpdateTicketStateUnauthorizedException { long ticketId = 1 ; ObjectNode json = Json . newObject ( ) ; ArrayNode node = json . putArray ( ConstantsManager . TICKET_IDS_FIELD_NAME ) ; node . add ( ticketId ) ; when ( mockedBody . asJson ( ) ) . thenReturn ( json ) ; Result result = ticketsController . free ( ) ; assertEquals ( Helpers . OK , Helpers . status ( result ) ) ; verify ( mockedTicketsInteractor ) . freeATicket ( ticketId ) ; }
private static < E > View < E > load ( JobContext jobContext ) { Configuration conf = Hadoop . JobContext . getConfiguration . invoke ( jobContext ) ; Class < E > type = getType ( jobContext ) ; String outputUri = conf . get ( KITE_OUTPUT_URI ) ; return Datasets . < E , View < E > > load ( outputUri , type ) ; }
public boolean validate ( Map < String , String > optionsMap ) { if ( ! super . validate ( optionsMap ) ) { return false ; } if ( ! validatePrincipalLogin ( ) ) { return false ; } return true ; }
private void createEdit ( ) { Button button = createButton ( buttonparent , buttonEdit_ID , buttonEdit_caption , true ) ; buttonBar . pack ( ) ; }
public E read ( String line ) { return read ( line , null ) ; }
public void centerOnCurrentLocation ( ) { followMe = true ; findMe ( ) ; }
public void serialize ( final DoublesSketch sketch , final JsonGenerator generator , final SerializerProvider provider ) throws IOException { generator . writeBinary ( sketch . toByteArray ( true ) ) ; }
public String toString ( ) { StringBuilder builder = new StringBuilder ( StringUtil . simpleClassName ( this ) ) . append ( ' [ ' ) ; for ( int i = 0 ; i < topicSubscriptions . size ( ) ; i ++ ) { builder . append ( topicSubscriptions . get ( i ) ) . append ( " , " ) ; } if ( ! topicSubscriptions . isEmpty ( ) ) { builder . setLength ( builder . length ( ) - 2 ) ; } return builder . append ( ' ] ' ) . toString ( ) ; }
private Field [ ] getFields ( Class < ? > currentClass ) { final List < Field > fields = new ArrayList < > ( ) ; while ( currentClass != null ) { fields . addAll ( Arrays . asList ( currentClass . getDeclaredFields ( ) ) ) ; currentClass = currentClass . getSuperclass ( ) ; } return fields . toArray ( new Field [ 0 ] ) ; }
public void setDecoderResult ( DecoderResult decoderResult ) { this . decoderResult = ObjectUtil . checkNotNull ( decoderResult , "decoderResult" ) ; }
protected String contentFrom ( FitNesseContext context , Request request , WikiPage requestedPage ) { return prepareResponseDocument ( context ) . html ( request ) ; }
public void start ( ) { }
private void doc ( Class c ) throws IOException { open ( "tr class = 'TableRowColor'" ) ; open ( "td" ) ; around ( "span class = 'modifiers'" , getModifiers ( c ) ) ; close ( "td" ) ; open ( "td" ) ; link ( c . getType ( ) ) ; tag ( "br" ) ; around ( "span class = 'doc'" , getDoc ( c ) ) ; close ( "td" ) ; close ( "tr" ) ; }
public List < Pair < AbstractIngredient [ ] , Float > > lookupShapedRecipes ( Item i ) { return shapedReverseLookupTable . get ( i ) ; }
public boolean exists ( ) { return exists ( new EventMetadata ( ) ) ; }
void startIndexPopulation ( IndexPopulationJob job ) { populationJobs . add ( job ) ; scheduler . schedule ( indexPopulation , new IndexPopulationJobWrapper ( job , this ) ) ; }
public static int getOptionAsInteger ( Map < String , String > options , String option , int defaultValue ) { String value = options . get ( option ) ; return value == null ? defaultValue : Integer . parseInt ( value ) ; }
public synchronized void releaseBuffer ( ) { if ( serializedCache != null ) { serializedCache . release ( ) ; if ( serializedCache . refCnt ( ) == 0 ) { serializedCache = null ; } } }
public String getProvider ( ) { return nativeGetProvider ( nativePtr ) ; }
private static Set < SymbolicValue > computedFrom ( @Nullable SymbolicValue symbolicValue ) { if ( symbolicValue == null ) { return Collections . emptySet ( ) ; } Set < SymbolicValue > result = new HashSet < > ( ) ; result . add ( symbolicValue ) ; symbolicValue . computedFrom ( ) . forEach ( sv - > result . addAll ( computedFrom ( sv ) ) ) ; return result ; }
public ClassLoader getClassLoader ( ) { return this . getClass ( ) . getClassLoader ( ) ; }
public Integer add ( Stream < E > entities ) { return delegate ( ) . add ( entities . filter ( entity - > { // throws exception if no permission on the containing package isOperationPermitted ( entity , Action . CREATE ) ; createAcl ( entity ) ; return true ; } ) ) ; }
public void canIgnoreInvocationsWithJunit ( ) throws InterruptedException { // given DelayedExecution delayedExecution = createZeroMillisDelayedExecution ( ) ; DelayedExecution twentyMillisDelayedExecution = createTwentyMillisDelayedExecution ( ) ; // when delayedExecution . allAsyncCallsStarted ( ) ; // then verify ( mock , timeout ( 50 ) ) . oneArg ( '1' ) ; // when twentyMillisDelayedExecution . allAsyncCallsStarted ( ) ; // then verify ( mock , timeout ( 50 ) ) . oneArg ( '2' ) ; }
public final boolean isExtendedLifetimeValid ( ) { // extended lifetime is only valid if it contains an access token if ( mExtendedExpiresOn != null && ! StringExtensions . IsNullOrBlank ( mAccessToken ) ) { return ! isTokenExpired ( mExtendedExpiresOn ) ; } return false ; }
public void sendDocumentFinalizedMessage ( IWantDocument iWantDocument ) { BodyMailMessage message = buildDocumentFinalizedMessage ( iWantDocument ) ; try { emailService . sendMessage ( message , false ) ; } catch ( Exception e ) { LOG . error ( ( "sendDocumentFinalizedMessage , Email could not be sent for IWNT edoc# " + iWantDocument . getDocumentNumber ( ) ) , e ) ; } }
void addStore ( PartitionId partitionId , ReplicationTest . StoreEventListener listener ) { storesByPartition . computeIfAbsent ( partitionId , partitionId1 - > new InMemoryStore ( partitionId , infosByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < MessageInfo > > ) partitionId2 - > new ArrayList < > ( ) ) , buffersByPartition . computeIfAbsent ( partitionId1 , ( Function < PartitionId , List < ByteBuffer > > ) partitionId22 - > new ArrayList < > ( ) ) , listener ) ) ; }
private static long doubleToSortableLong ( double value ) { long bits = Double . doubleToLongBits ( value ) ; return bits ^ ( ( bits > > 63 ) & Long . MAX_VALUE ) ; }
default int getGroupedJobInitializerCacheSize ( ) { return 100 ; }
public DefaultCompactionPolicyTest ( ) throws InterruptedException { Pair < MockBlobStore , StoreConfig > initState = CompactionPolicyTest . initializeBlobStore ( properties , time , - 1 , - 1 , DEFAULT_MAX_BLOB_SIZE ) ; config = initState . getSecond ( ) ; blobStore = initState . getFirst ( ) ; mockBlobStoreStats = blobStore . getBlobStoreStats ( ) ; messageRetentionTimeInMs = config . storeDeletedMessageRetentionDays * Time . HoursPerDay * Time . SecsPerHour * Time . MsPerSec ; compactionPolicy = new DefaultCompactionPolicy ( config , time ) ; }
private boolean containtsOnlyValidXMLChars ( String stringToValidate ) { String pattern = " [ ^ " + "\u0009\r\n" + "\u0020 - \uD7FF" + "\uE000 - \uFFFD" + "\ud800\udc00 - \udbff\udfff" + " ] " ; String resultString = stringToValidate . replaceAll ( pattern , "" ) ; return resultString . equals ( stringToValidate ) ; }
CloseableLiquibase ( String changeLogFile , ResourceAccessor resourceAccessor , Database database , ManagedDataSource dataSource ) throws LiquibaseException , SQLException { super ( changeLogFile , resourceAccessor , database ) ; this . dataSource = dataSource ; }
public CtfTmfLightweightContext ( ArrayList < CtfIterator > iters , ListIterator < CtfIterator > pos ) { fTrace = iters . get ( 0 ) . getCtfTmfTrace ( ) ; curLocation = new CtfLocation ( ( Long ) null ) ; }
public void testIsAdHocAutostart_true ( ) { String id = UUID . randomUUID ( ) . toString ( ) ; AdHocSubProcess adHocSubProcess = bpmn2 . createAdHocSubProcess ( ) ; adHocSubProcess . setId ( id ) ; CustomElement . autoStart . of ( adHocSubProcess ) . set ( Boolean . TRUE ) ; tested = new AdHocSubProcessPropertyReader ( adHocSubProcess , definitionResolverReal . getDiagram ( ) , definitionResolverReal ) ; assertTrue ( tested . isAdHocAutostart ( ) ) ; }
private BroadcastTrimmer broadcastTrimmer ( ) { return new ScheduleResolverBroadcastTrimmer ( scheduleResolver , contentResolver , contentWriter ) ; }
public void disconnect ( ) throws IOException { for ( LocalPortForwarder forwarder : forwarders ) { try { forwarder . close ( ) ; } catch ( IOException e ) { log . warn ( "Error closing forwarder" , e ) ; } } forwarders . clear ( ) ; trans . disconnect ( ) ; super . disconnect ( ) ; }
public void close ( ) { super . close ( ) ; mRefCount . decrementAndGet ( ) ; }
public static String getParameter ( String key ) { try { return getConfig ( ) . getString ( key ) ; } catch ( NoSuchElementException e ) { throw new NoSuchElementException ( "No configuration found in " + CONFIG_FILE + " for key " + key + " ! " ) ; } }
public List < Option > getOptions ( ) { return options ; }
public DataInputNavigableJsonAdapter ( BufferObjectDataInput input , int initialOffset ) { this . input = input ; this . input . position ( initialOffset ) ; this . initialOffset = initialOffset ; }
protected void onMethodInvocationFound ( MethodInvocationTree mit ) { ExpressionTree argument = mit . arguments ( ) . get ( 1 ) ; Type type = argument . symbolType ( ) ; if ( ExpressionsHelper . isNotSerializable ( argument ) ) { String andParameters = JUtils . isParametrized ( type ) ? " and its parameters" : "" ; reportIssue ( argument , "Make \"" + type . name ( ) + "\"" + andParameters + " serializable or don't store it in the session . " ) ; } }
public Predicate createPredicateAndJoin ( String filterString , Root < T > root ) { LogicalOperatorRulesLexer lexer = new LogicalOperatorRulesLexer ( new ANTLRInputStream ( filterString ) ) ; LogicalOperatorRulesParser parser = new LogicalOperatorRulesParser ( new CommonTokenStream ( lexer ) ) ; parser . addErrorListener ( new OsiamAntlrErrorListener ( ) ) ; ParseTree tree = parser . parse ( ) ; EvalVisitor < T > visitor = new EvalVisitor < > ( this , root ) ; return visitor . visit ( tree ) ; }
public Privilege [ ] getSupportedPrivileges ( String path ) { return privileges . listOfSupported ( ) ; }
protected AbstractSessionPresenter ( final SessionManager sessionManager , final SessionPresenter . View view , final Optional < ? extends ToolbarFactory < S > > toolbarFactory , final Optional < PaletteWidgetFactory < DefinitionSetPalette , ? > > paletteFactory , final NotificationsObserver notificationsObserver ) { this . sessionManager = sessionManager ; this . toolbarFactory = ( Optional < ToolbarFactory < S > > ) toolbarFactory ; this . paletteFactory = paletteFactory ; this . notificationsObserver = notificationsObserver ; this . view = view ; this . hasToolbar = true ; this . hasPalette = true ; }
private void prepareToNewMarker ( ) { drawerLayout . closeDrawers ( ) ; setLongClickListener ( ) ; setToastMarkerInfo ( ) ; }
private MVCCEntry wrapMvccEntryForPut ( InvocationContext ctx , Object key , CacheEntry cacheEntry , Metadata providedMetadata , boolean skipRead ) { if ( cacheEntry instanceof MVCCEntry ) { MVCCEntry mvccEntry = ( MVCCEntry ) cacheEntry ; updateMetadata ( mvccEntry , providedMetadata ) ; return mvccEntry ; } return wrapInternalCacheEntryForPut ( ctx , key , ( InternalCacheEntry ) cacheEntry , providedMetadata , skipRead ) ; }
public SERVICE_FAILURE_ACTIONS getFailureActions ( ) { Pointer buffer = queryServiceConfig2 ( Winsvc . SERVICE_CONFIG_FAILURE_ACTIONS ) ; SERVICE_FAILURE_ACTIONS result = new SERVICE_FAILURE_ACTIONS ( buffer ) ; return result ; }
void fun ( String strPath , String StrParent , String StrChild , String prefix , String suffix , java . net . URI uri ) throws Exception { // Questionable : check what is done with this file new File ( strPath ) ; // Noncompliant new File ( StrParent , StrChild ) ; // Noncompliant { { Make sure this file handling is safe here . } } File parent = new File ( uri ) ; // Noncompliant new File ( parent , StrChild ) ; // compliant we rely on the fact that parent should be highlighted File . createTempFile ( prefix , suffix ) ; // Noncompliant File . createTempFile ( prefix , suffix , parent ) ; // compliant }
public ValidationResult vmNotHavingPciPassthroughDevices ( ) { for ( VM vm : vms ) { if ( getHostDeviceManager ( ) . checkVmNeedsPciDevices ( vm . getId ( ) ) ) { return new ValidationResult ( EngineMessage . ACTION_TYPE_FAILED_VM_HAS_ATTACHED_PCI_HOST_DEVICES ) ; } } return ValidationResult . VALID ; }
public void onError ( Throwable e ) { try { FileLfsServlet . sendError ( response , HttpStatus . SC_INTERNAL_SERVER_ERROR , e . getMessage ( ) ) ; context . complete ( ) ; in . close ( ) ; } catch ( IOException ex ) { LOG . log ( Level . SEVERE , ex . getMessage ( ) , ex ) ; } }
public String pop ( ) { return lines . remove ( lines . lastKey ( ) ) ; }
public void onDestroyView ( ) { mapView . onDestroy ( ) ; mapboxMap = null ; unbinder . unbind ( ) ; unbinder = null ; super . onDestroyView ( ) ; }
private static SampleTissueProcessingDto asTissueProcessingSampleDto ( SampleTissueProcessing from ) { SampleTissueProcessingDto dto = null ; if ( from instanceof SampleCVSlideImpl ) { dto = asCVSlideSampleDto ( ( SampleCVSlide ) from ) ; } else if ( from . getClass ( ) == SampleLCMTubeImpl . class ) { dto = asLCMTubeSampleDto ( ( SampleLCMTube ) from ) ; } else { dto = new SampleTissueProcessingDto ( ) ; } return dto ; }
public void testMakeTimeZone_NoOffsets ( ) throws Exception { int [ ] [ ] times = { } ; int [ ] [ ] offsets = { } ; try { createZoneInfo ( times , offsets ) ; fail ( "Did not detect no transitions" ) ; } catch ( IllegalStateException expected ) { // Expected this to happen } }
DeploymentToNodeMetadata ( @Memoized Supplier < Set < ? extends Location > > locations , GroupNamingConvention . Factory namingConvention , OSImageToImage osImageToImage , RoleSizeToHardware roleSizeToHardware , Map < String , Credentials > credentialStore ) { this . nodeNamingConvention = namingConvention . createWithoutPrefix ( ) ; this . locations = locations ; this . osImageToImage = osImageToImage ; this . roleSizeToHardware = roleSizeToHardware ; this . credentialStore = credentialStore ; }
public AsyncContext startAsync ( ) throws IllegalStateException { if ( _asyncNotSupportedSource != null ) throw new IllegalStateException ( " ! asyncSupported : " + _asyncNotSupportedSource ) ; HttpChannelState state = getHttpChannelState ( ) ; if ( _async == null ) _async = new AsyncContextState ( state ) ; AsyncContextEvent event = new AsyncContextEvent ( _context , _async , state , this , this , getResponse ( ) ) ; state . startAsync ( event ) ; return _async ; }
CompletableFuture < Void > getFailureOp ( CommitData cd ) { return rollbackLocks ( cd ) ; }
private boolean isGuavaPrecondition ( Symbol . MethodSymbol symbol ) { String name = symbol . name ( ) ; return symbol . owner ( ) . type ( ) . is ( "com . google . common . base . Preconditions" ) && ( "checkNotNull" . equals ( name ) || "checkArgument" . equals ( name ) || "checkState" . equals ( name ) ) ; }
public void loadTrace ( ITmfTrace trace ) { super . loadTrace ( trace ) ; initializeDataProvider ( ) ; }
public StringInputRowParser ( @JsonProperty ( "parseSpec" ) ParseSpec parseSpec , @JsonProperty ( "encoding" ) String encoding ) { this . parseSpec = parseSpec ; this . mapParser = new MapInputRowParser ( parseSpec ) ; this . parser = parseSpec . makeParser ( ) ; if ( encoding != null ) { this . charset = Charset . forName ( encoding ) ; } else { this . charset = DEFAULT_CHARSET ; } }
public Object getNegotiatedProperty ( String propName ) { assertComplete ( ) ; switch ( propName ) { case Sasl . QOP : return selectedQop . getName ( ) ; case Sasl . MAX_BUFFER : return Integer . toString ( actualMaxReceiveBuffer != 0 ? actualMaxReceiveBuffer : configuredMaxReceiveBuffer ) ; case Sasl . RAW_SEND_SIZE : return Integer . toString ( maxBuffer ) ; } return null ; }
public static BooleanExpression asBoolean ( boolean value ) { return asBoolean ( constant ( value ) ) ; }
public void startPolicyEnforcement ( ) throws IOException { if ( m_pbd . getUsageSpecificLog ( ) . isDebugEnabled ( ) ) { m_pbd . getUsageSpecificLog ( ) . debug ( "Starting time based retention policy enforcement with retainMillis = " + m_retainMillis + " for PBD " + m_pbd . getNonce ( ) ) ; } m_reader = m_pbd . openForRead ( CURSOR_NAME ) ; scheduleTaskFor ( m_pbd . getNonce ( ) , this : : deleteOldSegments , 0 ) ; }
public void afterRun ( ) throws Exception { if ( recordStore == null ) { return ; } if ( recordStore . isWanReplicationEnabled ( ) ) { CacheRecord record = recordStore . getRecord ( key ) ; if ( record != null ) { publishWanUpdate ( key , record ) ; } else { publishWanRemove ( key ) ; } } super . afterRun ( ) ; }
protected String getConfigRoot ( ) { return ClientConfigSections . HAZELCAST_CLIENT . name ; }
public int getCapacity ( ) { return capacity ; }
private Set < IArtifactType > getAllArtTypes ( ) { Set < IArtifactType > allArtTypes = new HashSet < > ( ) ; if ( artifactTypes != null || ! artifactTypes . isEmpty ( ) ) { allArtTypes . addAll ( artifactTypes ) ; } else { allArtTypes = getArtifactTypesFromWorkItemTypes ( ) ; } return allArtTypes ; }
public void testContextListenerIsSet ( ) throws Exception { try ( WizardCommandController tester = testHarness . createWizardController ( MyFirstWizard . class ) ) { tester . initialize ( ) ; Assert . assertTrue ( "Wizard is not on a valid state" , tester . isValid ( ) ) ; Assert . assertTrue ( "Listener is not set" , listener . isContextInitialized ( ) ) ; tester . execute ( ) ; } Assert . assertFalse ( "Listener is still set" , listener . isContextInitialized ( ) ) ; }
Later ( F0 < A > producer ) { this . memo = P . hardMemo ( producer ) ; }
private boolean isRunningFromCommandLine ( ) { // first look up all OptionProcessors and see if running from command line option is set Collection < ? extends OptionProcessor > optionProcessors = Lookup . getDefault ( ) . lookupAll ( OptionProcessor . class ) ; Iterator < ? extends OptionProcessor > optionsIterator = optionProcessors . iterator ( ) ; while ( optionsIterator . hasNext ( ) ) { // find CommandLineOptionProcessor OptionProcessor processor = optionsIterator . next ( ) ; if ( ( processor instanceof CommandLineOptionProcessor ) ) { // check if we are running from command line return ( ( CommandLineOptionProcessor ) processor ) . isRunFromCommandLine ( ) ; } } return false ; }
public boolean onReceivedHttpAuthRequest ( CordovaWebView view , ICordovaHttpAuthHandler handler , String host , String realm ) { for ( CordovaPlugin plugin : this . pluginMap . values ( ) ) { if ( plugin != null && plugin . onReceivedHttpAuthRequest ( view , handler , host , realm ) ) { return true ; } } return false ; }
private String createAndGetLockPath ( ) throws InterruptedException , KeeperException { // Create locks if it does not exist if ( zk . exists ( lockPath , false ) == null ) { try { Util . mkdir ( zk , lockPath , ZooDefs . Ids . OPEN_ACL_UNSAFE ) ; } catch ( CloudnameException e ) { log . log ( java . util . logging . Level . INFO , "CloudnameException while trying to get lock path " + absoluteLockPath , e ) ; } } return lockPath + " / " + lockName ; }
public Tuple getTuple ( EntityKey key , TupleContext tupleContext ) { Entity entity = getEntity ( key ) ; if ( entity != null ) { return new Tuple ( new RedisTupleSnapshot ( entity . getProperties ( ) ) ) ; } else { return null ; } }
public void invoke ( ClientEvent event ) { try { method . invoke ( listener , event ) ; } catch ( InvocationTargetException e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e . getTargetException ( ) ) ; } catch ( Exception e ) { throw log . exceptionInvokingListener ( e . getClass ( ) . getName ( ) , method , listener , e ) ; } }
ConfigFileConfigProvider ( @JsonProperty ( "configFile" ) String configFile ) { loadProperties ( configFile ) ; }
public void addDataSource ( long dataSourceObjectId ) throws IngestStreamClosedException { // Do nothing }
private void deleteEmptyStagingDirectories ( List < DeclaredIntentionToWrite > declaredIntentionsToWrite ) { for ( DeclaredIntentionToWrite declaredIntentionToWrite : declaredIntentionsToWrite ) { if ( declaredIntentionToWrite . getMode ( ) != WriteMode . STAGE_AND_MOVE_TO_TARGET_DIRECTORY ) { continue ; } Path path = declaredIntentionToWrite . getRootPath ( ) ; recursiveDeleteFilesAndLog ( declaredIntentionToWrite . getContext ( ) , path , ImmutableList . of ( ) , true , "staging directory cleanup" ) ; } }
public void edit ( ) { if ( getWindow ( ) != null ) { return ; } EditDiskProfileModel model = new EditDiskProfileModel ( this , ( DiskProfile ) getSelectedItem ( ) , getEntity ( ) . getStoragePoolId ( ) ) ; setWindow ( model ) ; initProfileStorageDomains ( model ) ; }
public void setUp ( ) throws Exception { super . setUp ( ) ; gitDir = new File ( project . getProject ( ) . getLocationURI ( ) . getPath ( ) , Constants . DOT_GIT ) ; testRepository = new TestRepository ( gitDir ) ; testRepository . connect ( project . getProject ( ) ) ; }
protected long getParentDid ( ) { long deckID = getCol ( ) . getDecks ( ) . selected ( ) ; return deckID ; }
public static String getFileExtension ( File file ) { return FilenameUtils . getExtension ( file . getAbsolutePath ( ) ) . toLowerCase ( ) ; }
public void shouldPurgeAnAutoGenerationOption ( ) throws Exception { assertNotNull ( identifierSourceService . getAutoGenerationOption ( getId ( ) ) ) ; MockHttpServletRequest req = request ( RequestMethod . DELETE , getURI ( ) + " / " + getUuid ( ) ) ; req . addParameter ( "purge" , "" ) ; handle ( req ) ; assertNull ( identifierSourceService . getAutoGenerationOption ( getId ( ) ) ) ; }
private void loadPerspectiveAndCheckLoadingTime ( String perspectiveID , boolean headerIncluded ) { // long loadingStart = System . currentTimeMillis ( ) ; String standalonePerspectiveURL = getStandalonePerspectiveURL ( perspectiveID , headerIncluded ) ; driver . get ( standalonePerspectiveURL ) ; ApplicationLoadingPopup . waitForDisappearance ( PERSPECTIVE_LOADING_TIMEOUT ) ; BusyPopup . waitForDisappearance ( ) ; // double perspectiveLoadingTime = ( System . currentTimeMillis ( ) - loadingStart ) / ( double ) 1000 ; // TODO : What is the acceptable loading time ? Do we want to test this ? // assertThat ( perspectiveLoadingTime ) // . as ( "It should take less than " + PERSPECTIVE_LOADING_TIMEOUT + " seconds to load the perspective " + perspectiveID + " . " ) // . isLessThan ( PERSPECTIVE_LOADING_TIMEOUT ) ; }
public default IVariableBinding [ ] getSyntheticOuterLocals ( ) { return new IVariableBinding [ 0 ] ; }
protected void executeCommand ( ) { AuthenticationProfile profile = sessionDataContainer . getProfile ( getParameters ( ) . getSessionId ( ) ) ; sessionId = getParameters ( ) . getSessionId ( ) ; sourceIp = sessionDataContainer . getSourceIp ( getParameters ( ) . getSessionId ( ) ) ; if ( profile == null ) { setSucceeded ( false ) ; } else { sessionDataContainer . setSessionValid ( getParameters ( ) . getSessionId ( ) , false ) ; setSucceeded ( true ) ; } }
public static void updateNotification ( Context context , MasterSecret masterSecret , long threadId ) { if ( ! TextSecurePreferences . isNotificationsEnabled ( context ) ) { return ; } if ( visibleThread == threadId ) { DatabaseFactory . getThreadDatabase ( context ) . setRead ( threadId ) ; sendInThreadNotification ( context ) ; } else { updateNotification ( context , masterSecret , true ) ; } }
protected void fillOptions ( Map < Enum , String > options ) { options . put ( EnumModel . VAL1 , EnumModel . VAL1 . name ( ) ) ; options . put ( EnumModel . VAL2 , EnumModel . VAL2 . name ( ) ) ; options . put ( EnumModel . VAL3 , EnumModel . VAL3 . name ( ) ) ; options . put ( EnumModel . VAL4 , EnumModel . VAL4 . name ( ) ) ; }
public boolean removeQueues ( Queue . . . queues ) { removeQueues ( Arrays . stream ( queues ) . map ( Queue : : getName ) ) ; return super . removeQueues ( queues ) ; }
private static Object castIntegerToObect ( int value , Type type ) { if ( type == INTEGER || type == TINYINT || type == BIGINT ) { return ( long ) value ; } if ( type == VARCHAR ) { return String . valueOf ( value ) ; } if ( type == DOUBLE ) { return ( double ) value ; } throw new UnsupportedOperationException ( ) ; }
public void testXmlConfig ( ) throws IOException { EmbeddedCacheManager cm = null ; try { cm = new DefaultCacheManager ( "jpa - config . xml" ) ; Cache < String , KeyValueEntity > specificCache = cm . getCache ( "specificCache" ) ; validateConfig ( specificCache ) ; KeyValueEntity entity = new KeyValueEntity ( "k" , "v" ) ; specificCache . put ( entity . getK ( ) , entity ) ; } finally { if ( cm != null ) cm . stop ( ) ; } }
public boolean equals ( Object o ) { boolean equals = this == o || o instanceof SessionEditorInput && getURI ( ) . equals ( ( ( SessionEditorInput ) o ) . getURI ( ) ) ; if ( equals && o instanceof SessionEditorInput ) { EObject input = getInput ( false ) ; if ( input != null ) { SessionEditorInput otherSessionEditorInput = ( SessionEditorInput ) o ; return input . equals ( otherSessionEditorInput . getInput ( false ) ) ; } } return equals ; }
private void loadChildEntities ( LibraryDilution dilution ) throws IOException { if ( dilution . getLibrary ( ) != null ) { dilution . setLibrary ( libraryDao . get ( dilution . getLibrary ( ) . getId ( ) ) ) ; } if ( dilution . getTargetedSequencing ( ) != null ) { dilution . setTargetedSequencing ( targetedSequencingDao . get ( dilution . getTargetedSequencing ( ) . getId ( ) ) ) ; } }
GdkColor getContextColor ( ) { long /* int */ fontHandle = fontHandle ( ) ; long /* int */ context = OS . gtk_widget_get_style_context ( fontHandle ) ; int styleState = OS . gtk_widget_get_state_flags ( handle ) ; GdkRGBA rgba = new GdkRGBA ( ) ; rgba = display . styleContextGetColor ( context , styleState , rgba ) ; return display . toGdkColor ( rgba ) ; }
public Subquery parameter ( String listId , Object . . . values ) { if ( values == null || values . length == 0 || values [ 0 ] == null ) { return this ; } where . setToIntersection ( ) ; where . addParameter ( listId , values ) ; return this ; }
public int hashCode ( ) { int result = key ? 1 : 0 ; result = 31 * result + ( path != null ? path . hashCode ( ) : 0 ) ; return result ; }
public boolean doSynchronousPing ( ) { MerlinLog . d ( "Pinging : " + hostAddress ) ; try { responseCodeFetcher . from ( hostAddress ) ; } catch ( RequestException e ) { if ( e . causedByIO ( ) ) { return false ; } throw e ; } return true ; }
public T hasThisElement ( final Object val ) { Assert . parametersNotNull ( "val" , val ) ; return addCriteria ( FilterOperator . ELEMENT_MATCH , val , false ) ; }
public Builder setSSHDirectory ( final File sshDirectory ) { Assert . assertNotNull ( sshDirectory ) ; this . sshDirectory = sshDirectory ; return this ; }
public List < Attribute > getRequiredAttributes ( PerunSession sess , List < Service > services , Facility facility , Resource resource , User user , Member member ) throws MemberResourceMismatchException { Set < Attribute > attributes = new HashSet < > ( ) ; for ( Service service : services ) { attributes . addAll ( getRequiredAttributes ( sess , service , facility , resource , user , member ) ) ; } return new ArrayList < > ( attributes ) ; }
public void zrevrangeByScoreWithScores ( final byte [ ] key , final double max , final double min , final int offset , final int count ) { sendCommand ( ZREVRANGEBYSCORE , key , toByteArray ( max ) , toByteArray ( min ) , LIMIT . raw , toByteArray ( offset ) , toByteArray ( count ) , WITHSCORES . raw ) ; }
public void write ( int b ) throws IOException { mSingleCharWrite [ 0 ] = ( byte ) b ; write ( mSingleCharWrite ) ; }
public void deallocateFlow ( String flowId ) throws FlowNotFoundException , ProvisionerException { try { String netId = getNetworkSelector ( ) . findNetworkForFlowId ( flowId ) ; getNclController ( ) . deallocateFlow ( flowId , netId ) ; } catch ( Exception e ) { throw new ProvisionerException ( e ) ; } }
private String _encode ( String strVal ) { try { return URLEncoder . encode ( strVal , StandardCharsets . UTF_8 . name ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
public boolean contains ( Object o ) { boolean contains = false ; if ( o != null ) { contains = super . contains ( o ) ; if ( ! contains ) { MarshalledEntry < K , V > me = persistenceManager . loadFromAllStores ( o , true ) ; contains = me != null ; } } return contains ; }
public boolean provides ( IOperation operation ) { if ( ! ( operation instanceof CreateDecoratorsOperation ) ) { return false ; } IDecoratorTarget decoratorTarget = ( ( CreateDecoratorsOperation ) operation ) . getDecoratorTarget ( ) ; View view = ( View ) decoratorTarget . getAdapter ( View . class ) ; return view != null && DDiagramEditPart . MODEL_ID . equals ( SiriusVisualIDRegistry . getModelID ( view ) ) ; }
public void MercuryCuratedMainPageTest_006_CheckWrongCategoryAlert ( ) { CuratedContentPageObject ccp = new CuratedContentPageObject ( driver ) ; wikiURL = urlBuilder . getUrlForWiki ( MercuryWikis . MERCURY_CC ) ; ccp . openMercuryArticleByNameWithNoCacheBuster ( wikiURL , MercurySubpages . CC_MAIN_PAGE ) ; MercuryAlertComponentObject mercuryAlert = new MercuryAlertComponentObject ( driver , MercuryAlertComponentObject . AlertMessage . NOT_EXISTING_CATEGORY ) ; String oldUrl = driver . getCurrentUrl ( ) ; ccp . clickOnCuratedContentElementByIndex ( 2 ) ; Assertion . assertTrue ( mercuryAlert . isAlertMessageVisible ( ) ) ; ccp . waitForLoadingSpinnerToFinish ( ) ; Assertion . assertUrlEqualToCurrentUrl ( driver , oldUrl ) ; }
private void testUpdateInterface ( Guid interface_id ) { VdsNetworkInterface iface = dao . get ( interface_id ) ; iface . setName ( iface . getName ( ) . toUpperCase ( ) ) ; iface . setQos ( newQos ) ; dao . updateInterfaceForVds ( iface ) ; VdsNetworkInterface ifaced = dao . get ( interface_id ) ; assertEquals ( iface . getName ( ) , ifaced . getName ( ) ) ; assertEquals ( iface . getQos ( ) , ifaced . getQos ( ) ) ; }
public PatientProgram savePatientProgram ( PatientProgram patientProgram ) throws DAOException { CustomDatatypeUtil . saveAttributesIfNecessary ( patientProgram ) ; if ( patientProgram . getPatientProgramId ( ) == null ) { sessionFactory . getCurrentSession ( ) . save ( patientProgram ) ; } else { sessionFactory . getCurrentSession ( ) . merge ( patientProgram ) ; } return patientProgram ; }
public UploadDirectoryToCDN ( String username , String apiKey ) { BlobStoreContext context = ContextBuilder . newBuilder ( PROVIDER ) . credentials ( username , apiKey ) . buildView ( BlobStoreContext . class ) ; storage = context . getBlobStore ( ) ; rackspace = context . unwrap ( CloudFilesApiMetadata . CONTEXT_TOKEN ) . getApi ( ) ; // can use unwrapApi ( ) in jclouds 1 . 7 . 0 }
public SslContextBuilder keyManager ( KeyManager keyManager ) { if ( forServer ) { checkNotNull ( keyManager , "keyManager required for servers" ) ; } if ( keyManager != null ) { this . keyManagerFactory = new KeyManagerFactoryWrapper ( keyManager ) ; } else { this . keyManagerFactory = null ; } keyCertChain = null ; key = null ; keyPassword = null ; return this ; }
protected boolean isTypeSupported ( Class < T > clazz ) { // TODO : Add other types ? Float , etc if ( String . class . isAssignableFrom ( clazz ) || Integer . class . isAssignableFrom ( clazz ) || Boolean . class . isAssignableFrom ( clazz ) ) { return true ; } return false ; }
private List < Person > createModel ( ) { List < Person > elements = new ArrayList < Person > ( 4 ) ; elements . add ( new Person ( "Tom" , "Schindl" , "tom . schindl@bestsolution . at" ) ) ; elements . add ( new Person ( "Tod" , "Creasey" , "Tod_Creasey@ca . ibm . com" ) ) ; elements . add ( new Person ( "Wayne" , "Beaton" , "wayne@eclipse . org" ) ) ; return elements ; }
protected void updateIteration ( ) { refreshIteration = ( ++ refreshIteration ) % NUMBER_VMS_REFRESHES_BEFORE_SAVE ; }
public void add ( E newInterval ) { super . add ( newInterval ) ; }
public RuleEvaluationWorker ( Map < String , Set < String > > docsToCheckAndEvents ) { this . docsToCheckAndEvents = docsToCheckAndEvents ; List < String > docs = new ArrayList < > ( ) ; docs . addAll ( docsToCheckAndEvents . keySet ( ) ) ; setDocuments ( Framework . getService ( RepositoryManager . class ) . getDefaultRepositoryName ( ) , docs ) ; }
private static String getTestingAlias ( GoImportSpec testingImportSpec ) { return testingImportSpec == null ? GoConstants . TESTING_PATH : ! testingImportSpec . isDot ( ) ? StringUtil . notNullize ( testingImportSpec . getAlias ( ) , GoConstants . TESTING_PATH ) : "" ; }
public SystemPurposeComplianceStatusDTO ( SystemPurposeComplianceStatusDTO source ) { super ( source ) ; }
public MapOperation ( ) { }
private static Instant retrieveDeadlineTimestamp ( JobDataMap jobDataMap ) { Object timestamp = jobDataMap . get ( MESSAGE_TIMESTAMP ) ; if ( timestamp instanceof String ) { return Instant . parse ( timestamp . toString ( ) ) ; } return Instant . ofEpochMilli ( ( long ) timestamp ) ; }
AggregatorFactory [ ] getMetrics ( ) { return metrics ; }
public void prepare ( ) throws IOException { e = SQLExecutor . builder ( clusterService ) . addTable ( "create table t ( " + " id integer primary key , " + " qty integer constraint check_qty_gt_zero check ( qty > 0 ) , " + " constraint check_id_ge_zero check ( id >= 0 ) " + " ) " ) . build ( ) ; plannerContext = e . getPlannerContext ( clusterService . state ( ) ) ; }
public void setUp ( ) { jUnitCore . addListener ( testListener ) ; }
protected boolean validate ( ) { if ( ! canRunActionOnNonManagedVm ( ) ) { return false ; } if ( ! isInternalExecution ( ) && ! ObjectIdentityChecker . canUpdateField ( getVm ( ) , "clusterId" , getVm ( ) . getStatus ( ) ) ) { addValidationMessage ( EngineMessage . VM_STATUS_NOT_VALID_FOR_UPDATE ) ; return false ; } ChangeVmClusterValidator validator = ChangeVmClusterValidator . create ( this , getParameters ( ) . getClusterId ( ) , getParameters ( ) . getVmCustomCompatibilityVersion ( ) ) ; return validator . validate ( ) ; }
public TrustManagerFactory getTrustMgr ( String serverName ) { return trustMgrMap . get ( serverName ) ; }
public TextEdit formatModuleInfoFile ( int kind , String source , int offset , int length , int indentationLevel , String lineSeparator ) { boolean tmp = this . isInModuleInfo ; try { this . isInModuleInfo = true ; return format ( kind , source , new IRegion [ ] { new Region ( offset , length ) } , indentationLevel , lineSeparator ) ; } finally { this . isInModuleInfo = tmp ; } }
public < K , V > RemoteCache < K , V > getCache ( String cacheName ) { RemoteCache < K , V > cache = hotrodClient . getCache ( cacheName ) ; if ( cache == null ) { throw log . expectedCachesNotDefined ( Collections . singleton ( cacheName ) ) ; } return cache ; }
public static Object valueForStringWithType ( String value , VoltType type ) { if ( type == VoltType . NULL ) { return null ; } // leverage existing ( rather heavyweight ) code to convert param types Object retval = ParameterConverter . tryToMakeCompatible ( type . classFromType ( ) , value ) ; // check the result type in an assert assert ( ParameterConverter . verifyParameterConversion ( retval , type . classFromType ( ) ) ) ; return retval ; }
public void testContructor ( ) throws IOException { String code = "S2020 - 04 - 04" ; ReportingPeriod period = ReportingPeriod . from ( code ) ; assertEquals ( period . getClass ( ) , SinceX . class ) ; }
public void testGetConnectableFileStorageConnectionsByStorageType ( ) { List < StorageServerConnections > conns = dao . getConnectableStorageConnectionsByStorageType ( FixturesTool . STORAGE_POOL_NFS_2 , StorageType . NFS ) ; assertNotNull ( conns ) ; assertEquals ( 1 , conns . size ( ) ) ; for ( StorageServerConnections conn : conns ) { assertEquals ( StorageType . NFS , conn . getstorage_type ( ) ) ; } }
public static void setOverrideFileName ( String . . . path ) { fOverridePath = path ; fOverride = true ; }
void addChanges ( Collection < String > filesToUpdate , Collection < IResource > resourcesToUpdate ) { synchronized ( lock ) { files . addAll ( filesToUpdate ) ; resources . addAll ( resourcesToUpdate ) ; } if ( ! filesToUpdate . isEmpty ( ) ) schedule ( defaultDelay ) ; }
public static synchronized String getEncryptionKey ( String name ) { if ( CACHED_ENCRYPTION_KEYS . get ( name ) == null ) { generateEncryptionKey ( name ) ; } return CACHED_ENCRYPTION_KEYS . get ( name ) ; }
public void init ( IEditorSite site , IEditorInput input ) { super . init ( site , input ) ; TaskData taskData = getModel ( ) . getTaskData ( ) ; if ( taskData != null ) { GerritChange change = GerritUtil . getChange ( taskData ) ; final ChangeDetailX detail = change . getChangeDetail ( ) ; review = GerritUtil . toReview ( detail ) ; } }
public ISnapshotInfo getSnapshotInfo ( String sessionName , IProgressMonitor monitor ) throws ExecutionException { return null ; }
public long getEntryLastModified ( ) { if ( modTimes == null ) return 0 ; Long cutOff = Long . valueOf ( super . getEntryLastModified ( ) + 1 ) ; SortedSet < Long > head = modTimes . headSet ( cutOff ) ; return head . isEmpty ( ) ? 0 : head . last ( ) . longValue ( ) ; }
public ParameterizedSqlFactory ( String initialSql ) { sqlStringBuilder = new StringBuilder ( initialSql ) ; parameters = new ArrayList < > ( ) ; }
public long getReadyTimestamp ( Constraints viewConstraints ) { String normalizedConstraints = getNormalizedConstraints ( viewConstraints ) ; Path signalPath = new Path ( signalDirectory , normalizedConstraints ) ; // check if the signal exists try { try { FileStatus signalStatus = rootFileSystem . getFileStatus ( signalPath ) ; return signalStatus . getModificationTime ( ) ; } catch ( final FileNotFoundException ex ) { // empty , will be thrown when the signal path doesn't exist } return - 1 ; } catch ( IOException e ) { throw new DatasetIOException ( "Could not access signal path : " + signalPath , e ) ; } }
private boolean hostHasPpcArchitecture ( ) { Cluster cluster = getModel ( ) . getSelectedCluster ( ) ; if ( cluster == null ) { return false ; } ArchitectureType archType = cluster . getArchitecture ( ) ; return ArchitectureType . ppc64 . equals ( archType ) || ArchitectureType . ppc64le . equals ( archType ) || ArchitectureType . ppcle . equals ( archType ) ; }
private static String getExtension ( String name ) { int ext = name . lastIndexOf ( ' . ' ) ; return 0 < ext ? name . substring ( ext ) : "" ; }
public void checkpoint ( ) { }
private void recalculateMacsCount ( ) { if ( ! validate ( ) ) { setAvailableMacsCount ( - 1 ) ; return ; } if ( macRange . getMacPoolId ( ) == null ) { String from = getLeftBound ( ) . getEntity ( ) ; String to = getRightBound ( ) . getEntity ( ) ; long count = MacRangeValidation . macToLong ( to ) - MacRangeValidation . macToLong ( from ) + 1 ; setAvailableMacsCount ( ( int ) count ) ; } }
public void setup ( ) { buffer = new DiskBuffer ( BUFFER_DIR , maxEvents ) ; }
private boolean filterInvalid ( Position position ) { if ( filterInvalid == true ) { return ! position . getValid ( ) || position . getLatitude ( ) > 90 || position . getLongitude ( ) > 180 || position . getLatitude ( ) < - 90 || position . getLongitude ( ) < - 180 ; } return false ; }
public Set < Location > getAllowedLocations ( ) { return new HashSet < Location > ( asList ( CONSTRUCTOR , METHOD , FIELD , OVERVIEW , PACKAGE , TYPE ) ) ; }
public String getTasksJsonString ( long taskId ) throws JSONException { TaskObject task = TaskObject . get ( taskId ) ; return ConvertSprintBacklog . getTaskJsonString ( task ) ; }
private void addVolumeToDb ( final GlusterVolumeEntity createdVolume ) { // volume fetched from VDSM doesn't contain cluster id GlusterFS // is not aware of multiple clusters createdVolume . setClusterId ( getVdsGroupId ( ) ) ; DbFacade . getInstance ( ) . getGlusterVolumeDao ( ) . save ( createdVolume ) ; }
public Sheet getDataSheet ( File file ) { Workbook wb = null ; try { stream = new PushbackInputStream ( new FileInputStream ( file ) ) ; wb = WorkbookFactory . create ( stream ) ; } catch ( Exception e ) { log . error ( "Workbook creation exception : " + e ) ; } return wb . getSheetAt ( 0 ) ; }
public boolean updateAttributes ( ) { OSProcess process = operatingSystem . getProcess ( this . processID ) ; if ( process == null ) { LOG . debug ( "No process found : { } " , this . processID ) ; return false ; } copyValuesToThisProcess ( process ) ; return true ; }
public boolean isMissingHookConflict ( ) { return ( conflictStatus & MISSING_HOOK . getValue ( ) ) == MISSING_HOOK . getValue ( ) ; }
public Map < AccountGroup . UUID , GroupMembersList > getUnresolvedGroups ( final boolean recursive ) { if ( ! recursive ) { if ( isResolved ( ) ) { return Collections . emptyMap ( ) ; } return Collections . singletonMap ( getGroup ( ) . getGroupUUID ( ) , this ) ; } return getAllUnresolvedGroups ( new HashSet < AccountGroup . Id > ( ) ) ; }
public boolean nextBoolean ( ) throws IOException { requirePeek ( ) ; boolean value = parser . getBooleanValue ( ) ; clearPeek ( ) ; return value ; }
public boolean closeOnProtocolViolation ( ) { return closeOnProtocolViolation ; }
public String getSelinuxEnforceMode ( ) { return selinuxEnforceMode ; }
